Implementation smell,Namespace,Class,File,Method,Description
Long Method,ContractConfigurator.Behaviour,InstructorSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The method has 102 lines of code.
Long Method,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,Create,The method has 117 lines of code.
Long Method,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,CreateVessels,The method has 266 lines of code.
Long Method,ContractConfigurator.Behaviour,WaypointGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\WaypointGenerator.cs,Create,The method has 152 lines of code.
Long Method,ContractConfigurator.Behaviour,SpawnKerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnKerbal.cs,Create,The method has 100 lines of code.
Long Method,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,GenerateContract,The method has 115 lines of code.
Long Method,ContractConfigurator,Extensions,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Extensions.cs,GetHashes,The method has 124 lines of code.
Long Method,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,Load,The method has 305 lines of code.
Long Method,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,MeetExtendedRequirements,The method has 113 lines of code.
Long Method,ContractConfigurator,ConfiguredContract,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ConfiguredContract.cs,Initialize,The method has 109 lines of code.
Long Method,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseValue,The method has 100 lines of code.
Long Method,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseSingleValue,The method has 147 lines of code.
Long Method,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseValue,The method has 101 lines of code.
Long Method,ContractConfigurator.ExpressionParser,StringExpressionParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\StringExpressionParser.cs,ParseStatement,The method has 158 lines of code.
Long Method,ContractConfigurator.ExpressionParser,ExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\ExpressionParser.cs,ParseStatement,The method has 106 lines of code.
Long Method,ContractConfigurator.ExpressionParser,ExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\ExpressionParser.cs,ParseSimpleStatement,The method has 111 lines of code.
Long Method,ContractConfigurator.ExpressionParser,ExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\ExpressionParser.cs,ParseMethod,The method has 105 lines of code.
Long Method,ContractConfigurator.ExpressionParser,ExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\ExpressionParser.cs,GetCalledFunction,The method has 140 lines of code.
Long Method,ContractConfigurator.Parameters,OrbitParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\OrbitParameter.cs,CreateDelegates,The method has 135 lines of code.
Long Method,ContractConfigurator.Parameters,ReachState,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\ReachState.cs,CreateDelegates,The method has 110 lines of code.
Long Method,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,UpdateState,The method has 111 lines of code.
Long Method,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Update,The method has 113 lines of code.
Long Method,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,OnContractOffered,The method has 128 lines of code.
Long Method,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,HandleRemovedContract,The method has 115 lines of code.
Long Method,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,WindowGUI,The method has 163 lines of code.
Complex Method,ContractConfigurator.Behaviour,InstructorSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,Cyclomatic complexity of the method is 9
Complex Method,ContractConfigurator.Behaviour,PassengerLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnPassengers.cs,PassengerDialog,Cyclomatic complexity of the method is 8
Complex Method,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,Create,Cyclomatic complexity of the method is 11
Complex Method,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,CreateVessels,Cyclomatic complexity of the method is 27
Complex Method,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,OnSave,Cyclomatic complexity of the method is 10
Complex Method,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,OnVesselRecovered,Cyclomatic complexity of the method is 11
Complex Method,ContractConfigurator.Behaviour,Expression,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\Expression.cs,OnLoad,Cyclomatic complexity of the method is 8
Complex Method,ContractConfigurator.Behaviour,WaypointGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\WaypointGenerator.cs,Initialize,Cyclomatic complexity of the method is 8
Complex Method,ContractConfigurator.Behaviour,WaypointGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\WaypointGenerator.cs,Create,Cyclomatic complexity of the method is 11
Complex Method,ContractConfigurator.Behaviour,SpawnKerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnKerbal.cs,OnVesselRecovered,Cyclomatic complexity of the method is 9
Complex Method,ContractConfigurator,ContractGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractGroup.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,ContractConfigurator,Tech,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Wrappers\Tech.cs,SetupTech,Cyclomatic complexity of the method is 9
Complex Method,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,Update,Cyclomatic complexity of the method is 10
Complex Method,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,GenerateContract,Cyclomatic complexity of the method is 14
Complex Method,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,Cyclomatic complexity of the method is 12
Complex Method,ContractConfigurator,RBWrapper,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ResearchBodiesWrapper.cs,InitRBWrapper,Cyclomatic complexity of the method is 8
Complex Method,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,WindowGUI,Cyclomatic complexity of the method is 8
Complex Method,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,GroupGui,Cyclomatic complexity of the method is 12
Complex Method,ContractConfigurator,Extensions,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Extensions.cs,GetHashes,Cyclomatic complexity of the method is 23
Complex Method,ContractConfigurator,TitleTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\TitleTracker.cs,UpdateContractWindow,Cyclomatic complexity of the method is 12
Complex Method,ContractConfigurator,PartValidationFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\PartValidationFactory.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,ContractConfigurator,LoggingUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\LoggingUtil.cs,LoadDebuggingConfig,Cyclomatic complexity of the method is 9
Complex Method,ContractConfigurator,PartModuleUnlockedRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\PartModuleUnlockedRequirement.cs,RequirementMet,Cyclomatic complexity of the method is 9
Complex Method,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,StringValue,Cyclomatic complexity of the method is 8
Complex Method,ContractConfigurator,ContractRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractRequirement.cs,GenerateRequirement,Cyclomatic complexity of the method is 9
Complex Method,ContractConfigurator,TechResearchedRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\TechResearchedRequirement.cs,RequirementMet,Cyclomatic complexity of the method is 13
Complex Method,ContractConfigurator,TechResearchedRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\TechResearchedRequirement.cs,RequirementText,Cyclomatic complexity of the method is 15
Complex Method,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,LoadContractTypeConfig,Cyclomatic complexity of the method is 8
Complex Method,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,Load,Cyclomatic complexity of the method is 31
Complex Method,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,MeetBasicRequirements,Cyclomatic complexity of the method is 10
Complex Method,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,MeetExtendedRequirements,Cyclomatic complexity of the method is 16
Complex Method,ContractConfigurator,ConfiguredContract,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ConfiguredContract.cs,Initialize,Cyclomatic complexity of the method is 9
Complex Method,ContractConfigurator,ConfiguredContract,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ConfiguredContract.cs,OnLoad,Cyclomatic complexity of the method is 9
Complex Method,ContractConfigurator,ConfiguredContract,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ConfiguredContract.cs,OnSave,Cyclomatic complexity of the method is 15
Complex Method,ContractConfigurator,ParameterFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory.cs,GenerateParameters,Cyclomatic complexity of the method is 11
Complex Method,ContractConfigurator,ParameterFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory.cs,GenerateParameterFactory,Cyclomatic complexity of the method is 11
Complex Method,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseValue,Cyclomatic complexity of the method is 9
Complex Method,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,MutuallyExclusive,Cyclomatic complexity of the method is 8
Complex Method,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ExecuteDeferredLoads,Cyclomatic complexity of the method is 8
Complex Method,ContractConfigurator.ExpressionParser,DataNode,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\DataNode.cs,ParseDataNodes,Cyclomatic complexity of the method is 10
Complex Method,ContractConfigurator.ExpressionParser,NumericValueExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,PrintNumber,Cyclomatic complexity of the method is 12
Complex Method,ContractConfigurator.ExpressionParser,StringExpressionParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\StringExpressionParser.cs,ParseStatement,Cyclomatic complexity of the method is 10
Complex Method,ContractConfigurator.ExpressionParser,ExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\ExpressionParser.cs,GetCalledFunction,Cyclomatic complexity of the method is 18
Complex Method,ContractConfigurator.Parameters,Duration,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Duration.cs,OnUpdate,Cyclomatic complexity of the method is 14
Complex Method,ContractConfigurator.Parameters,CollectScienceCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\CollectScienceCustom.cs,OnParameterSave,Cyclomatic complexity of the method is 8
Complex Method,ContractConfigurator.Parameters,CollectScienceCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\CollectScienceCustom.cs,CheckSubject,Cyclomatic complexity of the method is 10
Complex Method,ContractConfigurator.Parameters,ResourceConsumptionChecker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\ResourceConsuption.cs,FixedUpdate,Cyclomatic complexity of the method is 8
Complex Method,ContractConfigurator.Parameters,Rendezvous,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\Rendezvous.cs,OnUpdate,Cyclomatic complexity of the method is 8
Complex Method,ContractConfigurator.Parameters,OrbitParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\OrbitParameter.cs,CreateDelegates,Cyclomatic complexity of the method is 17
Complex Method,ContractConfigurator.Parameters,OrbitParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\OrbitParameter.cs,OnParameterSave,Cyclomatic complexity of the method is 9
Complex Method,ContractConfigurator.Parameters,PartValidation,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\PartValidation.cs,OnParameterSave,Cyclomatic complexity of the method is 10
Complex Method,ContractConfigurator.Parameters,ReachState,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\ReachState.cs,CreateDelegates,Cyclomatic complexity of the method is 14
Complex Method,ContractConfigurator.Parameters,ReachState,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\ReachState.cs,OnParameterSave,Cyclomatic complexity of the method is 16
Complex Method,ContractConfigurator.Parameters,VisitWaypoint,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\VisitWaypoint.cs,VesselMeetsCondition,Cyclomatic complexity of the method is 10
Complex Method,ContractConfigurator.Parameters,VesselParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter.cs,SetState,Cyclomatic complexity of the method is 9
Complex Method,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,UpdateState,Cyclomatic complexity of the method is 12
Complex Method,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,OnParameterSave,Cyclomatic complexity of the method is 8
Complex Method,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,OnContractOffered,Cyclomatic complexity of the method is 13
Complex Method,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,HandleRemovedContract,Cyclomatic complexity of the method is 15
Complex Method,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,CreateGroupItem,Cyclomatic complexity of the method is 8
Complex Method,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetupGroupItem,Cyclomatic complexity of the method is 9
Complex Method,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,MissionControlText,Cyclomatic complexity of the method is 14
Complex Method,ContractConfigurator.Util,Science,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Science.cs,ExperimentAvailable,Cyclomatic complexity of the method is 10
Complex Method,ContractConfigurator.Util,Science,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Science.cs,ExperimentAvailable,Cyclomatic complexity of the method is 12
Complex Method,ContractConfigurator.Util,Science,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Science.cs,AvailableExperiments,Cyclomatic complexity of the method is 14
Complex Method,ContractConfigurator.CutScene,CutSceneExecutor,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneExecutor.cs,Update,Cyclomatic complexity of the method is 13
Complex Method,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,WindowGUI,Cyclomatic complexity of the method is 18
Long Parameter List,ContractConfigurator.Behaviour,ExperimentalPart,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\ExperimentalPart.cs,ExperimentalPart,The method has 5 parameters. Parameters: parts' unlockCriteria' unlockParameter' lockCriteria' lockParameter
Long Parameter List,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseValue,The method has 5 parameters. Parameters: configNode' key' setter' obj' defaultValue
Long Parameter List,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseValue,The method has 5 parameters. Parameters: configNode' key' setter' obj' validation
Long Parameter List,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseValue,The method has 6 parameters. Parameters: configNode' key' setter' obj' defaultValue' validation
Long Parameter List,ContractConfigurator,DeferredLoadObject<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,DeferredLoadObject,The method has 6 parameters. Parameters: configNode' key' setter' obj' validation' dataNode
Long Parameter List,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistance,The method has 5 parameters. Parameters: lat1' lon1' lat2' lon2' altitude
Long Parameter List,ContractConfigurator.Parameters,Duration,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Duration.cs,Duration,The method has 6 parameters. Parameters: duration' preWaitText' waitingText' completionText' startCriteria' parameter
Long Parameter List,ContractConfigurator.Parameters,HasAstronaut,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\HasAstronaut.cs,HasAstronaut,The method has 6 parameters. Parameters: title' trait' minCount' maxCount' minExperience' maxExperience
Long Parameter List,ContractConfigurator.Parameters,CountParameterDelegate<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\ParameterDelegate.cs,CountParameterDelegate,The method has 5 parameters. Parameters: minCount' maxCount' filterFunc' extraTitle' ignorePreviousFailures
Long Parameter List,ContractConfigurator.Parameters,MissionTimer,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\MissionTimer.cs,MissionTimer,The method has 5 parameters. Parameters: startCriteria' endCriteria' startParameter' endParameter' title
Long Parameter List,ContractConfigurator.Parameters,CollectScienceCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\CollectScienceCustom.cs,CollectScienceCustom,The method has 7 parameters. Parameters: targetBody' biome' situation' location' experiment' recoveryMethod' title
Long Parameter List,ContractConfigurator.Parameters,ResourceConsumption,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\ResourceConsuption.cs,VesselHasResource,The method has 5 parameters. Parameters: vessel' resource' capacity' minQuantity' maxQuantity
Long Parameter List,ContractConfigurator.Parameters,OrbitParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\OrbitParameter.cs,OrbitParameter,The method has 17 parameters. Parameters: situation' minAltitude' maxAltitude' minApoapsis' maxApoapsis' minPeriapsis' maxPeriapsis' minEccentricity' maxEccentricity' minInclination' maxInclination' minArgumentOfPeriapsis' maxArgumentOfPeriapsis' minPeriod' maxPeriod' targetBody' title
Long Parameter List,ContractConfigurator.Parameters,ReachState,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\ReachState.cs,ReachState,The method has 14 parameters. Parameters: targetBodies' biome' situation' minAltitude' maxAltitude' minTerrainAltitude' maxTerrainAltitude' minSpeed' maxSpeed' minRateOfClimb' maxRateOfClimb' minAcceleration' maxAcceleration' title
Long Parameter List,ContractConfigurator.Parameters,VisitWaypoint,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\VisitWaypoint.cs,VisitWaypoint,The method has 6 parameters. Parameters: waypointIndex' distance' horizontalDistance' hideOnCompletion' showMessages' title
Long Parameter List,ContractConfigurator.Parameters,HasResource,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\HasResource.cs,VesselHasResource,The method has 5 parameters. Parameters: vessel' resource' capacity' minQuantity' maxQuantity
Long Parameter List,ContractConfigurator.Parameters,HasCrew,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\HasCrew.cs,HasCrew,The method has 8 parameters. Parameters: title' kerbals' excludeKerbals' trait' minCrew' maxCrew' minExperience' maxExperience
Long Parameter List,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,VesselParameterGroup,The method has 8 parameters. Parameters: title' define' defineList' vesselList' duration' dissassociateVesselsOnContractFailure' dissassociateVesselsOnContractCompletion' hideVesselName
Long Identifier,ContractConfigurator,SCANsatCoverage,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\SCANsatCoverage.cs,,The length of the parameter CONSECUTIVE_SUCCESSES_REQUIRED is 30.
Long Identifier,ContractConfigurator,VesselParameterGroupFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\VesselParameterGroupFactory.cs,,The length of the parameter dissassociateVesselsOnContractFailure is 37.
Long Identifier,ContractConfigurator,VesselParameterGroupFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\VesselParameterGroupFactory.cs,,The length of the parameter dissassociateVesselsOnContractCompletion is 40.
Long Identifier,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,,The length of the parameter maxConsecutiveGenerationFailures is 32.
Long Identifier,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,,The length of the parameter methodLogCircularDependencyError is 32.
Long Identifier,ContractConfigurator.ExpressionParser,ExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\ExpressionParser.cs,,The length of the parameter _methodCompleteIdentifierParsing is 32.
Long Identifier,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,VesselParameterGroup,The length of the parameter dissassociateVesselsOnContractFailure is 37.
Long Identifier,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,VesselParameterGroup,The length of the parameter dissassociateVesselsOnContractCompletion is 40.
Long Identifier,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,,The length of the parameter dissassociateVesselsOnContractFailure is 37.
Long Identifier,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,,The length of the parameter dissassociateVesselsOnContractCompletion is 40.
Long Statement,ContractConfigurator.Behaviour,AwardExperienceFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\AwardExperienceFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<List<string>>(configNode' "parameter"' x => parameter = x' this' new List<string>()); " is 120.
Long Statement,ContractConfigurator.Behaviour,AwardExperienceFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\AwardExperienceFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<bool?>(configNode' "awardImmediately"' x => awardImmediately = x.Value' this' (bool?)false); " is 127.
Long Statement,ContractConfigurator.Behaviour,ChangeKerbalTypeFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\ChangeKerbalTypeFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<TriggeredBehaviour.State>(configNode' "onState"' x => onState = x' this' TriggeredBehaviour.State.CONTRACT_SUCCESS); " is 151.
Long Statement,ContractConfigurator.Behaviour,ChangeKerbalTypeFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\ChangeKerbalTypeFactory.cs,Load,The length of the statement  "                    valid &= ConfigNodeUtil.ParseValue<ProtoCrewMember.KerbalType?>(child' "kerbalType"' x => kerb.kerbalType = x' this' (ProtoCrewMember.KerbalType?)null); " is 152.
Long Statement,ContractConfigurator.Behaviour,RunCutSceneFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\RunCutSceneFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<TriggeredBehaviour.State>(configNode' "onState"' x => onState = x' this' TriggeredBehaviour.State.PARAMETER_COMPLETED); " is 154.
Long Statement,ContractConfigurator.Behaviour,RunCutSceneFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\RunCutSceneFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<List<string>>(configNode' "parameter"' x => parameter = x' this' new List<string>()); " is 120.
Long Statement,ContractConfigurator.Behaviour,RunCutSceneFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\RunCutSceneFactory.cs,Load,The length of the statement  "            if (ConfigNodeUtil.ParseValue<string>(configNode' "cutSceneFileURL"' x => cutSceneFileURL = x' this' Validation.ValidateFileURL)) " is 129.
Long Statement,ContractConfigurator.Behaviour,ChangeVesselOwnershipFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\ChangeVesselOwnershipFactory.cs,Load,The length of the statement  "                    valid &= ConfigNodeUtil.ParseValue<TriggeredBehaviour.State>(configNode' "onState"' x => onState = x' this' TriggeredBehaviour.State.PARAMETER_COMPLETED); " is 154.
Long Statement,ContractConfigurator.Behaviour,ChangeVesselOwnershipFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\ChangeVesselOwnershipFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<TriggeredBehaviour.State>(configNode' "onState"' x => onState = x' this' TriggeredBehaviour.State.PARAMETER_COMPLETED); " is 154.
Long Statement,ContractConfigurator.Behaviour,ChangeVesselOwnershipFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\ChangeVesselOwnershipFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<List<string>>(configNode' "parameter"' x => parameter = x' this' new List<string>()); " is 120.
Long Statement,ContractConfigurator.Behaviour,DestroyVesselFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\DestroyVesselFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<TriggeredBehaviour.State>(configNode' "onState"' x => onState = x' this' TriggeredBehaviour.State.CONTRACT_SUCCESS); " is 151.
Long Statement,ContractConfigurator.Behaviour,DialogBoxFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\DialogBoxFactory.cs,Load,The length of the statement  "                    valid &= ConfigNodeUtil.ParseValue<DialogBox.Position>(child' "position"' x => detail.position = x' this' DialogBox.Position.LEFT); " is 131.
Long Statement,ContractConfigurator.Behaviour,DialogBoxFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\DialogBoxFactory.cs,Load,The length of the statement  "                    valid &= ConfigNodeUtil.ParseValue<float>(child' "width"' x => detail.width = x' this' 0.8f' x => Validation.Between(x' 0.0f' 1.0f)); " is 133.
Long Statement,ContractConfigurator.Behaviour,DialogBoxFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\DialogBoxFactory.cs,Load,The length of the statement  "                    valid &= ConfigNodeUtil.ParseValue<float>(child' "height"' x => detail.height = x' this' 0.0f' x => Validation.Between(x' 0.0f' 1.0f)); " is 135.
Long Statement,ContractConfigurator.Behaviour,DialogBoxFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\DialogBoxFactory.cs,Load,The length of the statement  "                            valid &= ConfigNodeUtil.ParseValue<Color>(sectionNode' "textColor"' x => section.textColor = x' this' new Color(0.8f' 0.8f' 0.8f)); " is 131.
Long Statement,ContractConfigurator.Behaviour,DialogBoxFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\DialogBoxFactory.cs,Load,The length of the statement  "                            valid &= ConfigNodeUtil.ParseValue<Color>(sectionNode' "textColor"' x => section.textColor = x' this' new Color(0.729f' 0.855f' 0.333f)); " is 137.
Long Statement,ContractConfigurator.Behaviour,DialogBoxFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\DialogBoxFactory.cs,Load,The length of the statement  "                            valid &= ConfigNodeUtil.ParseValue<Color>(sectionNode' "textColor"' x => section.textColor = x' this' new Color(0.729f' 0.855f' 0.333f)); " is 137.
Long Statement,ContractConfigurator.Behaviour,DialogBoxFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\DialogBoxFactory.cs,Load,The length of the statement  "                            valid &= ConfigNodeUtil.ParseValue<DialogBox.InstructorSection.Animation?>(sectionNode' "animation"' x => section.animation = x' this' " is 134.
Long Statement,ContractConfigurator.Behaviour,DialogBoxFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\DialogBoxFactory.cs,Load,The length of the statement  "                            valid &= ConfigNodeUtil.ParseValue<ProtoCrewMember.Gender>(sectionNode' "gender"' x => section.gender = x' this' ProtoCrewMember.Gender.Male); " is 142.
Long Statement,ContractConfigurator.Behaviour,DialogBoxFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\DialogBoxFactory.cs,Load,The length of the statement  "                            valid &= ConfigNodeUtil.ParseValue<Color>(sectionNode' "textColor"' x => section.textColor = x' this' new Color(0.729f' 0.855f' 0.333f)); " is 137.
Long Statement,ContractConfigurator.Behaviour,DialogBoxFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\DialogBoxFactory.cs,Load,The length of the statement  "                            valid &= ConfigNodeUtil.ParseValue<List<string>>(sectionNode' "excludeName"' x => section.excludeName = x' this' new List<string>()); " is 133.
Long Statement,ContractConfigurator.Behaviour,CopyCraftFileFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\CopyCraftFileFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<TriggeredBehaviour.State>(configNode' "onState"' x => onState = x' this' TriggeredBehaviour.State.CONTRACT_SUCCESS); " is 151.
Long Statement,ContractConfigurator.Behaviour,CopyCraftFileFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\CopyCraftFileFactory.cs,ValidateURL,The length of the statement  "            string[] pathComponents = new string[] { KSPUtil.ApplicationRootPath' "GameData" }.Concat(url.Split("/".ToCharArray())).ToArray(); " is 130.
Long Statement,ContractConfigurator.Behaviour,MessageFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\MessageFactory.cs,Load,The length of the statement  "                    valid &= ConfigNodeUtil.ParseValue<string>(child' "parameter"' x => cd.parameter = x' this' ""' x => ValidateMandatoryParameter(x' cd.condition)); " is 146.
Long Statement,ContractConfigurator.Behaviour,ExperimentalPartFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\ExperimentalPartFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<ExperimentalPart.UnlockCriteria>(configNode' "unlockCriteria"' x => unlockCriteria = x' this' ExperimentalPart.UnlockCriteria.CONTRACT_ACCEPTANCE); " is 182.
Long Statement,ContractConfigurator.Behaviour,ExperimentalPartFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\ExperimentalPartFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<ExperimentalPart.LockCriteria>(configNode' "lockCriteria"' x => lockCriteria = x' this' ExperimentalPart.LockCriteria.CONTRACT_COMPLETION); " is 174.
Long Statement,ContractConfigurator.Behaviour,ExperimentalPartFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\ExperimentalPartFactory.cs,Load,The length of the statement  "                LoggingUtil.LogWarning(this' "The 'add' attribute of ExperimentalPartFactory is deprecated.  Use 'unlockCriteria' instead."); " is 125.
Long Statement,ContractConfigurator.Behaviour,ExperimentalPartFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\ExperimentalPartFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<bool>(configNode' "add"' x => unlockCriteria = x ? ExperimentalPart.UnlockCriteria.CONTRACT_ACCEPTANCE : ExperimentalPart.UnlockCriteria.DO_NOT_UNLOCK' this); " is 193.
Long Statement,ContractConfigurator.Behaviour,ExperimentalPartFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\ExperimentalPartFactory.cs,Load,The length of the statement  "                LoggingUtil.LogWarning(this' "The 'remove' attribute of ExperimentalPartFactory is deprecated.  Use 'lockCriteria' instead."); " is 126.
Long Statement,ContractConfigurator.Behaviour,ExperimentalPartFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\ExperimentalPartFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<bool>(configNode' "remove"' x => lockCriteria = x ? ExperimentalPart.LockCriteria.CONTRACT_COMPLETION : ExperimentalPart.LockCriteria.DO_NOT_LOCK' this); " is 188.
Long Statement,ContractConfigurator.Behaviour,SpawnPassengersFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\SpawnPassengersFactory.cs,Load,The length of the statement  "                LoggingUtil.LogWarning(this' "The passengerName and gender attributes are obsolete since Contract Configurator 1.9.0' use kerbal instead."); " is 140.
Long Statement,ContractConfigurator.Behaviour,SpawnPassengersFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\SpawnPassengersFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<List<string>>(configNode' "passengerName"' x => passengerName = x' this' new List<string>()); " is 128.
Long Statement,ContractConfigurator.Behaviour,SpawnPassengersFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\SpawnPassengersFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<ProtoCrewMember.Gender>(configNode' "gender"' x => gender = x' this' Kerbal.RandomGender()); " is 127.
Long Statement,ContractConfigurator.Behaviour,SpawnPassengersFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\SpawnPassengersFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<string>(configNode' "experienceTrait"' x => experienceTrait = x' this' Kerbal.RandomExperienceTrait()); " is 138.
Long Statement,ContractConfigurator.Behaviour,SpawnPassengersFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\SpawnPassengersFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<ProtoCrewMember.KerbalType>(configNode' "kerbalType"' x => kerbalType = x' this' ProtoCrewMember.KerbalType.Tourist); " is 152.
Long Statement,ContractConfigurator.Behaviour,PartTestHandler,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\PartTestHandler.cs,HandleVessel,The length of the statement  "                    LoggingUtil.LogWarning(this' "Part " + part.name + " does not have a ModuleTestSubject' cannot be used as the target of a PartTest"); " is 133.
Long Statement,ContractConfigurator.Behaviour,PartTestHandler,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\PartTestHandler.cs,PartsToTest,The length of the statement  "            foreach (PartTest pt in c.GetAllDescendents().Select(p => p as PartTest).Where(p => p != null && p.State == ParameterState.Incomplete)) " is 135.
Long Statement,ContractConfigurator.Behaviour,AwardExperience,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\AwardExperience.cs,DoAwarding,The length of the statement  "                foreach (FlightLog.Entry entry in pcm.careerLog.Entries.Concat(pcm.flightLog.Entries).Where(e => e.type.Contains(SPECIAL_XP))) " is 126.
Long Statement,ContractConfigurator.Behaviour,DialogBoxGUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The length of the statement  "                        float x = detail.position == Position.LEFT ? 16f : detail.position == Position.CENTER ? (Screen.width - w) / 2.0f : (Screen.width - w - 16f); " is 141.
Long Statement,ContractConfigurator.Behaviour,InstructorSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The length of the statement  "                    Graphics.DrawTexture(rect' instructorTexture' new Rect(0.0f' 0.0f' 1f' 1f)' 124' 124' 124' 124' Color.white' PortraitRenderMaterial); " is 133.
Long Statement,ContractConfigurator.Behaviour,KerbalSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,SelectKerbal,The length of the statement  "                    kerbal = FlightGlobals.ActiveVessel.GetVesselCrew().Where(pcm => !excludeName.Contains(pcm.name)).ElementAtOrDefault(crewIndex); " is 128.
Long Statement,ContractConfigurator.Behaviour,KerbalSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnPreCull,The length of the statement  "                if (texture == null || (kerbal != null && kerbal.KerbalRef == null && texture.GetType() == typeof(RenderTexture)) || nextKerbalCheck < Time.fixedTime) " is 150.
Long Statement,ContractConfigurator.Behaviour,CopyCraftFile,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\CopyCraftFile.cs,TriggerAction,The length of the statement  "            string[] srcPathComponents = new string[] { KSPUtil.ApplicationRootPath' "GameData" }.Concat(url.Split("/".ToCharArray())).ToArray(); " is 133.
Long Statement,ContractConfigurator.Behaviour,Message,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\Message.cs,DisplayMessages,The length of the statement  "            foreach (ConditionDetail cd in conditions.Where(cd => !cd.disabled && cd.condition == condition && cd.parameter == parameterID)) " is 128.
Long Statement,ContractConfigurator.Behaviour,ExperimentalPart,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\ExperimentalPart.cs,OnLoad,The length of the statement  "                unlockCriteria = add ? ExperimentalPart.UnlockCriteria.CONTRACT_ACCEPTANCE : ExperimentalPart.UnlockCriteria.DO_NOT_UNLOCK; " is 123.
Long Statement,ContractConfigurator.Behaviour,SpawnPassengers,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnPassengers.cs,AddPassengersToActiveVessel,The length of the statement  "            foreach (ProtoCrewMember crewMember in passengers.Keys.Where(pcm => pcm.rosterStatus == ProtoCrewMember.RosterStatus.Available).ToList()) " is 137.
Long Statement,ContractConfigurator.Behaviour,SpawnPassengers,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnPassengers.cs,OnLoad,The length of the statement  "                ProtoCrewMember.Gender gender = ConfigNodeUtil.ParseValue<ProtoCrewMember.Gender>(node' "gender"' Kerbal.RandomGender()); " is 121.
Long Statement,ContractConfigurator.Behaviour,SpawnPassengers,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnPassengers.cs,OnLoad,The length of the statement  "                ProtoCrewMember.KerbalType kerbalType = ConfigNodeUtil.ParseValue<ProtoCrewMember.KerbalType>(node' "kerbalType"' ProtoCrewMember.KerbalType.Tourist); " is 150.
Long Statement,ContractConfigurator.Behaviour,PassengerLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnPassengers.cs,Show,The length of the statement  "                        int count = sp.passengers.Where(pair => !pair.Value && pair.Key.rosterStatus == ProtoCrewMember.RosterStatus.Available).Count(); " is 128.
Long Statement,ContractConfigurator.Behaviour,PassengerLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnPassengers.cs,PassengerDialog,The length of the statement  "                GUILayout.Label("One or more contracts require passengers to be loaded.  Would you like to load them onto this vessel?"); " is 121.
Long Statement,ContractConfigurator.Behaviour,PassengerLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnPassengers.cs,PassengerDialog,The length of the statement  "                    pd.selected = GUILayout.Toggle(pd.selected' pd.passengerCount + " passenger" + (pd.passengerCount > 1 ? "s: " : ": ") + pd.contractTitle); " is 138.
Long Statement,ContractConfigurator.Behaviour,PassengerLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnPassengers.cs,PassengerDialog,The length of the statement  "                if (GUILayout.Button("Load passengers"' (count > emptySeats ? disabledButton : GUI.skin.button)) && count <= emptySeats) " is 120.
Long Statement,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,Create,The length of the statement  "            ConfigNodeUtil.ParseValue<bool>(configNode' "deferVesselCreation"' x => spawnVessel.deferVesselCreation = x' factory' false); " is 125.
Long Statement,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,Create,The length of the statement  "                    valid &= ConfigNodeUtil.ParseValue<VesselType>(child' "vesselType"' x => vessel.vesselType = x' factory' VesselType.Ship); " is 122.
Long Statement,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,CreateVessels,The length of the statement  "                    Vector3d pos = vesselData.body.GetWorldSurfacePosition(vesselData.latitude' vesselData.longitude' vesselData.altitude.Value); " is 125.
Long Statement,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,CreateVessels,The length of the statement  "                    vesselData.orbit.UpdateFromStateVectors(pos' vesselData.body.getRFrmVel(pos)' vesselData.body' Planetarium.GetUniversalTime()); " is 127.
Long Statement,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,CreateVessels,The length of the statement  "                            LoggingUtil.LogWarning(this' "Unable to add crew to vessel named '" + vesselData.name + "'.  Perhaps there's no room?"); " is 120.
Long Statement,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,CreateVessels,The length of the statement  "                additionalNodes[0] = ProtoVessel.CreateDiscoveryNode(discoveryLevel' sizeClass' contract.TimeDeadline' contract.TimeDeadline); " is 126.
Long Statement,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,CreateVessels,The length of the statement  "                ConfigNode protoVesselNode = ProtoVessel.CreateVesselNode(vesselData.name' vesselData.vesselType' vesselData.orbit' 0' partNodes' additionalNodes); " is 147.
Long Statement,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,CreateVessels,The length of the statement  "                        float hgt = (shipConstruct != null ? shipConstruct.parts[0] : vesselData.craftPart.partPrefab).localRoot.attPos0.y - lowest; " is 124.
Long Statement,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,OnGameSceneLoad,The length of the statement  "            if (deferVesselCreation && (gameScene == GameScenes.FLIGHT || gameScene == GameScenes.TRACKSTATION || gameScene == GameScenes.EDITOR)) " is 134.
Long Statement,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,RemoveCrew,The length of the statement  "                ProtoCrewMember crewMember = HighLogic.CurrentGame.CrewRoster.AllKerbals().Where(pcm => pcm.name == cd.name).FirstOrDefault(); " is 126.
Long Statement,ContractConfigurator.Behaviour,UnlockPart,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\UnlockPart.cs,DoUnlock,The length of the statement  "            if (!HighLogic.CurrentGame.Parameters.Difficulty.BypassEntryPurchaseAfterResearch && !ptn.partsPurchased.Contains(part)) " is 120.
Long Statement,ContractConfigurator.Behaviour,OrbitGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\OrbitGenerator.cs,Create,The length of the statement  "                        valid &= ConfigNodeUtil.ParseValue<double>(child' "altitudeFactor"' x => obData.altitudeFactor = x' factory' 0.8' x => Validation.Between(x' 0.0' 1.0)); " is 152.
Long Statement,ContractConfigurator.Behaviour,OrbitGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\OrbitGenerator.cs,Create,The length of the statement  "                        valid &= ConfigNodeUtil.ParseValue<double>(child' "inclinationFactor"' x => obData.inclinationFactor = x' factory' 0.8' x => Validation.Between(x' 0.0' 1.0)); " is 158.
Long Statement,ContractConfigurator.Behaviour,OrbitGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\OrbitGenerator.cs,Create,The length of the statement  "                        valid &= ConfigNodeUtil.ParseValue<double>(child' "eccentricity"' x => obData.eccentricity = x' factory' 0.0' x => Validation.GE(x' 0.0)); " is 138.
Long Statement,ContractConfigurator.Behaviour,OrbitGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\OrbitGenerator.cs,Create,The length of the statement  "                        valid &= ConfigNodeUtil.ParseValue<double>(child' "deviationWindow"' x => obData.deviationWindow = x' factory' 10.0' x => Validation.GE(x' 0.0)); " is 145.
Long Statement,ContractConfigurator.Behaviour,OrbitData,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\OrbitGenerator.cs,SetupRenderer,The length of the statement  "                    if (contract.ContractState == Contract.State.Active && (parms.DisplayActiveOrbits || HighLogic.LoadedScene != GameScenes.TRACKSTATION) || " is 137.
Long Statement,ContractConfigurator.Behaviour,OrbitData,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\OrbitGenerator.cs,SetupRenderer,The length of the statement  "                        contract.ContractState == Contract.State.Offered && parms.DisplayOfferedOrbits && HighLogic.LoadedScene == GameScenes.TRACKSTATION) " is 131.
Long Statement,ContractConfigurator.Behaviour,WaypointGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\WaypointGenerator.cs,Initialize,The length of the statement  "                    CelestialBody body = FlightGlobals.Bodies.Where<CelestialBody>(b => b.name == wpData.waypoint.celestialName).FirstOrDefault(); " is 126.
Long Statement,ContractConfigurator.Behaviour,WaypointGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\WaypointGenerator.cs,Initialize,The length of the statement  "                        } while (WaypointUtil.GetDistance(wpData.waypoint.latitude' wpData.waypoint.longitude' nearWaypoint.latitude' nearWaypoint.longitude' " is 133.
Long Statement,ContractConfigurator.Behaviour,WaypointGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\WaypointGenerator.cs,GeneratePQSCityCoordinates,The length of the statement  "            offsetPos *= (i.x * j.y * k.z) + (i.y * j.z * k.x) + (i.z * j.x * k.y) - (i.z * j.y * k.x) - (i.y * j.x * k.z) - (i.x * j.z * k.y); " is 131.
Long Statement,ContractConfigurator.Behaviour,WaypointGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\WaypointGenerator.cs,GeneratePQSCityCoordinates,The length of the statement  "            LoggingUtil.LogVerbose(this' "    resulting lat' lon = (" + wpData.waypoint.latitude + "' " + wpData.waypoint.longitude + ")"); " is 127.
Long Statement,ContractConfigurator.Behaviour,WaypointGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\WaypointGenerator.cs,Create,The length of the statement  "                    valid &= ConfigNodeUtil.ParseValue<CelestialBody>(child' "targetBody"' x => wpData.waypoint.celestialName = x != null ? x.name : ""' factory); " is 142.
Long Statement,ContractConfigurator.Behaviour,WaypointGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\WaypointGenerator.cs,Create,The length of the statement  "                    valid &= ConfigNodeUtil.ParseValue<List<string>>(child' "parameter"' x => wpData.parameter = x' factory' new List<string>()); " is 125.
Long Statement,ContractConfigurator.Behaviour,WaypointGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\WaypointGenerator.cs,Create,The length of the statement  "                        valid &= ConfigNodeUtil.ParseValue<double>(child' "minDistance"' x => wpData.minDistance = x' factory' 0.0' x => Validation.GE(x' 0.0)); " is 136.
Long Statement,ContractConfigurator.Behaviour,WaypointGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\WaypointGenerator.cs,Create,The length of the statement  "                        valid &= ConfigNodeUtil.ParseValue<double>(child' "maxDistance"' x => wpData.maxDistance = x' factory' x => Validation.GT(x' 0.0)); " is 131.
Long Statement,ContractConfigurator.Behaviour,WaypointGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\WaypointGenerator.cs,Create,The length of the statement  "                            wpData.waypoint.name = StringUtilities.GenerateSiteName(random.Next()' wpData.waypoint.celestialBody' !wpData.waterAllowed); " is 124.
Long Statement,ContractConfigurator.Behaviour,WaypointGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\WaypointGenerator.cs,AddWayPoint,The length of the statement  "                if (contract.ContractState == Contract.State.Active && (parms.DisplayActiveWaypoints || HighLogic.LoadedScene != GameScenes.TRACKSTATION) || " is 140.
Long Statement,ContractConfigurator.Behaviour,WaypointGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\WaypointGenerator.cs,AddWayPoint,The length of the statement  "                    contract.ContractState == Contract.State.Offered && parms.DisplayOfferedWaypoints && HighLogic.LoadedScene == GameScenes.TRACKSTATION) " is 134.
Long Statement,ContractConfigurator.Behaviour,SpawnKerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnKerbal.cs,Initialize,The length of the statement  "                        offsetPos *= (i.x * j.y * k.z) + (i.y * j.z * k.x) + (i.z * j.x * k.y) - (i.z * j.y * k.x) - (i.y * j.x * k.z) - (i.x * j.z * k.y); " is 131.
Long Statement,ContractConfigurator.Behaviour,SpawnKerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnKerbal.cs,Create,The length of the statement  "                        valid &= ConfigNodeUtil.ParseValue<string>(child' "name"' x => { kd.kerbal.name = x; if (kd.kerbal.pcm != null) kd.kerbal.pcm.ChangeName(x); }' " is 143.
Long Statement,ContractConfigurator.Behaviour,SpawnKerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnKerbal.cs,Create,The length of the statement  "                    valid &= ConfigNodeUtil.ParseValue<ProtoCrewMember.KerbalType>(child' "kerbalType"' x => kd.kerbal.kerbalType = x' factory' ProtoCrewMember.KerbalType.Unowned); " is 160.
Long Statement,ContractConfigurator.Behaviour,SpawnKerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnKerbal.cs,OnAccepted,The length of the statement  "                partNodes[0] = ProtoVessel.CreatePartNode(kd.kerbal.gender == ProtoCrewMember.Gender.Male ? "kerbalEVA" : "kerbalEVAfemale"' " is 124.
Long Statement,ContractConfigurator.Behaviour,SpawnKerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnKerbal.cs,OnAccepted,The length of the statement  "                additionalNodes[0] = ProtoVessel.CreateDiscoveryNode(discoveryLevel' UntrackedObjectClass.A' contract.TimeDeadline' contract.TimeDeadline); " is 139.
Long Statement,ContractConfigurator.Behaviour,SpawnKerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnKerbal.cs,OnAccepted,The length of the statement  "                ConfigNode protoVesselNode = ProtoVessel.CreateVesselNode(kd.kerbal.name' VesselType.EVA' kd.orbit' 0' partNodes' additionalNodes); " is 131.
Long Statement,ContractConfigurator.Behaviour,SpawnKerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnKerbal.cs,RemoveKerbals,The length of the statement  "                                        LoggingUtil.LogVerbose(this' "    Removing " + kerbal.kerbal.name + " from part " + pps.partName + " on vessel " + vessel.vesselName); " is 134.
Long Statement,ContractConfigurator,HasAntennaFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasAntennaFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "minAntennaPower"' x => minAntennaPower = x' this' 0.0f' x => Validation.GE(x' 0.0f)); " is 141.
Long Statement,ContractConfigurator,HasAntennaFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasAntennaFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "maxAntennaPower"' x => maxAntennaPower = x' this' double.MaxValue' x => Validation.GE(x' 0.0f)); " is 152.
Long Statement,ContractConfigurator,HasAntennaFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasAntennaFactory.cs,Load,The length of the statement  "			valid &= ConfigNodeUtil.ParseValue<HasAntenna.AntennaType>(configNode' "antennaType"' x => antennaType = x' this' HasAntenna.AntennaType.TRANSMIT); " is 147.
Long Statement,ContractConfigurator,StockContractParametersTemplate,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\SettingsBuilder.cs,OnLoad,The length of the statement  "            foreach (Type subclass in ContractConfigurator.GetAllTypes<Contract>().Where(t => t != null && !t.Name.StartsWith("ConfiguredContract"))) " is 137.
Long Statement,ContractConfigurator,SettingsBuilder,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\SettingsBuilder.cs,EmitSettings,The length of the statement  "            List<Type> contractTypes = ContractConfigurator.GetAllTypes<Contract>().Where(t => t != null && !t.Name.StartsWith("ConfiguredContract")).ToList(); " is 147.
Long Statement,ContractConfigurator,SettingsBuilder,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\SettingsBuilder.cs,EmitSettings,The length of the statement  "            foreach (ContractGroup contractGroup in ContractGroup.AllGroups.Where(g => g != null && g.parent == null).OrderBy(g => g.displayName)) " is 134.
Long Statement,ContractConfigurator,SettingsBuilder,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\SettingsBuilder.cs,EmitSettings,The length of the statement  "                FieldBuilder groupField = groupParamBuilder.DefineField(SettingsBuilder.SanitizeName(contractGroup.name)' typeof(bool)' FieldAttributes.Public); " is 144.
Long Statement,ContractConfigurator,SettingsBuilder,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\SettingsBuilder.cs,EmitSettings,The length of the statement  "                CustomAttributeBuilder attBuilder = new CustomAttributeBuilder(paramUICons' new object[] { contractGroup.displayName }); " is 120.
Long Statement,ContractConfigurator,SettingsBuilder,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\SettingsBuilder.cs,EmitSettings,The length of the statement  "            foreach (MissionControlUI.GroupContainer container in contractTypes.Select(t => new MissionControlUI.GroupContainer(t)).OrderBy(mcui => mcui.DisplayName())) " is 156.
Long Statement,ContractConfigurator,SettingsBuilder,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\SettingsBuilder.cs,EmitSettings,The length of the statement  "                FieldBuilder groupField = stockParamBuilder.DefineField(SettingsBuilder.SanitizeName(container.stockContractType.Name)' typeof(bool)' FieldAttributes.Public); " is 158.
Long Statement,ContractConfigurator,AtMostRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\AtMostRequirement.cs,RequirementText,The length of the statement  "            string output = "Must meet at most <color=#" + MissionControlUI.RequirementHighlightColor + ">" + NumericValueExpressionParser<int>.PrintNumber(count) + " </color> of the following:"; " is 183.
Long Statement,ContractConfigurator,AtLeastRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\AtLeasRequirement.cs,RequirementText,The length of the statement  "            string output = "Must meet at least <color=#" + MissionControlUI.RequirementHighlightColor + ">" + NumericValueExpressionParser<int>.PrintNumber(count) + "</color> of the following:"; " is 183.
Long Statement,ContractConfigurator,AcceptContractRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\AcceptContractRequirement.cs,RequirementMet,The length of the statement  "                    Where(c => c != null && c.contractType != null && c.contractType.name.Equals(ccType) && c.ContractState == Contract.State.Active); " is 130.
Long Statement,ContractConfigurator,AcceptContractRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\AcceptContractRequirement.cs,RequirementMet,The length of the statement  "                IEnumerable<Contract> acceptedContract = ContractSystem.Instance.Contracts.Where(c => c != null && c.GetType() == contractClass && " is 130.
Long Statement,ContractConfigurator,AcceptContractRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\AcceptContractRequirement.cs,RequirementText,The length of the statement  "            return "Must " + (invertRequirement ? "not " : "") + "have accepted contract <color=#" + MissionControlUI.RequirementHighlightColor + ">'" + ContractTitle() + "'</color>"; " is 171.
Long Statement,ContractConfigurator,PartModuleTypeUnlockedRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\PartModuleTypeUnlockedRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<List<string>>(configNode' "partModuleType"' x => partModuleTypes = x' this' x => x.All(Validation.ValidatePartModuleType)); " is 158.
Long Statement,ContractConfigurator,PartModuleTypeUnlockedRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\PartModuleTypeUnlockedRequirement.cs,RequirementMet,The length of the statement  "                    if (part.partPrefab.HasValidContractObjective(partModuleType) && ResearchAndDevelopment.PartTechAvailable(part) && ResearchAndDevelopment.PartModelPurchased(part)) " is 163.
Long Statement,ContractConfigurator,PerformOrbitalSurveyRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\PerformOrbitalSurveyRequirement.cs,RequirementMet,The length of the statement  "            return ResourceScenario.Instance.gameSettings.GetPlanetScanInfo().Where(psd => psd.PlanetId == targetBody.flightGlobalsIndex).Any(); " is 132.
Long Statement,ContractConfigurator,PerformOrbitalSurveyRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\PerformOrbitalSurveyRequirement.cs,RequirementText,The length of the statement  "            string output = "Must " + (invertRequirement ? "not " : "") + "have performed an orbital survey of " + (targetBody == null ? "the target body" : targetBody.CleanDisplayName(true)); " is 180.
Long Statement,ContractConfigurator,SCANsatCoverageRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\SCANsatCoverageRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<string>(configNode' "scanType"' x => scanType = x' this' SCANsatUtil.ValidateSCANname); " is 122.
Long Statement,ContractConfigurator,SCANsatCoverageRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\SCANsatCoverageRequirement.cs,RequirementText,The length of the statement  "            return "Must " + (invertRequirement ? "not " : "") + "have between " + minCoverage.ToString("N0") + "% and " + maxCoverage.ToString("N0") + "% " + scanName + " coverage of " + (targetBody == null ? "the target body" : targetBody.CleanDisplayName(true)); " is 253.
Long Statement,ContractConfigurator,SCANsatLocationCoverageRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\SCANsatLocationCoverageRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<string>(configNode' "scanType"' x => scanType = x' this' "Anomaly"' SCANsatUtil.ValidateSCANname); " is 133.
Long Statement,ContractConfigurator,SCANsatLocationCoverageRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\SCANsatLocationCoverageRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.MutuallyExclusive(configNode' new string[] { "latitude"' "longitude" }' new string[] { "pqsCity" }' this); " is 130.
Long Statement,ContractConfigurator,SCANsatLocationCoverageRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\SCANsatLocationCoverageRequirement.cs,RequirementText,The length of the statement  "            string output = "Must " + (invertRequirement ? "not " : "") + "have scanned location <color=#" + MissionControlUI.RequirementHighlightColor + ">" + latitude.ToString("N1") + "' " + longitude.ToString("N1") + " is 207.
Long Statement,ContractConfigurator,SCANsatLocationCoverageRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\SCANsatLocationCoverageRequirement.cs,RequirementText,The length of the statement  "                "</color> on " + (targetBody == null ? "the target body" : targetBody.CleanDisplayName(true)) + " using the " + scanName + " scanner"; " is 134.
Long Statement,ContractConfigurator,ScienceRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ScienceRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<float>(configNode' "minScience"' x => minScience = x' this' 0.0f' x => Validation.GE(x' 0.0f)); " is 130.
Long Statement,ContractConfigurator,ScienceRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ScienceRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<float>(configNode' "maxScience"' x => maxScience = x' this' float.MaxValue' x => Validation.GE(x' 0.0f)); " is 140.
Long Statement,ContractConfigurator,ReputationRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ReputationRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<float>(configNode' "minReputation"' x => minReputation = x' this' -1000.0f' x => Validation.Between(x' -1000.0f' 1000.0f)); " is 158.
Long Statement,ContractConfigurator,ReputationRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ReputationRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<float>(configNode' "maxReputation"' x => maxReputation = x' this' 1000.0f' x => Validation.Between(x' -1000.0f' 1000.0f)); " is 157.
Long Statement,ContractConfigurator,FundsRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\FundsRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "minFunds"' x => minFunds = x' this' 0.0' x => Validation.GE(x' 0.0)); " is 125.
Long Statement,ContractConfigurator,FundsRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\FundsRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "maxFunds"' x => maxFunds = x' this' double.MaxValue' x => Validation.GE(x' 0.0)); " is 137.
Long Statement,ContractConfigurator,ContractGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractGroup.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxCompletions"' x => maxCompletions = x' this' 0' x => Validation.GE(x' 0)); " is 130.
Long Statement,ContractConfigurator,ContractGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractGroup.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxSimultaneous"' x => maxSimultaneous = x' this' 0' x => Validation.GE(x' 0)); " is 132.
Long Statement,ContractConfigurator,ContractGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractGroup.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<List<string>>(configNode' "disabledContractType"' x => disabledContractType = x' this' new List<string>()); " is 142.
Long Statement,ContractConfigurator,ContractGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractGroup.cs,Load,The length of the statement  "                    LoggingUtil.LogWarning(this' ErrorPrefix() + ": Using the sortKey field is only applicable on child CONTRACT_GROUP elements"); " is 126.
Long Statement,ContractConfigurator,ContractGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractGroup.cs,Load,The length of the statement  "                        var ainfoV = Attribute.GetCustomAttribute(typeof(ExceptionLogWindow).Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute; " is 167.
Long Statement,ContractConfigurator,ContractGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractGroup.cs,Load,The length of the statement  "                        PopupDialog.SpawnPopupDialog(new MultiOptionDialog("ContractConfiguratorMsg"' message' title' UISkinManager.GetSkin("default")' dialogOption)' false' UISkinManager.GetSkin("default")); " is 184.
Long Statement,ContractConfigurator,ContractGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractGroup.cs,Load,The length of the statement  "                    LoggingUtil.LogWarning(this' ErrorPrefix() + ": Providing the agent field for all CONTRACT_GROUP nodes is highly recommended' as the agent is used to group contracts in Mission Control."); " is 188.
Long Statement,ContractConfigurator,ContractGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractGroup.cs,Load,The length of the statement  "                    LoggingUtil.LogWarning(this' ErrorPrefix() + ": No minVersion or older minVersion provided.  It is recommended that the minVersion is set to at least 1.15.0 to turn important warnings for deprecated functionality into errors."); " is 228.
Long Statement,ContractConfigurator,ContractGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractGroup.cs,Load,The length of the statement  "                    LoggingUtil.LogWarning(this' ErrorPrefix() + ": No display name provided.  A display name is recommended' as it is used in the Mission Control UI."); " is 149.
Long Statement,ContractConfigurator,ContractGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractGroup.cs,CurrentContracts,The length of the statement  "            return ConfiguredContract.CurrentContracts.Where(c => c.contractType != null && BelongsToGroup(c.contractType)).Count(); " is 120.
Long Statement,ContractConfigurator,Tech,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Wrappers\Tech.cs,SetupTech,The length of the statement  "                    LoggingUtil.LogError(typeof(Tech)' "Couldn't load tech tree from " + HighLogic.CurrentGame.Parameters.Career.TechTreeUrl); " is 122.
Long Statement,ContractConfigurator,HasResourceCapacityFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasResourceCapacityFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<double>(childNode' "minQuantity"' x => filter.minQuantity = x' this' 0.01' x => Validation.GE(x' 0.0)); " is 138.
Long Statement,ContractConfigurator,HasResourceCapacityFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasResourceCapacityFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<double>(childNode' "maxQuantity"' x => filter.maxQuantity = x' this' double.MaxValue' x => Validation.GE(x' 0.0)); " is 149.
Long Statement,ContractConfigurator,SCANsatCoverageFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\SCANsatCoverageFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<string>(configNode' "scanType"' x => scanType = x' this' SCANsatUtil.ValidateSCANname); " is 122.
Long Statement,ContractConfigurator,ValidVesselRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\VesselValidRequirement.cs,RequirementMet,The length of the statement  "            return ContractVesselTracker.Instance != null && ContractVesselTracker.Instance.GetAssociatedVessel(vessel.identifier) != null; " is 127.
Long Statement,ContractConfigurator,MissionTimerFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\MissionTimerFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<MissionTimer.StartCriteria>(configNode' "startCriteria"' x => startCriteria = x' this' MissionTimer.StartCriteria.CONTRACT_ACCEPTANCE); " is 170.
Long Statement,ContractConfigurator,MissionTimerFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\MissionTimerFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<MissionTimer.EndCriteria>(configNode' "endCriteria"' x => endCriteria = x' this' MissionTimer.EndCriteria.CONTRACT_COMPLETION); " is 162.
Long Statement,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,Update,The length of the statement  "            // Give the contract system a maximum of 5 seconds to start up.  Need to do this because the OnContractsLoaded event isn't fired " is 128.
Long Statement,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,Update,The length of the statement  "            if (ContractSystem.Instance == null || (!contractsLoaded && contractsLoadCheckTime < Time.realtimeSinceStartup + 5.0 && MissionControl.Instance == null)) " is 153.
Long Statement,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,Update,The length of the statement  "            while (UnityEngine.Time.realtimeSinceStartup - start < MAX_TIME && lastGenerationFailure + GLOBAL_FAILURE_WAIT_TIME < Time.realtimeSinceStartup) " is 144.
Long Statement,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,Update,The length of the statement  "                    lastGenerationFailure = UnityEngine.Time.realtimeSinceStartup + (float)(rand.NextDouble() * (RANDOM_MAX - RANDOM_MIN) + RANDOM_MIN); " is 132.
Long Statement,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,GenerateContract,The length of the statement  "            Contract.ContractPrestige prestige = selection < t1 ? Contract.ContractPrestige.Trivial : selection < (t1 + t2) ? Contract.ContractPrestige.Significant : Contract.ContractPrestige.Exceptional; " is 192.
Long Statement,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,GenerateContract,The length of the statement  "            ConfiguredContract templateContract = Contract.Generate(typeof(ConfiguredContract)' prestige' rand.Next()' Contract.State.Withdrawn) as ConfiguredContract; " is 155.
Long Statement,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,OnSave,The length of the statement  "                ExceptionLogWindow.DisplayFatalException(ExceptionLogWindow.ExceptionSituation.SCENARIO_MODULE_SAVE' e' "ContractPreLoader"); " is 125.
Long Statement,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,OnLoad,The length of the statement  "                ExceptionLogWindow.DisplayFatalException(ExceptionLogWindow.ExceptionSituation.SCENARIO_MODULE_LOAD' e' "ContractPreLoader"); " is 125.
Long Statement,ContractConfigurator,Kerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Wrappers\Kerbal.cs,Load,The length of the statement  "                ProtoCrewMember.KerbalType kerbalType = ConfigNodeUtil.ParseValue<ProtoCrewMember.KerbalType>(node' "kerbalType"' ProtoCrewMember.KerbalType.Crew); " is 147.
Long Statement,ContractConfigurator,HasAstronautFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasAstronautFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<int>(configNode' "minExperience"' x => minExperience = x' this' 0' x => Validation.Between(x' 0' 5)); " is 136.
Long Statement,ContractConfigurator,HasAstronautFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasAstronautFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxExperience"' x => maxExperience = x' this' 5' x => Validation.Between(x' 0' 5)); " is 136.
Long Statement,ContractConfigurator,HasAstronautFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasAstronautFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxCount"' x => maxCount = x' this' int.MaxValue' x => Validation.GE(x' minCount)); " is 136.
Long Statement,ContractConfigurator,HasAstronautFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasAstronautFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.AtLeastOne(configNode' new string[] { "trait"' "minExperience"' "maxExperience"' "minCount"' "maxCount" }' this); " is 137.
Long Statement,ContractConfigurator,HasCrewCapacityFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasCrewCapacityFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<int>(configNode' "minCapacity"' x => minCapacity = x' this' 1' x => Validation.GE(x' 0)); " is 124.
Long Statement,ContractConfigurator,HasCrewCapacityFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasCrewCapacityFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxCapacity"' x => maxCapacity = x' this' int.MaxValue' x => Validation.GE(x' 0)); " is 135.
Long Statement,ContractConfigurator,VesselDestroyedFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\VesselDestroyedFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<bool>(configNode' "mustImpactTerrain"' x => mustImpactTerrain = x' this' false' x => true); " is 126.
Long Statement,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The length of the statement  "                    if (bd.landCount + bd.waterCount < maxCount || bd.landLocations.Count < targetMin || bd.waterLocations.Count < targetMin) " is 121.
Long Statement,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,OnLoad,The length of the statement  "                ExceptionLogWindow.DisplayFatalException(ExceptionLogWindow.ExceptionSituation.SCENARIO_MODULE_LOAD' e' "BiomeTracker"); " is 120.
Long Statement,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,OnGUI,The length of the statement  "                var ainfoV = Attribute.GetCustomAttribute(typeof(ContractConfigurator).Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute; " is 169.
Long Statement,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,WindowGUI,The length of the statement  "                foreach (ContractGroup contractGroup in ContractGroup.AllGroups.Where(g => g == null || g.parent == null).OrderBy(cg => cg == null ? "zzz" : cg.name)) " is 150.
Long Statement,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,GroupGui,The length of the statement  "                    foreach (ContractType contractType in guiContracts.Where(ct => contractGroup == null ? ct.group == null : contractGroup.BelongsToGroup(ct))) " is 140.
Long Statement,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,GroupGui,The length of the statement  "                    foreach (ContractGroup childGroup in ContractGroup.AllGroups.Where(g => g != null && g.parent != null && g.parent.name == contractGroup.name).OrderBy(cg => cg.name)) " is 165.
Long Statement,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,RequirementGui,The length of the statement  "                GUIStyle style = requirement.lastResult == null ? GUI.skin.label : requirement.lastResult.Value ? greenLabel : yellowLabel; " is 123.
Long Statement,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,RightColumnGUI,The length of the statement  "            if (GUILayout.Button("Contract Balancing"' selectedPane == SelectedPane.BALANCE_MODE ? selectedButton : GUI.skin.button)) " is 121.
Long Statement,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,BalanceModeGUI,The length of the statement  "            GUILayout.Label("<color=#8bed8b>Rewards</color>"' headerLabelCenter' GUILayout.Width(FUNDS_WIDTH + SCIENCE_WIDTH + REP_WIDTH - 2)); " is 131.
Long Statement,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,BalanceModeGUI,The length of the statement  "                GUILayout.Label(new GUIContent(body != null ? body.name : "none"' BodyMultiplier(body))' clippedLabel' GUILayout.Width(CB_WIDTH)); " is 130.
Long Statement,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,BalanceModeGUI,The length of the statement  "                GUILayout.Label(CurrencyGUIContent(Currency.Funds' contractType' contractType.rewardFunds)' clippedLabelRight' GUILayout.Width(FUNDS_WIDTH)); " is 141.
Long Statement,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,BalanceModeGUI,The length of the statement  "                GUILayout.Label(CurrencyGUIContent(Currency.Science' contractType' contractType.rewardScience)' clippedLabelRight' GUILayout.Width(SCIENCE_WIDTH)); " is 147.
Long Statement,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,BalanceModeGUI,The length of the statement  "                GUILayout.Label(CurrencyGUIContent(Currency.Reputation' contractType' contractType.rewardReputation)' clippedLabelRight' GUILayout.Width(REP_WIDTH)); " is 149.
Long Statement,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,BalanceModeGUI,The length of the statement  "                GUILayout.Label(CurrencyGUIContent(Currency.Funds' contractType' contractType.advanceFunds)' clippedLabelRight' GUILayout.Width(FUNDS2_WIDTH)); " is 143.
Long Statement,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,BalanceModeGUI,The length of the statement  "                GUILayout.Label(CurrencyGUIContent(Currency.Funds' contractType' contractType.failureFunds)' clippedLabelRight' GUILayout.Width(FUNDS2_WIDTH)); " is 143.
Long Statement,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,BalanceModeGUI,The length of the statement  "                GUILayout.Label(CurrencyGUIContent(Currency.Reputation' contractType' contractType.failureReputation)' clippedLabelRight' GUILayout.Width(REP_WIDTH)); " is 150.
Long Statement,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,LocationModeGUI,The length of the statement  "                Vector3d pos = new Vector3d(Vector3d.Dot(vPos' city.transform.right)' Vector3d.Dot(vPos' city.transform.forward)' Vector3d.Dot(vPos' city.transform.up)); " is 153.
Long Statement,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,LocationModeGUI,The length of the statement  "                GUILayout.TextField(pos.x.ToString() + "' " + pos.y.ToString() + "' " + pos.z.ToString()' GUILayout.Width(HEADING_WIDTH)); " is 122.
Long Statement,ContractConfigurator,DraftTwitchViewers,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DraftTwitchViewers.cs,Update,The length of the statement  "                IEnumerator enumerator = (IEnumerator)draftMethod.Invoke(null' new object[] { success' failure' false' true' Kerbal.RandomExperienceTrait() }); " is 143.
Long Statement,ContractConfigurator,ExceptionLogWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ExceptionLogWindow.cs,DisplayFatalException,The length of the statement  "                    actionString = "The contract data was not correctly saved - reloading the save may result in further errors.  Best case - the contract in question is no longer valid."; " is 168.
Long Statement,ContractConfigurator,ExceptionLogWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ExceptionLogWindow.cs,DisplayFatalException,The length of the statement  "                    actionString = "The contract data was not correctly loaded.  Avoid saving your game and backup your save file immediately if you wish to prevent contract loss!"; " is 161.
Long Statement,ContractConfigurator,ExceptionLogWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ExceptionLogWindow.cs,DisplayFatalException,The length of the statement  "                    actionString = "The contract data was not correctly saved - reloading the save may result in further errors.  Best case - the contract in question is no longer valid."; " is 168.
Long Statement,ContractConfigurator,ExceptionLogWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ExceptionLogWindow.cs,DisplayFatalException,The length of the statement  "                    actionString = "The contract data was not correctly loaded.  Avoid saving your game and backup your save file immediately if you wish to prevent contract loss!"; " is 161.
Long Statement,ContractConfigurator,ExceptionLogWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ExceptionLogWindow.cs,DisplayFatalException,The length of the statement  "                    actionString = "The ScenarioModule data was not correctly loaded.  Avoid saving your game and backup your save file immediately if you wish to prevent save game data loss!"; " is 173.
Long Statement,ContractConfigurator,ExceptionLogWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ExceptionLogWindow.cs,OnGUI,The length of the statement  "                var ainfoV = Attribute.GetCustomAttribute(typeof(ExceptionLogWindow).Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute; " is 167.
Long Statement,ContractConfigurator,ExceptionLogWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ExceptionLogWindow.cs,WindowGUI,The length of the statement  "            string label = "An unexpected exception occurred!  Please copy the error message below' and either post it on the Contract Configurator thread on the KSP forums' or raise an issue on our GitHub tracker."; " is 204.
Long Statement,ContractConfigurator,RendezvousFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\RendezvousFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<List<VesselIdentifier>>(configNode' "vessel"' x => vessels = x' this' new List<VesselIdentifier>()' l => ValidateVesselList(l)); " is 163.
Long Statement,ContractConfigurator,RendezvousFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\RendezvousFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<List<VesselIdentifier>>(configNode' "vessel"' x => vessels = x' this' l => ValidateVesselList(l)); " is 133.
Long Statement,ContractConfigurator,RendezvousFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\RendezvousFactory.cs,ValidateVesselList,The length of the statement  "                    LoggingUtil.LogError(this' ErrorPrefix() + ": When used under a VesselParameterGroup' no more than one vessel may be specified for the Rendezvous parameter."); " is 159.
Long Statement,ContractConfigurator,VesselNotDestroyedFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\VesselNotDestroyedFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<List<VesselIdentifier>>(configNode' "vessel"' x => vessels = x' this' new List<VesselIdentifier>()); " is 135.
Long Statement,ContractConfigurator,DockingFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\DockingFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<List<VesselIdentifier>>(configNode' "vessel"' x => vessels = x' this' new List<VesselIdentifier>()); " is 135.
Long Statement,ContractConfigurator,DockingFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\DockingFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<VesselIdentifier>(configNode' "defineDockedVessel"' x => defineDockedVessel = x' this' (VesselIdentifier)null); " is 146.
Long Statement,ContractConfigurator,DockingFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\DockingFactory.cs,Load,The length of the statement  "                    LoggingUtil.LogError(this' ErrorPrefix() + ": When used under a VesselParameterGroup' no more than one vessel may be specified for the Docking parameter."); " is 156.
Long Statement,ContractConfigurator,DockingFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\DockingFactory.cs,Generate,The length of the statement  "            return new Docking(vessels.Select<VesselIdentifier' string>(vi => vi.identifier)' defineDockedVessel != null ? defineDockedVessel.identifier : null' title); " is 156.
Long Statement,ContractConfigurator,ReachStateFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\ReachStateFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<List<Vessel.Situations>>(configNode' "situation"' x => situation = x' this' new List<Vessel.Situations>()); " is 142.
Long Statement,ContractConfigurator,ReachStateFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\ReachStateFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<float>(configNode' "minTerrainAltitude"' x => minTerrainAltitude = x' this' 0.0f' x => Validation.GE(x' 0.0f)); " is 146.
Long Statement,ContractConfigurator,ReachStateFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\ReachStateFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<float>(configNode' "maxTerrainAltitude"' x => maxTerrainAltitude = x' this' float.MaxValue' x => Validation.GE(x' 0.0f)); " is 156.
Long Statement,ContractConfigurator,ReachStateFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\ReachStateFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "minSpeed"' x => minSpeed = x' this' 0.0' x => Validation.GE(x' 0.0)); " is 125.
Long Statement,ContractConfigurator,ReachStateFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\ReachStateFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "maxSpeed"' x => maxSpeed = x' this' double.MaxValue' x => Validation.GE(x' 0.0)); " is 137.
Long Statement,ContractConfigurator,ReachStateFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\ReachStateFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "minRateOfClimb"' x => minRateOfClimb = x' this' double.MinValue); " is 121.
Long Statement,ContractConfigurator,ReachStateFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\ReachStateFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "maxRateOfClimb"' x => maxRateOfClimb = x' this' double.MaxValue); " is 121.
Long Statement,ContractConfigurator,ReachStateFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\ReachStateFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<float>(configNode' "minAcceleration"' x => minAcceleration = x' this' 0.0f' x => Validation.GE(x' 0.0f)); " is 140.
Long Statement,ContractConfigurator,ReachStateFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\ReachStateFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<float>(configNode' "maxAcceleration"' x => maxAcceleration = x' this' float.MaxValue' x => Validation.GE(x' 0.0f)); " is 150.
Long Statement,ContractConfigurator,ReachStateFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\ReachStateFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.AtLeastOne(configNode' new string[] { "targetBody"' "biome"' "situation"' "minAltitude"' "maxAltitude"' " is 127.
Long Statement,ContractConfigurator,ReachStateFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\ReachStateFactory.cs,Load,The length of the statement  "                "minTerrainAltitude"' "maxTerrainAltitude"' "minSpeed"' "maxSpeed"' "minRateOfClimb"' "maxRateOfClimb"' "minAcceleration"' "maxAcceleration" }' this); " is 150.
Long Statement,ContractConfigurator,ReachStateFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\ReachStateFactory.cs,Generate,The length of the statement  "                minTerrainAltitude' maxTerrainAltitude' minSpeed' maxSpeed' minRateOfClimb' maxRateOfClimb' minAcceleration' maxAcceleration' title); " is 133.
Long Statement,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<Vessel.Situations>(configNode' "situation"' x => situation = x' this' Vessel.Situations.ORBITING' ValidateSituations); " is 153.
Long Statement,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "minAltitude"' x => minAltitude = x' this' 0.0' x => Validation.GE(x' 0.0)); " is 131.
Long Statement,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "maxAltitude"' x => maxAltitude = x' this' double.MaxValue' x => Validation.GE(x' 0.0)); " is 143.
Long Statement,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "minApA"' x => minApoapsis = x' this' 0.0' x => Validation.GE(x' 0.0)); " is 126.
Long Statement,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "maxApA"' x => maxApoapsis = x' this' double.MaxValue' x => Validation.GE(x' 0.0)); " is 138.
Long Statement,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "minPeA"' x => minPeriapsis = x' this' 0.0' x => Validation.GE(x' 0.0)); " is 127.
Long Statement,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "maxPeA"' x => maxPeriapsis = x' this' double.MaxValue' x => Validation.GE(x' 0.0)); " is 139.
Long Statement,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "minEccentricity"' x => minEccentricity = x' this' 0.0' x => Validation.GE(x' 0.0)); " is 139.
Long Statement,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "maxEccentricity"' x => maxEccentricity = x' this' double.MaxValue' x => Validation.GE(x' 0.0)); " is 151.
Long Statement,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "minInclination"' x => minInclination = x' this' 0.0' x => Validation.Between(x' 0.0' 180.0)); " is 149.
Long Statement,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "maxInclination"' x => maxInclination = x' this' 180.0' x => Validation.Between(x' 0.0' 180.0)); " is 151.
Long Statement,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "minArgumentOfPeriapsis"' x => minArgumentOfPeriapsis = x' this' 0.0' x => Validation.Between(x' 0.0' 360.0)); " is 165.
Long Statement,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "maxArgumentOfPeriapsis"' x => maxArgumentOfPeriapsis = x' this' 360.0' x => Validation.Between(x' 0.0' 360.0)); " is 167.
Long Statement,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<Duration>(configNode' "maxPeriod"' x => maxPeriod = x' this' new Duration(double.MaxValue)); " is 127.
Long Statement,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.AtLeastOne(configNode' new string[] { "minAltitude"' "maxAltitude"' "minApA"' "maxApA"' "minPeA"' "maxPeA"' " is 131.
Long Statement,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The length of the statement  "                "minEccentricity"' "maxEccentricity"' "minInclination"' "maxInclination"' "minPeriod"' "maxPeriod"' "minArgumentOfPeriapsis"' "maxArgumentOfPeriapsis" }' this); " is 160.
Long Statement,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,ValidateSituations,The length of the statement  "                LoggingUtil.LogError(this' "Invalid situation for Orbit parameter: " + situation + ".  For non-orbital situations' use ReachState instead."); " is 141.
Long Statement,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Generate,The length of the statement  "                minEccentricity' maxEccentricity' minInclination' maxInclination' minArgumentOfPeriapsis' maxArgumentOfPeriapsis' minPeriod.Value' maxPeriod.Value' targetBody' title); " is 167.
Long Statement,ContractConfigurator,LocationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\LocationUtil.cs,TerrainHeight,The length of the statement  "            Vector3d radialVector = new Vector3d(Math.Cos(latRads) * Math.Cos(lonRads)' Math.Sin(latRads)' Math.Cos(latRads) * Math.Sin(lonRads)); " is 134.
Long Statement,ContractConfigurator,TitleTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\TitleTracker.cs,UpdateContractWindow,The length of the statement  "                UICascadingList.CascadingListItem list = TitleTrackerHelper.uiListMap.ContainsKey(parameter.Root.ContractGuid) ? TitleTrackerHelper.uiListMap[parameter.Root.ContractGuid] : null; " is 178.
Long Statement,ContractConfigurator,PartValidationFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\PartValidationFactory.cs,Load,The length of the statement  "                configNode.HasNode("VALIDATE") || configNode.HasNode("VALIDATE_ALL") || configNode.HasNode("NONE") ? (int?)null : 1' x => x == null || Validation.GE(x.Value' 0)); " is 162.
Long Statement,ContractConfigurator,PartValidationFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\PartValidationFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxCount"' x => maxCount = x' this' minCount != null && minCount.Value == 0 ? 0 : int.MaxValue' x => Validation.GE(x' 0)); " is 175.
Long Statement,ContractConfigurator,PartValidationFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\PartValidationFactory.cs,Load,The length of the statement  "            if (configNode.HasValue("part") || configNode.HasValue("partModule") || configNode.HasValue("partModuleType") || configNode.HasValue("category") || configNode.HasValue("manufacturer")) " is 184.
Long Statement,ContractConfigurator,PartValidationFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\PartValidationFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<List<AvailablePart>>(configNode' "part"' x => filter.parts = x' this' new List<AvailablePart>()); " is 132.
Long Statement,ContractConfigurator,PartValidationFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\PartValidationFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<List<string>>(configNode' "partModule"' x => filter.partModules = x' this' new List<string>()' x => x.All(Validation.ValidatePartModule)); " is 173.
Long Statement,ContractConfigurator,PartValidationFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\PartValidationFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<List<string>>(configNode' "partModuleType"' x => filter.partModuleTypes = x' this' new List<string>()' x => x.All(Validation.ValidatePartModuleType)); " is 185.
Long Statement,ContractConfigurator,PartValidationFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\PartValidationFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<PartCategories?>(configNode' "category"' x => filter.category = x' this' (PartCategories?)null); " is 131.
Long Statement,ContractConfigurator,PartValidationFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\PartValidationFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<string>(configNode' "manufacturer"' x => filter.manufacturer = x' this' (string)null); " is 121.
Long Statement,ContractConfigurator,PartValidationFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\PartValidationFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<List<AvailablePart>>(child' "part"' x => filter.parts = x' this' new List<AvailablePart>()); " is 127.
Long Statement,ContractConfigurator,PartValidationFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\PartValidationFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<List<string>>(child' "partModule"' x => filter.partModules = x' this' new List<string>()' x => x.All(Validation.ValidatePartModule)); " is 168.
Long Statement,ContractConfigurator,PartValidationFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\PartValidationFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<List<string>>(child' "partModuleType"' x => filter.partModuleTypes = x' this' new List<string>()); " is 133.
Long Statement,ContractConfigurator,PartValidationFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\PartValidationFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<PartCategories?>(child' "category"' x => filter.category = x' this' (PartCategories?)null); " is 126.
Long Statement,ContractConfigurator,PartValidationFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\PartValidationFactory.cs,Load,The length of the statement  "                    valid &= ConfigNodeUtil.ParseValue<int>(child' "minCount"' x => filter.minCount = x' this' 1' x => Validation.GE(x' 0)); " is 120.
Long Statement,ContractConfigurator,PartValidationFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\PartValidationFactory.cs,Load,The length of the statement  "                    valid &= ConfigNodeUtil.ParseValue<int>(child' "maxCount"' x => filter.maxCount = x' this' int.MaxValue' x => Validation.GE(x' 0)); " is 131.
Long Statement,ContractConfigurator,DurationFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\DurationFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<Parameters.Duration.StartCriteria>(configNode' "startCriteria"' x => startCriteria = x' this' Parameters.Duration.StartCriteria.CONTRACT_ACCEPTANCE); " is 184.
Long Statement,ContractConfigurator,DurationFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\DurationFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<List<string>>(configNode' "parameter"' x => parameter = x' this' new List<string>()); " is 120.
Long Statement,ContractConfigurator,FacilityRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\FacilityRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<int>(configNode' "minLevel"' x => minLevel = x' this' 1' x => Validation.Between(x' 1' 3)); " is 126.
Long Statement,ContractConfigurator,FacilityRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\FacilityRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxLevel"' x => maxLevel = x' this' 3' x => Validation.Between(x' 1' 3)); " is 126.
Long Statement,ContractConfigurator,FacilityRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\FacilityRequirement.cs,RequirementMet,The length of the statement  "            if (HighLogic.LoadedScene != GameScenes.SPACECENTER && contract != null && contract.ContractState == Contracts.Contract.State.Active) " is 133.
Long Statement,ContractConfigurator,FacilityRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\FacilityRequirement.cs,RequirementText,The length of the statement  "            if (facility == SpaceCenterFacility.Administration || facility == SpaceCenterFacility.MissionControl || facility == SpaceCenterFacility.ResearchAndDevelopment) " is 159.
Long Statement,ContractConfigurator,HasAstronautRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\HasAstronautRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<int>(configNode' "minExperience"' x => minExperience = x' this' 0' x => Validation.Between(x' 0' 5)); " is 136.
Long Statement,ContractConfigurator,HasAstronautRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\HasAstronautRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxExperience"' x => maxExperience = x' this' 5' x => Validation.Between(x' 0' 5)); " is 136.
Long Statement,ContractConfigurator,HasAstronautRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\HasAstronautRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxCount"' x => maxCount = x' this' int.MaxValue' x => Validation.GE(x' 0)); " is 129.
Long Statement,ContractConfigurator,HasAstronautRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\HasAstronautRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.AtLeastOne(configNode' new string[] { "trait"' "minExperience"' "maxExperience"' "minCount"' "maxCount" }' this); " is 137.
Long Statement,ContractConfigurator,LoggingUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\LoggingUtil.cs,LoadDebuggingConfig,The length of the statement  "                        LoggingUtil.logLevel = (LoggingUtil.LogLevel)Enum.Parse(typeof(LoggingUtil.LogLevel)' debuggingConfig.GetValue("logLevel")' true); " is 130.
Long Statement,ContractConfigurator,LoggingUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\LoggingUtil.cs,LoadDebuggingConfig,The length of the statement  "                                LoggingUtil.LogLevel logLevel = (LoggingUtil.LogLevel)Enum.Parse(typeof(LoggingUtil.LogLevel)' levelExceptionNode.GetValue("logLevel")' true); " is 142.
Long Statement,ContractConfigurator,LoggingUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\LoggingUtil.cs,LoadDebuggingConfig,The length of the statement  "                                UnityEngine.Debug.LogWarning("[WARNING] ContractConfigurator.LoggingUtil: Couldn't find Type with name: '" + typeName + "'"); " is 125.
Long Statement,ContractConfigurator,LoggingUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\LoggingUtil.cs,LoadDebuggingConfig,The length of the statement  "                            UnityEngine.Debug.LogWarning("[WARNING] ContractConfigurator.LoggingUtil: Couldn't load specific LogLevel node' type or logLevel not given!"); " is 142.
Long Statement,ContractConfigurator,LoggingUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\LoggingUtil.cs,LoadDebuggingConfig,The length of the statement  "                    LoggingUtil.LogWarning(typeof(LoggingUtil)' "Debugging Config failed to load! Message: '" + e.Message + "' Set LogLevel to INFO and cleaned specific LogLevels"); " is 161.
Long Statement,ContractConfigurator,VisitWaypointFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\VisitWaypointFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "distance"' x => distance = x' this' 0.0' x => Validation.GE(x' 0.0)); " is 125.
Long Statement,ContractConfigurator,VisitWaypointFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\VisitWaypointFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "horizontalDistance"' x => horizontalDistance = x' this' 0.0' x => Validation.GE(x' 0.0)); " is 145.
Long Statement,ContractConfigurator,ReachSpecificOrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\ReachSpecificOrbitFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "deviationWindow"' x => deviationWindow = x' this' 10.0' x => Validation.GE(x' 0.0)); " is 140.
Long Statement,ContractConfigurator,ReachSpecificOrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\ReachSpecificOrbitFactory.cs,Generate,The length of the statement  "            OrbitGenerator orbitGenerator = ((ConfiguredContract)contract).Behaviours.OfType<OrbitGenerator>().FirstOrDefault<OrbitGenerator>(); " is 132.
Long Statement,ContractConfigurator,VesselMassFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\VesselMassFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<float>(configNode' "minMass"' x => minMass = x' this' 0.0f' x => Validation.GE(x' 0.0f)); " is 124.
Long Statement,ContractConfigurator,VesselMassFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\VesselMassFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<float>(configNode' "maxMass"' x => maxMass = x' this' float.MaxValue' x => Validation.GE(x' 0.0f)); " is 134.
Long Statement,ContractConfigurator,PersistentDataStore,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\PersistentDataStore.cs,OnLoad,The length of the statement  "                ExceptionLogWindow.DisplayFatalException(ExceptionLogWindow.ExceptionSituation.SCENARIO_MODULE_LOAD' e' "PersistentDataStore"); " is 127.
Long Statement,ContractConfigurator,PersistentDataStore,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\PersistentDataStore.cs,OnSave,The length of the statement  "                ExceptionLogWindow.DisplayFatalException(ExceptionLogWindow.ExceptionSituation.SCENARIO_MODULE_SAVE' e' "PersistentDataStore"); " is 127.
Long Statement,ContractConfigurator,PartModuleUnlockedRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\PartModuleUnlockedRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<List<string>>(configNode' "partModule"' x => partModules = x' this' x => x.All(Validation.ValidatePartModule)); " is 146.
Long Statement,ContractConfigurator,ContractRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<CelestialBody>(configNode' "targetBody"' x => _targetBody = x' this' (CelestialBody)null); " is 125.
Long Statement,ContractConfigurator,ContractRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<bool>(configNode' "checkOnActiveContract"' x => checkOnActiveContract = x' this' false); " is 123.
Long Statement,ContractConfigurator,ContractRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractRequirement.cs,CheckRequirement,The length of the statement  "            LoggingUtil.LogVerbose(typeof(ContractRequirement)' "Checked requirement '" + name + "' of type " + type + ": " + nodeMet); " is 123.
Long Statement,ContractConfigurator,ContractRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractRequirement.cs,RequirementsMet,The length of the statement  "                                    contract != null && contract.ContractState == Contract.State.Offered ? LoggingUtil.LogLevel.DEBUG : LoggingUtil.LogLevel.VERBOSE' " is 129.
Long Statement,ContractConfigurator,ContractRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractRequirement.cs,GenerateRequirement,The length of the statement  "                LoggingUtil.Log(contractType.minVersion >= ContractConfigurator.ENHANCED_UI_VERSION ? LoggingUtil.LogLevel.ERROR : LoggingUtil.LogLevel.WARNING' " is 144.
Long Statement,ContractConfigurator,CompleteContractRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\CompleteContractRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<Duration>(configNode' "cooldownDuration"' x => cooldownDuration = x' this' new Duration(0.0)); " is 129.
Long Statement,ContractConfigurator,CompleteContractRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\CompleteContractRequirement.cs,RequirementMet,The length of the statement  "                    lastFinished = completedContract.OrderByDescending<ConfiguredContract' double>(c => c.DateFinished).First().DateFinished; " is 121.
Long Statement,ContractConfigurator,CompleteContractRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\CompleteContractRequirement.cs,RequirementMet,The length of the statement  "                Contract[] completedContract = (Contract[])typeof(ContractSystem).GetMethod("GetCompletedContracts").MakeGenericMethod(contractClass).Invoke(ContractSystem.Instance' new object[] { null }); " is 189.
Long Statement,ContractConfigurator,CompleteContractRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\CompleteContractRequirement.cs,RequirementMet,The length of the statement  "            if (cooldownDuration.Value > 0.0 && finished > 0 && lastFinished + cooldownDuration.Value > Planetarium.GetUniversalTime()) " is 123.
Long Statement,ContractConfigurator,CompleteContractRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\CompleteContractRequirement.cs,RequirementText,The length of the statement  "            string output = "Must " + (inverted ? "not " : "") + "have completed contract <color=#" + MissionControlUI.RequirementHighlightColor + ">'" + ContractTitle() + "'</color>"; " is 172.
Long Statement,ContractConfigurator,TechResearchedRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\TechResearchedRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<List<string>>(configNode' "partModule"' x => partModules = x' this' new List<string>()' x => x.All(Validation.ValidatePartModule)); " is 166.
Long Statement,ContractConfigurator,TechResearchedRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\TechResearchedRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<List<string>>(configNode' "partModuleType"' x => partModuleTypes = x' this' new List<string>()' x => x.All(Validation.ValidatePartModuleType)); " is 178.
Long Statement,ContractConfigurator,AltitudeRecordRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\AltitudeRecordRequirement.cs,LoadFromConfig,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<double>(configNode' "minAltitude"' x => minAltitude = x' this' x => Validation.GT(x' 0.0)); " is 126.
Long Statement,ContractConfigurator,AltitudeRecordRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\AltitudeRecordRequirement.cs,RequirementText,The length of the statement  "            string output = "Must " + (invertRequirement ? "not " : "") + "have reached an altitude of at least " + minAltitude.ToString("N0") + " m"; " is 138.
Long Statement,ContractConfigurator,BaseConstructionRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ProgressCelestialBodyRequirement\BaseConstructionRequirement.cs,RequirementText,The length of the statement  "            string output = "Must " + (invertRequirement ? "not " : "") + "have built a " + CheckTypeString() + "base on " + (targetBody == null ? "the target body" : targetBody.CleanDisplayName(true)); " is 190.
Long Statement,ContractConfigurator,SurfaceEVARequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ProgressCelestialBodyRequirement\SurfaceEVARequirement.cs,RequirementText,The length of the statement  "            string output = "Must " + (invertRequirement ? "not " : "") + "have performed a surface EVA on " + (targetBody == null ? "the target body" : targetBody.CleanDisplayName(true)); " is 176.
Long Statement,ContractConfigurator,SplashDownRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ProgressCelestialBodyRequirement\SplashDownRequirement.cs,RequirementText,The length of the statement  "            string output = "Must " + (invertRequirement ? "not " : "") + "have performed " + ACheckTypeString() + "splash down on " + (targetBody == null ? "the target body" : targetBody.CleanDisplayName(true)); " is 200.
Long Statement,ContractConfigurator,ReturnFromSurfaceRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ProgressCelestialBodyRequirement\ReturnFromSurfaceRequirement.cs,RequirementText,The length of the statement  "            string output = "Must " + (invertRequirement ? "not " : "") + "have returned from " + ACheckTypeString() + "landing on " + (targetBody == null ? "the target body" : targetBody.CleanDisplayName(true)); " is 200.
Long Statement,ContractConfigurator,ReturnFromOrbitRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ProgressCelestialBodyRequirement\ReturnFromOrbitRequirement.cs,RequirementText,The length of the statement  "            string output = "Must " + (invertRequirement ? "not " : "") + "have returned from  " + AnCheckTypeString() + "orbit of " + (targetBody == null ? "the target body" : targetBody.CleanDisplayName(true)); " is 200.
Long Statement,ContractConfigurator,ReturnFromFlyByRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ProgressCelestialBodyRequirement\ReturnFromFlyByRequirement.cs,RequirementText,The length of the statement  "            string output = "Must " + (invertRequirement ? "not " : "") + "have returned from  " + ACheckTypeString() + "flyby of " + (targetBody == null ? "the target body" : targetBody.CleanDisplayName(true)); " is 199.
Long Statement,ContractConfigurator,RendezvousRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ProgressCelestialBodyRequirement\RendezvousRequirement.cs,RequirementText,The length of the statement  "            string output = "Must " + (invertRequirement ? "not " : "") + "have performed " + ACheckTypeString() + "rendezvous near " + (targetBody == null ? "the target body" : targetBody.CleanDisplayName(true)); " is 201.
Long Statement,ContractConfigurator,OrbitRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ProgressCelestialBodyRequirement\OrbitRequirement.cs,RequirementText,The length of the statement  "            string output = "Must " + (invertRequirement ? "not " : "") + "have performed " + AnCheckTypeString() + "orbit of " + (targetBody == null ? "the target body" : targetBody.CleanDisplayName(true)); " is 195.
Long Statement,ContractConfigurator,LandingRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ProgressCelestialBodyRequirement\LandingRequirement.cs,RequirementText,The length of the statement  "            string output = "Must " + (invertRequirement ? "not " : "") + "have performed " + ACheckTypeString() + "landing on " + (targetBody == null ? "the target body" : targetBody.CleanDisplayName(true)); " is 196.
Long Statement,ContractConfigurator,FlyByRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ProgressCelestialBodyRequirement\FlyByRequirement.cs,RequirementText,The length of the statement  "            string output = "Must " + (invertRequirement ? "not " : "") + "have performed " + ACheckTypeString() + "flyby of " + (targetBody == null ? "the target body" : targetBody.CleanDisplayName(true)); " is 194.
Long Statement,ContractConfigurator,EscapeRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ProgressCelestialBodyRequirement\EscapeRequirement.cs,RequirementText,The length of the statement  "            string output = "Must " + (invertRequirement ? "not " : "") + "have performed " + AnCheckTypeString() + "escape from " + (targetBody == null ? "the target body" : targetBody.CleanDisplayName(true)); " is 198.
Long Statement,ContractConfigurator,DockingRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ProgressCelestialBodyRequirement\DockingRequirement.cs,RequirementText,The length of the statement  "            string output = "Must " + (invertRequirement ? "not " : "") + "have performed " + ACheckTypeString() + "docking near " + (targetBody == null ? "the target body" : targetBody.CleanDisplayName(true)); " is 198.
Long Statement,ContractConfigurator,BehaviourFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<CelestialBody>(configNode' "targetBody"' x => _targetBody = x' this' (CelestialBody)null); " is 125.
Long Statement,ContractConfigurator,TimerFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\TimerFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<Timer.TimerType>(configNode' "timerType"' x => timerType = x' this' Timer.TimerType.CONTRACT_ACCEPTANCE); " is 140.
Long Statement,ContractConfigurator,SequenceFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\SequenceFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<List<string>>(configNode' "hiddenParameter"' x => hiddenParameters = x' this' new List<string>()); " is 133.
Long Statement,ContractConfigurator,SequenceFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\SequenceFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<bool>(configNode' "failWhenCompleteOutOfOrder"' x => failWhenCompleteOutOfOrder = x' this' false); " is 133.
Long Statement,ContractConfigurator,HasResourceFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasResourceFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<double>(childNode' "minQuantity"' x => filter.minQuantity = x' this' 0.01' x => Validation.GE(x' 0.0)); " is 138.
Long Statement,ContractConfigurator,HasResourceFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasResourceFactory.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<double>(childNode' "maxQuantity"' x => filter.maxQuantity = x' this' double.MaxValue' x => Validation.GE(x' 0.0)); " is 149.
Long Statement,ContractConfigurator,HasCrewFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasCrewFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<int>(configNode' "minExperience"' x => minExperience = x' this' 0' x => Validation.Between(x' 0' 5)); " is 136.
Long Statement,ContractConfigurator,HasCrewFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasCrewFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxExperience"' x => maxExperience = x' this' 5' x => Validation.Between(x' 0' 5)); " is 136.
Long Statement,ContractConfigurator,HasCrewFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasCrewFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxCrew"' x => maxCrew = x' this' int.MaxValue' x => Validation.GE(x' minCrew)); " is 133.
Long Statement,ContractConfigurator,HasCrewFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasCrewFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<List<Kerbal>>(configNode' "excludeKerbal"' x => excludeKerbal = x' this' new List<Kerbal>()); " is 128.
Long Statement,ContractConfigurator,HasCrewFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasCrewFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.AtLeastOne(configNode' new string[] { "trait"' "minExperience"' "maxExperience"' "minCrew"' "maxCrew"' "kerbal" }' this); " is 145.
Long Statement,ContractConfigurator,HasCrewFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasCrewFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.MutuallyExclusive(configNode' new string[] { "trait"' "minExperience"' "maxExperience"' "minCrew"' "maxCrew" }' " is 135.
Long Statement,ContractConfigurator,VesselParameterGroupFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\VesselParameterGroupFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<List<VesselIdentifier>>(configNode' "vessel"' x => vesselList = x' this' new List<VesselIdentifier>()); " is 138.
Long Statement,ContractConfigurator,VesselParameterGroupFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\VesselParameterGroupFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<bool>(configNode' "dissassociateVesselsOnContractFailure"' x => dissassociateVesselsOnContractFailure = x' this' true); " is 154.
Long Statement,ContractConfigurator,VesselParameterGroupFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\VesselParameterGroupFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<bool>(configNode' "dissassociateVesselsOnContractCompletion"' x => dissassociateVesselsOnContractCompletion = x' this' false); " is 161.
Long Statement,ContractConfigurator,VesselParameterGroupFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\VesselParameterGroupFactory.cs,Generate,The length of the statement  "            return new Parameters.VesselParameterGroup(title' define' defineList' Vessel' duration.Value' dissassociateVesselsOnContractFailure' dissassociateVesselsOnContractCompletion' hideVesselName); " is 191.
Long Statement,ContractConfigurator,PartTestFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\PartTestFactory.cs,Generate,The length of the statement  "            return new PartTest(part' notes' PartTestConstraint.TestRepeatability.ONCEPERPART' targetBody' Vessel.Situations.LANDED' random.NextDouble().ToString()' false); " is 160.
Long Statement,ContractConfigurator,KerbalDeathsFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\KerbalDeathsFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<VesselIdentifier>(configNode' "vessel"' x => vessel = x' this' (VesselIdentifier)null); " is 122.
Long Statement,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,Start,The length of the statement  "            GameEvents.OnTechnologyResearched.Add(new EventData<GameEvents.HostTargetAction<RDTech' RDTech.OperationResult>>.OnEvent(OnTechResearched)); " is 140.
Long Statement,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,Destroy,The length of the statement  "            GameEvents.OnTechnologyResearched.Remove(new EventData<GameEvents.HostTargetAction<RDTech' RDTech.OperationResult>>.OnEvent(OnTechResearched)); " is 143.
Long Statement,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,Update,The length of the statement  "                        lastMessage = ScreenMessages.PostScreenMessage("Loading contract configuration (" + attemptedContracts + "/" + totalContracts + ")..."' Time.deltaTime' " is 151.
Long Statement,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,LoadContractTypeConfig,The length of the statement  "                    LoggingUtil.LogError(this' "Couldn't load CONTRACT_TYPE '" + contractConfig.GetValue("name") + "' due to a duplicate name."); " is 125.
Long Statement,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,LoadContractTypeConfig,The length of the statement  "            if (!reloading && LoggingUtil.logLevel == LoggingUtil.LogLevel.DEBUG || LoggingUtil.logLevel == LoggingUtil.LogLevel.VERBOSE) " is 125.
Long Statement,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,GetAllTypes,The length of the statement  "                    types = from type in assembly.GetTypes() where (type.IsSubclassOf(typeof(T)) || type.GetInterface(typeof(T).Name) != null) select type; " is 135.
Long Statement,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,CanAccept,The length of the statement  "            int activeCount = ContractSystem.Instance.Contracts.Count(c => c != null && c.Prestige == contract.Prestige && c.ContractState == Contract.State.Active && !c.AutoAccept); " is 170.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<Agent>(configNode' "agent"' x => agent = x' this' group != null ? group.agent : null); " is 121.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<float>(configNode' "minExpiry"' x => minExpiry = x' this' 5.0f' x => Validation.GE(x' 0.0f)); " is 128.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<float>(configNode' "maxExpiry"' x => maxExpiry = x' this' 100.0f' x => Validation.GE(x' minExpiry)); " is 135.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<float>(configNode' "deadline"' x => deadline = x' this' 0.0f' x => Validation.GE(x' 0.0f)); " is 126.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<List<Contract.ContractPrestige>>(configNode' "prestige"' x => prestige = x' this' new List<Contract.ContractPrestige>()); " is 156.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<CelestialBody>(configNode' "targetBody"' x => targetBody = x' this' (CelestialBody)null); " is 124.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxCompletions"' x => maxCompletions = x' this' 0' x => Validation.GE(x' 0)); " is 130.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxSimultaneous"' x => maxSimultaneous = x' this' (maxCompletions == 0 ? 4 : 0)' x => Validation.GE(x' 0)); " is 160.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,Load,The length of the statement  "                    LoggingUtil.LogWarning(this' ErrorPrefix() + ": The weight attribute is deprecated as of Contract Configurator 1.15.0.  Contracts are no longer generated using a weighted system."); " is 181.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,Load,The length of the statement  "                    LoggingUtil.Log(minVersion >= ContractConfigurator.ENHANCED_UI_VERSION ? LoggingUtil.LogLevel.ERROR : LoggingUtil.LogLevel.WARNING' this' " is 137.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,Load,The length of the statement  "                        ErrorPrefix() + ": The field 'genericTitle' is required when the title is not determistic (ie. when expressions are used)."); " is 125.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,Load,The length of the statement  "                valid &= ConfigNodeUtil.ParseValue<string>(configNode' "genericDescription"' x => genericDescription = x' this' description); " is 125.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,Load,The length of the statement  "                    LoggingUtil.Log(minVersion >= ContractConfigurator.ENHANCED_UI_VERSION ? LoggingUtil.LogLevel.ERROR : LoggingUtil.LogLevel.WARNING' this' " is 137.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,Load,The length of the statement  "                        ErrorPrefix() + ": The field 'genericDescription' is required when the description is not determistic (ie. when expressions are used)."); " is 137.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,Load,The length of the statement  "                    string[] dirComponents = new string[] { KSPUtil.ApplicationRootPath' "GameData"' "ContractConfigurator"' "log"' (group == null ? "!NO_GROUP" : group.Root.name) }; " is 162.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,ParseDataExpandString,The length of the statement  "                LoggingUtil.LogError(this' ErrorPrefix() + ": Values captured in a DATA_EXPAND node must be deterministic (the value needs to be fixed when loaded on game startup."); " is 166.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,MeetBasicRequirements,The length of the statement  "                LoggingUtil.LogLevel level = contract.ContractState == Contract.State.Active ? LoggingUtil.LogLevel.INFO : contract.contractType != null ? LoggingUtil.LogLevel.DEBUG : LoggingUtil.LogLevel.VERBOSE; " is 197.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,MeetExtendedRequirements,The length of the statement  "                if (contract.contractType == null || contract.ContractState == Contract.State.Generated || contract.ContractState == Contract.State.Withdrawn) " is 142.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,MeetExtendedRequirements,The length of the statement  "                    foreach (KeyValuePair<string' DataNode.UniquenessCheck> pair in uniquenessChecks.Where(p => contract.uniqueData.ContainsKey(p.Key))) " is 132.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,MeetExtendedRequirements,The length of the statement  "                        if (uniquenessCheck == DataNode.UniquenessCheck.CONTRACT_ALL || uniquenessCheck == DataNode.UniquenessCheck.CONTRACT_ACTIVE) " is 124.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,MeetExtendedRequirements,The length of the statement  "                            contractList = contractList.Where(c => c.contractType.group != null && c.contractType.group.name == contractType.group.name); " is 125.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,MeetExtendedRequirements,The length of the statement  "                if (!ContractRequirement.RequirementsMet(contract' this' contract.requirements != null ? contract.requirements : requirements)) " is 127.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,MeetExtendedRequirements,The length of the statement  "                LoggingUtil.LogLevel level = contract.ContractState == Contract.State.Active ? LoggingUtil.LogLevel.INFO : contract.contractType != null ? LoggingUtil.LogLevel.DEBUG : LoggingUtil.LogLevel.VERBOSE; " is 197.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,CheckContractGroup,The length of the statement  "                if (!((ContractGroupParametersTemplate)HighLogic.CurrentGame.Parameters.CustomParams(SettingsBuilder.GroupParametersType)).IsEnabled(group.Root.name)) " is 150.
Long Statement,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,CheckContractGroup,The length of the statement  "                    int finishedContracts = ConfiguredContract.CompletedContracts.Count(c => c.contractType != null && group.BelongsToGroup(c.contractType)); " is 137.
Long Statement,ContractConfigurator,ConfiguredContract,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ConfiguredContract.cs,Initialize,The length of the statement  "                SetFunds(contractType.advanceFunds' contractType.rewardFunds' contractType.advanceFunds + contractType.failureFunds' contractType.targetBody); " is 142.
Long Statement,ContractConfigurator,ConfiguredContract,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ConfiguredContract.cs,Initialize,The length of the statement  "                    description = TextGen.GenerateBackStories("ConfiguredContract"' agent.Name' contractType.topic' contractType.subject' random.Next()' true' true' true); " is 151.
Long Statement,ContractConfigurator,ConfiguredContract,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ConfiguredContract.cs,OnLoad,The length of the statement  "                description = ConfigNodeUtil.ParseValue<string>(node' "description"' contractType != null ? contractType.description : ""); " is 123.
Long Statement,ContractConfigurator,ConfiguredContract,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ConfiguredContract.cs,OnLoad,The length of the statement  "                completedMessage = ConfigNodeUtil.ParseValue<string>(node' "completedMessage"' contractType != null ? contractType.completedMessage : ""); " is 138.
Long Statement,ContractConfigurator,ConfiguredContract,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ConfiguredContract.cs,OnUnregister,The length of the statement  "            ContractConfigurator.OnParameterChange.Remove(new EventData<Contract' ContractParameter>.OnEvent(OnParameterStateChange)); " is 122.
Long Statement,ContractConfigurator,ParameterFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<float>(configNode' "rewardFunds"' x => rewardFunds = x' this' 0.0f' x => Validation.GE(x' 0.0f)); " is 132.
Long Statement,ContractConfigurator,ParameterFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<float>(configNode' "rewardReputation"' x => rewardReputation = x' this' 0.0f' x => Validation.GE(x' 0.0f)); " is 142.
Long Statement,ContractConfigurator,ParameterFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<float>(configNode' "rewardScience"' x => rewardScience = x' this' 0.0f' x => Validation.GE(x' 0.0f)); " is 136.
Long Statement,ContractConfigurator,ParameterFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<float>(configNode' "failureFunds"' x => failureFunds = x' this' 0.0f' x => Validation.GE(x' 0.0f)); " is 134.
Long Statement,ContractConfigurator,ParameterFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<float>(configNode' "failureReputation"' x => failureReputation = x' this' 0.0f' x => Validation.GE(x' 0.0f)); " is 144.
Long Statement,ContractConfigurator,ParameterFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<bool?>(configNode' "disableOnStateChange"' x => disableOnStateChange = x' this' (bool?)null); " is 128.
Long Statement,ContractConfigurator,ParameterFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<string>(configNode' "completedMessage"' x => completedMessage = x' this' (string)null); " is 122.
Long Statement,ContractConfigurator,ParameterFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory.cs,Generate,The length of the statement  "                LoggingUtil.LogVerbose(typeof(ParameterFactory)' "Returning null for " + contract.contractType.name + "." + name + ": requirements not met."); " is 142.
Long Statement,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseValue,The length of the statement  "                    BindingFlags.Static | BindingFlags.Public' null' new Type[] { typeof(ConfigNode)' typeof(string)' typeof(bool) }' null); " is 120.
Long Statement,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseSingleValue,The length of the statement  "                value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetSubjectByID(stringValue) : null); " is 121.
Long Statement,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseSingleValue,The length of the statement  "                value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetExperiment(stringValue) : null); " is 120.
Long Statement,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseSingleValue,The length of the statement  "                    throw new ArgumentException("Invalid color code '" + stringValue + "': Must be # followed by 6 or 8 hex digits (ARGB or RGB)."); " is 128.
Long Statement,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseValue,The length of the statement  "                                LoggingUtil.LogError(obj' obj.ErrorPrefix(configNode) + ": A validation error occured while loading the key '" + key + "' with value '" + value + "'."); " is 152.
Long Statement,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseValue,The length of the statement  "                            LoggingUtil.LogError(obj' obj.ErrorPrefix(configNode) + ": A validation error occured while loading the key '" + key + "' with value '" + value + "'."); " is 152.
Long Statement,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseValue,The length of the statement  "                        LoggingUtil.LogVerbose(typeof(ConfigNodeUtil)' "Trying to load " + path + "' but " + dependency + " is uninitialized."); " is 120.
Long Statement,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseValue,The length of the statement  "                    currentDataNode.DeferredLoads.Add(new DeferredLoadObject<T>(configNode' key' setter' obj' validation' currentDataNode)); " is 120.
Long Statement,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,MutuallyExclusive,The length of the statement  "                LoggingUtil.LogError(obj' obj.ErrorPrefix(configNode) + ": The values " + group1String + " and " + group2String + " are mutually exclusive."); " is 142.
Long Statement,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,UpdateNonDeterministicValuesIterator,The length of the statement  "                foreach (DeferredLoadBase loadObj in node.DeferredLoads.Where(dl => startWith == null || dl.dataNode.IsChildOf(startWith))) " is 123.
Long Statement,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseCelestialBodyValue,The length of the statement  "            CelestialBody result = FlightGlobals.Bodies.Where(cb => cb.name == celestialName || cb.CleanDisplayName() == celestialName).FirstOrDefault(); " is 141.
Long Statement,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ValidateUnexpectedValues,The length of the statement  "                    child.name == "ORBIT" && (obj is Behaviour.OrbitGeneratorFactory || obj is Behaviour.SpawnVesselFactory || obj is Behaviour.SpawnKerbalFactory)) " is 144.
Long Statement,ContractConfigurator,DeferredLoadUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,LogCircularDependencyError,The length of the statement  "                LoggingUtil.LogError(loadObj.obj' loadObj.obj.ErrorPrefix(loadObj.configNode) + ": Error parsing " + loadObj.key + ": " + " is 121.
Long Statement,ContractConfigurator,CollectScienceFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\CollectScienceFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<ExperimentSituations?>(configNode' "situation"' x => situation = x' this' (ExperimentSituations?)null); " is 138.
Long Statement,ContractConfigurator,CollectScienceFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\CollectScienceFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<BodyLocation?>(configNode' "location"' x => location = x' this' (BodyLocation?)null); " is 120.
Long Statement,ContractConfigurator,CollectScienceFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\CollectScienceFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<List<ScienceExperiment>>(configNode' "experiment"' x => experiment = x' this' new List<ScienceExperiment>()' x => " is 148.
Long Statement,ContractConfigurator,CollectScienceFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\CollectScienceFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<ScienceRecoveryMethod>(configNode' "recoveryMethod"' x => recoveryMethod = x' this' ScienceRecoveryMethod.None); " is 147.
Long Statement,ContractConfigurator,CollectScienceFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\CollectScienceFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.ParseValue<List<ScienceSubject>>(configNode' "subject"' x => subjects = x' this' new List<ScienceSubject>()); " is 133.
Long Statement,ContractConfigurator,CollectScienceFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\CollectScienceFactory.cs,Load,The length of the statement  "            valid &= ConfigNodeUtil.MutuallyExclusive(configNode' new string[] { "subject" }' new string[] { "biome"' "situation"' "location"' "experiment" }' this); " is 153.
Long Statement,ContractConfigurator,CollectScienceFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\CollectScienceFactory.cs,Load,The length of the statement  "                    LoggingUtil.LogError(this' ErrorPrefix(configNode) + ": When using 'subject'' the subjects must all have the same biome."); " is 123.
Long Statement,ContractConfigurator,CollectScienceFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\CollectScienceFactory.cs,Load,The length of the statement  "                    LoggingUtil.LogError(this' ErrorPrefix(configNode) + ": When using 'subject'' the subjects must all have the same experiment situation."); " is 138.
Long Statement,ContractConfigurator,CollectScienceFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\CollectScienceFactory.cs,Generate,The length of the statement  "                return new CollectScienceCustom(biome == null ? targetBody : biome.body' biome == null ? "" : biome.biome' situation' location' " is 127.
Long Statement,ContractConfigurator,ContractVesselTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractVesselTracker.cs,OnLoad,The length of the statement  "                ExceptionLogWindow.DisplayFatalException(ExceptionLogWindow.ExceptionSituation.SCENARIO_MODULE_LOAD' e' "ContractVesselTracker"); " is 129.
Long Statement,ContractConfigurator,ContractVesselTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractVesselTracker.cs,OnSave,The length of the statement  "                                LoggingUtil.LogVerbose(this' "Setting hash for " + vi.id + " on save from " + vi.hash + " to " + hashes.FirstOrDefault()); " is 122.
Long Statement,ContractConfigurator,ContractVesselTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractVesselTracker.cs,OnSave,The length of the statement  "                ExceptionLogWindow.DisplayFatalException(ExceptionLogWindow.ExceptionSituation.SCENARIO_MODULE_SAVE' e' "ContractVesselTracker"); " is 129.
Long Statement,ContractConfigurator,ContractDisabler,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ContractDisabler.cs,SetContractState,The length of the statement  "                    LoggingUtil.LogDebug(typeof(ContractDisabler)' "Disabling ContractType: " + contractType.FullName + " (" + contractType.Module + ")"); " is 134.
Long Statement,ContractConfigurator,ContractDisabler,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ContractDisabler.cs,SetContractState,The length of the statement  "                    LoggingUtil.LogDebug(typeof(ContractDisabler)' "Enabling ContractType: " + contractType.FullName + " (" + contractType.Module + ")"); " is 133.
Long Statement,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistanceToWaypoint,The length of the statement  "                Vector3d radialVector = new Vector3d(Math.Cos(latRads) * Math.Cos(lonRads)' Math.Sin(latRads)' Math.Cos(latRads) * Math.Sin(lonRads)); " is 134.
Long Statement,ContractConfigurator.ExpressionParser,PQSCityParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\PQSCityParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<PQSCity>("KSC"' () => FlightGlobals.Bodies.Where(cb => cb.isHomeWorld).First().GetComponentsInChildren<PQSCity>(true).Where(city => city.name == "KSC").First())); " is 198.
Long Statement,ContractConfigurator.ExpressionParser,TechParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\TechParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<List<Tech>>("UnlockedTech"' () => Tech.AllTech().Where(t => t.IsUnlocked()).ToList()' false)); " is 130.
Long Statement,ContractConfigurator.ExpressionParser,ExperimentParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\Science\ExperimentParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<List<ScienceExperiment>>("AllExperiments"' () => ResearchAndDevelopment.Instance == null ? new List<ScienceExperiment>() : " is 158.
Long Statement,ContractConfigurator.ExpressionParser,ExperimentParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\Science\ExperimentParser.cs,RegisterMethods,The length of the statement  "                ResearchAndDevelopment.GetExperimentIDs().Select<string' ScienceExperiment>(ResearchAndDevelopment.GetExperiment).ToList()' false)); " is 132.
Long Statement,ContractConfigurator.ExpressionParser,ExperimentParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\Science\ExperimentParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<CelestialBody' List<ScienceExperiment>>("AvailableExperiments"' (cb) => Util.Science.AvailableExperiments(cb).ToList()' false)); " is 164.
Long Statement,ContractConfigurator.ExpressionParser,SubjectParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\Science\SubjectParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<ScienceSubject' float>("RemainingScience"' subj => subj == null ? 0.0f : subj.scienceCap * HighLogic.CurrentGame.Parameters.Career.ScienceGainMultiplier - subj.science)); " is 196.
Long Statement,ContractConfigurator.ExpressionParser,SubjectParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\Science\SubjectParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<ScienceSubject' float>("TotalScience"' subj => subj == null ? 0.0f : subj.scienceCap * HighLogic.CurrentGame.Parameters.Career.ScienceGainMultiplier)); " is 177.
Long Statement,ContractConfigurator.ExpressionParser,SubjectParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\Science\SubjectParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<List<ScienceSubject>>("AllScienceSubjects"' () => Science.GetSubjects(FlightGlobals.Bodies).ToList()' false)); " is 146.
Long Statement,ContractConfigurator.ExpressionParser,SubjectParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\Science\SubjectParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<List<CelestialBody>' List<ScienceSubject>>("AllScienceSubjectsByBody"' (cbs) => Science.GetSubjects(cbs).ToList()' false)); " is 159.
Long Statement,ContractConfigurator.ExpressionParser,SubjectParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\Science\SubjectParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<List<ScienceExperiment>' List<ScienceSubject>>("AllScienceSubjectsByExperiment"' (exps) => Science.GetSubjects(FlightGlobals.Bodies' x => exps.Contains(x)).ToList()' false)); " is 210.
Long Statement,ContractConfigurator.ExpressionParser,SubjectParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\Science\SubjectParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<List<Biome>' List<ScienceSubject>>("AllScienceSubjectsByBiome"' (biomes) => Science.GetSubjects(biomes.GroupBy(b => b != null ? b.body : null).Select(grp => grp.First() != null ? grp.First().body : null)' null' x => biomes.Any(b => b.biome == x)).ToList()' false)); " is 301.
Long Statement,ContractConfigurator.ExpressionParser,SubjectParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\Science\SubjectParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<List<CelestialBody>' List<ScienceExperiment>' List<ScienceSubject>>("AllScienceSubjectsByBodyExperiment"' (cbs' exps) => Science.GetSubjects(cbs' x => exps.Contains(x)).ToList()' false)); " is 223.
Long Statement,ContractConfigurator.ExpressionParser,SubjectParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\Science\SubjectParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<List<Biome>' List<ScienceExperiment>' List<ScienceSubject>>("AllScienceSubjectsByBiomeExperiment"' (biomes' exps) => Science.GetSubjects(biomes.GroupBy(b => b.body).Select(grp => grp.First().body)' x => exps.Contains(x)' x => biomes.Any(b => b.biome == x)).ToList()' false)); " is 311.
Long Statement,ContractConfigurator.ExpressionParser,SubjectParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\Science\SubjectParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<List<ScienceSubject>>("DifficultScienceSubjects"' () => Science.GetSubjects(FlightGlobals.Bodies' null' null' true).ToList()' false)); " is 170.
Long Statement,ContractConfigurator.ExpressionParser,SubjectParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\Science\SubjectParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<List<CelestialBody>' List<ScienceSubject>>("DifficultScienceSubjectsByBody"' (cbs) => Science.GetSubjects(cbs' null' null' true).ToList()' false)); " is 183.
Long Statement,ContractConfigurator.ExpressionParser,BiomeParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\Science\BiomeParser.cs,RegisterMethods,The length of the statement  "                new List<Location>() : BiomeTracker.GetDifficultLocations(biome.body' biome.biome).Select(v => new Location(biome.body' v.y' v.x)).ToList())); " is 142.
Long Statement,ContractConfigurator.ExpressionParser,PartParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\PartParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<AvailablePart' float>("MassWet"' p => p == null ? 0.0f : p.partPrefab.mass + p.partPrefab.GetResourceMass())); " is 136.
Long Statement,ContractConfigurator.ExpressionParser,PartParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\PartParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<AvailablePart' bool>("IsUnlocked"' p => p == null ? false : ResearchAndDevelopment.PartModelPurchased(p)' false)); " is 140.
Long Statement,ContractConfigurator.ExpressionParser,PrestigeParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\PrestigeParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<Contract.ContractPrestige' double>("Multiplier"' p => GameVariables.Instance.GetContractPrestigeFactor(p))); " is 134.
Long Statement,ContractConfigurator.ExpressionParser,PrestigeParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\PrestigeParser.cs,RegisterMethods,The length of the statement  "                ConfiguredContract.currentContract != null ? ConfiguredContract.currentContract.Prestige : Contract.ContractPrestige.Trivial' false)); " is 134.
Long Statement,ContractConfigurator.ExpressionParser,PrestigeParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\PrestigeParser.cs,ContractMultiplier,The length of the statement  "            return parser.ParseExpression(currentParser.currentKey' "Prestige().Multiplier() * @/targetBody.Multiplier()"' currentParser.currentDataNode); " is 142.
Long Statement,ContractConfigurator.ExpressionParser,KerbalParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\KerbalParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<Kerbal' ProtoCrewMember.RosterStatus>("RosterStatus"' k => k == null ? ProtoCrewMember.RosterStatus.Dead : k.rosterStatus)); " is 150.
Long Statement,ContractConfigurator.ExpressionParser,KerbalParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\KerbalParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<Kerbal' ProtoCrewMember.KerbalType>("Type"' k => k == null ? ProtoCrewMember.KerbalType.Applicant : k.kerbalType)); " is 141.
Long Statement,ContractConfigurator.ExpressionParser,KerbalParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\KerbalParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<Kerbal' ProtoCrewMember.Gender>("Gender"' k => k == null ? ProtoCrewMember.Gender.Male : k.gender)); " is 126.
Long Statement,ContractConfigurator.ExpressionParser,KerbalParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\KerbalParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<List<Kerbal>>("AllKerbals"' () => HighLogic.CurrentGame == null ? new List<Kerbal>() : " is 122.
Long Statement,ContractConfigurator.ExpressionParser,KerbalParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\KerbalParser.cs,RegisterMethods,The length of the statement  "                HighLogic.CurrentGame.CrewRoster.AllKerbals().Select<ProtoCrewMember' Kerbal>(pcm => new Kerbal(pcm)).ToList()' false)); " is 120.
Long Statement,ContractConfigurator.ExpressionParser,KerbalParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\KerbalParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<ProtoCrewMember.Gender' string>("RandomKerbalName"' g => Kerbal.KerbalName(g)' false)); " is 123.
Long Statement,ContractConfigurator.ExpressionParser,KerbalParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\KerbalParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<ProtoCrewMember.Gender' string' Kerbal>("NewKerbal"' (g' n) => new Kerbal(g' n)' false)); " is 125.
Long Statement,ContractConfigurator.ExpressionParser,KerbalParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\KerbalParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<ProtoCrewMember.Gender' string' string' Kerbal>("NewKerbal"' (g' n' t) => new Kerbal(g' n' t)' false)); " is 139.
Long Statement,ContractConfigurator.ExpressionParser,KerbalParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\KerbalParser.cs,NextKerbalHireCost,The length of the statement  "            CurrencyModifierQuery currencyModifierQuery = CurrencyModifierQuery.RunQuery(TransactionReasons.CrewRecruited' -GameVariables.Instance.GetRecruitHireCost(HighLogic.CurrentGame.CrewRoster.GetActiveCrewCount()) * " is 210.
Long Statement,ContractConfigurator.ExpressionParser,VesselParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\VesselParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<Vessel' VesselType>("VesselType"' v => v == null ? VesselType.Unknown : v.vesselType' false)); " is 120.
Long Statement,ContractConfigurator.ExpressionParser,VesselParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\VesselParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<Vessel' Resource' double>("ResourceQuantity"' (v' r) => v == null || r == null ? 0.0 : v.ResourceQuantity(r.res)' false)); " is 148.
Long Statement,ContractConfigurator.ExpressionParser,VesselParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\VesselParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<Vessel' Resource' double>("ResourceCapacity"' (v' r) => v == null || r == null ? 0.0 : v.ResourceCapacity(r.res)' false)); " is 148.
Long Statement,ContractConfigurator.ExpressionParser,VesselParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\VesselParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<Vessel' Location>("Location"' v => v == null ? null : new Location(v.mainBody' v.latitude' v.longitude)' false)); " is 139.
Long Statement,ContractConfigurator.ExpressionParser,VesselParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\VesselParser.cs,GetXDimension,The length of the statement  "            return v.protoVessel.protoPartSnapshots.Max(p => p.position.x) - v.protoVessel.protoPartSnapshots.Min(p => p.position.x); " is 121.
Long Statement,ContractConfigurator.ExpressionParser,VesselParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\VesselParser.cs,GetYDimension,The length of the statement  "            return v.protoVessel.protoPartSnapshots.Max(p => p.position.y) - v.protoVessel.protoPartSnapshots.Min(p => p.position.y); " is 121.
Long Statement,ContractConfigurator.ExpressionParser,VesselParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\VesselParser.cs,GetZDimension,The length of the statement  "            return v.protoVessel.protoPartSnapshots.Max(p => p.position.z) - v.protoVessel.protoPartSnapshots.Min(p => p.position.z); " is 121.
Long Statement,ContractConfigurator.ExpressionParser,VesselParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\VesselParser.cs,GetApA,The length of the statement  "            LoggingUtil.LogWarning(typeof(VesselParser)' "Vessel.OrbitApoapsis() is deprecated as of Contract Configurator 1.9.6.  Please use Vessel.Orbit().Apoapsis() instead."); " is 167.
Long Statement,ContractConfigurator.ExpressionParser,VesselParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\VesselParser.cs,GetPeA,The length of the statement  "            LoggingUtil.LogWarning(typeof(VesselParser)' "Vessel.OrbitPeriapsis() is deprecated as of Contract Configurator 1.9.6.  Please use Vessel.Orbit().Periapsis() instead."); " is 169.
Long Statement,ContractConfigurator.ExpressionParser,VesselParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\VesselParser.cs,GetInclination,The length of the statement  "            LoggingUtil.LogWarning(typeof(VesselParser)' "Vessel.OrbitInclination() is deprecated as of Contract Configurator 1.9.6.  Please use Vessel.Orbit().Inclination() instead."); " is 173.
Long Statement,ContractConfigurator.ExpressionParser,VesselParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\VesselParser.cs,GetEccentricity,The length of the statement  "            LoggingUtil.LogWarning(typeof(VesselParser)' "Vessel.OrbitEccentricity() is deprecated as of Contract Configurator 1.9.6.  Please use Vessel.Orbit().Eccentricity() instead."); " is 175.
Long Statement,ContractConfigurator.ExpressionParser,ListExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\ListExpressionParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<List<T>' T>("Random"' l => l == null || !l.Any() ? default(T) : l.Skip(r.Next(l.Count)).First()' false)); " is 131.
Long Statement,ContractConfigurator.ExpressionParser,ListExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\ListExpressionParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<List<T>' T' List<T>>("Add"' (l' v) => { if (l == null) { l = new List<T>(); } l.ToList().Add(v); return l; })); " is 137.
Long Statement,ContractConfigurator.ExpressionParser,ListExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\ListExpressionParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<List<T>' T' List<T>>("Exclude"' (l' v) => { if (l != null) { l = l.ToList(); l.Remove(v); }  return l; })); " is 133.
Long Statement,ContractConfigurator.ExpressionParser,ListExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\ListExpressionParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<List<T>' List<T>' List<T>>("ExcludeAll"' (l' l2) => { if (l != null) { l = l.ToList(); if (l2 != null) { l.RemoveAll(x => l2.Contains(x)); } } return l; })); " is 183.
Long Statement,ContractConfigurator.ExpressionParser,ListExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\ListExpressionParser.cs,SelectUnique,The length of the statement  "            DataNode.UniquenessCheck uniquenessCheck = contractType.uniquenessChecks.ContainsKey(key) ? contractType.uniquenessChecks[key] : DataNode.UniquenessCheck.NONE; " is 159.
Long Statement,ContractConfigurator.ExpressionParser,ListExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\ListExpressionParser.cs,SelectUnique,The length of the statement  "            if (dataNode != null && dataNode.IsDeterministic(key) && (uniquenessCheck == DataNode.UniquenessCheck.CONTRACT_ALL || uniquenessCheck == DataNode.UniquenessCheck.CONTRACT_ACTIVE)) " is 179.
Long Statement,ContractConfigurator.ExpressionParser,ListExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\ListExpressionParser.cs,SelectUnique,The length of the statement  "                LoggingUtil.LogWarning(factory' factory.ErrorPrefix() + ": Consider using a DATA_EXPAND node instead of the SelectUnique function when the values are deterministic - this will cause the player to see the full set of values in mission control before the contract is offered."); " is 276.
Long Statement,ContractConfigurator.ExpressionParser,ListExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\ListExpressionParser.cs,SelectUnique,The length of the statement  "                throw new NotSupportedException("The SelectUnique method can only be used in DATA nodes with the uniquenessCheck attribute set."); " is 130.
Long Statement,ContractConfigurator.ExpressionParser,ListExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\ListExpressionParser.cs,SelectUnique,The length of the statement  "            if (uniquenessCheck == DataNode.UniquenessCheck.CONTRACT_ALL || uniquenessCheck == DataNode.UniquenessCheck.CONTRACT_ACTIVE) " is 124.
Long Statement,ContractConfigurator.ExpressionParser,ListExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\ListExpressionParser.cs,SelectUnique,The length of the statement  "                contractList = contractList.Where(c => c.contractType.group != null && c.contractType.group.name == contractType.group.name); " is 125.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<CelestialBody' bool>("IsOrbitalSurveyComplete"' cb => cb != null && ResourceScenario.Instance != null && " is 130.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "                ResourceScenario.Instance.gameSettings.GetPlanetScanInfo().Where(psd => psd.PlanetId == cb.flightGlobalsIndex).Any()' false)); " is 126.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<CelestialBody' bool>("HaveReturnedFrom"' cb => IsReached(cb' ProgressItem.RETURNED_FROM)' false)); " is 124.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<CelestialBody' bool>("CanHaveKolniyaOrbit"' cb => cb != null && CelestialUtilities.CanBodyBeKolniya(cb))); " is 132.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<CelestialBody' double' bool>("CanHaveSynchronousOrbit"' (cb' ecc) => cb != null && CelestialUtilities.CanBodyBeSynchronous(cb' ecc))); " is 160.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<CelestialBody' bool>("CanHaveTundraOrbit"' cb => cb != null && CelestialUtilities.CanBodyBeTundra(cb))); " is 130.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<CelestialBody' float>("FlyingAltitudeThreshold"' cb => cb != null ? cb.scienceValues.flyingAltitudeThreshold : 0.0f)); " is 144.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<CelestialBody' float>("SpaceAltitudeThreshold"' cb => cb != null ? cb.scienceValues.spaceAltitudeThreshold : 0.0f)); " is 142.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<CelestialBody' double>("SemiMajorAxis"' cb => cb != null && cb.orbit != null ? cb.orbit.semiMajorAxis : 0.0)); " is 136.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<CelestialBody' List<CelestialBody>>("Children"' cb => cb != null ? cb.orbitingBodies.ToList() : new List<CelestialBody>())); " is 150.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<CelestialBody' List<PQSCity>>("PQSCities"' cb => cb != null ? cb.GetComponentsInChildren<PQSCity>(true).ToList() : new List<PQSCity>())); " is 163.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<CelestialBody' double>("Multiplier"' cb => cb != null ? GameVariables.Instance.GetContractDestinationWeight(cb) : 1.0)); " is 146.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<CelestialBody' double>("RemoteTechCoverage"' cb => cb != null ? RemoteTechCoverage(cb) : 0.0d' false)); " is 129.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<CelestialBody>("HomeWorld"' () => FlightGlobals.Bodies.Where(cb => cb.isHomeWorld).First())); " is 129.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<List<CelestialBody>>("AllBodies"' () => FlightGlobals.Bodies.Where(cb => cb != null && cb.Radius >= BARYCENTER_THRESHOLD).ToList())); " is 169.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<List<CelestialBody>>("OrbitedBodies"' () => BodiesForItem(ProgressItem.ORBITED).ToList()' false)); " is 134.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<List<CelestialBody>>("LandedBodies"' () => BodiesForItem(ProgressItem.LANDED).ToList()' false)); " is 132.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<List<CelestialBody>>("EscapedBodies"' () => BodiesForItem(ProgressItem.ESCAPED).ToList()' false)); " is 134.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<List<CelestialBody>>("ReachedBodies"' () => BodiesForItem(ProgressItem.REACHED).ToList()' false)); " is 134.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<List<CelestialBody>>("ReturnedFromBodies"' () => BodiesForItem(ProgressItem.RETURNED_FROM).ToList()' false)); " is 145.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<CelestialBody>("NextUnreachedBody"' () => FinePrint.Utilities.ProgressUtilities.GetNextUnreached(1).FirstOrDefault()' false)); " is 162.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RegisterMethods,The length of the statement  "            RegisterGlobalFunction(new Function<int' List<CelestialBody>>("NextUnreachedBodies"' (count) => FinePrint.Utilities.ProgressUtilities.GetNextUnreached(count)' false)); " is 167.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,IsReached,The length of the statement  "            CelestialBodySubtree tree = ProgressTracking.Instance.celestialBodyNodes.Where(node => node.Body == cb).FirstOrDefault(); " is 121.
Long Statement,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,RemoteTechCoverage,The length of the statement  "            Type rtProgressTracker = Util.Version.CC_RemoteTechAssembly.GetType("ContractConfigurator.RemoteTech.RemoteTechProgressTracker"); " is 129.
Long Statement,ContractConfigurator.ExpressionParser,DataNode,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\DataNode.cs,DebugString,The length of the statement  "                        nodeResults += (applyFormatting ? "<color=lime>" : "") + "    " + prefix + pair.Key + (applyFormatting ? "</color>" : "") + " = " + OutputValue(pair.Value.value) + " is 163.
Long Statement,ContractConfigurator.ExpressionParser,DataNode,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\DataNode.cs,ParseDataNodes,The length of the statement  "                    LoggingUtil.LogWarning(this' "The use of uniqueValue and activeUniqueValue is obsolete since Contract Configurator 1.9.0' use uniquenessCheck instead."); " is 153.
Long Statement,ContractConfigurator.ExpressionParser,DataNode,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\DataNode.cs,ParseDataNodes,The length of the statement  "                    uniquenessCheck = activeUniqueValue ? UniquenessCheck.CONTRACT_ACTIVE : uniqueValue ? UniquenessCheck.CONTRACT_ALL : UniquenessCheck.NONE; " is 138.
Long Statement,ContractConfigurator.ExpressionParser,DataNode,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\DataNode.cs,ParseDataNodes,The length of the statement  "                    valid &= ConfigNodeUtil.ParseValue<UniquenessCheck>(data' "uniquenessCheck"' x => uniquenessCheck = x' obj' UniquenessCheck.NONE); " is 130.
Long Statement,ContractConfigurator.ExpressionParser,DataNode,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\DataNode.cs,ParseDataNodes,The length of the statement  "                        if (name != "type" && name != "title" && name != "hidden" && name != "requiredValue" && name != "uniqueValue" && name != "activeUniqueValue" && name != "uniquenessCheck" && name != "isLiteral") " is 193.
Long Statement,ContractConfigurator.ExpressionParser,DataNode,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\DataNode.cs,ParseDataNodes,The length of the statement  "                            if (!data.HasValue("title") && requiredValue && !IsDeterministic(name) && !hidden && !doneTitleWarning && !dataValues[name].IsIgnoredType()) " is 140.
Long Statement,ContractConfigurator.ExpressionParser,DataNode,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\DataNode.cs,ParseDataNodes,The length of the statement  "                                LoggingUtil.Log(obj.minVersion >= ContractConfigurator.ENHANCED_UI_VERSION ? LoggingUtil.LogLevel.ERROR : LoggingUtil.LogLevel.WARNING' this' " is 141.
Long Statement,ContractConfigurator.ExpressionParser,DataNode,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\DataNode.cs,ParseDataNodes,The length of the statement  "                                    obj.ErrorPrefix() + ": " + name + ": The field 'title' is required in for data node values where 'requiredValue' is true.  Alternatively' the attribute 'hidden' can be set to true (but be careful - this can cause player confusion if all lines for the contract type show as 'Met' and the contract isn't generating)."); " is 317.
Long Statement,ContractConfigurator.ExpressionParser,DataNode,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\DataNode.cs,NodeForKey,The length of the statement  "                throw new ArgumentException("Key value '" + key + "' is invalid' can only have one namespace preceeded by a colon (:)."); " is 121.
Long Statement,ContractConfigurator.ExpressionParser,NumericValueExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,RegisterMethods,The length of the statement  "                RegisterGlobalFunction(new Function<float>("Reputation"' () => Reputation.Instance != null ? Reputation.Instance.reputation : 0.0f' false)); " is 140.
Long Statement,ContractConfigurator.ExpressionParser,NumericValueExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,RegisterMethods,The length of the statement  "                RegisterGlobalFunction(new Function<float>("StartingReputation"' () => HighLogic.CurrentGame != null ? HighLogic.CurrentGame.Parameters.Career.StartingReputation : 0.0f' false)); " is 178.
Long Statement,ContractConfigurator.ExpressionParser,NumericValueExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,RegisterMethods,The length of the statement  "                RegisterGlobalFunction(new Function<float>("Science"' () => ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.Instance.Science : 0.0f' false)); " is 158.
Long Statement,ContractConfigurator.ExpressionParser,NumericValueExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,RegisterMethods,The length of the statement  "                RegisterGlobalFunction(new Function<float>("StartingScience"' () => HighLogic.CurrentGame != null ? HighLogic.CurrentGame.Parameters.Career.StartingScience : 0.0f' false)); " is 172.
Long Statement,ContractConfigurator.ExpressionParser,NumericValueExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,RegisterMethods,The length of the statement  "                RegisterGlobalFunction(new Function<double>("Funds"' () => Funding.Instance != null ? Funding.Instance.Funds : 0.0' false)); " is 124.
Long Statement,ContractConfigurator.ExpressionParser,NumericValueExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,RegisterMethods,The length of the statement  "                RegisterGlobalFunction(new Function<double>("StartingFunds"' () => HighLogic.CurrentGame != null ? HighLogic.CurrentGame.Parameters.Career.StartingFunds : 0.0' false)); " is 168.
Long Statement,ContractConfigurator.ExpressionParser,NumericValueExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,ParseNumericConstant,The length of the statement  "                    val = (T)(object)Single.Parse(strVal' System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.AllowExponent); " is 129.
Long Statement,ContractConfigurator.ExpressionParser,NumericValueExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,ParseNumericConstant,The length of the statement  "                    val = (T)(object)Double.Parse(strVal' System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.AllowExponent); " is 129.
Long Statement,ContractConfigurator.ExpressionParser,NumericValueExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,ParseIdentifier,The length of the statement  "                    LoggingUtil.LogWarning(this' "Unable to retrieve value for '" + token.sval + "' - PersistentDataStore is null.  This is likely caused by another ScenarioModule crashing' preventing others from loading."); " is 204.
Long Statement,ContractConfigurator.ExpressionParser,StringExpressionParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\StringExpressionParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<string' string>("FirstCap"' s => s == null ? "" : s.Count() > 2 ? s.Substring(0' 1).ToUpper() + s.Substring(1) : s.ToUpper())); " is 153.
Long Statement,ContractConfigurator.ExpressionParser,StringExpressionParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\StringExpressionParser.cs,RegisterMethods,The length of the statement  "            RegisterMethod(new Method<string' string>("FirstWord"' s => s == null ? "" : s.Split(new char[] { ' ' }).FirstOrDefault())); " is 124.
Long Statement,ContractConfigurator.ExpressionParser,StringExpressionParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\StringExpressionParser.cs,ParseStatement,The length of the statement  "                        (dataStoreIdentifierIndex == -1 || functionIndex < dataStoreIdentifierIndex) && (quoteIndex == -1 || functionIndex < quoteIndex)) " is 129.
Long Statement,ContractConfigurator.ExpressionParser,StringExpressionParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\StringExpressionParser.cs,ParseStatement,The length of the statement  "                    else if (dataStoreIdentifierIndex != -1 && (specialIdentifierIndex == -1 || dataStoreIdentifierIndex < specialIdentifierIndex)) " is 127.
Long Statement,ContractConfigurator.ExpressionParser,ExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\ExpressionParser.cs,ExecuteAndStoreExpression,The length of the statement  "                LoggingUtil.LogWarning(this' "Unable to store value for '" + key + "' - PersistentDataStore is null.  This is likely caused by another ScenarioModule crashing' preventing others from loading."); " is 194.
Long Statement,ContractConfigurator.ExpressionParser,ExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\ExpressionParser.cs,ParseIdentifier,The length of the statement  "            throw new NotSupportedException("Can't parse identifier for type " + typeof(T) + " in class " + this.GetType() + " - not supported!"); " is 134.
Long Statement,ContractConfigurator.ExpressionParser,ExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\ExpressionParser.cs,GetCalledFunction,The length of the statement  "                throw new MissingMethodException("Cannot find " + (isFunction ? "function" : "method") + " '" + functionName + "' for class '" + typeof(T).Name + "'."); " is 152.
Long Statement,ContractConfigurator.ExpressionParser,ExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\ExpressionParser.cs,GetCalledFunction,The length of the statement  "                    throw new ArgumentException("Couldn't find matching signature for " + (isFunction ? "function" : "method") + " '" + functionName + "'."); " is 137.
Long Statement,ContractConfigurator.ExpressionParser,ExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\ExpressionParser.cs,ParseIdentifier,The length of the statement  "            TokenType type = expression.Length > 0 && expression.Substring(0' 1) == "(" ? TokenType.FUNCTION : TokenType.IDENTIFIER; " is 120.
Long Statement,ContractConfigurator.Parameters,HasAntenna,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\HasAntenna.cs,OnParameterLoad,The length of the statement  "            maxAntennaPower = node.HasValue("maxAntennaPower") ? Convert.ToDouble(node.GetValue("maxAntennaPower")) : double.MaxValue; " is 122.
Long Statement,ContractConfigurator.Parameters,HasAstronaut,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\HasAstronaut.cs,OnRegister,The length of the statement  "            GameEvents.onKerbalStatusChange.Add(new EventData<ProtoCrewMember' ProtoCrewMember.RosterStatus' ProtoCrewMember.RosterStatus>.OnEvent(OnKerbalStatusChange)); " is 158.
Long Statement,ContractConfigurator.Parameters,HasAstronaut,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\HasAstronaut.cs,OnUnregister,The length of the statement  "            GameEvents.onKerbalStatusChange.Remove(new EventData<ProtoCrewMember' ProtoCrewMember.RosterStatus' ProtoCrewMember.RosterStatus>.OnEvent(OnKerbalStatusChange)); " is 161.
Long Statement,ContractConfigurator.Parameters,Not,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Not.cs,OnRegister,The length of the statement  "            GameEvents.Contract.onParameterChange.Add(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 124.
Long Statement,ContractConfigurator.Parameters,Not,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Not.cs,OnRegister,The length of the statement  "            ContractConfigurator.OnParameterChange.Add(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 125.
Long Statement,ContractConfigurator.Parameters,Not,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Not.cs,OnUnregister,The length of the statement  "            GameEvents.Contract.onParameterChange.Remove(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 127.
Long Statement,ContractConfigurator.Parameters,Not,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Not.cs,OnUnregister,The length of the statement  "            ContractConfigurator.OnParameterChange.Remove(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 128.
Long Statement,ContractConfigurator.Parameters,None,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\None.cs,OnRegister,The length of the statement  "            GameEvents.Contract.onParameterChange.Add(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 124.
Long Statement,ContractConfigurator.Parameters,None,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\None.cs,OnRegister,The length of the statement  "            ContractConfigurator.OnParameterChange.Add(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 125.
Long Statement,ContractConfigurator.Parameters,None,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\None.cs,OnUnregister,The length of the statement  "            GameEvents.Contract.onParameterChange.Remove(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 127.
Long Statement,ContractConfigurator.Parameters,None,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\None.cs,OnUnregister,The length of the statement  "            ContractConfigurator.OnParameterChange.Remove(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 128.
Long Statement,ContractConfigurator.Parameters,AtMost,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\AtMost.cs,OnRegister,The length of the statement  "            GameEvents.Contract.onParameterChange.Add(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 124.
Long Statement,ContractConfigurator.Parameters,AtMost,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\AtMost.cs,OnRegister,The length of the statement  "            ContractConfigurator.OnParameterChange.Add(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 125.
Long Statement,ContractConfigurator.Parameters,AtMost,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\AtMost.cs,OnUnregister,The length of the statement  "            GameEvents.Contract.onParameterChange.Remove(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 127.
Long Statement,ContractConfigurator.Parameters,AtMost,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\AtMost.cs,OnUnregister,The length of the statement  "            ContractConfigurator.OnParameterChange.Remove(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 128.
Long Statement,ContractConfigurator.Parameters,AtLeast,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\AtLeast.cs,OnRegister,The length of the statement  "            GameEvents.Contract.onParameterChange.Add(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 124.
Long Statement,ContractConfigurator.Parameters,AtLeast,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\AtLeast.cs,OnRegister,The length of the statement  "            ContractConfigurator.OnParameterChange.Add(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 125.
Long Statement,ContractConfigurator.Parameters,AtLeast,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\AtLeast.cs,OnUnregister,The length of the statement  "            GameEvents.Contract.onParameterChange.Remove(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 127.
Long Statement,ContractConfigurator.Parameters,AtLeast,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\AtLeast.cs,OnUnregister,The length of the statement  "            ContractConfigurator.OnParameterChange.Remove(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 128.
Long Statement,ContractConfigurator.Parameters,ContractConfiguratorParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\ContractConfiguratorParameter.cs,GetTitle,The length of the statement  "            if (lastTitle != output && Root != null && (Root.ContractState == Contract.State.Active || Root.ContractState == Contract.State.Failed)) " is 136.
Long Statement,ContractConfigurator.Parameters,ParameterDelegate<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\ParameterDelegate.cs,SetState,The length of the statement  "                SetState(result ? ParameterState.Complete : matchType != ParameterDelegateMatchType.FILTER ? ParameterState.Failed : ParameterState.Incomplete); " is 144.
Long Statement,ContractConfigurator.Parameters,ParameterDelegate<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\ParameterDelegate.cs,CheckChildConditions,The length of the statement  "                    LoggingUtil.LogVerbose(paramDelegate' "Checking condition for '" + paramDelegate.title + "'' conditionMet = " + conditionMet); " is 126.
Long Statement,ContractConfigurator.Parameters,PerformOrbitalSurvey,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\PerformOrbitalSurvey.cs,OnUpdate,The length of the statement  "                    ResourceScenario.Instance.gameSettings.GetPlanetScanInfo().Where(psd => psd.PlanetId == targetBody.flightGlobalsIndex).Any()) " is 125.
Long Statement,ContractConfigurator.Parameters,KerbalDeathsCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\KerbalDeathsCustom.cs,OnRegister,The length of the statement  "            ContractVesselTracker.OnVesselAssociation.Add(new EventData<GameEvents.HostTargetAction<Vessel' string>>.OnEvent(OnVesselAssociation)); " is 135.
Long Statement,ContractConfigurator.Parameters,KerbalDeathsCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\KerbalDeathsCustom.cs,OnRegister,The length of the statement  "            ContractVesselTracker.OnVesselDisassociation.Add(new EventData<GameEvents.HostTargetAction<Vessel' string>>.OnEvent(OnVesselDisassociation)); " is 141.
Long Statement,ContractConfigurator.Parameters,KerbalDeathsCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\KerbalDeathsCustom.cs,OnUnregister,The length of the statement  "            ContractVesselTracker.OnVesselAssociation.Remove(new EventData<GameEvents.HostTargetAction<Vessel' string>>.OnEvent(OnVesselAssociation)); " is 138.
Long Statement,ContractConfigurator.Parameters,KerbalDeathsCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\KerbalDeathsCustom.cs,OnUnregister,The length of the statement  "            ContractVesselTracker.OnVesselDisassociation.Remove(new EventData<GameEvents.HostTargetAction<Vessel' string>>.OnEvent(OnVesselDisassociation)); " is 144.
Long Statement,ContractConfigurator.Parameters,KerbalDeathsCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\KerbalDeathsCustom.cs,OnVesselChange,The length of the statement  "            if (vesselIdentifier != null && vessel != null && ContractVesselTracker.Instance.GetAssociatedVessel(vesselIdentifier.identifier) == vessel) " is 140.
Long Statement,ContractConfigurator.Parameters,KerbalDeathsCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\KerbalDeathsCustom.cs,OnVesselCreate,The length of the statement  "            if (vesselIdentifier != null && vessel != null && ContractVesselTracker.Instance.GetAssociatedVessel(vesselIdentifier.identifier) == vessel) " is 140.
Long Statement,ContractConfigurator.Parameters,RecoverKerbalCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\RecoverKerbalCustom.cs,OnRegister,The length of the statement  "            GameEvents.onCrewTransferred.Add(new EventData<GameEvents.HostedFromToAction<ProtoCrewMember' Part>>.OnEvent(OnCrewTransferred)); " is 129.
Long Statement,ContractConfigurator.Parameters,RecoverKerbalCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\RecoverKerbalCustom.cs,OnUnregister,The length of the statement  "            GameEvents.onCrewTransferred.Remove(new EventData<GameEvents.HostedFromToAction<ProtoCrewMember' Part>>.OnEvent(OnCrewTransferred)); " is 132.
Long Statement,ContractConfigurator.Parameters,TargetDestroyed,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\TargetDestroyed.cs,CreateDelegates,The length of the statement  "                AddParameter(new ParameterDelegate<string>("Target: " + (ContractVesselTracker.Instance != null ? ContractVesselTracker.GetDisplayName(vessel) : vessel)' " is 153.
Long Statement,ContractConfigurator.Parameters,ReachSpaceCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\ReachSpaceCustom.cs,OnRegister,The length of the statement  "            GameEvents.onVesselSituationChange.Add(new EventData<GameEvents.HostedFromToAction<Vessel'Vessel.Situations>>.OnEvent(OnVesselSituationChange)); " is 144.
Long Statement,ContractConfigurator.Parameters,ReachSpaceCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\ReachSpaceCustom.cs,OnUnregister,The length of the statement  "            GameEvents.onVesselSituationChange.Remove(new EventData<GameEvents.HostedFromToAction<Vessel' Vessel.Situations>>.OnEvent(OnVesselSituationChange)); " is 148.
Long Statement,ContractConfigurator.Parameters,CollectScienceCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\CollectScienceCustom.cs,CreateDelegates,The length of the statement  "                    subj => FlightGlobals.ActiveVessel != null && ScienceUtil.GetExperimentSituation(FlightGlobals.ActiveVessel) == situation)); " is 124.
Long Statement,ContractConfigurator.Parameters,CollectScienceCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\CollectScienceCustom.cs,CreateDelegates,The length of the statement  "                    subj => FlightGlobals.ActiveVessel != null && ((location != BodyLocation.Surface) ^ FlightGlobals.ActiveVessel.LandedOrSplashed))); " is 131.
Long Statement,ContractConfigurator.Parameters,CollectScienceCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\CollectScienceCustom.cs,OnUnregister,The length of the statement  "            GameEvents.OnScienceRecieved.Remove(new EventData<float' ScienceSubject' ProtoVessel' bool>.OnEvent(OnScienceReceived)); " is 120.
Long Statement,ContractConfigurator.Parameters,CollectScienceCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\CollectScienceCustom.cs,OnScienceReceived,The length of the statement  "                LoggingUtil.LogVerbose(this' "OnScienceReceived: returning' protoVessel = " + (protoVessel == null ? "null" :protoVessel.vesselName) + "' reverseEng = " + reverseEngineered); " is 174.
Long Statement,ContractConfigurator.Parameters,CollectScienceCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\CollectScienceCustom.cs,OnVesselChange,The length of the statement  "            foreach (ScienceSubject subject in GetVesselSubjects(vessel).GroupBy(subjid => subjid).Select(grp => ResearchAndDevelopment.GetSubjectByID(grp.Key))) " is 149.
Long Statement,ContractConfigurator.Parameters,NoStaging,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\NoStaging.cs,OnParameterLoad,The length of the statement  "            staged = new HashSet<Vessel>(ConfigNodeUtil.ParseValue<List<Vessel>>(node.GetNode("STAGED_VESSELS")' "vessel"' new List<Vessel>())); " is 132.
Long Statement,ContractConfigurator.Parameters,OrbitParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\OrbitParameter.cs,GetNotes,The length of the statement  "                    sop = new SpecificOrbitParameter(OrbitType.POLAR' orbit.inclination' orbit.eccentricity' orbit.semiMajorAxis' orbit.LAN' orbit.argumentOfPeriapsis' orbit.meanAnomalyAtEpoch' orbit.epoch' targetBody' deviationWindow); " is 216.
Long Statement,ContractConfigurator.Parameters,OrbitParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\OrbitParameter.cs,CreateDelegates,The length of the statement  "                AddParameter(new ParameterDelegate<Vessel>(output' v => v.orbit.eccentricity >= minEccentricity && v.orbit.eccentricity <= maxEccentricity)); " is 141.
Long Statement,ContractConfigurator.Parameters,OrbitParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\OrbitParameter.cs,CreateDelegates,The length of the statement  "            if (minArgumentOfPeriapsis != 0.0 || !(Mathf.Approximately((float)maxArgumentOfPeriapsis' 360.0f) || Mathf.Approximately((float)maxArgumentOfPeriapsis' 0.0f))) " is 159.
Long Statement,ContractConfigurator.Parameters,OrbitParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\OrbitParameter.cs,CreateDelegates,The length of the statement  "                    output += "Between " + DurationUtil.StringValue(minPeriod' false) + " and " + DurationUtil.StringValue(maxPeriod' false); " is 121.
Long Statement,ContractConfigurator.Parameters,PartValidation,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\PartValidation.cs,CreateDelegates,The length of the statement  "                        AddParameter(new CountParameterDelegate<Part>(filter.minCount' filter.maxCount' p => PartHasObjective(p' partModuleType)' " is 121.
Long Statement,ContractConfigurator.Parameters,PartValidation,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\PartValidation.cs,CreateDelegates,The length of the statement  "                        AddParameter(new ParameterDelegate<Part>(filter.type.Prefix() + "module: " + ModuleName(partModule)' p => PartHasModule(p' partModule)' filter.type)); " is 150.
Long Statement,ContractConfigurator.Parameters,PartValidation,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\PartValidation.cs,CreateDelegates,The length of the statement  "                        AddParameter(new ParameterDelegate<Part>(filter.type.Prefix() + "module type: " + partModuleType' p => PartHasObjective(p' partModuleType)' filter.type)); " is 154.
Long Statement,ContractConfigurator.Parameters,PartValidation,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\PartValidation.cs,CreateDelegates,The length of the statement  "                        ContractParameter wrapperParam = AddParameter(new AllParameterDelegate<Part>(filter.type.Prefix() + "module"' filter.type)); " is 124.
Long Statement,ContractConfigurator.Parameters,PartValidation,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\PartValidation.cs,CreateDelegates,The length of the statement  "                            wrapperParam.AddParameter(new ParameterDelegate<Part>(childFilter.Prefix() + name + ": " + value' p => PartModuleCheck(p' v)' childFilter)); " is 140.
Long Statement,ContractConfigurator.Parameters,HasPassengers,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\HasPassengers.cs,GetParameterTitle,The length of the statement  "                    output = "Load " + (count == 0 ? "all" : count.ToString()) + " passenger" + (count != 1 ? "s" : "") + " while on the launchpad/runway"; " is 135.
Long Statement,ContractConfigurator.Parameters,HasPassengers,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\HasPassengers.cs,OnRegister,The length of the statement  "            GameEvents.onCrewTransferred.Add(new EventData<GameEvents.HostedFromToAction<ProtoCrewMember' Part>>.OnEvent(OnCrewTransferred)); " is 129.
Long Statement,ContractConfigurator.Parameters,HasPassengers,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\HasPassengers.cs,OnUnregister,The length of the statement  "            GameEvents.onCrewTransferred.Remove(new EventData<GameEvents.HostedFromToAction<ProtoCrewMember' Part>>.OnEvent(OnCrewTransferred)); " is 132.
Long Statement,ContractConfigurator.Parameters,HasPassengers,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\HasPassengers.cs,OnContractAccepted,The length of the statement  "                int count = this.count == 0 && passengers.Count() == 0 ? ((ConfiguredContract)contract).GetSpawnedKerbalCount() : this.count; " is 125.
Long Statement,ContractConfigurator.Parameters,IsNotVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\IsNotVessel.cs,OnRegister,The length of the statement  "            ContractVesselTracker.OnVesselAssociation.Add(new EventData<GameEvents.HostTargetAction<Vessel' string>>.OnEvent(OnVesselAssociation)); " is 135.
Long Statement,ContractConfigurator.Parameters,IsNotVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\IsNotVessel.cs,OnRegister,The length of the statement  "            ContractVesselTracker.OnVesselDisassociation.Add(new EventData<GameEvents.HostTargetAction<Vessel' string>>.OnEvent(OnVesselDisassociation)); " is 141.
Long Statement,ContractConfigurator.Parameters,IsNotVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\IsNotVessel.cs,OnUnregister,The length of the statement  "            ContractVesselTracker.OnVesselAssociation.Remove(new EventData<GameEvents.HostTargetAction<Vessel' string>>.OnEvent(OnVesselAssociation)); " is 138.
Long Statement,ContractConfigurator.Parameters,IsNotVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\IsNotVessel.cs,OnUnregister,The length of the statement  "            ContractVesselTracker.OnVesselDisassociation.Remove(new EventData<GameEvents.HostTargetAction<Vessel' string>>.OnEvent(OnVesselDisassociation)); " is 144.
Long Statement,ContractConfigurator.Parameters,ReachState,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\ReachState.cs,CreateDelegates,The length of the statement  "                AddParameter(new ParameterDelegate<Vessel>(output' v => v.heightFromTerrain >= minTerrainAltitude && v.heightFromTerrain <= maxTerrainAltitude)); " is 145.
Long Statement,ContractConfigurator.Parameters,VisitWaypoint,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\VisitWaypoint.cs,OnParameterChange,The length of the statement  "                            if (navPoint != null && NavWaypoint.fetch.IsActive && navPoint.Latitude == waypoint.latitude && navPoint.Longitude == waypoint.longitude) " is 137.
Long Statement,ContractConfigurator.Parameters,VisitWaypoint,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\VisitWaypoint.cs,FetchWaypoint,The length of the statement  "                LoggingUtil.LogError(this' "Couldn't find waypoint in WaypointGenerator behaviour(s) with index " + waypointIndex + "."); " is 121.
Long Statement,ContractConfigurator.Parameters,VisitWaypoint,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\VisitWaypoint.cs,VesselMeetsCondition,The length of the statement  "                double actualDistance = WaypointUtil.GetDistance(vessel.latitude' vessel.longitude' waypoint.latitude' waypoint.longitude' vessel.altitude); " is 140.
Long Statement,ContractConfigurator.Parameters,VisitWaypoint,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\VisitWaypoint.cs,VesselMeetsCondition,The length of the statement  "                    string waypointName = waypoint.name + (waypoint.isClustered ? " " + StringUtilities.IntegerToGreek(waypoint.index) : ""); " is 121.
Long Statement,ContractConfigurator.Parameters,AlwaysTrue,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\AlwaysTrue.cs,FetchOrAdd,The length of the statement  "            IEnumerable<ContractParameter> parameters = contract.AllParameters.Where<ContractParameter>(p => p.GetType() == typeof(AlwaysTrue)); " is 132.
Long Statement,ContractConfigurator.Parameters,HasResource,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\HasResource.cs,CreateDelegates,The length of the statement  "                AddParameter(new ParameterDelegate<Vessel>(output' v => VesselHasResource(v' filter.resource' capacity' filter.minQuantity' filter.maxQuantity)' " is 144.
Long Statement,ContractConfigurator.Parameters,ReturnHome,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\ReturnHome.cs,OnRegister,The length of the statement  "            GameEvents.onVesselSituationChange.Add(new EventData<GameEvents.HostedFromToAction<Vessel' Vessel.Situations>>.OnEvent(OnVesselSituationChange)); " is 145.
Long Statement,ContractConfigurator.Parameters,ReturnHome,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\ReturnHome.cs,OnUnregister,The length of the statement  "            GameEvents.onVesselSituationChange.Remove(new EventData<GameEvents.HostedFromToAction<Vessel' Vessel.Situations>>.OnEvent(OnVesselSituationChange)); " is 148.
Long Statement,ContractConfigurator.Parameters,HasCrew,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\HasCrew.cs,OnRegister,The length of the statement  "            GameEvents.onCrewTransferred.Add(new EventData<GameEvents.HostedFromToAction<ProtoCrewMember' Part>>.OnEvent(OnCrewTransferred)); " is 129.
Long Statement,ContractConfigurator.Parameters,HasCrew,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\HasCrew.cs,OnUnregister,The length of the statement  "            GameEvents.onCrewTransferred.Remove(new EventData<GameEvents.HostedFromToAction<ProtoCrewMember' Part>>.OnEvent(OnCrewTransferred)); " is 132.
Long Statement,ContractConfigurator.Parameters,HasCrew,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\HasCrew.cs,VesselMeetsCondition,The length of the statement  "            return ParameterDelegate<ProtoCrewMember>.CheckChildConditions(this' GetVesselCrew(vessel' maxCrew == int.MaxValue)' checkOnly); " is 128.
Long Statement,ContractConfigurator.Parameters,HasCrew,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\HasCrew.cs,TraitTitle,The length of the statement  "            ExperienceTraitConfig config = GameDatabase.Instance.ExperienceConfigs.Categories.Where(c => c.Name == traitName).FirstOrDefault(); " is 131.
Long Statement,ContractConfigurator.Parameters,VesselHasVisited,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\VesselHasVisited.cs,OnRegister,The length of the statement  "            GameEvents.onVesselSituationChange.Add(new EventData<GameEvents.HostedFromToAction<Vessel' Vessel.Situations>>.OnEvent(OnVesselSituationChange)); " is 145.
Long Statement,ContractConfigurator.Parameters,VesselHasVisited,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\VesselHasVisited.cs,OnUnregister,The length of the statement  "            GameEvents.onVesselSituationChange.Remove(new EventData<GameEvents.HostedFromToAction<Vessel' Vessel.Situations>>.OnEvent(OnVesselSituationChange)); " is 148.
Long Statement,ContractConfigurator.Parameters,VesselParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter.cs,GetCompletingVessels,The length of the statement  "            return vesselInfo.Where(p => p.Value.state == Contracts.ParameterState.Complete && p.Value.vessel != null).Select(p => p.Value.vessel); " is 135.
Long Statement,ContractConfigurator.Parameters,VesselParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter.cs,OnRegister,The length of the statement  "            GameEvents.onCrewTransferred.Add(new EventData<GameEvents.HostedFromToAction<ProtoCrewMember' Part>>.OnEvent(OnCrewTransferred)); " is 129.
Long Statement,ContractConfigurator.Parameters,VesselParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter.cs,OnUnregister,The length of the statement  "            GameEvents.onCrewTransferred.Remove(new EventData<GameEvents.HostedFromToAction<ProtoCrewMember' Part>>.OnEvent(OnCrewTransferred)); " is 132.
Long Statement,ContractConfigurator.Parameters,VesselParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter.cs,OnPartJointBreak,The length of the statement  "                        strength = !dockedVesselInfo.ContainsKey(hash) ? ParamStrength.WEAK : dockedVesselInfo[hash].Key > strength ? dockedVesselInfo[hash].Key : strength; " is 148.
Long Statement,ContractConfigurator.Parameters,VesselParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter.cs,OnPartAttach,The length of the statement  "                SaveSubVesselInfo(v1.vessel' v1.strength == ParamStrength.STRONG ? ParamStrength.STRONG : ParamStrength.WEAK' v1.completionTime); " is 129.
Long Statement,ContractConfigurator.Parameters,VesselParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter.cs,OnPartAttach,The length of the statement  "                SaveSubVesselInfo(v2.vessel' v2.strength == ParamStrength.STRONG ? ParamStrength.STRONG : ParamStrength.WEAK' v2.completionTime); " is 129.
Long Statement,ContractConfigurator.Parameters,VesselParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter.cs,OnPartAttach,The length of the statement  "                SaveSubVesselInfo(v1.vessel' v1.strength == ParamStrength.STRONG ? ParamStrength.STRONG : ParamStrength.WEAK' v1.completionTime); " is 129.
Long Statement,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,GetParameterTitle,The length of the statement  "                            LoggingUtil.LogWarning(this' "Unable to get vessel display name for '" + vesselName + "' - ContractVesselTracker is null.  This is likely caused by another ScenarioModule crashing' preventing others from loading."); " is 215.
Long Statement,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,CreateVesselListParameter,The length of the statement  "                    vesselListParam = new ParameterDelegate<Vessel>(hideVesselName ? "" : "Vessel: " + ContractVesselTracker.GetDisplayName(vesselList.First())' v => " is 145.
Long Statement,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,CreateVesselListParameter,The length of the statement  "                            vesselListParam.SetTitle((FlightGlobals.ActiveVessel == v && trackedVessel != null ? "" : "Tracked ") + "Vessel: " + ContractVesselTracker.GetDisplayName(vesselList.First())); " is 175.
Long Statement,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,CreateVesselListParameter,The length of the statement  "                            vesselListParam.SetTitle("Vessel: Any of the following:" + (check ? " " + ParameterDelegate<Vessel>.GetDelegateText(vesselListParam) : "")); " is 140.
Long Statement,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,OnParameterLoad,The length of the statement  "                dissassociateVesselsOnContractFailure = ConfigNodeUtil.ParseValue<bool?>(node' "dissassociateVesselsOnContractFailure"' (bool?)true).Value; " is 139.
Long Statement,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,OnParameterLoad,The length of the statement  "                dissassociateVesselsOnContractCompletion = ConfigNodeUtil.ParseValue<bool?>(node' "dissassociateVesselsOnContractCompletion"' (bool?)false).Value; " is 146.
Long Statement,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,OnRegister,The length of the statement  "            ContractVesselTracker.OnVesselAssociation.Add(new EventData<GameEvents.HostTargetAction<Vessel' string>>.OnEvent(OnVesselAssociation)); " is 135.
Long Statement,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,OnRegister,The length of the statement  "            ContractVesselTracker.OnVesselDisassociation.Add(new EventData<GameEvents.HostTargetAction<Vessel' string>>.OnEvent(OnVesselDisassociation)); " is 141.
Long Statement,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,OnUnregister,The length of the statement  "            ContractVesselTracker.OnVesselAssociation.Remove(new EventData<GameEvents.HostTargetAction<Vessel' string>>.OnEvent(OnVesselAssociation)); " is 138.
Long Statement,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,OnUnregister,The length of the statement  "            ContractVesselTracker.OnVesselDisassociation.Remove(new EventData<GameEvents.HostTargetAction<Vessel' string>>.OnEvent(OnVesselDisassociation)); " is 144.
Long Statement,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,OnContractCompleted,The length of the statement  "                    List<VesselIdentifier> vesselStore = PersistentDataStore.Instance.Retrieve<List<VesselIdentifier>>(defineList) ?? new List<VesselIdentifier>(); " is 143.
Long Statement,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,OnVesselChange,The length of the statement  "            LoggingUtil.LogVerbose(this' "OnVesselChange(" + (vessel != null && vessel.id != null ? vessel.id.ToString() : "null") + ")' Active = " + " is 137.
Long Statement,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,OnVesselChange,The length of the statement  "                (FlightGlobals.ActiveVessel != null && FlightGlobals.ActiveVessel.id != null ? FlightGlobals.ActiveVessel.id.ToString() : "null")); " is 131.
Long Statement,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,OnUpdate,The length of the statement  "                        durationParameter.SetTitle("Time Remaining: " + DurationUtil.StringValue(completionTime - Planetarium.GetUniversalTime())); " is 123.
Long Statement,ContractConfigurator.Parameters,All,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\All.cs,OnRegister,The length of the statement  "            GameEvents.Contract.onParameterChange.Add(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 124.
Long Statement,ContractConfigurator.Parameters,All,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\All.cs,OnRegister,The length of the statement  "            ContractConfigurator.OnParameterChange.Add(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 125.
Long Statement,ContractConfigurator.Parameters,All,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\All.cs,OnUnregister,The length of the statement  "            GameEvents.Contract.onParameterChange.Remove(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 127.
Long Statement,ContractConfigurator.Parameters,All,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\All.cs,OnUnregister,The length of the statement  "            ContractConfigurator.OnParameterChange.Remove(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 128.
Long Statement,ContractConfigurator.Parameters,Any,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Any.cs,OnRegister,The length of the statement  "            GameEvents.Contract.onParameterChange.Add(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 124.
Long Statement,ContractConfigurator.Parameters,Any,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Any.cs,OnRegister,The length of the statement  "            ContractConfigurator.OnParameterChange.Add(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 125.
Long Statement,ContractConfigurator.Parameters,Any,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Any.cs,OnUnregister,The length of the statement  "            GameEvents.Contract.onParameterChange.Remove(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 127.
Long Statement,ContractConfigurator.Parameters,Any,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Any.cs,OnUnregister,The length of the statement  "            ContractConfigurator.OnParameterChange.Remove(new EventData<Contract' ContractParameter>.OnEvent(OnAnyContractParameterChange)); " is 128.
Long Statement,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Start,The length of the statement  "            TrackingStationObjectButton offeredWaypointTSButton = offeredWaypointButton.GetComponent<TrackingStationObjectButton>(); " is 120.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The length of the statement  "                itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6)); " is 157.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The length of the statement  "                itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6)); " is 158.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The length of the statement  "                groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6)); " is 165.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The length of the statement  "                groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6)); " is 167.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The length of the statement  "                groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6)); " is 166.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The length of the statement  "                groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6)); " is 167.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Update,The length of the statement  "                maxActive = GameVariables.Instance.GetActiveContractsLimit(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.MissionControl)); " is 143.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Update,The length of the statement  "                contractCountRect.anchoredPosition = new Vector2(contractCountRect.anchoredPosition.x' contractCountRect.anchoredPosition.y + contractCountRect.sizeDelta.y * 3); " is 161.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Update,The length of the statement  "                foreach (RectTransform rect in new RectTransform[] { toggleAllRect' toggleAvailableRect' toggleActiveRect' toggleArchiveRect }) " is 127.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Update,The length of the statement  "                    checkRect.anchoredPosition = new Vector2(checkRect.anchoredPosition.x + (105 - rect.sizeDelta.x) / 2.0f' checkRect.anchoredPosition.y); " is 135.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,OnContractOffered,The length of the statement  "                List<UIListData<KSP.UI.UIListItem>>.Enumerator enumerator = MissionControl.Instance.scrollListContracts.GetEnumerator(); " is 120.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,OnContractOffered,The length of the statement  "                    container.mcListItem.gameObject.SetActive(container.parent.expanded && container.parent.mcListItem.gameObject.activeSelf); " is 122.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,OnContractOffered,The length of the statement  "                List<UIListData<KSP.UI.UIListItem>>.Enumerator enumerator = MissionControl.Instance.scrollListContracts.GetEnumerator(); " is 120.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,OnContractOffered,The length of the statement  "                    container.mcListItem.gameObject.SetActive(container.parent.expanded && container.parent.mcListItem.gameObject.activeSelf); " is 122.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,HandleRemovedContract,The length of the statement  "            List<UIListData<KSP.UI.UIListItem>>.Enumerator enumerator = MissionControl.Instance.scrollListContracts.GetEnumerator(); " is 120.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,HandleRemovedContract,The length of the statement  "                if (ConfiguredContract.CurrentContracts.Any(checkContract => checkContract != null && checkContract != cc && checkContract.contractType == cc.contractType)) " is 156.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,GetGroups,The length of the statement  "                ((ContractGroupParametersTemplate)HighLogic.CurrentGame.Parameters.CustomParams(SettingsBuilder.GroupParametersType)).IsEnabled(g.name) && " is 138.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,GetGroups,The length of the statement  "            foreach (Type subclass in ContractConfigurator.GetAllTypes<Contract>().Where(t => t != null && !t.Name.StartsWith("ConfiguredContract"))) " is 137.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,OnClickAvailable,The length of the statement  "            foreach (Contract contract in ContractSystem.Instance.Contracts.Union(ContractPreLoader.Instance.PendingContracts().OfType<Contract>()). " is 136.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,OnClickAvailable,The length of the statement  "                mcListItem.radioButton.onFalseBtn.AddListener(new UnityAction<UIRadioButton' UIRadioButton.CallType' PointerEventData>(OnDeselectContract)); " is 140.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,OnClickAvailable,The length of the statement  "                mcListItem.radioButton.onTrueBtn.AddListener(new UnityAction<UIRadioButton' UIRadioButton.CallType' PointerEventData>(OnSelectContract)); " is 137.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,CreateGroupItem,The length of the statement  "            mcListItem.radioButton.onFalseBtn.AddListener(new UnityAction<UIRadioButton' UIRadioButton.CallType' PointerEventData>(OnDeselectGroup)); " is 137.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,CreateGroupItem,The length of the statement  "            mcListItem.radioButton.onTrueBtn.AddListener(new UnityAction<UIRadioButton' UIRadioButton.CallType' PointerEventData>(OnSelectGroup)); " is 134.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,CreateGroupItem,The length of the statement  "                foreach (ContractGroup child in ContractGroup.AllGroups.Where(g => g != null && g.parent == groupContainer.group && ContractType.AllValidContractTypes.Any(ct => g.BelongsToGroup(ct))). " is 184.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetupParentGroups,The length of the statement  "            for (GroupContainer groupContainer = contractContainer.parent; groupContainer != null; groupContainer = groupContainer.parent) " is 126.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetupGroupItem,The length of the statement  "            availableText.text = "<color=#" + (groupContainer.availableContracts == 0 ? "CCCCCC" : "8BED8B") + ">Offered: " + groupContainer.availableContracts + "</color>"; " is 161.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,CreateContractItem,The length of the statement  "            radioButton.stateTrue.normal = radioButton.stateTrue.highlight = radioButton.stateTrue.pressed = radioButton.stateTrue.disabled = itemEnabled; " is 142.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,CreateContractItem,The length of the statement  "            radioButton.stateFalse.normal = radioButton.stateFalse.highlight = radioButton.stateFalse.pressed = radioButton.stateFalse.disabled = itemDisabled; " is 147.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,CreateContractItem,The length of the statement  "            mcListItem.radioButton.onFalseBtn.AddListener(new UnityAction<UIRadioButton' UIRadioButton.CallType' PointerEventData>(OnDeselectContract)); " is 140.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,CreateContractItem,The length of the statement  "            mcListItem.radioButton.onTrueBtn.AddListener(new UnityAction<UIRadioButton' UIRadioButton.CallType' PointerEventData>(OnSelectContract)); " is 137.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetupContractItem,The length of the statement  "                cc.statusImage.SetState(cc.contract.ContractState == Contract.State.Active ? "Active" : cc.contract.ContractState == Contract.State.Completed ? "Completed" : "Offered"); " is 169.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetupContractItem,The length of the statement  "                cc.statusImage.SetState(cc.contractType.maxCompletions != 0 && cc.contractType.ActualCompletions() >= cc.contractType.maxCompletions ? "Completed" : "Unavailable"); " is 164.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,InsertIntoList,The length of the statement  "            UIList<KSP.UI.UIListItem> childUIList = (UIList<KSP.UI.UIListItem>)childUIListField.GetValue(MissionControl.Instance.scrollListContracts); " is 138.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,InsertIntoList,The length of the statement  "            List<UIListData<KSP.UI.UIListItem>> listData = (List<UIListData<KSP.UI.UIListItem>>)listDataField.GetValue(childUIList); " is 120.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,InsertIntoList,The length of the statement  "            container.mcListItem.container.transform.localPosition = new Vector3(container.mcListItem.container.transform.localPosition.x' container.mcListItem.container.transform.localPosition.y' 0.0f); " is 191.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,GetContracts,The length of the statement  "                foreach (Contract contract in ContractSystem.Instance.Contracts.Where(c => c.GetType() == groupContainer.stockContractType)) " is 124.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,OnSelectContract,The length of the statement  "                MissionControl.Instance.btnAccept.interactable = ContractConfigurator.CanAccept(cc.contract) && ContractSystem.Instance.GetActiveContractCount() < maxActive; " is 157.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,OnSelectContract,The length of the statement  "                MissionControl.Instance.UpdateInstructor(MissionControl.Instance.avatarController.animTrigger_selectHard' MissionControl.Instance.avatarController.animLoop_excited); " is 165.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,OnSelectContract,The length of the statement  "                MissionControl.Instance.UpdateInstructor(MissionControl.Instance.avatarController.animTrigger_selectNormal' MissionControl.Instance.avatarController.animLoop_default); " is 167.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,OnSelectContract,The length of the statement  "                MissionControl.Instance.UpdateInstructor(MissionControl.Instance.avatarController.animTrigger_selectEasy' MissionControl.Instance.avatarController.animLoop_default); " is 165.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,UpdateContractCounts,The length of the statement  "            output += string.Format("<b><color=#f4ee21><sprite=\"CurrencySpriteAsset\" name=\"Reputation\" tint=1>\t\t</color><color=#DB8310>Trivial Contracts:\t\t</color></b>" + (trivialCount >= trivialMax ? "<color=#f97306>{0}  [Max: {1}]</color>\n" : "{0}  [Max: {1}]\n")' trivialCount' trivialMax); " is 290.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,UpdateContractCounts,The length of the statement  "            output += string.Format("<b><color=#f4ee21><sprite=\"CurrencySpriteAsset\" name=\"Reputation\" tint=1><sprite=\"CurrencySpriteAsset\" name=\"Reputation\" tint=1>\t\t</color><color=#DB8310>Significant Contracts:\t</color></b>" + (significantCount >= significantMax ? "<color=#f97306>{0}  [Max: {1}]</color>\n" : "{0}  [Max: {1}]\n")' significantCount' significantMax); " is 367.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,UpdateContractCounts,The length of the statement  "            output += string.Format("<b><color=#f4ee21><sprite=\"CurrencySpriteAsset\" name=\"Reputation\" tint=1><sprite=\"CurrencySpriteAsset\" name=\"Reputation\" tint=1><sprite=\"CurrencySpriteAsset\" name=\"Reputation\" tint=1>\t</color><color=#DB8310>Exceptional Contracts:\t</color></b>" + (exceptionalCount >= exceptionalMax ? "<color=#f97306>{0}  [Max: {1}]</color>\n" : "{0}  [Max: {1}]\n")' exceptionalCount' exceptionalMax); " is 424.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,UpdateContractCounts,The length of the statement  "            output += string.Format("<b>\t\t<color=#DB8310>All Active Contracts:\t\t</color></b>" + (maxActive == int.MaxValue ? "{0}" : activeCount >= maxActive ? "<color=#f97306>{0}  [Max: {1}]</color>" : "{0}  [Max: {1}]")' activeCount' maxActive); " is 239.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetContractTitle,The length of the statement  "            string color = cc.contract == null ? "A9A9A9" : cc.contract.ContractState == Contract.State.Active ? "96df41" : "fefa87"; " is 121.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetContractTitle,The length of the statement  "                float preferredHeight = mcListItem.title.GetPreferredValues(mcListItem.title.text' 316 - cc.indent * 12 - 64' TMPro.TMP_Math.FLOAT_MAX).y; " is 138.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,UpdateInfoPanelContractType,The length of the statement  "            MissionControl.Instance.textContractInfo.text = "<b><color=#DB8310>Contract:</color></b>\n" + contractType.genericTitle + agentText; " is 132.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,MissionControlText,The length of the statement  "                CurrencyModifierQuery q = new CurrencyModifierQuery(TransactionReasons.ContractAdvance' -contractType.advanceFunds' 0.0f' 0.0f); " is 128.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,MissionControlText,The length of the statement  "                text += RequirementLine(StringBuilderCache.Format("Must have {0} funds for advance"' fundsRequired)' Funding.CanAfford(fundsRequired)); " is 135.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,MissionControlText,The length of the statement  "                if (pair.Value.required && !contractType.dataNode.IsDeterministic(name) && !pair.Value.hidden && !pair.Value.IsIgnoredType()) " is 125.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,RequirementLine,The length of the statement  "            string output = "<b><color=#BEC2AE>" + text + ": </color></b><color=" + color + ">" + (met ? "Met" : "Unmet") + "</color>"; " is 123.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,OnClickAccept,The length of the statement  "            MissionControl.Instance.UpdateInstructor(MissionControl.Instance.avatarController.animTrigger_accept' MissionControl.Instance.avatarController.animLoop_default); " is 161.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,OnClickAccept,The length of the statement  "                SetContractTitle(selectedButton.GetComponent<MCListItem>()' new ContractContainer(MissionControl.Instance.selectedMission.contract)); " is 133.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,OnClickDecline,The length of the statement  "            MissionControl.Instance.UpdateInstructor(MissionControl.Instance.avatarController.animTrigger_decline' MissionControl.Instance.avatarController.animLoop_default); " is 162.
Long Statement,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,OnClickCancel,The length of the statement  "            MissionControl.Instance.UpdateInstructor(MissionControl.Instance.avatarController.animTrigger_cancel' MissionControl.Instance.avatarController.animLoop_default); " is 161.
Long Statement,ContractConfigurator.Util,GroupContainer,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,LoadConfig,The length of the statement  "                        LoggingUtil.LogError(typeof(ContractConfigurator)' "Error loading 'CONTRACT_DEFINITION' node- no 'name' attribute specified"); " is 126.
Long Statement,ContractConfigurator.Util,GroupContainer,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,LoadConfig,The length of the statement  "                        LoggingUtil.LogError(typeof(ContractConfigurator)' "Error loading 'CONTRACT_DEFINITION' node with name '" + name + "':"); " is 121.
Long Statement,ContractConfigurator.Util,GroupContainer,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Toggle,The length of the statement  "                radioButton.stateTrue.normal = radioButton.stateTrue.highlight = radioButton.stateTrue.pressed = radioButton.stateTrue.disabled = (expanded ? groupExpandedActive : groupUnexpandedActive); " is 187.
Long Statement,ContractConfigurator.Util,GroupContainer,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Toggle,The length of the statement  "                radioButton.stateFalse.normal = radioButton.stateFalse.highlight = radioButton.stateFalse.pressed = radioButton.stateFalse.disabled = (expanded ? groupExpandedInactive : groupUnexpandedInactive); " is 195.
Long Statement,ContractConfigurator.Util,GroupContainer,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Toggle,The length of the statement  "                mcListItem.GetComponent<Image>().sprite = expanded ? (radioButton.CurrentState == UIRadioButton.State.True ? groupExpandedActive : groupExpandedInactive) : " is 155.
Long Statement,ContractConfigurator.Util,Science,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Science.cs,ScienceSubject,The length of the statement  "            return ResearchAndDevelopment.GetSubjects().SingleOrDefault(researched => defaultIfNotResearched.id == researched.id) ?? defaultIfNotResearched; " is 144.
Long Statement,ContractConfigurator.Util,Science,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Science.cs,GetSubjects,The length of the statement  "            IEnumerable<ExperimentSituations> situations = Enum.GetValues(typeof(ExperimentSituations)).Cast<ExperimentSituations>(); " is 121.
Long Statement,ContractConfigurator.Util,Science,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Science.cs,GetSubjects,The length of the statement  "                        return biomes.Where(biome => !(BiomeTracker.IsDifficult(body' biome' sit) || experiment.id == "asteroidSample") ^ difficult) " is 124.
Long Statement,ContractConfigurator.Util,Science,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Science.cs,GetSubjects,The length of the statement  "                            .Union(body.isHomeWorld && !rules.disallowKSC && sit == ExperimentSituations.SrfLanded // static KSC items can only be landed " is 125.
Long Statement,ContractConfigurator.Util,Science,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Science.cs,ExperimentAvailable,The length of the statement  "                if (!GameVariables.Instance.UnlockedSpaceObjectDiscovery(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.TrackingStation))) " is 142.
Long Statement,ContractConfigurator.Util,Science,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Science.cs,ExperimentAvailable,The length of the statement  "                    bool evaUnlocked = GameVariables.Instance.UnlockedEVA(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.AstronautComplex)); " is 140.
Long Statement,ContractConfigurator.Util,Science,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Science.cs,AvailableExperiments,The length of the statement  "            IEnumerable<ScienceExperiment> experiments = ResearchAndDevelopment.GetExperimentIDs().Select<string' ScienceExperiment>(ResearchAndDevelopment.GetExperiment); " is 159.
Long Statement,ContractConfigurator.Util,Science,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Science.cs,AvailableExperiments,The length of the statement  "                foreach (ExperimentRules rules in experiments.Select(exp => GetExperimentRules(exp.id)).Where(r => !string.IsNullOrEmpty(r.partModule))) " is 136.
Long Statement,ContractConfigurator.Util,Science,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Science.cs,AvailableExperiments,The length of the statement  "                    foreach (AvailablePart p in PartLoader.Instance.loadedParts.Where(p => p.moduleInfos.Any(mod => mod.moduleName == module))) " is 123.
Long Statement,ContractConfigurator.Util,DebuggingUtils,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebuggingUtils.cs,DumpDetails,The length of the statement  "            foreach (FieldInfo fi in o.GetType().GetFields(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance | BindingFlags.FlattenHierarchy)) " is 160.
Long Statement,ContractConfigurator.Util,DebuggingUtils,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebuggingUtils.cs,DumpDetails,The length of the statement  "            foreach (PropertyInfo pi in o.GetType().GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance | BindingFlags.FlattenHierarchy)) " is 167.
Long Statement,ContractConfigurator.Util,Version,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Version.cs,VerifyAssemblyVersion,The length of the statement  "                LoggingUtil.LogWarning(typeof(ContractConfigurator)' StringBuilderCache.Format("Multiple assemblies with name '{0}' found!"' name)); " is 132.
Long Statement,ContractConfigurator.Util,Version,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Version.cs,VerifyAssemblyVersion,The length of the statement  "                var ainfoV = Attribute.GetCustomAttribute(assembly.assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute; " is 149.
Long Statement,ContractConfigurator.Util,Version,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Version.cs,VerifyAssemblyVersion,The length of the statement  "                    LoggingUtil.LogVerbose(typeof(ContractConfigurator)' "Version check for '" + name + "' passed.  Minimum required is " + version + "' version found was " + receivedStr); " is 168.
Long Statement,ContractConfigurator.Util,Version,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Version.cs,VerifyAssemblyVersion,The length of the statement  "                    LoggingUtil.Log(silent ? LoggingUtil.LogLevel.DEBUG : LoggingUtil.LogLevel.ERROR' typeof(Version)' "Version check for '" + name + "' failed!  Minimum required is " + version + "' version found was " + receivedStr); " is 214.
Long Statement,ContractConfigurator.Util,Version,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Version.cs,VerifyAssemblyVersion,The length of the statement  "                LoggingUtil.Log(silent ? LoggingUtil.LogLevel.VERBOSE : LoggingUtil.LogLevel.ERROR' typeof(Version)' "Couldn't find assembly for '" + name + "'!"); " is 147.
Long Statement,ContractConfigurator.Util,Version,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Version.cs,VerifyRemoteTechVersion,The length of the statement  "                CC_RemoteTechAssembly = AssemblyLoader.loadedAssemblies.SingleOrDefault(a => a.assembly.GetName().Name == "CC_RemoteTech").assembly; " is 132.
Long Statement,ContractConfigurator.CutScene,MoveEVAKerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\Action\MoveEVAKerbal.cs,InvokeAction,The length of the statement  "            KerbalAnimationState animState = body.GeeASL > kerbalEVA.minWalkingGee ? kerbalEVA.Animations.walkFwd : kerbalEVA.Animations.walkLowGee; " is 136.
Long Statement,ContractConfigurator.CutScene,MoveEVAKerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\Action\MoveEVAKerbal.cs,NextWaypoint,The length of the statement  "            altitude = LocationUtil.TerrainHeight(currentWaypoint.latitude' currentWaypoint.longitude' FlightGlobals.currentMainBody); " is 122.
Long Statement,ContractConfigurator.CutScene,MoveEVAKerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\Action\MoveEVAKerbal.cs,NextWaypoint,The length of the statement  "            Vector3d pos = FlightGlobals.currentMainBody.GetWorldSurfacePosition(currentWaypoint.latitude' currentWaypoint.longitude' altitude); " is 132.
Long Statement,ContractConfigurator.CutScene,FixedCamera,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\Camera\FixedCamera.cs,OnDraw,The length of the statement  "            val = GUILayout.TextField(latitude.ToString()' GUILayout.Width(CutSceneConfigurator.CutSceneConfigurator.DETAIL_ENTRY_WIDTH)); " is 126.
Long Statement,ContractConfigurator.CutScene,FixedCamera,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\Camera\FixedCamera.cs,OnDraw,The length of the statement  "            val = GUILayout.TextField(longitude.ToString()' GUILayout.Width(CutSceneConfigurator.CutSceneConfigurator.DETAIL_ENTRY_WIDTH)); " is 127.
Long Statement,ContractConfigurator.CutScene,FixedCamera,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\Camera\FixedCamera.cs,OnDraw,The length of the statement  "            GUILayout.Label(new GUIContent("Altitude"' "Enter the altitude above the terrain.")' GUILayout.Width(CutSceneConfigurator.CutSceneConfigurator.DETAIL_LABEL_WIDTH)); " is 164.
Long Statement,ContractConfigurator.CutScene,FixedCamera,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\Camera\FixedCamera.cs,OnDraw,The length of the statement  "            val = GUILayout.TextField(altitude.ToString()' GUILayout.Width(CutSceneConfigurator.CutSceneConfigurator.DETAIL_ENTRY_WIDTH)); " is 126.
Long Statement,ContractConfigurator.CutScene,CutSceneExecutor,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneExecutor.cs,Start,The length of the statement  "            GameEvents.onGameSceneSwitchRequested.Add(new EventData<GameEvents.FromToAction<GameScenes' GameScenes>>.OnEvent(GameSceneSwitch)); " is 131.
Long Statement,ContractConfigurator.CutScene,CutSceneExecutor,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneExecutor.cs,OnDestroy,The length of the statement  "            GameEvents.onGameSceneSwitchRequested.Remove(new EventData<GameEvents.FromToAction<GameScenes' GameScenes>>.OnEvent(GameSceneSwitch)); " is 134.
Long Statement,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,OnGUI,The length of the statement  "                var ainfoV = Attribute.GetCustomAttribute(typeof(CutSceneConfigurator).Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute; " is 169.
Long Statement,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,WindowGUI,The length of the statement  "                    action.async = GUILayout.Toggle(action.async' new GUIContent(""' "If checked' moves to the next action before waiting for this one to complete.")); " is 147.
Long Statement,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,DrawDetailPane,The length of the statement  "            detailScrollPosition = GUILayout.BeginScrollView(detailScrollPosition' false' true' GUILayout.Height(LIST_HEIGHT + 64 )); " is 121.
Complex Conditional,ContractConfigurator.Behaviour,TriggeredBehaviour,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\TriggeredBehaviour.cs,OnParameterStateChange,The conditional expression  "onState == State.PARAMETER_COMPLETED && param.State == ParameterState.Complete ||                      onState == State.PARAMETER_FAILED && param.State == ParameterState.Failed"  is complex.
Complex Conditional,ContractConfigurator.Behaviour,KerbalSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnPreCull,The conditional expression  "texture == null || (kerbal != null && kerbal.KerbalRef == null && texture.GetType() == typeof(RenderTexture)) || nextKerbalCheck < Time.fixedTime"  is complex.
Complex Conditional,ContractConfigurator.Behaviour,SpawnPassengers,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnPassengers.cs,OnFlightReady,The conditional expression  "v != null && v.situation == Vessel.Situations.PRELAUNCH &&                  v.mainBody.isHomeWorld &&                  passengers.Where(pair => !pair.Value && pair.Key.rosterStatus == ProtoCrewMember.RosterStatus.Available).Any() &&                  v.GetCrewCapacity() - v.GetCrewCount() >= count"  is complex.
Complex Conditional,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,OnGameSceneLoad,The conditional expression  "deferVesselCreation && (gameScene == GameScenes.FLIGHT || gameScene == GameScenes.TRACKSTATION || gameScene == GameScenes.EDITOR)"  is complex.
Complex Conditional,ContractConfigurator.Behaviour,OrbitGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\OrbitGenerator.cs,OnMapViewFiltersModified,The conditional expression  "contract.ContractState == Contract.State.Active && parms.DisplayActiveOrbits ||                              contract.ContractState == Contract.State.Offered && parms.DisplayOfferedOrbits"  is complex.
Complex Conditional,ContractConfigurator.Behaviour,OrbitData,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\OrbitGenerator.cs,SetupRenderer,The conditional expression  "contract.ContractState == Contract.State.Active && (parms.DisplayActiveOrbits || HighLogic.LoadedScene != GameScenes.TRACKSTATION) ||                          contract.ContractState == Contract.State.Offered && parms.DisplayOfferedOrbits && HighLogic.LoadedScene == GameScenes.TRACKSTATION"  is complex.
Complex Conditional,ContractConfigurator.Behaviour,WaypointGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\WaypointGenerator.cs,OnOffered,The conditional expression  "wpData.waypoint.visible && (!wpData.parameter.Any() || contract.AllParameters.                      Where(p => p.ID == paramID && p.State == ParameterState.Complete).Any())"  is complex.
Complex Conditional,ContractConfigurator.Behaviour,WaypointGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\WaypointGenerator.cs,OnLoad,The conditional expression  "wpData.waypoint.visible && (!wpData.parameter.Any() || contract.AllParameters.                      Where(p => p.ID == paramID && p.State == ParameterState.Complete).Any())"  is complex.
Complex Conditional,ContractConfigurator.Behaviour,WaypointGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\WaypointGenerator.cs,AddWayPoint,The conditional expression  "contract.ContractState == Contract.State.Active && (parms.DisplayActiveWaypoints || HighLogic.LoadedScene != GameScenes.TRACKSTATION) ||                      contract.ContractState == Contract.State.Offered && parms.DisplayOfferedWaypoints && HighLogic.LoadedScene == GameScenes.TRACKSTATION"  is complex.
Complex Conditional,ContractConfigurator,CanResearchTechRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\CanResearchTechRequirement.cs,RequirementMet,The conditional expression  "anyToUnlock && parentsUnlocked.Any(unlocked => unlocked) ||                      !anyToUnlock && parentsUnlocked.All(unlocked => unlocked)"  is complex.
Complex Conditional,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,Update,The conditional expression  "ContractSystem.Instance == null || (!contractsLoaded && contractsLoadCheckTime < Time.realtimeSinceStartup + 5.0 && MissionControl.Instance == null)"  is complex.
Complex Conditional,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The conditional expression  "body == null || body.pqsController == null || !body.ocean || bodyInfo.ContainsKey(body)"  is complex.
Complex Conditional,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The conditional expression  "biomeData.Count == biomeCount &&                      biomeData.All(pair => pair.Value.landCount + pair.Value.waterCount >= maxCount &&                          pair.Value.landLocations.Count >= targetMin && pair.Value.waterLocations.Count >= targetMin || count >= maxIterations)"  is complex.
Complex Conditional,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,IsDifficult,The conditional expression  "body == null || !body.ocean || body.pqsController == null ||                  (situation != ExperimentSituations.SrfLanded && situation != ExperimentSituations.SrfSplashed)"  is complex.
Complex Conditional,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,GetDifficultLocations,The conditional expression  "body == null || Instance == null || !Instance.bodyInfo.ContainsKey(body) ||                  !Instance.bodyInfo[body].ContainsKey(biome)"  is complex.
Complex Conditional,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,GetPrimarySituation,The conditional expression  "body == null || Instance == null || !Instance.bodyInfo.ContainsKey(body) ||                  !Instance.bodyInfo[body].ContainsKey(biome)"  is complex.
Complex Conditional,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,OnGUI,The conditional expression  "showGUI && HighLogic.LoadedScene != GameScenes.CREDITS && HighLogic.LoadedScene != GameScenes.LOADING &&                  HighLogic.LoadedScene != GameScenes.LOADINGBUFFER && HighLogic.LoadedScene != GameScenes.SETTINGS"  is complex.
Complex Conditional,ContractConfigurator,DraftTwitchViewers,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DraftTwitchViewers.cs,Update,The conditional expression  "HighLogic.LoadedScene != GameScenes.MAINMENU &&                  ContractSystem.Instance != null &&                   ContractPreLoader.Instance != null &&                  nameQueue.Count() + routinesRunning < draftLimit &&                  nextAttempt < Time.time"  is complex.
Complex Conditional,ContractConfigurator,PartValidationFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\PartValidationFactory.cs,Load,The conditional expression  "configNode.HasValue("part") || configNode.HasValue("partModule") || configNode.HasValue("partModuleType") || configNode.HasValue("category") || configNode.HasValue("manufacturer")"  is complex.
Complex Conditional,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,StringValue,The conditional expression  "hours != 0 || minutes != 0 || seconds != 0 || output.Length == 0"  is complex.
Complex Conditional,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,MeetBasicRequirements,The conditional expression  "(contract.ContractState == Contract.State.Offered || contract.ContractState == Contract.State.Withdrawn) &&                      Planetarium.fetch != null && contract.DateExpire < Planetarium.fetch.time"  is complex.
Complex Conditional,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseValue,The conditional expression  "handled == null ||                              handled.GetType() != typeof(DataStoreCastException) &&                              handled.GetType() != typeof(NotSupportedException) &&                              handled.GetType() != typeof(ArgumentNullException) &&                              handled.GetType() != typeof(InvalidCastException)"  is complex.
Complex Conditional,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ValidateUnexpectedValues,The conditional expression  "child.name == "PARAMETER" && (obj is ContractType || obj is ParameterFactory) ||                      child.name == "REQUIREMENT" && (obj is ContractType || obj is ParameterFactory || obj is ContractRequirement) ||                      child.name == "BEHAVIOUR" && (obj is ContractType) ||                      child.name == "ORBIT" && (obj is Behaviour.OrbitGeneratorFactory || obj is Behaviour.SpawnVesselFactory || obj is Behaviour.SpawnKerbalFactory)"  is complex.
Complex Conditional,ContractConfigurator.ExpressionParser,ListExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\ListExpressionParser.cs,SelectUnique,The conditional expression  "dataNode != null && dataNode.IsDeterministic(key) && (uniquenessCheck == DataNode.UniquenessCheck.CONTRACT_ALL || uniquenessCheck == DataNode.UniquenessCheck.CONTRACT_ACTIVE)"  is complex.
Complex Conditional,ContractConfigurator.ExpressionParser,DataNode,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\DataNode.cs,ParseDataNodes,The conditional expression  "name != "type" && name != "title" && name != "hidden" && name != "requiredValue" && name != "uniqueValue" && name != "activeUniqueValue" && name != "uniquenessCheck" && name != "isLiteral""  is complex.
Complex Conditional,ContractConfigurator.ExpressionParser,DataNode,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\DataNode.cs,ParseDataNodes,The conditional expression  "!data.HasValue("title") && requiredValue && !IsDeterministic(name) && !hidden && !doneTitleWarning && !dataValues[name].IsIgnoredType()"  is complex.
Complex Conditional,ContractConfigurator.ExpressionParser,StringExpressionParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\StringExpressionParser.cs,ParseStatement,The conditional expression  "m.Success && (specialIdentifierIndex == -1 || functionIndex < specialIdentifierIndex) &&                          (dataStoreIdentifierIndex == -1 || functionIndex < dataStoreIdentifierIndex) && (quoteIndex == -1 || functionIndex < quoteIndex)"  is complex.
Complex Conditional,ContractConfigurator.ExpressionParser,StringExpressionParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\StringExpressionParser.cs,ParseStatement,The conditional expression  "quoteIndex != -1 && (specialIdentifierIndex == -1 || quoteIndex < specialIdentifierIndex) &&                          (dataStoreIdentifierIndex == -1 || quoteIndex < dataStoreIdentifierIndex)"  is complex.
Complex Conditional,ContractConfigurator.ExpressionParser,ExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\ExpressionParser.cs,ParseToken,The conditional expression  "c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z'"  is complex.
Complex Conditional,ContractConfigurator.ExpressionParser,ExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\ExpressionParser.cs,ParseMethod,The conditional expression  "token != null && token.tokenType == TokenType.OPERATOR && IsBoolean(token.sval) &&                      typeof(TResult) == typeof(bool) && selectedMethod.ReturnType() != typeof(bool)"  is complex.
Complex Conditional,ContractConfigurator.Parameters,Duration,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Duration.cs,GetParameterTitle,The conditional expression  "currentVessel != null && endTimes.ContainsKey(currentVessel.id) && endTimes[currentVessel.id] > 0.01 ||                  currentVessel == null && endTime > 0.01"  is complex.
Complex Conditional,ContractConfigurator.Parameters,Duration,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Duration.cs,OnParameterChange,The conditional expression  "startCriteria == StartCriteria.PARAMETER_COMPLETION && param.State == ParameterState.Complete ||                      startCriteria == StartCriteria.PARAMETER_FAILURE && param.State == ParameterState.Failed"  is complex.
Complex Conditional,ContractConfigurator.Parameters,ContractConfiguratorParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\ContractConfiguratorParameter.cs,GetTitle,The conditional expression  "lastTitle != output && Root != null && (Root.ContractState == Contract.State.Active || Root.ContractState == Contract.State.Failed)"  is complex.
Complex Conditional,ContractConfigurator.Parameters,CollectScienceCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\CollectScienceCustom.cs,UpdateDelegates,The conditional expression  "param.ID.Contains("Destination:") || param.ID.Contains("Biome:") || param.ID.Contains("Situation:") ||                          param.ID.Contains("Location:")"  is complex.
Complex Conditional,ContractConfigurator.Parameters,CollectScienceCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\CollectScienceCustom.cs,CheckSubject,The conditional expression  "!string.IsNullOrEmpty(biome) &&                  !subject.id.Contains("High" + biome) &&                  !subject.id.Contains("Low" + biome) &&                  !subject.id.Contains("ed" + biome)"  is complex.
Complex Conditional,ContractConfigurator.Parameters,Rendezvous,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\Rendezvous.cs,OnUpdate,The conditional expression  "v != v1 && v.vesselType != VesselType.EVA && v.vesselType != VesselType.Debris && v.vesselType != VesselType.Flag"  is complex.
Complex Conditional,ContractConfigurator.Parameters,Docking,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\Docking.cs,OnPartAttach,The conditional expression  "e.host.vessel == (v1 ?? e.host.vessel) && e.target.vessel == (v2 ?? e.target.vessel) ||                  e.host.vessel == (v2 ?? e.host.vessel) && e.target.vessel == (v1 ?? e.target.vessel)"  is complex.
Complex Conditional,ContractConfigurator.Parameters,PartValidation,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\PartValidation.cs,CreateDelegates,The conditional expression  "minCount != 0 || maxCount != int.MaxValue && !(minCount == maxCount && maxCount == 0)"  is complex.
Complex Conditional,ContractConfigurator.Parameters,PartValidation,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\PartValidation.cs,PartModuleCheck,The conditional expression  "field != null && field.name == v.name && field.originalValue != null && field.originalValue.ToString() == v.value"  is complex.
Complex Conditional,ContractConfigurator.Parameters,VisitWaypoint,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\VisitWaypoint.cs,OnParameterChange,The conditional expression  "navPoint != null && NavWaypoint.fetch.IsActive && navPoint.Latitude == waypoint.latitude && navPoint.Longitude == waypoint.longitude"  is complex.
Complex Conditional,ContractConfigurator.Parameters,Timer,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Timer.cs,OnParameterChange,The conditional expression  "c == Root && p.ID == parameter && timerType == TimerType.PARAMETER_COMPLETION && endTime == 0.0"  is complex.
Complex Conditional,ContractConfigurator.Parameters,VesselParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter.cs,OnPartJointBreak,The conditional expression  "HighLogic.LoadedScene == GameScenes.EDITOR || p == null || p.Parent == null || p.Parent.vessel == null"  is complex.
Complex Conditional,ContractConfigurator.Parameters,VesselParameterGroup,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameterGroup.cs,OnContractFailed,The conditional expression  "c == Root && dissassociateVesselsOnContractFailure && !string.IsNullOrEmpty(define) && trackedVessel != null"  is complex.
Complex Conditional,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,MissionControlText,The conditional expression  "pair.Value.required && !contractType.dataNode.IsDeterministic(name) && !pair.Value.hidden && !pair.Value.IsIgnoredType()"  is complex.
Complex Conditional,ContractConfigurator.CutScene,CutSceneExecutor,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneExecutor.cs,OnGUI,The conditional expression  "state == State.STARTING_CUTSCENE_FADE_IN || state == State.STARTING_CUTSCENE_FADE_OUT ||                  state == State.ENDING_CUTSCENE_FADE_IN || state == State.ENDING_CUTSCENE_FADE_OUT ||                  state == State.IN_CUTSCENE && fadeTimer > 0.0"  is complex.
Empty Catch Block,ContractConfigurator,ConfiguredContract,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ConfiguredContract.cs,Generate,The method has an empty catch block.
Empty Catch Block,ContractConfigurator,ConfiguredContract,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ConfiguredContract.cs,OnLoad,The method has an empty catch block.
Empty Catch Block,ContractConfigurator,ConfiguredContract,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ConfiguredContract.cs,OnLoad,The method has an empty catch block.
Empty Catch Block,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseTypeValue,The method has an empty catch block.
Empty Catch Block,ContractConfigurator.ExpressionParser,StringExpressionParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\StringExpressionParser.cs,ParseStatement,The method has an empty catch block.
Empty Catch Block,ContractConfigurator.ExpressionParser,StringExpressionParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\StringExpressionParser.cs,ParseStatement,The method has an empty catch block.
Empty Catch Block,ContractConfigurator.Parameters,ContractConfiguratorParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\ContractConfiguratorParameter.cs,OnLoad,The method has an empty catch block.
Magic Number,ContractConfigurator.Behaviour,AwardExperienceFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\AwardExperienceFactory.cs,AwardExperienceFactory,The following statement contains a magic number: for (int i = 3; i <= 64; i++)              {                  KerbalRoster.AddExperienceType(AwardExperience.SPECIAL_XP + i' "Special experience from"' 0.0f' (float)i);              }
Magic Number,ContractConfigurator.Behaviour,AwardExperienceFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\AwardExperienceFactory.cs,AwardExperienceFactory,The following statement contains a magic number: for (int i = 3; i <= 64; i++)              {                  KerbalRoster.AddExperienceType(AwardExperience.SPECIAL_XP + i' "Special experience from"' 0.0f' (float)i);              }
Magic Number,ContractConfigurator.Behaviour,DialogBoxFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\DialogBoxFactory.cs,Load,The following statement contains a magic number: foreach (ConfigNode child in ConfigNodeUtil.GetChildNodes(configNode' "DIALOG_BOX"))              {                  string dialogBoxNode = "DIALOG_BOX_" + index++;                  DataNode childDataNode = new DataNode(dialogBoxNode' dataNode' this);                  try                  {                      ConfigNodeUtil.SetCurrentDataNode(childDataNode);                      DialogBox.DialogDetail detail = new DialogBox.DialogDetail();                      details.Add(detail);                        valid &= ConfigNodeUtil.ParseValue<DialogBox.TriggerCondition>(child' "condition"' x => detail.condition = x' this);                      valid &= ConfigNodeUtil.ParseValue<DialogBox.Position>(child' "position"' x => detail.position = x' this' DialogBox.Position.LEFT);                      valid &= ConfigNodeUtil.ParseValue<float>(child' "width"' x => detail.width = x' this' 0.8f' x => Validation.Between(x' 0.0f' 1.0f));                      valid &= ConfigNodeUtil.ParseValue<float>(child' "height"' x => detail.height = x' this' 0.0f' x => Validation.Between(x' 0.0f' 1.0f));                      valid &= ConfigNodeUtil.ParseValue<string>(child' "title"' x => detail.title = x' this' "");                      valid &= ConfigNodeUtil.ParseValue<Color>(child' "titleColor"' x => detail.titleColor = x' this' Color.white);                      valid &= ConfigNodeUtil.ParseValue<string>(child' "parameter"' x => detail.parameter = x' this' (string)null'                          x => ValidateMandatoryParameter(x' detail.condition));                        int sectionIndex = 0;                      foreach (ConfigNode sectionNode in child.GetNodes())                      {                          DataNode sectionDataNode = new DataNode(dialogBoxNode + "_" + sectionIndex++' childDataNode' this);                          ConfigNodeUtil.SetCurrentDataNode(sectionDataNode);                            if (sectionNode.name == "TEXT")                          {                              DialogBox.TextSection section = new DialogBox.TextSection();                              detail.sections.Add(section);                                // Parse the text twice' once to ensure parsability' the other to get the unexpanded text                              valid &= ConfigNodeUtil.ParseValue<string>(sectionNode' "text"' x => { }' this);                              if (valid)                              {                                  section.text = ConfigNodeUtil.ParseValue<string>(sectionNode' "text");                              }                                valid &= ConfigNodeUtil.ParseValue<Color>(sectionNode' "textColor"' x => section.textColor = x' this' new Color(0.8f' 0.8f' 0.8f));                              valid &= ConfigNodeUtil.ParseValue<int>(sectionNode' "fontSize"' x => section.fontSize = x' this' 20);                          }                          else if (sectionNode.name == "IMAGE")                          {                              DialogBox.ImageSection section = new DialogBox.ImageSection();                              detail.sections.Add(section);                                valid &= ConfigNodeUtil.ParseValue<string>(sectionNode' "url"' x => section.imageURL = x' this' ValidateImageURL);                              valid &= ConfigNodeUtil.ParseValue<string>(sectionNode' "characterName"'                                  x => { section.characterName = x; section.showName = !string.IsNullOrEmpty(x); }' this' "");                                                             valid &= ConfigNodeUtil.ParseValue<Color>(sectionNode' "textColor"' x => section.textColor = x' this' new Color(0.729f' 0.855f' 0.333f));                          }                          else if (sectionNode.name == "INSTRUCTOR")                          {                              DialogBox.InstructorSection section = new DialogBox.InstructorSection();                              detail.sections.Add(section);                                valid &= ConfigNodeUtil.ParseValue<string>(sectionNode' "name"' x => section.name = x' this);                              valid &= ConfigNodeUtil.ParseValue<bool>(sectionNode' "showName"' x => section.showName = x' this' true);                              valid &= ConfigNodeUtil.ParseValue<string>(sectionNode' "characterName"' x => section.characterName = x' this' "");                              valid &= ConfigNodeUtil.ParseValue<Color>(sectionNode' "textColor"' x => section.textColor = x' this' new Color(0.729f' 0.855f' 0.333f));                              valid &= ConfigNodeUtil.ParseValue<DialogBox.InstructorSection.Animation?>(sectionNode' "animation"' x => section.animation = x' this'                                  (DialogBox.InstructorSection.Animation?)null);                          }                          else if (sectionNode.name == "KERBAL")                          {                              DialogBox.KerbalSection section = new DialogBox.KerbalSection();                              detail.sections.Add(section);                                valid &= ConfigNodeUtil.ParseValue<bool>(sectionNode' "showName"' x => section.showName = x' this' true);                              valid &= ConfigNodeUtil.ParseValue<string>(sectionNode' "characterName"' x => section.characterName = x' this' "");                              valid &= ConfigNodeUtil.ParseValue<ProtoCrewMember.Gender>(sectionNode' "gender"' x => section.gender = x' this' ProtoCrewMember.Gender.Male);                              valid &= ConfigNodeUtil.ParseValue<Color>(sectionNode' "textColor"' x => section.textColor = x' this' new Color(0.729f' 0.855f' 0.333f));                                valid &= ConfigNodeUtil.ParseValue<int>(sectionNode' "crewIndex"' x => section.crewIndex = x' this' 0);                              valid &= ConfigNodeUtil.ParseValue<List<string>>(sectionNode' "excludeName"' x => section.excludeName = x' this' new List<string>());                          }                          else if (sectionNode.name == "BREAK")                          {                              DialogBox.BreakSection section = new DialogBox.BreakSection();                              detail.sections.Add(section);                          }                      }                  }                  finally                  {                      ConfigNodeUtil.SetCurrentDataNode(dataNode);                  }              }
Magic Number,ContractConfigurator.Behaviour,AwardExperience,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\AwardExperience.cs,DoAwarding,The following statement contains a magic number: foreach (ProtoCrewMember pcm in awardees.Where(pcm => pcm != null))              {                  LoggingUtil.LogVerbose(this' "    Awarding experience to " + pcm.name);                    // Find existing entries                  int currentValue = 2;                  foreach (FlightLog.Entry entry in pcm.careerLog.Entries.Concat(pcm.flightLog.Entries).Where(e => e.type.Contains(SPECIAL_XP)))                  {                      // Get the entry with the largest value                      int entryValue = Convert.ToInt32(entry.type.Substring(SPECIAL_XP.Length' entry.type.Length - SPECIAL_XP.Length));                      currentValue = Math.Max(currentValue' entryValue);                  }                    // Can't go above 64 special experience                  int value = Math.Min(currentValue + experience' 64);                    // Increment the entry's experience value                  string type = SPECIAL_XP + value.ToString();                    // Do the awarding                  pcm.flightLog.AddEntry(type' homeworld.name);                  if (pcm.rosterStatus != ProtoCrewMember.RosterStatus.Assigned)                  {                      pcm.ArchiveFlightLog();                  }                  else if (awardImmediately)                  {                      pcm.experience += experience;                      pcm.experienceLevel = KerbalRoster.CalculateExperienceLevel(pcm.experience);                  }              }
Magic Number,ContractConfigurator.Behaviour,AwardExperience,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\AwardExperience.cs,DoAwarding,The following statement contains a magic number: foreach (ProtoCrewMember pcm in awardees.Where(pcm => pcm != null))              {                  LoggingUtil.LogVerbose(this' "    Awarding experience to " + pcm.name);                    // Find existing entries                  int currentValue = 2;                  foreach (FlightLog.Entry entry in pcm.careerLog.Entries.Concat(pcm.flightLog.Entries).Where(e => e.type.Contains(SPECIAL_XP)))                  {                      // Get the entry with the largest value                      int entryValue = Convert.ToInt32(entry.type.Substring(SPECIAL_XP.Length' entry.type.Length - SPECIAL_XP.Length));                      currentValue = Math.Max(currentValue' entryValue);                  }                    // Can't go above 64 special experience                  int value = Math.Min(currentValue + experience' 64);                    // Increment the entry's experience value                  string type = SPECIAL_XP + value.ToString();                    // Do the awarding                  pcm.flightLog.AddEntry(type' homeworld.name);                  if (pcm.rosterStatus != ProtoCrewMember.RosterStatus.Assigned)                  {                      pcm.ArchiveFlightLog();                  }                  else if (awardImmediately)                  {                      pcm.experience += experience;                      pcm.experienceLevel = KerbalRoster.CalculateExperienceLevel(pcm.experience);                  }              }
Magic Number,ContractConfigurator.Behaviour,DialogBoxGUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The following statement contains a magic number: if (visible && MissionControl.Instance == null)                  {                      DialogBox.DialogDetail detail = dialogBox.displayQueue.FirstOrDefault();                      if (detail == null)                      {                          visible = false;                          Destroy(this);                          return;                      }                        float multiplier = (4.0f / 3.0f) / ((float)Screen.width / Screen.height);                      float w = multiplier * Screen.width * detail.width - 32;                        if (windowPos.width == 0 && windowPos.height == 0)                      {                          firstPositioning = true;                          float h = Screen.height * detail.height - 144f;                          float x = detail.position == Position.LEFT ? 16f : detail.position == Position.CENTER ? (Screen.width - w) / 2.0f : (Screen.width - w - 16f);                          windowPos = new Rect(x' 72f' w' h);                      }                      else if (firstPositioning && windowPos.width != 0 && Event.current.type == EventType.Layout)                      {                          firstPositioning = false;                          windowPos.xMin = detail.position == Position.LEFT ? 16f : detail.position == Position.CENTER ?                              (Screen.width - windowPos.width) / 2.0f : (Screen.width - windowPos.width - 16f);                      }                        UnityEngine.GUI.skin = HighLogic.Skin;                      windowPos = GUILayout.Window(GetType().FullName.GetHashCode()'                          windowPos' DrawMessageBox' detail.title' windowStyle ?? HighLogic.Skin.window' GUILayout.Width(w));                  }
Magic Number,ContractConfigurator.Behaviour,DialogBoxGUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,DrawMessageBox,The following statement contains a magic number: GUILayout.Space(8);
Magic Number,ContractConfigurator.Behaviour,DialogBoxGUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,DrawMessageBox,The following statement contains a magic number: foreach (Section section in detail.sections)                  {                      section.OnGUI();                      GUILayout.Space(8);                  }
Magic Number,ContractConfigurator.Behaviour,DialogBoxGUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,DrawMessageBox,The following statement contains a magic number: if (GUILayout.Button("OK"' GUILayout.MinWidth(80)))                  {                      windowPos = new Rect(0' 0' 0' 0);                      windowStyle = null;                      foreach (Section section in detail.sections)                      {                          section.OnDestroy();                      }                      dialogBox.displayQueue.Dequeue();                      dialogBox.details.Remove(detail);                  }
Magic Number,ContractConfigurator.Behaviour,TextSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnSave,The following statement contains a magic number: int a = (int)(textColor.a * 255);
Magic Number,ContractConfigurator.Behaviour,TextSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnSave,The following statement contains a magic number: int r = (int)(textColor.r * 255);
Magic Number,ContractConfigurator.Behaviour,TextSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnSave,The following statement contains a magic number: int g = (int)(textColor.g * 255);
Magic Number,ContractConfigurator.Behaviour,TextSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnSave,The following statement contains a magic number: int b = (int)(textColor.b * 255);
Magic Number,ContractConfigurator.Behaviour,NamedSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnSave,The following statement contains a magic number: int a = (int)(textColor.a * 255);
Magic Number,ContractConfigurator.Behaviour,NamedSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnSave,The following statement contains a magic number: int r = (int)(textColor.r * 255);
Magic Number,ContractConfigurator.Behaviour,NamedSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnSave,The following statement contains a magic number: int g = (int)(textColor.g * 255);
Magic Number,ContractConfigurator.Behaviour,NamedSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnSave,The following statement contains a magic number: int b = (int)(textColor.b * 255);
Magic Number,ContractConfigurator.Behaviour,InstructorSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The following statement contains a magic number: if (instructor == null)                  {                      instructor = ((GameObject)UnityEngine.Object.Instantiate(AssetBase.GetPrefab(name))).GetComponent<KerbalInstructor>();                        instructorTexture = new RenderTexture(128' 128' 8);                      instructor.instructorCamera.targetTexture = instructorTexture;                      instructor.instructorCamera.ResetAspect();                        // Remove the lights for Gene/Wernher                      Light mainlight = instructor.GetComponentsInChildren<Light>(true).Where(l => l.name == "mainlight").FirstOrDefault();                      if (mainlight != null)                      {                          UnityEngine.Object.Destroy(mainlight);                      }                      Light backlight = instructor.GetComponentsInChildren<Light>(true).Where(l => l.name == "backlight").FirstOrDefault();                      if (backlight != null)                      {                          UnityEngine.Object.Destroy(backlight);                      }                        offset += 25f;                      instructor.gameObject.transform.Translate(offset' 0.0f' 0.0f);                        // Add a light                      lightGameObject = new GameObject("Dialog Box Light");                      Light lightComp = lightGameObject.AddComponent<Light>();                      lightComp.color = new Color(0.4f' 0.4f' 0.4f);                      lightGameObject.transform.position = instructor.instructorCamera.transform.position;                        if (string.IsNullOrEmpty(characterName))                      {                          characterName = Localizer.GetStringByTag(instructor.CharacterName);                      }                        instructor.SetupAnimations();                        if (animation != null)                      {                          switch (animation.Value)                          {                              case Animation.idle:                                  animState = instructor.anim_idle;                                  break;                              case Animation.idle_lookAround:                                  animState = instructor.anim_idle_lookAround;                                  break;                              case Animation.idle_sigh:                                  animState = instructor.anim_idle_sigh;                                  break;                              case Animation.idle_wonder:                                  animState = instructor.anim_idle_wonder;                                  break;                              case Animation.true_thumbUp:                                  animState = instructor.anim_true_thumbUp;                                  break;                              case Animation.true_thumbsUp:                                  animState = instructor.anim_true_thumbsUp;                                  break;                              case Animation.true_nodA:                                  animState = instructor.anim_true_nodA;                                  break;                              case Animation.true_nodB:                                  animState = instructor.anim_true_nodB;                                  break;                              case Animation.true_smileA:                                  animState = instructor.anim_true_smileA;                                  break;                              case Animation.true_smileB:                                  animState = instructor.anim_true_smileB;                                  break;                              case Animation.false_disappointed:                                  animState = instructor.anim_false_disappointed;                                  break;                              case Animation.false_disagreeA:                                  animState = instructor.anim_false_disagreeA;                                  break;                              case Animation.false_disagreeB:                                  animState = instructor.anim_false_disagreeB;                                  break;                              case Animation.false_disagreeC:                                  animState = instructor.anim_false_disagreeC;                                  break;                              case Animation.false_sadA:                                  animState = instructor.anim_false_sadA;                                  break;                          }                            // Give a short delay before playing the animation                          nextAnimTime = Time.fixedTime + 0.3f;                      }                  }
Magic Number,ContractConfigurator.Behaviour,InstructorSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The following statement contains a magic number: if (instructor == null)                  {                      instructor = ((GameObject)UnityEngine.Object.Instantiate(AssetBase.GetPrefab(name))).GetComponent<KerbalInstructor>();                        instructorTexture = new RenderTexture(128' 128' 8);                      instructor.instructorCamera.targetTexture = instructorTexture;                      instructor.instructorCamera.ResetAspect();                        // Remove the lights for Gene/Wernher                      Light mainlight = instructor.GetComponentsInChildren<Light>(true).Where(l => l.name == "mainlight").FirstOrDefault();                      if (mainlight != null)                      {                          UnityEngine.Object.Destroy(mainlight);                      }                      Light backlight = instructor.GetComponentsInChildren<Light>(true).Where(l => l.name == "backlight").FirstOrDefault();                      if (backlight != null)                      {                          UnityEngine.Object.Destroy(backlight);                      }                        offset += 25f;                      instructor.gameObject.transform.Translate(offset' 0.0f' 0.0f);                        // Add a light                      lightGameObject = new GameObject("Dialog Box Light");                      Light lightComp = lightGameObject.AddComponent<Light>();                      lightComp.color = new Color(0.4f' 0.4f' 0.4f);                      lightGameObject.transform.position = instructor.instructorCamera.transform.position;                        if (string.IsNullOrEmpty(characterName))                      {                          characterName = Localizer.GetStringByTag(instructor.CharacterName);                      }                        instructor.SetupAnimations();                        if (animation != null)                      {                          switch (animation.Value)                          {                              case Animation.idle:                                  animState = instructor.anim_idle;                                  break;                              case Animation.idle_lookAround:                                  animState = instructor.anim_idle_lookAround;                                  break;                              case Animation.idle_sigh:                                  animState = instructor.anim_idle_sigh;                                  break;                              case Animation.idle_wonder:                                  animState = instructor.anim_idle_wonder;                                  break;                              case Animation.true_thumbUp:                                  animState = instructor.anim_true_thumbUp;                                  break;                              case Animation.true_thumbsUp:                                  animState = instructor.anim_true_thumbsUp;                                  break;                              case Animation.true_nodA:                                  animState = instructor.anim_true_nodA;                                  break;                              case Animation.true_nodB:                                  animState = instructor.anim_true_nodB;                                  break;                              case Animation.true_smileA:                                  animState = instructor.anim_true_smileA;                                  break;                              case Animation.true_smileB:                                  animState = instructor.anim_true_smileB;                                  break;                              case Animation.false_disappointed:                                  animState = instructor.anim_false_disappointed;                                  break;                              case Animation.false_disagreeA:                                  animState = instructor.anim_false_disagreeA;                                  break;                              case Animation.false_disagreeB:                                  animState = instructor.anim_false_disagreeB;                                  break;                              case Animation.false_disagreeC:                                  animState = instructor.anim_false_disagreeC;                                  break;                              case Animation.false_sadA:                                  animState = instructor.anim_false_sadA;                                  break;                          }                            // Give a short delay before playing the animation                          nextAnimTime = Time.fixedTime + 0.3f;                      }                  }
Magic Number,ContractConfigurator.Behaviour,InstructorSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The following statement contains a magic number: if (instructor == null)                  {                      instructor = ((GameObject)UnityEngine.Object.Instantiate(AssetBase.GetPrefab(name))).GetComponent<KerbalInstructor>();                        instructorTexture = new RenderTexture(128' 128' 8);                      instructor.instructorCamera.targetTexture = instructorTexture;                      instructor.instructorCamera.ResetAspect();                        // Remove the lights for Gene/Wernher                      Light mainlight = instructor.GetComponentsInChildren<Light>(true).Where(l => l.name == "mainlight").FirstOrDefault();                      if (mainlight != null)                      {                          UnityEngine.Object.Destroy(mainlight);                      }                      Light backlight = instructor.GetComponentsInChildren<Light>(true).Where(l => l.name == "backlight").FirstOrDefault();                      if (backlight != null)                      {                          UnityEngine.Object.Destroy(backlight);                      }                        offset += 25f;                      instructor.gameObject.transform.Translate(offset' 0.0f' 0.0f);                        // Add a light                      lightGameObject = new GameObject("Dialog Box Light");                      Light lightComp = lightGameObject.AddComponent<Light>();                      lightComp.color = new Color(0.4f' 0.4f' 0.4f);                      lightGameObject.transform.position = instructor.instructorCamera.transform.position;                        if (string.IsNullOrEmpty(characterName))                      {                          characterName = Localizer.GetStringByTag(instructor.CharacterName);                      }                        instructor.SetupAnimations();                        if (animation != null)                      {                          switch (animation.Value)                          {                              case Animation.idle:                                  animState = instructor.anim_idle;                                  break;                              case Animation.idle_lookAround:                                  animState = instructor.anim_idle_lookAround;                                  break;                              case Animation.idle_sigh:                                  animState = instructor.anim_idle_sigh;                                  break;                              case Animation.idle_wonder:                                  animState = instructor.anim_idle_wonder;                                  break;                              case Animation.true_thumbUp:                                  animState = instructor.anim_true_thumbUp;                                  break;                              case Animation.true_thumbsUp:                                  animState = instructor.anim_true_thumbsUp;                                  break;                              case Animation.true_nodA:                                  animState = instructor.anim_true_nodA;                                  break;                              case Animation.true_nodB:                                  animState = instructor.anim_true_nodB;                                  break;                              case Animation.true_smileA:                                  animState = instructor.anim_true_smileA;                                  break;                              case Animation.true_smileB:                                  animState = instructor.anim_true_smileB;                                  break;                              case Animation.false_disappointed:                                  animState = instructor.anim_false_disappointed;                                  break;                              case Animation.false_disagreeA:                                  animState = instructor.anim_false_disagreeA;                                  break;                              case Animation.false_disagreeB:                                  animState = instructor.anim_false_disagreeB;                                  break;                              case Animation.false_disagreeC:                                  animState = instructor.anim_false_disagreeC;                                  break;                              case Animation.false_sadA:                                  animState = instructor.anim_false_sadA;                                  break;                          }                            // Give a short delay before playing the animation                          nextAnimTime = Time.fixedTime + 0.3f;                      }                  }
Magic Number,ContractConfigurator.Behaviour,InstructorSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The following statement contains a magic number: GUILayout.BeginVertical(GUILayout.Width(128));
Magic Number,ContractConfigurator.Behaviour,InstructorSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The following statement contains a magic number: GUILayout.Box(""' GUILayout.Width(128)' GUILayout.Height(128));
Magic Number,ContractConfigurator.Behaviour,InstructorSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The following statement contains a magic number: GUILayout.Box(""' GUILayout.Width(128)' GUILayout.Height(128));
Magic Number,ContractConfigurator.Behaviour,InstructorSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The following statement contains a magic number: if (Event.current.type == EventType.Repaint)                  {                      Rect rect = GUILayoutUtility.GetLastRect();                      rect = new Rect(rect.x + 1f' rect.y + 1f' rect.width - 2f' rect.height - 2f);                      Graphics.DrawTexture(rect' instructorTexture' new Rect(0.0f' 0.0f' 1f' 1f)' 124' 124' 124' 124' Color.white' PortraitRenderMaterial);                  }
Magic Number,ContractConfigurator.Behaviour,InstructorSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The following statement contains a magic number: if (Event.current.type == EventType.Repaint)                  {                      Rect rect = GUILayoutUtility.GetLastRect();                      rect = new Rect(rect.x + 1f' rect.y + 1f' rect.width - 2f' rect.height - 2f);                      Graphics.DrawTexture(rect' instructorTexture' new Rect(0.0f' 0.0f' 1f' 1f)' 124' 124' 124' 124' Color.white' PortraitRenderMaterial);                  }
Magic Number,ContractConfigurator.Behaviour,InstructorSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The following statement contains a magic number: if (Event.current.type == EventType.Repaint)                  {                      Rect rect = GUILayoutUtility.GetLastRect();                      rect = new Rect(rect.x + 1f' rect.y + 1f' rect.width - 2f' rect.height - 2f);                      Graphics.DrawTexture(rect' instructorTexture' new Rect(0.0f' 0.0f' 1f' 1f)' 124' 124' 124' 124' Color.white' PortraitRenderMaterial);                  }
Magic Number,ContractConfigurator.Behaviour,InstructorSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The following statement contains a magic number: if (Event.current.type == EventType.Repaint)                  {                      Rect rect = GUILayoutUtility.GetLastRect();                      rect = new Rect(rect.x + 1f' rect.y + 1f' rect.width - 2f' rect.height - 2f);                      Graphics.DrawTexture(rect' instructorTexture' new Rect(0.0f' 0.0f' 1f' 1f)' 124' 124' 124' 124' Color.white' PortraitRenderMaterial);                  }
Magic Number,ContractConfigurator.Behaviour,InstructorSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The following statement contains a magic number: DisplayName(128);
Magic Number,ContractConfigurator.Behaviour,KerbalSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,SelectKerbal,The following statement contains a magic number: if (kerbal == null && string.IsNullOrEmpty(characterName))                  {                      System.Random r = new System.Random();                      gender = r.Next(2) == 0 ? ProtoCrewMember.Gender.Male : ProtoCrewMember.Gender.Female;                      characterName = Kerbal.KerbalName(gender);                  }
Magic Number,ContractConfigurator.Behaviour,KerbalSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnPreCull,The following statement contains a magic number: if (texture == null || (kerbal != null && kerbal.KerbalRef == null && texture.GetType() == typeof(RenderTexture)) || nextKerbalCheck < Time.fixedTime)                  {                      nextKerbalCheck = Time.fixedTime + 0.5f;                        if (kerbal == null)                      {                          texture = gender == ProtoCrewMember.Gender.Male ? eva_ac_male : eva_ac_female;                      }                      else if (kerbal.KerbalRef != null)                      {                          texture = kerbal.KerbalRef.avatarTexture;                      }                      else                      {                          // For a kerbal out on a mission' find their ship                          Vessel kerbVessel = null;                          if (kerbal.rosterStatus == ProtoCrewMember.RosterStatus.Assigned)                          {                              kerbVessel = FlightGlobals.Vessels.Where(v => v.GetVesselCrew().Contains(kerbal)).FirstOrDefault();                          }                            // No Kerbal' assume they're available                          if (kerbVessel == null)                          {                              texture = kerbal.gender == ProtoCrewMember.Gender.Male ? eva_ac_male : eva_ac_female;                          }                          // IVA Kerbal                          else if (!kerbVessel.isEVA)                          {                              texture = kerbal.gender == ProtoCrewMember.Gender.Male ? iva_male : iva_female;                          }                          // EVA Kerbal - kerbin                          else if (kerbVessel.mainBody.isHomeWorld && kerbVessel.altitude < kerbVessel.mainBody.atmosphereDepth / 2.0)                          {                              texture = kerbal.gender == ProtoCrewMember.Gender.Male ? eva_kerbin_male : eva_kerbin_female;                          }                          // EVA Kerbal - elsewhere                          else                          {                              texture = kerbal.gender == ProtoCrewMember.Gender.Male ? eva_space_male : eva_space_female;                          }                      }                  }
Magic Number,ContractConfigurator.Behaviour,KerbalSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The following statement contains a magic number: GUILayout.BeginVertical(GUILayout.Width(128));
Magic Number,ContractConfigurator.Behaviour,KerbalSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The following statement contains a magic number: GUILayout.Box(""' GUILayout.Width(128)' GUILayout.Height(128));
Magic Number,ContractConfigurator.Behaviour,KerbalSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The following statement contains a magic number: GUILayout.Box(""' GUILayout.Width(128)' GUILayout.Height(128));
Magic Number,ContractConfigurator.Behaviour,KerbalSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The following statement contains a magic number: DisplayName(128);
Magic Number,ContractConfigurator.Behaviour,BreakSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The following statement contains a magic number: GUILayout.Space(8);
Magic Number,ContractConfigurator.Behaviour,DialogDetail,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnSave,The following statement contains a magic number: int a = (int)(titleColor.a * 255);
Magic Number,ContractConfigurator.Behaviour,DialogDetail,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnSave,The following statement contains a magic number: int r = (int)(titleColor.r * 255);
Magic Number,ContractConfigurator.Behaviour,DialogDetail,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnSave,The following statement contains a magic number: int g = (int)(titleColor.g * 255);
Magic Number,ContractConfigurator.Behaviour,DialogDetail,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnSave,The following statement contains a magic number: int b = (int)(titleColor.b * 255);
Magic Number,ContractConfigurator.Behaviour,PassengerLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnPassengers.cs,OnGUI,The following statement contains a magic number: if (visible && !uiHidden)                  {                      if (FlightGlobals.ActiveVessel == null || stateChangeTime < Time.fixedTime)                      {                          visible = false;                          stateChangeTime = double.MaxValue;                      }                      else if (FlightGlobals.ActiveVessel.situation != Vessel.Situations.PRELAUNCH &&                          FlightGlobals.ActiveVessel.situation != Vessel.Situations.LANDED)                      {                          stateChangeTime = Time.fixedTime + 2.5;                      }                      else                      {                          stateChangeTime = double.MaxValue;                      }                                              GUI.skin = HighLogic.Skin;                      if (!stylesSetup)                      {                          stylesSetup = true;                            redLabel = new GUIStyle(GUI.skin.label);                          redLabel.normal.textColor = Color.red;                          disabledButton = new GUIStyle(GUI.skin.button);                          disabledButton.normal.textColor = new Color(0.2f' 0.2f' 0.2f);                          disabledButton.focused = disabledButton.normal;                          disabledButton.hover = disabledButton.normal;                      }                        windowPos = GUILayout.Window(                          GetType().FullName.GetHashCode()'                          windowPos'                          PassengerDialog'                          "Load Passengers?"'                          GUILayout.Width(480)'                          GUILayout.Height(120));                  }
Magic Number,ContractConfigurator.Behaviour,PassengerLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnPassengers.cs,OnGUI,The following statement contains a magic number: if (visible && !uiHidden)                  {                      if (FlightGlobals.ActiveVessel == null || stateChangeTime < Time.fixedTime)                      {                          visible = false;                          stateChangeTime = double.MaxValue;                      }                      else if (FlightGlobals.ActiveVessel.situation != Vessel.Situations.PRELAUNCH &&                          FlightGlobals.ActiveVessel.situation != Vessel.Situations.LANDED)                      {                          stateChangeTime = Time.fixedTime + 2.5;                      }                      else                      {                          stateChangeTime = double.MaxValue;                      }                                              GUI.skin = HighLogic.Skin;                      if (!stylesSetup)                      {                          stylesSetup = true;                            redLabel = new GUIStyle(GUI.skin.label);                          redLabel.normal.textColor = Color.red;                          disabledButton = new GUIStyle(GUI.skin.button);                          disabledButton.normal.textColor = new Color(0.2f' 0.2f' 0.2f);                          disabledButton.focused = disabledButton.normal;                          disabledButton.hover = disabledButton.normal;                      }                        windowPos = GUILayout.Window(                          GetType().FullName.GetHashCode()'                          windowPos'                          PassengerDialog'                          "Load Passengers?"'                          GUILayout.Width(480)'                          GUILayout.Height(120));                  }
Magic Number,ContractConfigurator.Behaviour,PassengerLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnPassengers.cs,OnGUI,The following statement contains a magic number: if (visible && !uiHidden)                  {                      if (FlightGlobals.ActiveVessel == null || stateChangeTime < Time.fixedTime)                      {                          visible = false;                          stateChangeTime = double.MaxValue;                      }                      else if (FlightGlobals.ActiveVessel.situation != Vessel.Situations.PRELAUNCH &&                          FlightGlobals.ActiveVessel.situation != Vessel.Situations.LANDED)                      {                          stateChangeTime = Time.fixedTime + 2.5;                      }                      else                      {                          stateChangeTime = double.MaxValue;                      }                                              GUI.skin = HighLogic.Skin;                      if (!stylesSetup)                      {                          stylesSetup = true;                            redLabel = new GUIStyle(GUI.skin.label);                          redLabel.normal.textColor = Color.red;                          disabledButton = new GUIStyle(GUI.skin.button);                          disabledButton.normal.textColor = new Color(0.2f' 0.2f' 0.2f);                          disabledButton.focused = disabledButton.normal;                          disabledButton.hover = disabledButton.normal;                      }                        windowPos = GUILayout.Window(                          GetType().FullName.GetHashCode()'                          windowPos'                          PassengerDialog'                          "Load Passengers?"'                          GUILayout.Width(480)'                          GUILayout.Height(120));                  }
Magic Number,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,CreateVessels,The following statement contains a magic number: foreach (VesselData vesselData in vessels)              {                  LoggingUtil.LogVerbose(this' "Spawning a vessel named '" + vesselData.name + "'");                    // Set additional info for landed vessels                  bool landed = false;                  if (!vesselData.orbiting)                  {                      landed = true;                      if (vesselData.altitude == null)                      {                          vesselData.altitude = LocationUtil.TerrainHeight(vesselData.latitude' vesselData.longitude' vesselData.body);                      }                        Vector3d pos = vesselData.body.GetWorldSurfacePosition(vesselData.latitude' vesselData.longitude' vesselData.altitude.Value);                        vesselData.orbit = new Orbit(0.0' 0.0' 0.0' 0.0' 0.0' 0.0' 0.0' vesselData.body);                      vesselData.orbit.UpdateFromStateVectors(pos' vesselData.body.getRFrmVel(pos)' vesselData.body' Planetarium.GetUniversalTime());                  }                  else                  {                      vesselData.orbit.referenceBody = vesselData.body;                  }                    ConfigNode[] partNodes;                  UntrackedObjectClass sizeClass;                  ShipConstruct shipConstruct = null;                  if (!string.IsNullOrEmpty(vesselData.craftURL))                  {                      // Save the current ShipConstruction ship' otherwise the player will see the spawned ship next time they enter the VAB!                      ConfigNode currentShip = ShipConstruction.ShipConfig;                        shipConstruct = ShipConstruction.LoadShip(gameDataDir + "/" + vesselData.craftURL);                      if (shipConstruct == null)                      {                          LoggingUtil.LogError(this' "ShipConstruct was null when tried to load '" + vesselData.craftURL +                              "' (usually this means the file could not be found).");                          continue;                      }                        // Restore ShipConstruction ship                      ShipConstruction.ShipConfig = currentShip;                        // Set the name                      if (string.IsNullOrEmpty(vesselData.name))                      {                          vesselData.name = shipConstruct.shipName;                      }                        // Set some parameters that need to be at the part level                      uint missionID = (uint)Guid.NewGuid().GetHashCode();                      uint launchID = HighLogic.CurrentGame.launchID++;                      foreach (Part p in shipConstruct.parts)                      {                          p.flightID = ShipConstruction.GetUniqueFlightID(HighLogic.CurrentGame.flightState);                          p.missionID = missionID;                          p.launchID = launchID;                          p.flagURL = vesselData.flagURL ?? HighLogic.CurrentGame.flagURL;                            // Had some issues with this being set to -1 for some ships - can't figure out                          // why.  End result is the vessel exploding' so let's just set it to a positive                          // value.                          p.temperature = 1.0;                      }                        // Estimate an object class' numbers are based on the in game description of the                      // size classes.                      float size = shipConstruct.shipSize.magnitude / 2.0f;                      if (size < 4.0f)                      {                          sizeClass = UntrackedObjectClass.A;                      }                      else if (size < 7.0f)                      {                          sizeClass = UntrackedObjectClass.B;                      }                      else if (size < 12.0f)                      {                          sizeClass = UntrackedObjectClass.C;                      }                      else if (size < 18.0f)                      {                          sizeClass = UntrackedObjectClass.D;                      }                      else                      {                          sizeClass = UntrackedObjectClass.E;                      }                        foreach (CrewData cd in vesselData.crew)                      {                          bool success = false;                            // Find a seat for the crew                          Part part = shipConstruct.parts.Find(p => p.protoModuleCrew.Count < p.CrewCapacity);                            // Add the crew member                          if (part != null)                          {                              // Create the ProtoCrewMember                              ProtoCrewMember crewMember = HighLogic.CurrentGame.CrewRoster.GetNewKerbal(ProtoCrewMember.KerbalType.Unowned);                              if (cd.gender != null)                              {                                  crewMember.gender = cd.gender.Value;                              }                              if (cd.name != null)                              {                                  crewMember.ChangeName(cd.name);                              }                                // Add them to the part                              success = part.AddCrewmemberAt(crewMember' part.protoModuleCrew.Count);                          }                            if (!success)                          {                              LoggingUtil.LogWarning(this' "Unable to add crew to vessel named '" + vesselData.name + "'.  Perhaps there's no room?");                              break;                          }                      }                        // Create a dummy ProtoVessel' we will use this to dump the parts to a config node.                      // We can't use the config nodes from the .craft file' because they are in a                      // slightly different format than those required for a ProtoVessel.                      ConfigNode empty = new ConfigNode();                      ProtoVessel dummyProto = new ProtoVessel(empty' null);                      Vessel dummyVessel = new GameObject().AddComponent<Vessel>();                      dummyVessel.parts = shipConstruct.parts;                      dummyProto.vesselRef = dummyVessel;                        // Create the ProtoPartSnapshot objects and then initialize them                      foreach (Part p in shipConstruct.parts)                      {                          dummyProto.protoPartSnapshots.Add(new ProtoPartSnapshot(p' dummyProto));                      }                      foreach (ProtoPartSnapshot p in dummyProto.protoPartSnapshots)                      {                          p.storePartRefs();                      }                        // Create the ship's parts                      partNodes = dummyProto.protoPartSnapshots.Select<ProtoPartSnapshot' ConfigNode>(GetNodeForPart).ToArray();                        // Clean up                      GameObject.Destroy(dummyVessel.gameObject);                  }                  else                  {                      // Create crew member array                      ProtoCrewMember[] crewArray = new ProtoCrewMember[vesselData.crew.Count];                      int i = 0;                      foreach (CrewData cd in vesselData.crew)                      {                          // Create the ProtoCrewMember                          ProtoCrewMember crewMember = HighLogic.CurrentGame.CrewRoster.GetNewKerbal(ProtoCrewMember.KerbalType.Unowned);                          if (cd.name != null)                          {                              crewMember.ChangeName(cd.name);                          }                            crewArray[i++] = crewMember;                      }                        // Create part nodes                      uint flightId = ShipConstruction.GetUniqueFlightID(HighLogic.CurrentGame.flightState);                      partNodes = new ConfigNode[1];                      partNodes[0] = ProtoVessel.CreatePartNode(vesselData.craftPart.name' flightId' crewArray);                        // Default the size class                      sizeClass = UntrackedObjectClass.A;                        // Set the name                      if (string.IsNullOrEmpty(vesselData.name))                      {                          vesselData.name = vesselData.craftPart.name;                      }                  }                    // Create additional nodes                  ConfigNode[] additionalNodes = new ConfigNode[1];                  DiscoveryLevels discoveryLevel = vesselData.owned ? DiscoveryLevels.Owned : DiscoveryLevels.Unowned;                  additionalNodes[0] = ProtoVessel.CreateDiscoveryNode(discoveryLevel' sizeClass' contract.TimeDeadline' contract.TimeDeadline);                    // Create the config node representation of the ProtoVessel                  ConfigNode protoVesselNode = ProtoVessel.CreateVesselNode(vesselData.name' vesselData.vesselType' vesselData.orbit' 0' partNodes' additionalNodes);                    // Additional seetings for a landed vessel                  if (!vesselData.orbiting)                  {                      Vector3d norm = vesselData.body.GetRelSurfaceNVector(vesselData.latitude' vesselData.longitude);                        double terrainHeight = 0.0;                      if (vesselData.body.pqsController != null)                      {                          terrainHeight = vesselData.body.pqsController.GetSurfaceHeight(norm) - vesselData.body.pqsController.radius;                      }                      bool splashed = landed && terrainHeight < 0.001;                        // Create the config node representation of the ProtoVessel                      // Note - flying is experimental' and so far doesn't work                      protoVesselNode.SetValue("sit"' (splashed ? Vessel.Situations.SPLASHED : landed ?                          Vessel.Situations.LANDED : Vessel.Situations.FLYING).ToString());                      protoVesselNode.SetValue("landed"' (landed && !splashed).ToString());                      protoVesselNode.SetValue("splashed"' splashed.ToString());                      protoVesselNode.SetValue("lat"' vesselData.latitude.ToString());                      protoVesselNode.SetValue("lon"' vesselData.longitude.ToString());                      protoVesselNode.SetValue("alt"' vesselData.altitude.ToString());                      protoVesselNode.SetValue("landedAt"' vesselData.body.name);                        // Figure out the additional height to subtract                      float lowest = float.MaxValue;                      if (shipConstruct != null)                      {                          foreach (Part p in shipConstruct.parts)                          {                              foreach (Collider collider in p.GetComponentsInChildren<Collider>())                              {                                  if (collider.gameObject.layer != 21 && collider.enabled)                                  {                                      lowest = Mathf.Min(lowest' collider.bounds.min.y);                                  }                              }                          }                      }                      else                      {                          foreach (Collider collider in vesselData.craftPart.partPrefab.GetComponentsInChildren<Collider>())                          {                              if (collider.gameObject.layer != 21 && collider.enabled)                              {                                  lowest = Mathf.Min(lowest' collider.bounds.min.y);                              }                          }                      }                        if (lowest == float.MaxValue)                      {                          lowest = 0;                      }                        // Figure out the surface height and rotation                      Quaternion normal = Quaternion.LookRotation(new Vector3((float)norm.x' (float)norm.y' (float)norm.z));                      Quaternion rotation = Quaternion.identity;                      float heading = vesselData.heading;                      if (shipConstruct == null)                      {                          rotation = rotation * Quaternion.FromToRotation(Vector3.up' Vector3.back);                      }                      else if (shipConstruct.shipFacility == EditorFacility.SPH)                      {                          rotation = rotation * Quaternion.FromToRotation(Vector3.forward' -Vector3.forward);                          heading += 180.0f;                      }                      else                      {                          rotation = rotation * Quaternion.FromToRotation(Vector3.up' Vector3.forward);                      }                        rotation = rotation * Quaternion.AngleAxis(vesselData.pitch' Vector3.right);                      rotation = rotation * Quaternion.AngleAxis(vesselData.roll' Vector3.down);                      rotation = rotation * Quaternion.AngleAxis(heading' Vector3.forward);                        // Set the height and rotation                      if (landed || splashed)                      {                          float hgt = (shipConstruct != null ? shipConstruct.parts[0] : vesselData.craftPart.partPrefab).localRoot.attPos0.y - lowest;                          hgt += vesselData.height;                          protoVesselNode.SetValue("hgt"' hgt.ToString());                      }                      protoVesselNode.SetValue("rot"' KSPUtil.WriteQuaternion(rotation * normal));                        // Set the normal vector relative to the surface                      Vector3 nrm = (rotation * Vector3.forward);                      protoVesselNode.SetValue("nrm"' nrm.x + "'" + nrm.y + "'" + nrm.z);                        protoVesselNode.SetValue("prst"' false.ToString());                  }                    // Add vessel to the game                  ProtoVessel protoVessel = new ProtoVessel(protoVesselNode' HighLogic.CurrentGame);                  protoVessel.Load(HighLogic.CurrentGame.flightState);                    // Store the id for later use                  vesselData.id = protoVessel.vesselRef.id;                    // Associate it so that it can be used in contract parameters                  ContractVesselTracker.Instance.AssociateVessel(vesselData.name' protoVessel.vesselRef);              }
Magic Number,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,CreateVessels,The following statement contains a magic number: foreach (VesselData vesselData in vessels)              {                  LoggingUtil.LogVerbose(this' "Spawning a vessel named '" + vesselData.name + "'");                    // Set additional info for landed vessels                  bool landed = false;                  if (!vesselData.orbiting)                  {                      landed = true;                      if (vesselData.altitude == null)                      {                          vesselData.altitude = LocationUtil.TerrainHeight(vesselData.latitude' vesselData.longitude' vesselData.body);                      }                        Vector3d pos = vesselData.body.GetWorldSurfacePosition(vesselData.latitude' vesselData.longitude' vesselData.altitude.Value);                        vesselData.orbit = new Orbit(0.0' 0.0' 0.0' 0.0' 0.0' 0.0' 0.0' vesselData.body);                      vesselData.orbit.UpdateFromStateVectors(pos' vesselData.body.getRFrmVel(pos)' vesselData.body' Planetarium.GetUniversalTime());                  }                  else                  {                      vesselData.orbit.referenceBody = vesselData.body;                  }                    ConfigNode[] partNodes;                  UntrackedObjectClass sizeClass;                  ShipConstruct shipConstruct = null;                  if (!string.IsNullOrEmpty(vesselData.craftURL))                  {                      // Save the current ShipConstruction ship' otherwise the player will see the spawned ship next time they enter the VAB!                      ConfigNode currentShip = ShipConstruction.ShipConfig;                        shipConstruct = ShipConstruction.LoadShip(gameDataDir + "/" + vesselData.craftURL);                      if (shipConstruct == null)                      {                          LoggingUtil.LogError(this' "ShipConstruct was null when tried to load '" + vesselData.craftURL +                              "' (usually this means the file could not be found).");                          continue;                      }                        // Restore ShipConstruction ship                      ShipConstruction.ShipConfig = currentShip;                        // Set the name                      if (string.IsNullOrEmpty(vesselData.name))                      {                          vesselData.name = shipConstruct.shipName;                      }                        // Set some parameters that need to be at the part level                      uint missionID = (uint)Guid.NewGuid().GetHashCode();                      uint launchID = HighLogic.CurrentGame.launchID++;                      foreach (Part p in shipConstruct.parts)                      {                          p.flightID = ShipConstruction.GetUniqueFlightID(HighLogic.CurrentGame.flightState);                          p.missionID = missionID;                          p.launchID = launchID;                          p.flagURL = vesselData.flagURL ?? HighLogic.CurrentGame.flagURL;                            // Had some issues with this being set to -1 for some ships - can't figure out                          // why.  End result is the vessel exploding' so let's just set it to a positive                          // value.                          p.temperature = 1.0;                      }                        // Estimate an object class' numbers are based on the in game description of the                      // size classes.                      float size = shipConstruct.shipSize.magnitude / 2.0f;                      if (size < 4.0f)                      {                          sizeClass = UntrackedObjectClass.A;                      }                      else if (size < 7.0f)                      {                          sizeClass = UntrackedObjectClass.B;                      }                      else if (size < 12.0f)                      {                          sizeClass = UntrackedObjectClass.C;                      }                      else if (size < 18.0f)                      {                          sizeClass = UntrackedObjectClass.D;                      }                      else                      {                          sizeClass = UntrackedObjectClass.E;                      }                        foreach (CrewData cd in vesselData.crew)                      {                          bool success = false;                            // Find a seat for the crew                          Part part = shipConstruct.parts.Find(p => p.protoModuleCrew.Count < p.CrewCapacity);                            // Add the crew member                          if (part != null)                          {                              // Create the ProtoCrewMember                              ProtoCrewMember crewMember = HighLogic.CurrentGame.CrewRoster.GetNewKerbal(ProtoCrewMember.KerbalType.Unowned);                              if (cd.gender != null)                              {                                  crewMember.gender = cd.gender.Value;                              }                              if (cd.name != null)                              {                                  crewMember.ChangeName(cd.name);                              }                                // Add them to the part                              success = part.AddCrewmemberAt(crewMember' part.protoModuleCrew.Count);                          }                            if (!success)                          {                              LoggingUtil.LogWarning(this' "Unable to add crew to vessel named '" + vesselData.name + "'.  Perhaps there's no room?");                              break;                          }                      }                        // Create a dummy ProtoVessel' we will use this to dump the parts to a config node.                      // We can't use the config nodes from the .craft file' because they are in a                      // slightly different format than those required for a ProtoVessel.                      ConfigNode empty = new ConfigNode();                      ProtoVessel dummyProto = new ProtoVessel(empty' null);                      Vessel dummyVessel = new GameObject().AddComponent<Vessel>();                      dummyVessel.parts = shipConstruct.parts;                      dummyProto.vesselRef = dummyVessel;                        // Create the ProtoPartSnapshot objects and then initialize them                      foreach (Part p in shipConstruct.parts)                      {                          dummyProto.protoPartSnapshots.Add(new ProtoPartSnapshot(p' dummyProto));                      }                      foreach (ProtoPartSnapshot p in dummyProto.protoPartSnapshots)                      {                          p.storePartRefs();                      }                        // Create the ship's parts                      partNodes = dummyProto.protoPartSnapshots.Select<ProtoPartSnapshot' ConfigNode>(GetNodeForPart).ToArray();                        // Clean up                      GameObject.Destroy(dummyVessel.gameObject);                  }                  else                  {                      // Create crew member array                      ProtoCrewMember[] crewArray = new ProtoCrewMember[vesselData.crew.Count];                      int i = 0;                      foreach (CrewData cd in vesselData.crew)                      {                          // Create the ProtoCrewMember                          ProtoCrewMember crewMember = HighLogic.CurrentGame.CrewRoster.GetNewKerbal(ProtoCrewMember.KerbalType.Unowned);                          if (cd.name != null)                          {                              crewMember.ChangeName(cd.name);                          }                            crewArray[i++] = crewMember;                      }                        // Create part nodes                      uint flightId = ShipConstruction.GetUniqueFlightID(HighLogic.CurrentGame.flightState);                      partNodes = new ConfigNode[1];                      partNodes[0] = ProtoVessel.CreatePartNode(vesselData.craftPart.name' flightId' crewArray);                        // Default the size class                      sizeClass = UntrackedObjectClass.A;                        // Set the name                      if (string.IsNullOrEmpty(vesselData.name))                      {                          vesselData.name = vesselData.craftPart.name;                      }                  }                    // Create additional nodes                  ConfigNode[] additionalNodes = new ConfigNode[1];                  DiscoveryLevels discoveryLevel = vesselData.owned ? DiscoveryLevels.Owned : DiscoveryLevels.Unowned;                  additionalNodes[0] = ProtoVessel.CreateDiscoveryNode(discoveryLevel' sizeClass' contract.TimeDeadline' contract.TimeDeadline);                    // Create the config node representation of the ProtoVessel                  ConfigNode protoVesselNode = ProtoVessel.CreateVesselNode(vesselData.name' vesselData.vesselType' vesselData.orbit' 0' partNodes' additionalNodes);                    // Additional seetings for a landed vessel                  if (!vesselData.orbiting)                  {                      Vector3d norm = vesselData.body.GetRelSurfaceNVector(vesselData.latitude' vesselData.longitude);                        double terrainHeight = 0.0;                      if (vesselData.body.pqsController != null)                      {                          terrainHeight = vesselData.body.pqsController.GetSurfaceHeight(norm) - vesselData.body.pqsController.radius;                      }                      bool splashed = landed && terrainHeight < 0.001;                        // Create the config node representation of the ProtoVessel                      // Note - flying is experimental' and so far doesn't work                      protoVesselNode.SetValue("sit"' (splashed ? Vessel.Situations.SPLASHED : landed ?                          Vessel.Situations.LANDED : Vessel.Situations.FLYING).ToString());                      protoVesselNode.SetValue("landed"' (landed && !splashed).ToString());                      protoVesselNode.SetValue("splashed"' splashed.ToString());                      protoVesselNode.SetValue("lat"' vesselData.latitude.ToString());                      protoVesselNode.SetValue("lon"' vesselData.longitude.ToString());                      protoVesselNode.SetValue("alt"' vesselData.altitude.ToString());                      protoVesselNode.SetValue("landedAt"' vesselData.body.name);                        // Figure out the additional height to subtract                      float lowest = float.MaxValue;                      if (shipConstruct != null)                      {                          foreach (Part p in shipConstruct.parts)                          {                              foreach (Collider collider in p.GetComponentsInChildren<Collider>())                              {                                  if (collider.gameObject.layer != 21 && collider.enabled)                                  {                                      lowest = Mathf.Min(lowest' collider.bounds.min.y);                                  }                              }                          }                      }                      else                      {                          foreach (Collider collider in vesselData.craftPart.partPrefab.GetComponentsInChildren<Collider>())                          {                              if (collider.gameObject.layer != 21 && collider.enabled)                              {                                  lowest = Mathf.Min(lowest' collider.bounds.min.y);                              }                          }                      }                        if (lowest == float.MaxValue)                      {                          lowest = 0;                      }                        // Figure out the surface height and rotation                      Quaternion normal = Quaternion.LookRotation(new Vector3((float)norm.x' (float)norm.y' (float)norm.z));                      Quaternion rotation = Quaternion.identity;                      float heading = vesselData.heading;                      if (shipConstruct == null)                      {                          rotation = rotation * Quaternion.FromToRotation(Vector3.up' Vector3.back);                      }                      else if (shipConstruct.shipFacility == EditorFacility.SPH)                      {                          rotation = rotation * Quaternion.FromToRotation(Vector3.forward' -Vector3.forward);                          heading += 180.0f;                      }                      else                      {                          rotation = rotation * Quaternion.FromToRotation(Vector3.up' Vector3.forward);                      }                        rotation = rotation * Quaternion.AngleAxis(vesselData.pitch' Vector3.right);                      rotation = rotation * Quaternion.AngleAxis(vesselData.roll' Vector3.down);                      rotation = rotation * Quaternion.AngleAxis(heading' Vector3.forward);                        // Set the height and rotation                      if (landed || splashed)                      {                          float hgt = (shipConstruct != null ? shipConstruct.parts[0] : vesselData.craftPart.partPrefab).localRoot.attPos0.y - lowest;                          hgt += vesselData.height;                          protoVesselNode.SetValue("hgt"' hgt.ToString());                      }                      protoVesselNode.SetValue("rot"' KSPUtil.WriteQuaternion(rotation * normal));                        // Set the normal vector relative to the surface                      Vector3 nrm = (rotation * Vector3.forward);                      protoVesselNode.SetValue("nrm"' nrm.x + "'" + nrm.y + "'" + nrm.z);                        protoVesselNode.SetValue("prst"' false.ToString());                  }                    // Add vessel to the game                  ProtoVessel protoVessel = new ProtoVessel(protoVesselNode' HighLogic.CurrentGame);                  protoVessel.Load(HighLogic.CurrentGame.flightState);                    // Store the id for later use                  vesselData.id = protoVessel.vesselRef.id;                    // Associate it so that it can be used in contract parameters                  ContractVesselTracker.Instance.AssociateVessel(vesselData.name' protoVessel.vesselRef);              }
Magic Number,ContractConfigurator.Behaviour,SpawnVessel,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnVessel.cs,CreateVessels,The following statement contains a magic number: foreach (VesselData vesselData in vessels)              {                  LoggingUtil.LogVerbose(this' "Spawning a vessel named '" + vesselData.name + "'");                    // Set additional info for landed vessels                  bool landed = false;                  if (!vesselData.orbiting)                  {                      landed = true;                      if (vesselData.altitude == null)                      {                          vesselData.altitude = LocationUtil.TerrainHeight(vesselData.latitude' vesselData.longitude' vesselData.body);                      }                        Vector3d pos = vesselData.body.GetWorldSurfacePosition(vesselData.latitude' vesselData.longitude' vesselData.altitude.Value);                        vesselData.orbit = new Orbit(0.0' 0.0' 0.0' 0.0' 0.0' 0.0' 0.0' vesselData.body);                      vesselData.orbit.UpdateFromStateVectors(pos' vesselData.body.getRFrmVel(pos)' vesselData.body' Planetarium.GetUniversalTime());                  }                  else                  {                      vesselData.orbit.referenceBody = vesselData.body;                  }                    ConfigNode[] partNodes;                  UntrackedObjectClass sizeClass;                  ShipConstruct shipConstruct = null;                  if (!string.IsNullOrEmpty(vesselData.craftURL))                  {                      // Save the current ShipConstruction ship' otherwise the player will see the spawned ship next time they enter the VAB!                      ConfigNode currentShip = ShipConstruction.ShipConfig;                        shipConstruct = ShipConstruction.LoadShip(gameDataDir + "/" + vesselData.craftURL);                      if (shipConstruct == null)                      {                          LoggingUtil.LogError(this' "ShipConstruct was null when tried to load '" + vesselData.craftURL +                              "' (usually this means the file could not be found).");                          continue;                      }                        // Restore ShipConstruction ship                      ShipConstruction.ShipConfig = currentShip;                        // Set the name                      if (string.IsNullOrEmpty(vesselData.name))                      {                          vesselData.name = shipConstruct.shipName;                      }                        // Set some parameters that need to be at the part level                      uint missionID = (uint)Guid.NewGuid().GetHashCode();                      uint launchID = HighLogic.CurrentGame.launchID++;                      foreach (Part p in shipConstruct.parts)                      {                          p.flightID = ShipConstruction.GetUniqueFlightID(HighLogic.CurrentGame.flightState);                          p.missionID = missionID;                          p.launchID = launchID;                          p.flagURL = vesselData.flagURL ?? HighLogic.CurrentGame.flagURL;                            // Had some issues with this being set to -1 for some ships - can't figure out                          // why.  End result is the vessel exploding' so let's just set it to a positive                          // value.                          p.temperature = 1.0;                      }                        // Estimate an object class' numbers are based on the in game description of the                      // size classes.                      float size = shipConstruct.shipSize.magnitude / 2.0f;                      if (size < 4.0f)                      {                          sizeClass = UntrackedObjectClass.A;                      }                      else if (size < 7.0f)                      {                          sizeClass = UntrackedObjectClass.B;                      }                      else if (size < 12.0f)                      {                          sizeClass = UntrackedObjectClass.C;                      }                      else if (size < 18.0f)                      {                          sizeClass = UntrackedObjectClass.D;                      }                      else                      {                          sizeClass = UntrackedObjectClass.E;                      }                        foreach (CrewData cd in vesselData.crew)                      {                          bool success = false;                            // Find a seat for the crew                          Part part = shipConstruct.parts.Find(p => p.protoModuleCrew.Count < p.CrewCapacity);                            // Add the crew member                          if (part != null)                          {                              // Create the ProtoCrewMember                              ProtoCrewMember crewMember = HighLogic.CurrentGame.CrewRoster.GetNewKerbal(ProtoCrewMember.KerbalType.Unowned);                              if (cd.gender != null)                              {                                  crewMember.gender = cd.gender.Value;                              }                              if (cd.name != null)                              {                                  crewMember.ChangeName(cd.name);                              }                                // Add them to the part                              success = part.AddCrewmemberAt(crewMember' part.protoModuleCrew.Count);                          }                            if (!success)                          {                              LoggingUtil.LogWarning(this' "Unable to add crew to vessel named '" + vesselData.name + "'.  Perhaps there's no room?");                              break;                          }                      }                        // Create a dummy ProtoVessel' we will use this to dump the parts to a config node.                      // We can't use the config nodes from the .craft file' because they are in a                      // slightly different format than those required for a ProtoVessel.                      ConfigNode empty = new ConfigNode();                      ProtoVessel dummyProto = new ProtoVessel(empty' null);                      Vessel dummyVessel = new GameObject().AddComponent<Vessel>();                      dummyVessel.parts = shipConstruct.parts;                      dummyProto.vesselRef = dummyVessel;                        // Create the ProtoPartSnapshot objects and then initialize them                      foreach (Part p in shipConstruct.parts)                      {                          dummyProto.protoPartSnapshots.Add(new ProtoPartSnapshot(p' dummyProto));                      }                      foreach (ProtoPartSnapshot p in dummyProto.protoPartSnapshots)                      {                          p.storePartRefs();                      }                        // Create the ship's parts                      partNodes = dummyProto.protoPartSnapshots.Select<ProtoPartSnapshot' ConfigNode>(GetNodeForPart).ToArray();                        // Clean up                      GameObject.Destroy(dummyVessel.gameObject);                  }                  else                  {                      // Create crew member array                      ProtoCrewMember[] crewArray = new ProtoCrewMember[vesselData.crew.Count];                      int i = 0;                      foreach (CrewData cd in vesselData.crew)                      {                          // Create the ProtoCrewMember                          ProtoCrewMember crewMember = HighLogic.CurrentGame.CrewRoster.GetNewKerbal(ProtoCrewMember.KerbalType.Unowned);                          if (cd.name != null)                          {                              crewMember.ChangeName(cd.name);                          }                            crewArray[i++] = crewMember;                      }                        // Create part nodes                      uint flightId = ShipConstruction.GetUniqueFlightID(HighLogic.CurrentGame.flightState);                      partNodes = new ConfigNode[1];                      partNodes[0] = ProtoVessel.CreatePartNode(vesselData.craftPart.name' flightId' crewArray);                        // Default the size class                      sizeClass = UntrackedObjectClass.A;                        // Set the name                      if (string.IsNullOrEmpty(vesselData.name))                      {                          vesselData.name = vesselData.craftPart.name;                      }                  }                    // Create additional nodes                  ConfigNode[] additionalNodes = new ConfigNode[1];                  DiscoveryLevels discoveryLevel = vesselData.owned ? DiscoveryLevels.Owned : DiscoveryLevels.Unowned;                  additionalNodes[0] = ProtoVessel.CreateDiscoveryNode(discoveryLevel' sizeClass' contract.TimeDeadline' contract.TimeDeadline);                    // Create the config node representation of the ProtoVessel                  ConfigNode protoVesselNode = ProtoVessel.CreateVesselNode(vesselData.name' vesselData.vesselType' vesselData.orbit' 0' partNodes' additionalNodes);                    // Additional seetings for a landed vessel                  if (!vesselData.orbiting)                  {                      Vector3d norm = vesselData.body.GetRelSurfaceNVector(vesselData.latitude' vesselData.longitude);                        double terrainHeight = 0.0;                      if (vesselData.body.pqsController != null)                      {                          terrainHeight = vesselData.body.pqsController.GetSurfaceHeight(norm) - vesselData.body.pqsController.radius;                      }                      bool splashed = landed && terrainHeight < 0.001;                        // Create the config node representation of the ProtoVessel                      // Note - flying is experimental' and so far doesn't work                      protoVesselNode.SetValue("sit"' (splashed ? Vessel.Situations.SPLASHED : landed ?                          Vessel.Situations.LANDED : Vessel.Situations.FLYING).ToString());                      protoVesselNode.SetValue("landed"' (landed && !splashed).ToString());                      protoVesselNode.SetValue("splashed"' splashed.ToString());                      protoVesselNode.SetValue("lat"' vesselData.latitude.ToString());                      protoVesselNode.SetValue("lon"' vesselData.longitude.ToString());                      protoVesselNode.SetValue("alt"' vesselData.altitude.ToString());                      protoVesselNode.SetValue("landedAt"' vesselData.body.name);                        // Figure out the additional height to subtract                      float lowest = float.MaxValue;                      if (shipConstruct != null)                      {                          foreach (Part p in shipConstruct.parts)                          {                              foreach (Collider collider in p.GetComponentsInChildren<Collider>())                              {                                  if (collider.gameObject.layer != 21 && collider.enabled)                                  {                                      lowest = Mathf.Min(lowest' collider.bounds.min.y);                                  }                              }                          }                      }                      else                      {                          foreach (Collider collider in vesselData.craftPart.partPrefab.GetComponentsInChildren<Collider>())                          {                              if (collider.gameObject.layer != 21 && collider.enabled)                              {                                  lowest = Mathf.Min(lowest' collider.bounds.min.y);                              }                          }                      }                        if (lowest == float.MaxValue)                      {                          lowest = 0;                      }                        // Figure out the surface height and rotation                      Quaternion normal = Quaternion.LookRotation(new Vector3((float)norm.x' (float)norm.y' (float)norm.z));                      Quaternion rotation = Quaternion.identity;                      float heading = vesselData.heading;                      if (shipConstruct == null)                      {                          rotation = rotation * Quaternion.FromToRotation(Vector3.up' Vector3.back);                      }                      else if (shipConstruct.shipFacility == EditorFacility.SPH)                      {                          rotation = rotation * Quaternion.FromToRotation(Vector3.forward' -Vector3.forward);                          heading += 180.0f;                      }                      else                      {                          rotation = rotation * Quaternion.FromToRotation(Vector3.up' Vector3.forward);                      }                        rotation = rotation * Quaternion.AngleAxis(vesselData.pitch' Vector3.right);                      rotation = rotation * Quaternion.AngleAxis(vesselData.roll' Vector3.down);                      rotation = rotation * Quaternion.AngleAxis(heading' Vector3.forward);                        // Set the height and rotation                      if (landed || splashed)                      {                          float hgt = (shipConstruct != null ? shipConstruct.parts[0] : vesselData.craftPart.partPrefab).localRoot.attPos0.y - lowest;                          hgt += vesselData.height;                          protoVesselNode.SetValue("hgt"' hgt.ToString());                      }                      protoVesselNode.SetValue("rot"' KSPUtil.WriteQuaternion(rotation * normal));                        // Set the normal vector relative to the surface                      Vector3 nrm = (rotation * Vector3.forward);                      protoVesselNode.SetValue("nrm"' nrm.x + "'" + nrm.y + "'" + nrm.z);                        protoVesselNode.SetValue("prst"' false.ToString());                  }                    // Add vessel to the game                  ProtoVessel protoVessel = new ProtoVessel(protoVesselNode' HighLogic.CurrentGame);                  protoVessel.Load(HighLogic.CurrentGame.flightState);                    // Store the id for later use                  vesselData.id = protoVessel.vesselRef.id;                    // Associate it so that it can be used in contract parameters                  ContractVesselTracker.Instance.AssociateVessel(vesselData.name' protoVessel.vesselRef);              }
Magic Number,ContractConfigurator.Behaviour,UnlockPart,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\UnlockPart.cs,DoUnlock,The following statement contains a magic number: if (ptn == null)              {                  ptn = new ProtoTechNode();                  ptn.state = RDTech.State.Unavailable;                  ptn.techID = part.TechRequired;                  ptn.scienceCost = 9999; // ignored              }
Magic Number,ContractConfigurator.Behaviour,UnlockTech,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\UnlockTech.cs,UnlockTechnology,The following statement contains a magic number: ptd.scienceCost = 9999;
Magic Number,ContractConfigurator.Behaviour,OrbitGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\OrbitGenerator.cs,Create,The following statement contains a magic number: foreach (ConfigNode child in ConfigNodeUtil.GetChildNodes(configNode))              {                  DataNode dataNode = new DataNode("ORBIT_" + index++' factory.dataNode' factory);                  try                  {                      ConfigNodeUtil.SetCurrentDataNode(dataNode);                        OrbitData obData = new OrbitData(child.name);                        // Get settings that differ by type                      if (child.name == "FIXED_ORBIT")                      {                          valid &= ConfigNodeUtil.ParseValue<Orbit>(child' "ORBIT"' x => obData.orbit = x' factory);                      }                      else if (child.name == "RANDOM_ORBIT")                      {                          valid &= ConfigNodeUtil.ParseValue<OrbitType>(child' "type"' x => obData.orbitType = x' factory);                          valid &= ConfigNodeUtil.ParseValue<int>(child' "count"' x => obData.count = x' factory' 1' x => Validation.GE(x' 1));                          valid &= ConfigNodeUtil.ParseValue<double>(child' "altitudeFactor"' x => obData.altitudeFactor = x' factory' 0.8' x => Validation.Between(x' 0.0' 1.0));                          valid &= ConfigNodeUtil.ParseValue<double>(child' "inclinationFactor"' x => obData.inclinationFactor = x' factory' 0.8' x => Validation.Between(x' 0.0' 1.0));                          valid &= ConfigNodeUtil.ParseValue<double>(child' "eccentricity"' x => obData.eccentricity = x' factory' 0.0' x => Validation.GE(x' 0.0));                          valid &= ConfigNodeUtil.ParseValue<double>(child' "deviationWindow"' x => obData.deviationWindow = x' factory' 10.0' x => Validation.GE(x' 0.0));                      }                      else                      {                          throw new ArgumentException("Unrecognized orbit node: '" + child.name + "'");                      }                        // Use an expression to default - then it'll work for dynamic contracts                      if (!child.HasValue("targetBody"))                      {                          child.AddValue("targetBody"' "@/targetBody");                      }                      valid &= ConfigNodeUtil.ParseValue<CelestialBody>(child' "targetBody"' x => obData.targetBody = x' factory);                        // Check for unexpected values                      valid &= ConfigNodeUtil.ValidateUnexpectedValues(child' factory);                        // Add to the list                      obGenerator.orbits.Add(obData);                        if (dataNode.IsInitialized("targetBody") && dataNode.IsInitialized("type"))                      {                          valid &= obGenerator.ValidateOrbitType(obData' factory);                      }                  }                  finally                  {                      ConfigNodeUtil.SetCurrentDataNode(factory.dataNode);                  }              }
Magic Number,ContractConfigurator.Behaviour,OrbitGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\OrbitGenerator.cs,Create,The following statement contains a magic number: foreach (ConfigNode child in ConfigNodeUtil.GetChildNodes(configNode))              {                  DataNode dataNode = new DataNode("ORBIT_" + index++' factory.dataNode' factory);                  try                  {                      ConfigNodeUtil.SetCurrentDataNode(dataNode);                        OrbitData obData = new OrbitData(child.name);                        // Get settings that differ by type                      if (child.name == "FIXED_ORBIT")                      {                          valid &= ConfigNodeUtil.ParseValue<Orbit>(child' "ORBIT"' x => obData.orbit = x' factory);                      }                      else if (child.name == "RANDOM_ORBIT")                      {                          valid &= ConfigNodeUtil.ParseValue<OrbitType>(child' "type"' x => obData.orbitType = x' factory);                          valid &= ConfigNodeUtil.ParseValue<int>(child' "count"' x => obData.count = x' factory' 1' x => Validation.GE(x' 1));                          valid &= ConfigNodeUtil.ParseValue<double>(child' "altitudeFactor"' x => obData.altitudeFactor = x' factory' 0.8' x => Validation.Between(x' 0.0' 1.0));                          valid &= ConfigNodeUtil.ParseValue<double>(child' "inclinationFactor"' x => obData.inclinationFactor = x' factory' 0.8' x => Validation.Between(x' 0.0' 1.0));                          valid &= ConfigNodeUtil.ParseValue<double>(child' "eccentricity"' x => obData.eccentricity = x' factory' 0.0' x => Validation.GE(x' 0.0));                          valid &= ConfigNodeUtil.ParseValue<double>(child' "deviationWindow"' x => obData.deviationWindow = x' factory' 10.0' x => Validation.GE(x' 0.0));                      }                      else                      {                          throw new ArgumentException("Unrecognized orbit node: '" + child.name + "'");                      }                        // Use an expression to default - then it'll work for dynamic contracts                      if (!child.HasValue("targetBody"))                      {                          child.AddValue("targetBody"' "@/targetBody");                      }                      valid &= ConfigNodeUtil.ParseValue<CelestialBody>(child' "targetBody"' x => obData.targetBody = x' factory);                        // Check for unexpected values                      valid &= ConfigNodeUtil.ValidateUnexpectedValues(child' factory);                        // Add to the list                      obGenerator.orbits.Add(obData);                        if (dataNode.IsInitialized("targetBody") && dataNode.IsInitialized("type"))                      {                          valid &= obGenerator.ValidateOrbitType(obData' factory);                      }                  }                  finally                  {                      ConfigNodeUtil.SetCurrentDataNode(factory.dataNode);                  }              }
Magic Number,ContractConfigurator.Behaviour,OrbitGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\OrbitGenerator.cs,Create,The following statement contains a magic number: foreach (ConfigNode child in ConfigNodeUtil.GetChildNodes(configNode))              {                  DataNode dataNode = new DataNode("ORBIT_" + index++' factory.dataNode' factory);                  try                  {                      ConfigNodeUtil.SetCurrentDataNode(dataNode);                        OrbitData obData = new OrbitData(child.name);                        // Get settings that differ by type                      if (child.name == "FIXED_ORBIT")                      {                          valid &= ConfigNodeUtil.ParseValue<Orbit>(child' "ORBIT"' x => obData.orbit = x' factory);                      }                      else if (child.name == "RANDOM_ORBIT")                      {                          valid &= ConfigNodeUtil.ParseValue<OrbitType>(child' "type"' x => obData.orbitType = x' factory);                          valid &= ConfigNodeUtil.ParseValue<int>(child' "count"' x => obData.count = x' factory' 1' x => Validation.GE(x' 1));                          valid &= ConfigNodeUtil.ParseValue<double>(child' "altitudeFactor"' x => obData.altitudeFactor = x' factory' 0.8' x => Validation.Between(x' 0.0' 1.0));                          valid &= ConfigNodeUtil.ParseValue<double>(child' "inclinationFactor"' x => obData.inclinationFactor = x' factory' 0.8' x => Validation.Between(x' 0.0' 1.0));                          valid &= ConfigNodeUtil.ParseValue<double>(child' "eccentricity"' x => obData.eccentricity = x' factory' 0.0' x => Validation.GE(x' 0.0));                          valid &= ConfigNodeUtil.ParseValue<double>(child' "deviationWindow"' x => obData.deviationWindow = x' factory' 10.0' x => Validation.GE(x' 0.0));                      }                      else                      {                          throw new ArgumentException("Unrecognized orbit node: '" + child.name + "'");                      }                        // Use an expression to default - then it'll work for dynamic contracts                      if (!child.HasValue("targetBody"))                      {                          child.AddValue("targetBody"' "@/targetBody");                      }                      valid &= ConfigNodeUtil.ParseValue<CelestialBody>(child' "targetBody"' x => obData.targetBody = x' factory);                        // Check for unexpected values                      valid &= ConfigNodeUtil.ValidateUnexpectedValues(child' factory);                        // Add to the list                      obGenerator.orbits.Add(obData);                        if (dataNode.IsInitialized("targetBody") && dataNode.IsInitialized("type"))                      {                          valid &= obGenerator.ValidateOrbitType(obData' factory);                      }                  }                  finally                  {                      ConfigNodeUtil.SetCurrentDataNode(factory.dataNode);                  }              }
Magic Number,ContractConfigurator.Behaviour,WaypointGenerator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\WaypointGenerator.cs,Create,The following statement contains a magic number: foreach (ConfigNode child in ConfigNodeUtil.GetChildNodes(configNode))              {                  DataNode dataNode = new DataNode("WAYPOINT_" + index' factory.dataNode' factory);                  try                  {                      ConfigNodeUtil.SetCurrentDataNode(dataNode);                      dataNode["type"] = child.name;                        double? altitude = null;                      WaypointData wpData = new WaypointData(child.name);                        // Use an expression to default - then it'll work for dynamic contracts                      if (!child.HasValue("targetBody"))                      {                          child.AddValue("targetBody"' "@/targetBody");                      }                      valid &= ConfigNodeUtil.ParseValue<CelestialBody>(child' "targetBody"' x => wpData.waypoint.celestialName = x != null ? x.name : ""' factory);                        valid &= ConfigNodeUtil.ParseValue<List<string>>(child' "name"' x => wpData.names = x' factory' new List<string>());                      valid &= ConfigNodeUtil.ParseValue<double?>(child' "altitude"' x => altitude = x' factory' (double?)null);                      valid &= ConfigNodeUtil.ParseValue<List<string>>(child' "parameter"' x => wpData.parameter = x' factory' new List<string>());                      valid &= ConfigNodeUtil.ParseValue<bool>(child' "hidden"' x => wpData.waypoint.visible = !x' factory' false);                        Action<string> assignWaypoint = (x) =>                      {                          wpData.waypoint.id = x;                          if (onWaypointIconAdded != null)                          {                              onWaypointIconAdded.Fire(x);                          }                      };                      if (!wpData.waypoint.visible)                      {                          valid &= ConfigNodeUtil.ParseValue<string>(child' "icon"' assignWaypoint' factory' "");                      }                      else                      {                          valid &= ConfigNodeUtil.ParseValue<string>(child' "icon"' assignWaypoint' factory);                      }                        valid &= ConfigNodeUtil.ParseValue<bool>(child' "underwater"' x => wpData.underwater = x' factory' false);                      valid &= ConfigNodeUtil.ParseValue<bool>(child' "clustered"' x => wpData.waypoint.isClustered = x' factory' false);                        // Track the index                      wpData.waypoint.index = index++;                        // Get altitude                      if (altitude == null)                      {                          wpData.waypoint.altitude = 0.0;                          wpData.randomAltitude = true;                      }                      else                      {                          wpData.waypoint.altitude = altitude.Value;                      }                        // Get settings that differ by type                      if (child.name == "WAYPOINT")                      {                          valid &= ConfigNodeUtil.ParseValue<double>(child' "latitude"' x => wpData.waypoint.latitude = x' factory);                          valid &= ConfigNodeUtil.ParseValue<double>(child' "longitude"' x => wpData.waypoint.longitude = x' factory);                      }                      else if (child.name == "RANDOM_WAYPOINT")                      {                          // Get settings for randomization                          valid &= ConfigNodeUtil.ParseValue<bool>(child' "waterAllowed"' x => wpData.waterAllowed = x' factory' true);                          valid &= ConfigNodeUtil.ParseValue<bool>(child' "forceEquatorial"' x => wpData.forceEquatorial = x' factory' false);                          valid &= ConfigNodeUtil.ParseValue<int>(child' "count"' x => wpData.count = x' factory' 1' x => Validation.GE(x' 1));                      }                      else if (child.name == "RANDOM_WAYPOINT_NEAR")                      {                          // Get settings for randomization                          valid &= ConfigNodeUtil.ParseValue<bool>(child' "waterAllowed"' x => wpData.waterAllowed = x' factory' true);                            // Get near waypoint details                          valid &= ConfigNodeUtil.ParseValue<int>(child' "nearIndex"' x => wpData.nearIndex = x' factory'                              x => Validation.GE(x' 0) && Validation.LT(x' wpGenerator.waypoints.Count));                          valid &= ConfigNodeUtil.ParseValue<bool>(child' "chained"' x => wpData.chained = x' factory' false);                          valid &= ConfigNodeUtil.ParseValue<int>(child' "count"' x => wpData.count = x' factory' 1' x => Validation.GE(x' 1));                            // Get distances                          valid &= ConfigNodeUtil.ParseValue<double>(child' "minDistance"' x => wpData.minDistance = x' factory' 0.0' x => Validation.GE(x' 0.0));                          valid &= ConfigNodeUtil.ParseValue<double>(child' "maxDistance"' x => wpData.maxDistance = x' factory' x => Validation.GT(x' 0.0));                      }                      else if (child.name == "PQS_CITY")                      {                          wpData.randomAltitude = false;                          string dummy = null;                          valid &= ConfigNodeUtil.ParseValue<string>(child' "pqsCity"' x => dummy = x' factory' x =>                          {                              bool v = true;                              if (!string.IsNullOrEmpty(wpData.waypoint.celestialName))                              {                                  try                                  {                                      CelestialBody body = FlightGlobals.Bodies.Where(b => b.name == wpData.waypoint.celestialName).First();                                      wpData.pqsCity = body.GetComponentsInChildren<PQSCity>(true).Where(pqs => pqs.name == x).First();                                  }                                  catch (Exception e)                                  {                                      LoggingUtil.LogError(typeof(WaypointGenerator)' "Couldn't load PQSCity with name '" + x + "'");                                      LoggingUtil.LogException(e);                                      v = false;                                  }                              }                              else                              {                                  // Force this to get re-run when the targetBody is loaded                                  throw new DataNode.ValueNotInitialized("/targetBody");                              }                              return v;                          });                          valid &= ConfigNodeUtil.ParseValue<Vector3d>(child' "pqsOffset"' x => wpData.pqsOffset = x' factory' new Vector3d());                      }                      else                      {                          LoggingUtil.LogError(factory' "Unrecognized waypoint node: '" + child.name + "'");                          valid = false;                      }                        // Check for unexpected values                      valid &= ConfigNodeUtil.ValidateUnexpectedValues(child' factory);                        // Copy waypoint data                      WaypointData old = wpData;                      for (int i = 0; i < old.count; i++)                      {                          wpData = new WaypointData(old' null);                          wpGenerator.waypoints.Add(wpData);                            if (old.parameter.Any())                          {                              wpData.parameter = new List<string>();                              wpData.parameter.Add(old.parameter.Count() == 1 ? old.parameter.First() : old.parameter.ElementAtOrDefault(i));                          }                            // Set the name                          if (old.names.Any())                          {                              wpData.waypoint.name = (old.names.Count() == 1 ? old.names.First() : old.names.ElementAtOrDefault(i));                          }                          if (string.IsNullOrEmpty(wpData.waypoint.name) || wpData.waypoint.name.ToLower() == "site")                          {                              wpData.waypoint.name = StringUtilities.GenerateSiteName(random.Next()' wpData.waypoint.celestialBody' !wpData.waterAllowed);                          }                            // Handle waypoint chaining                          if (wpData.chained && i != 0)                          {                              wpData.nearIndex = wpGenerator.waypoints.Count - 2;                          }                      }                  }                  finally                  {                      ConfigNodeUtil.SetCurrentDataNode(factory.dataNode);                  }              }
Magic Number,ContractConfigurator.Behaviour,SpawnKerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnKerbal.cs,OnAccepted,The following statement contains a magic number: foreach (KerbalData kd in kerbals)              {                  LoggingUtil.LogVerbose(this' "Spawning a Kerbal named " + kd.kerbal.name);                    // Generate the ProtoCrewMember                  kd.kerbal.GenerateKerbal();                    if (kd.altitude == null)                  {                      kd.altitude = LocationUtil.TerrainHeight(kd.latitude' kd.longitude' kd.body);                  }                    // Set additional info for landed kerbals                  if (kd.landed)                  {                      Vector3d pos = kd.body.GetWorldSurfacePosition(kd.latitude' kd.longitude' kd.altitude.Value);                        kd.orbit = new Orbit(0.0' 0.0' 0.0' 0.0' 0.0' 0.0' 0.0' kd.body);                      kd.orbit.UpdateFromStateVectors(pos' kd.body.getRFrmVel(pos)' kd.body' Planetarium.GetUniversalTime());                      LoggingUtil.LogVerbose(typeof(SpawnKerbal)' "kerbal generated' orbit = " + kd.orbit);                  }                  else                  {                      // Update the reference body in the orbit                      kd.orbit.referenceBody = kd.body;                  }                    uint flightId = ShipConstruction.GetUniqueFlightID(HighLogic.CurrentGame.flightState);                    // Create crew member array                  ProtoCrewMember[] crewArray = new ProtoCrewMember[1];                  crewArray[0] = kd.kerbal.pcm;                    // Create part nodes                  ConfigNode[] partNodes = new ConfigNode[1];                  partNodes[0] = ProtoVessel.CreatePartNode(kd.kerbal.gender == ProtoCrewMember.Gender.Male ? "kerbalEVA" : "kerbalEVAfemale"'                      flightId' crewArray);                    // Create additional nodes                  ConfigNode[] additionalNodes = new ConfigNode[1];                  DiscoveryLevels discoveryLevel = kd.owned ? DiscoveryLevels.Owned : DiscoveryLevels.Unowned;                  additionalNodes[0] = ProtoVessel.CreateDiscoveryNode(discoveryLevel' UntrackedObjectClass.A' contract.TimeDeadline' contract.TimeDeadline);                    // Create the config node representation of the ProtoVessel                  ConfigNode protoVesselNode = ProtoVessel.CreateVesselNode(kd.kerbal.name' VesselType.EVA' kd.orbit' 0' partNodes' additionalNodes);                    // Additional seetings for a landed Kerbal                  if (kd.landed)                  {                      bool splashed = kd.altitude.Value < 0.001 && kd.body.ocean;                        // Add a bit of height for landed kerbals                      if (!splashed)                      {                          kd.altitude += 0.2;                      }                        // Figure out the appropriate rotation                      Vector3d norm = kd.body.GetRelSurfaceNVector(kd.latitude' kd.longitude);                      Quaternion normal = Quaternion.LookRotation(new Vector3((float)norm.x' (float)norm.y' (float)norm.z));                      Quaternion rotation = Quaternion.FromToRotation(Vector3.up' Vector3.forward);                      rotation = rotation * Quaternion.AngleAxis(kd.heading + 180' Vector3.up);                        // Create the config node representation of the ProtoVessel                      protoVesselNode.SetValue("sit"' (splashed ? Vessel.Situations.SPLASHED : Vessel.Situations.LANDED).ToString());                      protoVesselNode.SetValue("landed"' (!splashed).ToString());                      protoVesselNode.SetValue("splashed"' splashed.ToString());                      protoVesselNode.SetValue("lat"' kd.latitude.ToString());                      protoVesselNode.SetValue("lon"' kd.longitude.ToString());                      protoVesselNode.SetValue("alt"' kd.altitude.ToString());                      protoVesselNode.SetValue("hgt"' 0.276894391);                      protoVesselNode.SetValue("rot"' KSPUtil.WriteQuaternion(normal * rotation));                                            // Set the normal vector relative to the surface                      Vector3 nrm = (rotation * Vector3.forward);                      protoVesselNode.SetValue("nrm"' nrm.x + "'" + nrm.y + "'" + nrm.z);                  }                    // Add vessel to the game                  HighLogic.CurrentGame.AddVessel(protoVesselNode);              }
Magic Number,ContractConfigurator.Behaviour,SpawnKerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnKerbal.cs,OnAccepted,The following statement contains a magic number: foreach (KerbalData kd in kerbals)              {                  LoggingUtil.LogVerbose(this' "Spawning a Kerbal named " + kd.kerbal.name);                    // Generate the ProtoCrewMember                  kd.kerbal.GenerateKerbal();                    if (kd.altitude == null)                  {                      kd.altitude = LocationUtil.TerrainHeight(kd.latitude' kd.longitude' kd.body);                  }                    // Set additional info for landed kerbals                  if (kd.landed)                  {                      Vector3d pos = kd.body.GetWorldSurfacePosition(kd.latitude' kd.longitude' kd.altitude.Value);                        kd.orbit = new Orbit(0.0' 0.0' 0.0' 0.0' 0.0' 0.0' 0.0' kd.body);                      kd.orbit.UpdateFromStateVectors(pos' kd.body.getRFrmVel(pos)' kd.body' Planetarium.GetUniversalTime());                      LoggingUtil.LogVerbose(typeof(SpawnKerbal)' "kerbal generated' orbit = " + kd.orbit);                  }                  else                  {                      // Update the reference body in the orbit                      kd.orbit.referenceBody = kd.body;                  }                    uint flightId = ShipConstruction.GetUniqueFlightID(HighLogic.CurrentGame.flightState);                    // Create crew member array                  ProtoCrewMember[] crewArray = new ProtoCrewMember[1];                  crewArray[0] = kd.kerbal.pcm;                    // Create part nodes                  ConfigNode[] partNodes = new ConfigNode[1];                  partNodes[0] = ProtoVessel.CreatePartNode(kd.kerbal.gender == ProtoCrewMember.Gender.Male ? "kerbalEVA" : "kerbalEVAfemale"'                      flightId' crewArray);                    // Create additional nodes                  ConfigNode[] additionalNodes = new ConfigNode[1];                  DiscoveryLevels discoveryLevel = kd.owned ? DiscoveryLevels.Owned : DiscoveryLevels.Unowned;                  additionalNodes[0] = ProtoVessel.CreateDiscoveryNode(discoveryLevel' UntrackedObjectClass.A' contract.TimeDeadline' contract.TimeDeadline);                    // Create the config node representation of the ProtoVessel                  ConfigNode protoVesselNode = ProtoVessel.CreateVesselNode(kd.kerbal.name' VesselType.EVA' kd.orbit' 0' partNodes' additionalNodes);                    // Additional seetings for a landed Kerbal                  if (kd.landed)                  {                      bool splashed = kd.altitude.Value < 0.001 && kd.body.ocean;                        // Add a bit of height for landed kerbals                      if (!splashed)                      {                          kd.altitude += 0.2;                      }                        // Figure out the appropriate rotation                      Vector3d norm = kd.body.GetRelSurfaceNVector(kd.latitude' kd.longitude);                      Quaternion normal = Quaternion.LookRotation(new Vector3((float)norm.x' (float)norm.y' (float)norm.z));                      Quaternion rotation = Quaternion.FromToRotation(Vector3.up' Vector3.forward);                      rotation = rotation * Quaternion.AngleAxis(kd.heading + 180' Vector3.up);                        // Create the config node representation of the ProtoVessel                      protoVesselNode.SetValue("sit"' (splashed ? Vessel.Situations.SPLASHED : Vessel.Situations.LANDED).ToString());                      protoVesselNode.SetValue("landed"' (!splashed).ToString());                      protoVesselNode.SetValue("splashed"' splashed.ToString());                      protoVesselNode.SetValue("lat"' kd.latitude.ToString());                      protoVesselNode.SetValue("lon"' kd.longitude.ToString());                      protoVesselNode.SetValue("alt"' kd.altitude.ToString());                      protoVesselNode.SetValue("hgt"' 0.276894391);                      protoVesselNode.SetValue("rot"' KSPUtil.WriteQuaternion(normal * rotation));                                            // Set the normal vector relative to the surface                      Vector3 nrm = (rotation * Vector3.forward);                      protoVesselNode.SetValue("nrm"' nrm.x + "'" + nrm.y + "'" + nrm.z);                  }                    // Add vessel to the game                  HighLogic.CurrentGame.AddVessel(protoVesselNode);              }
Magic Number,ContractConfigurator.Behaviour,SpawnKerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnKerbal.cs,OnAccepted,The following statement contains a magic number: foreach (KerbalData kd in kerbals)              {                  LoggingUtil.LogVerbose(this' "Spawning a Kerbal named " + kd.kerbal.name);                    // Generate the ProtoCrewMember                  kd.kerbal.GenerateKerbal();                    if (kd.altitude == null)                  {                      kd.altitude = LocationUtil.TerrainHeight(kd.latitude' kd.longitude' kd.body);                  }                    // Set additional info for landed kerbals                  if (kd.landed)                  {                      Vector3d pos = kd.body.GetWorldSurfacePosition(kd.latitude' kd.longitude' kd.altitude.Value);                        kd.orbit = new Orbit(0.0' 0.0' 0.0' 0.0' 0.0' 0.0' 0.0' kd.body);                      kd.orbit.UpdateFromStateVectors(pos' kd.body.getRFrmVel(pos)' kd.body' Planetarium.GetUniversalTime());                      LoggingUtil.LogVerbose(typeof(SpawnKerbal)' "kerbal generated' orbit = " + kd.orbit);                  }                  else                  {                      // Update the reference body in the orbit                      kd.orbit.referenceBody = kd.body;                  }                    uint flightId = ShipConstruction.GetUniqueFlightID(HighLogic.CurrentGame.flightState);                    // Create crew member array                  ProtoCrewMember[] crewArray = new ProtoCrewMember[1];                  crewArray[0] = kd.kerbal.pcm;                    // Create part nodes                  ConfigNode[] partNodes = new ConfigNode[1];                  partNodes[0] = ProtoVessel.CreatePartNode(kd.kerbal.gender == ProtoCrewMember.Gender.Male ? "kerbalEVA" : "kerbalEVAfemale"'                      flightId' crewArray);                    // Create additional nodes                  ConfigNode[] additionalNodes = new ConfigNode[1];                  DiscoveryLevels discoveryLevel = kd.owned ? DiscoveryLevels.Owned : DiscoveryLevels.Unowned;                  additionalNodes[0] = ProtoVessel.CreateDiscoveryNode(discoveryLevel' UntrackedObjectClass.A' contract.TimeDeadline' contract.TimeDeadline);                    // Create the config node representation of the ProtoVessel                  ConfigNode protoVesselNode = ProtoVessel.CreateVesselNode(kd.kerbal.name' VesselType.EVA' kd.orbit' 0' partNodes' additionalNodes);                    // Additional seetings for a landed Kerbal                  if (kd.landed)                  {                      bool splashed = kd.altitude.Value < 0.001 && kd.body.ocean;                        // Add a bit of height for landed kerbals                      if (!splashed)                      {                          kd.altitude += 0.2;                      }                        // Figure out the appropriate rotation                      Vector3d norm = kd.body.GetRelSurfaceNVector(kd.latitude' kd.longitude);                      Quaternion normal = Quaternion.LookRotation(new Vector3((float)norm.x' (float)norm.y' (float)norm.z));                      Quaternion rotation = Quaternion.FromToRotation(Vector3.up' Vector3.forward);                      rotation = rotation * Quaternion.AngleAxis(kd.heading + 180' Vector3.up);                        // Create the config node representation of the ProtoVessel                      protoVesselNode.SetValue("sit"' (splashed ? Vessel.Situations.SPLASHED : Vessel.Situations.LANDED).ToString());                      protoVesselNode.SetValue("landed"' (!splashed).ToString());                      protoVesselNode.SetValue("splashed"' splashed.ToString());                      protoVesselNode.SetValue("lat"' kd.latitude.ToString());                      protoVesselNode.SetValue("lon"' kd.longitude.ToString());                      protoVesselNode.SetValue("alt"' kd.altitude.ToString());                      protoVesselNode.SetValue("hgt"' 0.276894391);                      protoVesselNode.SetValue("rot"' KSPUtil.WriteQuaternion(normal * rotation));                                            // Set the normal vector relative to the surface                      Vector3 nrm = (rotation * Vector3.forward);                      protoVesselNode.SetValue("nrm"' nrm.x + "'" + nrm.y + "'" + nrm.z);                  }                    // Add vessel to the game                  HighLogic.CurrentGame.AddVessel(protoVesselNode);              }
Magic Number,ContractConfigurator.Behaviour,SpawnKerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\SpawnKerbal.cs,OnAccepted,The following statement contains a magic number: foreach (KerbalData kd in kerbals)              {                  LoggingUtil.LogVerbose(this' "Spawning a Kerbal named " + kd.kerbal.name);                    // Generate the ProtoCrewMember                  kd.kerbal.GenerateKerbal();                    if (kd.altitude == null)                  {                      kd.altitude = LocationUtil.TerrainHeight(kd.latitude' kd.longitude' kd.body);                  }                    // Set additional info for landed kerbals                  if (kd.landed)                  {                      Vector3d pos = kd.body.GetWorldSurfacePosition(kd.latitude' kd.longitude' kd.altitude.Value);                        kd.orbit = new Orbit(0.0' 0.0' 0.0' 0.0' 0.0' 0.0' 0.0' kd.body);                      kd.orbit.UpdateFromStateVectors(pos' kd.body.getRFrmVel(pos)' kd.body' Planetarium.GetUniversalTime());                      LoggingUtil.LogVerbose(typeof(SpawnKerbal)' "kerbal generated' orbit = " + kd.orbit);                  }                  else                  {                      // Update the reference body in the orbit                      kd.orbit.referenceBody = kd.body;                  }                    uint flightId = ShipConstruction.GetUniqueFlightID(HighLogic.CurrentGame.flightState);                    // Create crew member array                  ProtoCrewMember[] crewArray = new ProtoCrewMember[1];                  crewArray[0] = kd.kerbal.pcm;                    // Create part nodes                  ConfigNode[] partNodes = new ConfigNode[1];                  partNodes[0] = ProtoVessel.CreatePartNode(kd.kerbal.gender == ProtoCrewMember.Gender.Male ? "kerbalEVA" : "kerbalEVAfemale"'                      flightId' crewArray);                    // Create additional nodes                  ConfigNode[] additionalNodes = new ConfigNode[1];                  DiscoveryLevels discoveryLevel = kd.owned ? DiscoveryLevels.Owned : DiscoveryLevels.Unowned;                  additionalNodes[0] = ProtoVessel.CreateDiscoveryNode(discoveryLevel' UntrackedObjectClass.A' contract.TimeDeadline' contract.TimeDeadline);                    // Create the config node representation of the ProtoVessel                  ConfigNode protoVesselNode = ProtoVessel.CreateVesselNode(kd.kerbal.name' VesselType.EVA' kd.orbit' 0' partNodes' additionalNodes);                    // Additional seetings for a landed Kerbal                  if (kd.landed)                  {                      bool splashed = kd.altitude.Value < 0.001 && kd.body.ocean;                        // Add a bit of height for landed kerbals                      if (!splashed)                      {                          kd.altitude += 0.2;                      }                        // Figure out the appropriate rotation                      Vector3d norm = kd.body.GetRelSurfaceNVector(kd.latitude' kd.longitude);                      Quaternion normal = Quaternion.LookRotation(new Vector3((float)norm.x' (float)norm.y' (float)norm.z));                      Quaternion rotation = Quaternion.FromToRotation(Vector3.up' Vector3.forward);                      rotation = rotation * Quaternion.AngleAxis(kd.heading + 180' Vector3.up);                        // Create the config node representation of the ProtoVessel                      protoVesselNode.SetValue("sit"' (splashed ? Vessel.Situations.SPLASHED : Vessel.Situations.LANDED).ToString());                      protoVesselNode.SetValue("landed"' (!splashed).ToString());                      protoVesselNode.SetValue("splashed"' splashed.ToString());                      protoVesselNode.SetValue("lat"' kd.latitude.ToString());                      protoVesselNode.SetValue("lon"' kd.longitude.ToString());                      protoVesselNode.SetValue("alt"' kd.altitude.ToString());                      protoVesselNode.SetValue("hgt"' 0.276894391);                      protoVesselNode.SetValue("rot"' KSPUtil.WriteQuaternion(normal * rotation));                                            // Set the normal vector relative to the surface                      Vector3 nrm = (rotation * Vector3.forward);                      protoVesselNode.SetValue("nrm"' nrm.x + "'" + nrm.y + "'" + nrm.z);                  }                    // Add vessel to the game                  HighLogic.CurrentGame.AddVessel(protoVesselNode);              }
Magic Number,ContractConfigurator,SCANsatCoverageRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\SCANsatCoverageRequirement.cs,LoadFromConfig,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<double>(configNode' "maxCoverage"' x => maxCoverage = x' this' 100.0);
Magic Number,ContractConfigurator,ReputationRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ReputationRequirement.cs,RequirementText,The following statement contains a magic number: if (minReputation > -1000 && maxReputation < 1000)              {                  output += "between " + minReputation.ToString("N0") + " and " + maxReputation.ToString("N0");              }              else if (minReputation > -1000)              {                  output += "at least " + minReputation.ToString("N0");              }              else if (maxReputation < 1000)              {                  output += "at most " + maxReputation.ToString("N0");              }
Magic Number,ContractConfigurator,ReputationRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ReputationRequirement.cs,RequirementText,The following statement contains a magic number: if (minReputation > -1000 && maxReputation < 1000)              {                  output += "between " + minReputation.ToString("N0") + " and " + maxReputation.ToString("N0");              }              else if (minReputation > -1000)              {                  output += "at least " + minReputation.ToString("N0");              }              else if (maxReputation < 1000)              {                  output += "at most " + maxReputation.ToString("N0");              }
Magic Number,ContractConfigurator,ReputationRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ReputationRequirement.cs,RequirementText,The following statement contains a magic number: if (minReputation > -1000 && maxReputation < 1000)              {                  output += "between " + minReputation.ToString("N0") + " and " + maxReputation.ToString("N0");              }              else if (minReputation > -1000)              {                  output += "at least " + minReputation.ToString("N0");              }              else if (maxReputation < 1000)              {                  output += "at most " + maxReputation.ToString("N0");              }
Magic Number,ContractConfigurator,ReputationRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\ReputationRequirement.cs,RequirementText,The following statement contains a magic number: if (minReputation > -1000 && maxReputation < 1000)              {                  output += "between " + minReputation.ToString("N0") + " and " + maxReputation.ToString("N0");              }              else if (minReputation > -1000)              {                  output += "at least " + minReputation.ToString("N0");              }              else if (maxReputation < 1000)              {                  output += "at most " + maxReputation.ToString("N0");              }
Magic Number,ContractConfigurator,HasResourceCapacityFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasResourceCapacityFactory.cs,Load,The following statement contains a magic number: foreach (ConfigNode childNode in nodes)              {                  HasResource.Filter filter = new HasResource.Filter();                    valid &= ConfigNodeUtil.ParseValue<double>(childNode' "minQuantity"' x => filter.minQuantity = x' this' 0.01' x => Validation.GE(x' 0.0));                  valid &= ConfigNodeUtil.ParseValue<double>(childNode' "maxQuantity"' x => filter.maxQuantity = x' this' double.MaxValue' x => Validation.GE(x' 0.0));                  valid &= ConfigNodeUtil.ParseValue<PartResourceDefinition>(childNode' "resource"' x => filter.resource = x' this);                    filters.Add(filter);              }
Magic Number,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,OnContractDecline,The following statement contains a magic number: if (cc != null)              {                  if (cc.preLoaded)                  {                      contracts.Remove(cc);                  }                  if (cc.contractType != null)                  {                      lastGenerationFailure = -100.0;                      cc.contractType.failedGenerationAttempts = 0;                      cc.contractType.lastGenerationFailure = -100.0;                  }              }
Magic Number,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,OnContractDecline,The following statement contains a magic number: if (cc != null)              {                  if (cc.preLoaded)                  {                      contracts.Remove(cc);                  }                  if (cc.contractType != null)                  {                      lastGenerationFailure = -100.0;                      cc.contractType.failedGenerationAttempts = 0;                      cc.contractType.lastGenerationFailure = -100.0;                  }              }
Magic Number,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,ResetGenerationFailure,The following statement contains a magic number: lastGenerationFailure = -100.0;
Magic Number,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,ResetGenerationFailure,The following statement contains a magic number: foreach (ContractType ct in ContractType.AllValidContractTypes)              {                  ct.failedGenerationAttempts = 0;                  ct.lastGenerationFailure = -100.0;              }
Magic Number,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,Update,The following statement contains a magic number: if (ContractSystem.Instance == null || (!contractsLoaded && contractsLoadCheckTime < Time.realtimeSinceStartup + 5.0 && MissionControl.Instance == null))              {                  return;              }
Magic Number,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,Update,The following statement contains a magic number: if (UnityEngine.Time.realtimeSinceStartup - start > 0.1)              {                  LoggingUtil.LogDebug(this' "Contract attribute took too long (" + (UnityEngine.Time.realtimeSinceStartup - start) +                      " seconds) to generate: " + lastKey);              }
Magic Number,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,Update,The following statement contains a magic number: if (UnityEngine.Time.frameCount % 20 == 0 && contracts.Count > 0)              {                  int index = (UnityEngine.Time.frameCount / 20) % contracts.Count;                  contracts[index].Update();              }
Magic Number,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,Update,The following statement contains a magic number: if (UnityEngine.Time.frameCount % 20 == 0 && contracts.Count > 0)              {                  int index = (UnityEngine.Time.frameCount / 20) % contracts.Count;                  contracts[index].Update();              }
Magic Number,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,ContractEnumerator,The following statement contains a magic number: for (int i = 0; i < groups.Count(); i++)              {                  nextContractGroup = (nextContractGroup + 1) % groups.Count();                  ContractGroup group = groups.ElementAt(nextContractGroup);                    List<ContractType> contractTypes = ContractType.AllValidContractTypes.ToList();                  contractTypes.Shuffle();                  foreach (ContractType ct in contractTypes)                  {                      // Is the contract time part of this group' and is it allowed to attempt to generate                      if (ct.group == group && ct.lastGenerationFailure + FAILURE_WAIT_TIME < Time.realtimeSinceStartup)                      {                          if (ct.lastGenerationFailure != -100)                          {                              ct.lastGenerationFailure = -100;                              ct.failedGenerationAttempts = 0;                          }                            // Are we in the right scene' or is is a special contract that can generate in any scene                          if (HighLogic.LoadedScene == GameScenes.SPACECENTER || ct.autoAccept)                          {                              foreach (ConfiguredContract contract in GenerateContract(ct))                              {                                  yield return contract;                              }                          }                      }                  }              }
Magic Number,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,ContractEnumerator,The following statement contains a magic number: for (int i = 0; i < groups.Count(); i++)              {                  nextContractGroup = (nextContractGroup + 1) % groups.Count();                  ContractGroup group = groups.ElementAt(nextContractGroup);                    List<ContractType> contractTypes = ContractType.AllValidContractTypes.ToList();                  contractTypes.Shuffle();                  foreach (ContractType ct in contractTypes)                  {                      // Is the contract time part of this group' and is it allowed to attempt to generate                      if (ct.group == group && ct.lastGenerationFailure + FAILURE_WAIT_TIME < Time.realtimeSinceStartup)                      {                          if (ct.lastGenerationFailure != -100)                          {                              ct.lastGenerationFailure = -100;                              ct.failedGenerationAttempts = 0;                          }                            // Are we in the right scene' or is is a special contract that can generate in any scene                          if (HighLogic.LoadedScene == GameScenes.SPACECENTER || ct.autoAccept)                          {                              foreach (ConfiguredContract contract in GenerateContract(ct))                              {                                  yield return contract;                              }                          }                      }                  }              }
Magic Number,ContractConfigurator,ContractPreLoader,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\ContractPreLoader.cs,GenerateContract,The following statement contains a magic number: ContractSystem.GetContractCounts(Reputation.CurrentRep' 1000' out t1' out t2' out t3);
Magic Number,ContractConfigurator,Kerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Wrappers\Kerbal.cs,RandomGender,The following statement contains a magic number: return random.Next(2) == 0 ? ProtoCrewMember.Gender.Male : ProtoCrewMember.Gender.Female;
Magic Number,ContractConfigurator,HasAstronautFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasAstronautFactory.cs,Load,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<int>(configNode' "minExperience"' x => minExperience = x' this' 0' x => Validation.Between(x' 0' 5));
Magic Number,ContractConfigurator,HasAstronautFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasAstronautFactory.cs,Load,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxExperience"' x => maxExperience = x' this' 5' x => Validation.Between(x' 0' 5));
Magic Number,ContractConfigurator,HasAstronautFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasAstronautFactory.cs,Load,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxExperience"' x => maxExperience = x' this' 5' x => Validation.Between(x' 0' 5));
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: int maxCount = 1000;
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: int maxIterations = 50000;
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: int targetMin = 3;
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: int w = 4096;
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: int h = 2048;
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: for (int i = 0; i < w; i++)              {                  bu = (bu + 977) % w;                    double lonRads = 2.0 * Math.PI * ((bu + 0.5) / w);                  double cosLon = Math.Cos(lonRads);                  double sinLon = Math.Sin(lonRads);                    for (int j = 0; j < h; j++)                  {                      count++;                      bv = (bv + 239) % h;                        double latRads = Math.PI * (0.5 - (bv + 0.5) / h);                      double cosLat = Math.Cos(latRads);                      double sinLat = Math.Sin(latRads);                        // Get biome data                      string biome = body.BiomeMap.GetAtt(latRads' lonRads).name.Replace(" "' "");                      BiomeData bd;                      biomeData.TryGetValue(biome' out bd);                      if (bd == null)                      {                          bd = biomeData[biome] = new BiomeData(biome);                      }                        if (bd.landCount + bd.waterCount < maxCount || bd.landLocations.Count < targetMin || bd.waterLocations.Count < targetMin)                      {                          Vector3d radialVector = new Vector3d(cosLat * cosLon' sinLat' cosLat * sinLon);                          double height = body.pqsController.GetSurfaceHeight(radialVector) - body.pqsController.radius;                            if (height > 0.0)                          {                              bd.landCount++;                              if (bd.landLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.landLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.landLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                          else                          {                              bd.waterCount++;                              if (bd.waterLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.waterLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.waterLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                      }                        // Take a break                      if (Time.realtimeSinceStartup >= startTime + timeStep)                      {                          yield return null;                          startTime = Time.realtimeSinceStartup;                      }                  }                    // Check for completion after every "row"                  if (biomeData.Count == biomeCount &&                      biomeData.All(pair => pair.Value.landCount + pair.Value.waterCount >= maxCount &&                          pair.Value.landLocations.Count >= targetMin && pair.Value.waterLocations.Count >= targetMin || count >= maxIterations))                  {                      break;                  }              }
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: for (int i = 0; i < w; i++)              {                  bu = (bu + 977) % w;                    double lonRads = 2.0 * Math.PI * ((bu + 0.5) / w);                  double cosLon = Math.Cos(lonRads);                  double sinLon = Math.Sin(lonRads);                    for (int j = 0; j < h; j++)                  {                      count++;                      bv = (bv + 239) % h;                        double latRads = Math.PI * (0.5 - (bv + 0.5) / h);                      double cosLat = Math.Cos(latRads);                      double sinLat = Math.Sin(latRads);                        // Get biome data                      string biome = body.BiomeMap.GetAtt(latRads' lonRads).name.Replace(" "' "");                      BiomeData bd;                      biomeData.TryGetValue(biome' out bd);                      if (bd == null)                      {                          bd = biomeData[biome] = new BiomeData(biome);                      }                        if (bd.landCount + bd.waterCount < maxCount || bd.landLocations.Count < targetMin || bd.waterLocations.Count < targetMin)                      {                          Vector3d radialVector = new Vector3d(cosLat * cosLon' sinLat' cosLat * sinLon);                          double height = body.pqsController.GetSurfaceHeight(radialVector) - body.pqsController.radius;                            if (height > 0.0)                          {                              bd.landCount++;                              if (bd.landLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.landLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.landLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                          else                          {                              bd.waterCount++;                              if (bd.waterLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.waterLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.waterLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                      }                        // Take a break                      if (Time.realtimeSinceStartup >= startTime + timeStep)                      {                          yield return null;                          startTime = Time.realtimeSinceStartup;                      }                  }                    // Check for completion after every "row"                  if (biomeData.Count == biomeCount &&                      biomeData.All(pair => pair.Value.landCount + pair.Value.waterCount >= maxCount &&                          pair.Value.landLocations.Count >= targetMin && pair.Value.waterLocations.Count >= targetMin || count >= maxIterations))                  {                      break;                  }              }
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: for (int i = 0; i < w; i++)              {                  bu = (bu + 977) % w;                    double lonRads = 2.0 * Math.PI * ((bu + 0.5) / w);                  double cosLon = Math.Cos(lonRads);                  double sinLon = Math.Sin(lonRads);                    for (int j = 0; j < h; j++)                  {                      count++;                      bv = (bv + 239) % h;                        double latRads = Math.PI * (0.5 - (bv + 0.5) / h);                      double cosLat = Math.Cos(latRads);                      double sinLat = Math.Sin(latRads);                        // Get biome data                      string biome = body.BiomeMap.GetAtt(latRads' lonRads).name.Replace(" "' "");                      BiomeData bd;                      biomeData.TryGetValue(biome' out bd);                      if (bd == null)                      {                          bd = biomeData[biome] = new BiomeData(biome);                      }                        if (bd.landCount + bd.waterCount < maxCount || bd.landLocations.Count < targetMin || bd.waterLocations.Count < targetMin)                      {                          Vector3d radialVector = new Vector3d(cosLat * cosLon' sinLat' cosLat * sinLon);                          double height = body.pqsController.GetSurfaceHeight(radialVector) - body.pqsController.radius;                            if (height > 0.0)                          {                              bd.landCount++;                              if (bd.landLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.landLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.landLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                          else                          {                              bd.waterCount++;                              if (bd.waterLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.waterLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.waterLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                      }                        // Take a break                      if (Time.realtimeSinceStartup >= startTime + timeStep)                      {                          yield return null;                          startTime = Time.realtimeSinceStartup;                      }                  }                    // Check for completion after every "row"                  if (biomeData.Count == biomeCount &&                      biomeData.All(pair => pair.Value.landCount + pair.Value.waterCount >= maxCount &&                          pair.Value.landLocations.Count >= targetMin && pair.Value.waterLocations.Count >= targetMin || count >= maxIterations))                  {                      break;                  }              }
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: for (int i = 0; i < w; i++)              {                  bu = (bu + 977) % w;                    double lonRads = 2.0 * Math.PI * ((bu + 0.5) / w);                  double cosLon = Math.Cos(lonRads);                  double sinLon = Math.Sin(lonRads);                    for (int j = 0; j < h; j++)                  {                      count++;                      bv = (bv + 239) % h;                        double latRads = Math.PI * (0.5 - (bv + 0.5) / h);                      double cosLat = Math.Cos(latRads);                      double sinLat = Math.Sin(latRads);                        // Get biome data                      string biome = body.BiomeMap.GetAtt(latRads' lonRads).name.Replace(" "' "");                      BiomeData bd;                      biomeData.TryGetValue(biome' out bd);                      if (bd == null)                      {                          bd = biomeData[biome] = new BiomeData(biome);                      }                        if (bd.landCount + bd.waterCount < maxCount || bd.landLocations.Count < targetMin || bd.waterLocations.Count < targetMin)                      {                          Vector3d radialVector = new Vector3d(cosLat * cosLon' sinLat' cosLat * sinLon);                          double height = body.pqsController.GetSurfaceHeight(radialVector) - body.pqsController.radius;                            if (height > 0.0)                          {                              bd.landCount++;                              if (bd.landLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.landLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.landLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                          else                          {                              bd.waterCount++;                              if (bd.waterLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.waterLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.waterLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                      }                        // Take a break                      if (Time.realtimeSinceStartup >= startTime + timeStep)                      {                          yield return null;                          startTime = Time.realtimeSinceStartup;                      }                  }                    // Check for completion after every "row"                  if (biomeData.Count == biomeCount &&                      biomeData.All(pair => pair.Value.landCount + pair.Value.waterCount >= maxCount &&                          pair.Value.landLocations.Count >= targetMin && pair.Value.waterLocations.Count >= targetMin || count >= maxIterations))                  {                      break;                  }              }
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: for (int i = 0; i < w; i++)              {                  bu = (bu + 977) % w;                    double lonRads = 2.0 * Math.PI * ((bu + 0.5) / w);                  double cosLon = Math.Cos(lonRads);                  double sinLon = Math.Sin(lonRads);                    for (int j = 0; j < h; j++)                  {                      count++;                      bv = (bv + 239) % h;                        double latRads = Math.PI * (0.5 - (bv + 0.5) / h);                      double cosLat = Math.Cos(latRads);                      double sinLat = Math.Sin(latRads);                        // Get biome data                      string biome = body.BiomeMap.GetAtt(latRads' lonRads).name.Replace(" "' "");                      BiomeData bd;                      biomeData.TryGetValue(biome' out bd);                      if (bd == null)                      {                          bd = biomeData[biome] = new BiomeData(biome);                      }                        if (bd.landCount + bd.waterCount < maxCount || bd.landLocations.Count < targetMin || bd.waterLocations.Count < targetMin)                      {                          Vector3d radialVector = new Vector3d(cosLat * cosLon' sinLat' cosLat * sinLon);                          double height = body.pqsController.GetSurfaceHeight(radialVector) - body.pqsController.radius;                            if (height > 0.0)                          {                              bd.landCount++;                              if (bd.landLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.landLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.landLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                          else                          {                              bd.waterCount++;                              if (bd.waterLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.waterLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.waterLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                      }                        // Take a break                      if (Time.realtimeSinceStartup >= startTime + timeStep)                      {                          yield return null;                          startTime = Time.realtimeSinceStartup;                      }                  }                    // Check for completion after every "row"                  if (biomeData.Count == biomeCount &&                      biomeData.All(pair => pair.Value.landCount + pair.Value.waterCount >= maxCount &&                          pair.Value.landLocations.Count >= targetMin && pair.Value.waterLocations.Count >= targetMin || count >= maxIterations))                  {                      break;                  }              }
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: for (int i = 0; i < w; i++)              {                  bu = (bu + 977) % w;                    double lonRads = 2.0 * Math.PI * ((bu + 0.5) / w);                  double cosLon = Math.Cos(lonRads);                  double sinLon = Math.Sin(lonRads);                    for (int j = 0; j < h; j++)                  {                      count++;                      bv = (bv + 239) % h;                        double latRads = Math.PI * (0.5 - (bv + 0.5) / h);                      double cosLat = Math.Cos(latRads);                      double sinLat = Math.Sin(latRads);                        // Get biome data                      string biome = body.BiomeMap.GetAtt(latRads' lonRads).name.Replace(" "' "");                      BiomeData bd;                      biomeData.TryGetValue(biome' out bd);                      if (bd == null)                      {                          bd = biomeData[biome] = new BiomeData(biome);                      }                        if (bd.landCount + bd.waterCount < maxCount || bd.landLocations.Count < targetMin || bd.waterLocations.Count < targetMin)                      {                          Vector3d radialVector = new Vector3d(cosLat * cosLon' sinLat' cosLat * sinLon);                          double height = body.pqsController.GetSurfaceHeight(radialVector) - body.pqsController.radius;                            if (height > 0.0)                          {                              bd.landCount++;                              if (bd.landLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.landLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.landLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                          else                          {                              bd.waterCount++;                              if (bd.waterLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.waterLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.waterLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                      }                        // Take a break                      if (Time.realtimeSinceStartup >= startTime + timeStep)                      {                          yield return null;                          startTime = Time.realtimeSinceStartup;                      }                  }                    // Check for completion after every "row"                  if (biomeData.Count == biomeCount &&                      biomeData.All(pair => pair.Value.landCount + pair.Value.waterCount >= maxCount &&                          pair.Value.landLocations.Count >= targetMin && pair.Value.waterLocations.Count >= targetMin || count >= maxIterations))                  {                      break;                  }              }
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: for (int i = 0; i < w; i++)              {                  bu = (bu + 977) % w;                    double lonRads = 2.0 * Math.PI * ((bu + 0.5) / w);                  double cosLon = Math.Cos(lonRads);                  double sinLon = Math.Sin(lonRads);                    for (int j = 0; j < h; j++)                  {                      count++;                      bv = (bv + 239) % h;                        double latRads = Math.PI * (0.5 - (bv + 0.5) / h);                      double cosLat = Math.Cos(latRads);                      double sinLat = Math.Sin(latRads);                        // Get biome data                      string biome = body.BiomeMap.GetAtt(latRads' lonRads).name.Replace(" "' "");                      BiomeData bd;                      biomeData.TryGetValue(biome' out bd);                      if (bd == null)                      {                          bd = biomeData[biome] = new BiomeData(biome);                      }                        if (bd.landCount + bd.waterCount < maxCount || bd.landLocations.Count < targetMin || bd.waterLocations.Count < targetMin)                      {                          Vector3d radialVector = new Vector3d(cosLat * cosLon' sinLat' cosLat * sinLon);                          double height = body.pqsController.GetSurfaceHeight(radialVector) - body.pqsController.radius;                            if (height > 0.0)                          {                              bd.landCount++;                              if (bd.landLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.landLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.landLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                          else                          {                              bd.waterCount++;                              if (bd.waterLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.waterLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.waterLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                      }                        // Take a break                      if (Time.realtimeSinceStartup >= startTime + timeStep)                      {                          yield return null;                          startTime = Time.realtimeSinceStartup;                      }                  }                    // Check for completion after every "row"                  if (biomeData.Count == biomeCount &&                      biomeData.All(pair => pair.Value.landCount + pair.Value.waterCount >= maxCount &&                          pair.Value.landLocations.Count >= targetMin && pair.Value.waterLocations.Count >= targetMin || count >= maxIterations))                  {                      break;                  }              }
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: for (int i = 0; i < w; i++)              {                  bu = (bu + 977) % w;                    double lonRads = 2.0 * Math.PI * ((bu + 0.5) / w);                  double cosLon = Math.Cos(lonRads);                  double sinLon = Math.Sin(lonRads);                    for (int j = 0; j < h; j++)                  {                      count++;                      bv = (bv + 239) % h;                        double latRads = Math.PI * (0.5 - (bv + 0.5) / h);                      double cosLat = Math.Cos(latRads);                      double sinLat = Math.Sin(latRads);                        // Get biome data                      string biome = body.BiomeMap.GetAtt(latRads' lonRads).name.Replace(" "' "");                      BiomeData bd;                      biomeData.TryGetValue(biome' out bd);                      if (bd == null)                      {                          bd = biomeData[biome] = new BiomeData(biome);                      }                        if (bd.landCount + bd.waterCount < maxCount || bd.landLocations.Count < targetMin || bd.waterLocations.Count < targetMin)                      {                          Vector3d radialVector = new Vector3d(cosLat * cosLon' sinLat' cosLat * sinLon);                          double height = body.pqsController.GetSurfaceHeight(radialVector) - body.pqsController.radius;                            if (height > 0.0)                          {                              bd.landCount++;                              if (bd.landLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.landLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.landLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                          else                          {                              bd.waterCount++;                              if (bd.waterLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.waterLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.waterLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                      }                        // Take a break                      if (Time.realtimeSinceStartup >= startTime + timeStep)                      {                          yield return null;                          startTime = Time.realtimeSinceStartup;                      }                  }                    // Check for completion after every "row"                  if (biomeData.Count == biomeCount &&                      biomeData.All(pair => pair.Value.landCount + pair.Value.waterCount >= maxCount &&                          pair.Value.landLocations.Count >= targetMin && pair.Value.waterLocations.Count >= targetMin || count >= maxIterations))                  {                      break;                  }              }
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: for (int i = 0; i < w; i++)              {                  bu = (bu + 977) % w;                    double lonRads = 2.0 * Math.PI * ((bu + 0.5) / w);                  double cosLon = Math.Cos(lonRads);                  double sinLon = Math.Sin(lonRads);                    for (int j = 0; j < h; j++)                  {                      count++;                      bv = (bv + 239) % h;                        double latRads = Math.PI * (0.5 - (bv + 0.5) / h);                      double cosLat = Math.Cos(latRads);                      double sinLat = Math.Sin(latRads);                        // Get biome data                      string biome = body.BiomeMap.GetAtt(latRads' lonRads).name.Replace(" "' "");                      BiomeData bd;                      biomeData.TryGetValue(biome' out bd);                      if (bd == null)                      {                          bd = biomeData[biome] = new BiomeData(biome);                      }                        if (bd.landCount + bd.waterCount < maxCount || bd.landLocations.Count < targetMin || bd.waterLocations.Count < targetMin)                      {                          Vector3d radialVector = new Vector3d(cosLat * cosLon' sinLat' cosLat * sinLon);                          double height = body.pqsController.GetSurfaceHeight(radialVector) - body.pqsController.radius;                            if (height > 0.0)                          {                              bd.landCount++;                              if (bd.landLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.landLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.landLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                          else                          {                              bd.waterCount++;                              if (bd.waterLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.waterLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.waterLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                      }                        // Take a break                      if (Time.realtimeSinceStartup >= startTime + timeStep)                      {                          yield return null;                          startTime = Time.realtimeSinceStartup;                      }                  }                    // Check for completion after every "row"                  if (biomeData.Count == biomeCount &&                      biomeData.All(pair => pair.Value.landCount + pair.Value.waterCount >= maxCount &&                          pair.Value.landLocations.Count >= targetMin && pair.Value.waterLocations.Count >= targetMin || count >= maxIterations))                  {                      break;                  }              }
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: for (int i = 0; i < w; i++)              {                  bu = (bu + 977) % w;                    double lonRads = 2.0 * Math.PI * ((bu + 0.5) / w);                  double cosLon = Math.Cos(lonRads);                  double sinLon = Math.Sin(lonRads);                    for (int j = 0; j < h; j++)                  {                      count++;                      bv = (bv + 239) % h;                        double latRads = Math.PI * (0.5 - (bv + 0.5) / h);                      double cosLat = Math.Cos(latRads);                      double sinLat = Math.Sin(latRads);                        // Get biome data                      string biome = body.BiomeMap.GetAtt(latRads' lonRads).name.Replace(" "' "");                      BiomeData bd;                      biomeData.TryGetValue(biome' out bd);                      if (bd == null)                      {                          bd = biomeData[biome] = new BiomeData(biome);                      }                        if (bd.landCount + bd.waterCount < maxCount || bd.landLocations.Count < targetMin || bd.waterLocations.Count < targetMin)                      {                          Vector3d radialVector = new Vector3d(cosLat * cosLon' sinLat' cosLat * sinLon);                          double height = body.pqsController.GetSurfaceHeight(radialVector) - body.pqsController.radius;                            if (height > 0.0)                          {                              bd.landCount++;                              if (bd.landLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.landLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.landLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                          else                          {                              bd.waterCount++;                              if (bd.waterLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.waterLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.waterLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                      }                        // Take a break                      if (Time.realtimeSinceStartup >= startTime + timeStep)                      {                          yield return null;                          startTime = Time.realtimeSinceStartup;                      }                  }                    // Check for completion after every "row"                  if (biomeData.Count == biomeCount &&                      biomeData.All(pair => pair.Value.landCount + pair.Value.waterCount >= maxCount &&                          pair.Value.landLocations.Count >= targetMin && pair.Value.waterLocations.Count >= targetMin || count >= maxIterations))                  {                      break;                  }              }
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: for (int i = 0; i < w; i++)              {                  bu = (bu + 977) % w;                    double lonRads = 2.0 * Math.PI * ((bu + 0.5) / w);                  double cosLon = Math.Cos(lonRads);                  double sinLon = Math.Sin(lonRads);                    for (int j = 0; j < h; j++)                  {                      count++;                      bv = (bv + 239) % h;                        double latRads = Math.PI * (0.5 - (bv + 0.5) / h);                      double cosLat = Math.Cos(latRads);                      double sinLat = Math.Sin(latRads);                        // Get biome data                      string biome = body.BiomeMap.GetAtt(latRads' lonRads).name.Replace(" "' "");                      BiomeData bd;                      biomeData.TryGetValue(biome' out bd);                      if (bd == null)                      {                          bd = biomeData[biome] = new BiomeData(biome);                      }                        if (bd.landCount + bd.waterCount < maxCount || bd.landLocations.Count < targetMin || bd.waterLocations.Count < targetMin)                      {                          Vector3d radialVector = new Vector3d(cosLat * cosLon' sinLat' cosLat * sinLon);                          double height = body.pqsController.GetSurfaceHeight(radialVector) - body.pqsController.radius;                            if (height > 0.0)                          {                              bd.landCount++;                              if (bd.landLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.landLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.landLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                          else                          {                              bd.waterCount++;                              if (bd.waterLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.waterLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.waterLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                      }                        // Take a break                      if (Time.realtimeSinceStartup >= startTime + timeStep)                      {                          yield return null;                          startTime = Time.realtimeSinceStartup;                      }                  }                    // Check for completion after every "row"                  if (biomeData.Count == biomeCount &&                      biomeData.All(pair => pair.Value.landCount + pair.Value.waterCount >= maxCount &&                          pair.Value.landLocations.Count >= targetMin && pair.Value.waterLocations.Count >= targetMin || count >= maxIterations))                  {                      break;                  }              }
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: for (int i = 0; i < w; i++)              {                  bu = (bu + 977) % w;                    double lonRads = 2.0 * Math.PI * ((bu + 0.5) / w);                  double cosLon = Math.Cos(lonRads);                  double sinLon = Math.Sin(lonRads);                    for (int j = 0; j < h; j++)                  {                      count++;                      bv = (bv + 239) % h;                        double latRads = Math.PI * (0.5 - (bv + 0.5) / h);                      double cosLat = Math.Cos(latRads);                      double sinLat = Math.Sin(latRads);                        // Get biome data                      string biome = body.BiomeMap.GetAtt(latRads' lonRads).name.Replace(" "' "");                      BiomeData bd;                      biomeData.TryGetValue(biome' out bd);                      if (bd == null)                      {                          bd = biomeData[biome] = new BiomeData(biome);                      }                        if (bd.landCount + bd.waterCount < maxCount || bd.landLocations.Count < targetMin || bd.waterLocations.Count < targetMin)                      {                          Vector3d radialVector = new Vector3d(cosLat * cosLon' sinLat' cosLat * sinLon);                          double height = body.pqsController.GetSurfaceHeight(radialVector) - body.pqsController.radius;                            if (height > 0.0)                          {                              bd.landCount++;                              if (bd.landLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.landLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.landLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                          else                          {                              bd.waterCount++;                              if (bd.waterLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.waterLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.waterLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                      }                        // Take a break                      if (Time.realtimeSinceStartup >= startTime + timeStep)                      {                          yield return null;                          startTime = Time.realtimeSinceStartup;                      }                  }                    // Check for completion after every "row"                  if (biomeData.Count == biomeCount &&                      biomeData.All(pair => pair.Value.landCount + pair.Value.waterCount >= maxCount &&                          pair.Value.landLocations.Count >= targetMin && pair.Value.waterLocations.Count >= targetMin || count >= maxIterations))                  {                      break;                  }              }
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: for (int i = 0; i < w; i++)              {                  bu = (bu + 977) % w;                    double lonRads = 2.0 * Math.PI * ((bu + 0.5) / w);                  double cosLon = Math.Cos(lonRads);                  double sinLon = Math.Sin(lonRads);                    for (int j = 0; j < h; j++)                  {                      count++;                      bv = (bv + 239) % h;                        double latRads = Math.PI * (0.5 - (bv + 0.5) / h);                      double cosLat = Math.Cos(latRads);                      double sinLat = Math.Sin(latRads);                        // Get biome data                      string biome = body.BiomeMap.GetAtt(latRads' lonRads).name.Replace(" "' "");                      BiomeData bd;                      biomeData.TryGetValue(biome' out bd);                      if (bd == null)                      {                          bd = biomeData[biome] = new BiomeData(biome);                      }                        if (bd.landCount + bd.waterCount < maxCount || bd.landLocations.Count < targetMin || bd.waterLocations.Count < targetMin)                      {                          Vector3d radialVector = new Vector3d(cosLat * cosLon' sinLat' cosLat * sinLon);                          double height = body.pqsController.GetSurfaceHeight(radialVector) - body.pqsController.radius;                            if (height > 0.0)                          {                              bd.landCount++;                              if (bd.landLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.landLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.landLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                          else                          {                              bd.waterCount++;                              if (bd.waterLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.waterLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.waterLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                      }                        // Take a break                      if (Time.realtimeSinceStartup >= startTime + timeStep)                      {                          yield return null;                          startTime = Time.realtimeSinceStartup;                      }                  }                    // Check for completion after every "row"                  if (biomeData.Count == biomeCount &&                      biomeData.All(pair => pair.Value.landCount + pair.Value.waterCount >= maxCount &&                          pair.Value.landLocations.Count >= targetMin && pair.Value.waterLocations.Count >= targetMin || count >= maxIterations))                  {                      break;                  }              }
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: for (int i = 0; i < w; i++)              {                  bu = (bu + 977) % w;                    double lonRads = 2.0 * Math.PI * ((bu + 0.5) / w);                  double cosLon = Math.Cos(lonRads);                  double sinLon = Math.Sin(lonRads);                    for (int j = 0; j < h; j++)                  {                      count++;                      bv = (bv + 239) % h;                        double latRads = Math.PI * (0.5 - (bv + 0.5) / h);                      double cosLat = Math.Cos(latRads);                      double sinLat = Math.Sin(latRads);                        // Get biome data                      string biome = body.BiomeMap.GetAtt(latRads' lonRads).name.Replace(" "' "");                      BiomeData bd;                      biomeData.TryGetValue(biome' out bd);                      if (bd == null)                      {                          bd = biomeData[biome] = new BiomeData(biome);                      }                        if (bd.landCount + bd.waterCount < maxCount || bd.landLocations.Count < targetMin || bd.waterLocations.Count < targetMin)                      {                          Vector3d radialVector = new Vector3d(cosLat * cosLon' sinLat' cosLat * sinLon);                          double height = body.pqsController.GetSurfaceHeight(radialVector) - body.pqsController.radius;                            if (height > 0.0)                          {                              bd.landCount++;                              if (bd.landLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.landLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.landLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                          else                          {                              bd.waterCount++;                              if (bd.waterLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.waterLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.waterLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                      }                        // Take a break                      if (Time.realtimeSinceStartup >= startTime + timeStep)                      {                          yield return null;                          startTime = Time.realtimeSinceStartup;                      }                  }                    // Check for completion after every "row"                  if (biomeData.Count == biomeCount &&                      biomeData.All(pair => pair.Value.landCount + pair.Value.waterCount >= maxCount &&                          pair.Value.landLocations.Count >= targetMin && pair.Value.waterLocations.Count >= targetMin || count >= maxIterations))                  {                      break;                  }              }
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: for (int i = 0; i < w; i++)              {                  bu = (bu + 977) % w;                    double lonRads = 2.0 * Math.PI * ((bu + 0.5) / w);                  double cosLon = Math.Cos(lonRads);                  double sinLon = Math.Sin(lonRads);                    for (int j = 0; j < h; j++)                  {                      count++;                      bv = (bv + 239) % h;                        double latRads = Math.PI * (0.5 - (bv + 0.5) / h);                      double cosLat = Math.Cos(latRads);                      double sinLat = Math.Sin(latRads);                        // Get biome data                      string biome = body.BiomeMap.GetAtt(latRads' lonRads).name.Replace(" "' "");                      BiomeData bd;                      biomeData.TryGetValue(biome' out bd);                      if (bd == null)                      {                          bd = biomeData[biome] = new BiomeData(biome);                      }                        if (bd.landCount + bd.waterCount < maxCount || bd.landLocations.Count < targetMin || bd.waterLocations.Count < targetMin)                      {                          Vector3d radialVector = new Vector3d(cosLat * cosLon' sinLat' cosLat * sinLon);                          double height = body.pqsController.GetSurfaceHeight(radialVector) - body.pqsController.radius;                            if (height > 0.0)                          {                              bd.landCount++;                              if (bd.landLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.landLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.landLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                          else                          {                              bd.waterCount++;                              if (bd.waterLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.waterLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.waterLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                      }                        // Take a break                      if (Time.realtimeSinceStartup >= startTime + timeStep)                      {                          yield return null;                          startTime = Time.realtimeSinceStartup;                      }                  }                    // Check for completion after every "row"                  if (biomeData.Count == biomeCount &&                      biomeData.All(pair => pair.Value.landCount + pair.Value.waterCount >= maxCount &&                          pair.Value.landLocations.Count >= targetMin && pair.Value.waterLocations.Count >= targetMin || count >= maxIterations))                  {                      break;                  }              }
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,LoadBodyInfo,The following statement contains a magic number: for (int i = 0; i < w; i++)              {                  bu = (bu + 977) % w;                    double lonRads = 2.0 * Math.PI * ((bu + 0.5) / w);                  double cosLon = Math.Cos(lonRads);                  double sinLon = Math.Sin(lonRads);                    for (int j = 0; j < h; j++)                  {                      count++;                      bv = (bv + 239) % h;                        double latRads = Math.PI * (0.5 - (bv + 0.5) / h);                      double cosLat = Math.Cos(latRads);                      double sinLat = Math.Sin(latRads);                        // Get biome data                      string biome = body.BiomeMap.GetAtt(latRads' lonRads).name.Replace(" "' "");                      BiomeData bd;                      biomeData.TryGetValue(biome' out bd);                      if (bd == null)                      {                          bd = biomeData[biome] = new BiomeData(biome);                      }                        if (bd.landCount + bd.waterCount < maxCount || bd.landLocations.Count < targetMin || bd.waterLocations.Count < targetMin)                      {                          Vector3d radialVector = new Vector3d(cosLat * cosLon' sinLat' cosLat * sinLon);                          double height = body.pqsController.GetSurfaceHeight(radialVector) - body.pqsController.radius;                            if (height > 0.0)                          {                              bd.landCount++;                              if (bd.landLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.landLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.landLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                          else                          {                              bd.waterCount++;                              if (bd.waterLocations.Count < targetMin)                              {                                  double lon = lonRads * 180.0 / Math.PI;                                  double lat = latRads * 180.0 / Math.PI;                                  if (!bd.waterLocations.Any(v => Math.Abs(v.x - lon) < 2.0 || Math.Abs(v.y - lat) < 2.0))                                  {                                      bd.waterLocations.Add(new Vector2d(lon' latRads * 180.0 / Math.PI));                                  }                              }                          }                      }                        // Take a break                      if (Time.realtimeSinceStartup >= startTime + timeStep)                      {                          yield return null;                          startTime = Time.realtimeSinceStartup;                      }                  }                    // Check for completion after every "row"                  if (biomeData.Count == biomeCount &&                      biomeData.All(pair => pair.Value.landCount + pair.Value.waterCount >= maxCount &&                          pair.Value.landLocations.Count >= targetMin && pair.Value.waterLocations.Count >= targetMin || count >= maxIterations))                  {                      break;                  }              }
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,IsDifficult,The following statement contains a magic number: return landRatio > 0.95 && situation == ExperimentSituations.SrfSplashed ||                  landRatio < 0.05 && situation == ExperimentSituations.SrfLanded;
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,IsDifficult,The following statement contains a magic number: return landRatio > 0.95 && situation == ExperimentSituations.SrfSplashed ||                  landRatio < 0.05 && situation == ExperimentSituations.SrfLanded;
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,GetDifficultLocations,The following statement contains a magic number: List<Vector2d> list = landRatio > 0.95 ? Instance.bodyInfo[body][biome].waterLocations :                  landRatio < 0.05 ? Instance.bodyInfo[body][biome].landLocations : new List<Vector2d>();
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,GetDifficultLocations,The following statement contains a magic number: List<Vector2d> list = landRatio > 0.95 ? Instance.bodyInfo[body][biome].waterLocations :                  landRatio < 0.05 ? Instance.bodyInfo[body][biome].landLocations : new List<Vector2d>();
Magic Number,ContractConfigurator,BiomeTracker,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\BiomeTracker.cs,GetPrimarySituation,The following statement contains a magic number: return landRatio > 0.5 ? Vessel.Situations.LANDED : Vessel.Situations.SPLASHED;
Magic Number,ContractConfigurator,RBAPI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ResearchBodiesWrapper.cs,FoundBody,The following statement contains a magic number: try                  {                      withParent = false;                      parentBody = null;                      object[] args = new object[] { scienceReward' bodyFound' withParent' parentBody };                      bool result = (bool)FoundBodyMethod.Invoke(APIactualRBSC' args);                      withParent = (bool)args[2];                      parentBody = (CelestialBody)args[3];                      return result;                  }                  catch (Exception ex)                  {                      LogFormatted("Unable to invoke Research Method");                      LogFormatted("Exception: {0}"' ex);                      withParent = false;                      parentBody = null;                      return false;                      //throw;                  }
Magic Number,ContractConfigurator,RBAPI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ResearchBodiesWrapper.cs,FoundBody,The following statement contains a magic number: try                  {                      withParent = false;                      parentBody = null;                      object[] args = new object[] { scienceReward' bodyFound' withParent' parentBody };                      bool result = (bool)FoundBodyMethod.Invoke(APIactualRBSC' args);                      withParent = (bool)args[2];                      parentBody = (CelestialBody)args[3];                      return result;                  }                  catch (Exception ex)                  {                      LogFormatted("Unable to invoke Research Method");                      LogFormatted("Exception: {0}"' ex);                      withParent = false;                      parentBody = null;                      return false;                      //throw;                  }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,OnGUI,The following statement contains a magic number: if (windowPos.xMin == -1)              {                  windowPos.xMin = Screen.width - 1050 - 24;              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,OnGUI,The following statement contains a magic number: if (windowPos.xMin == -1)              {                  windowPos.xMin = Screen.width - 1050 - 24;              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,OnGUI,The following statement contains a magic number: if (showGUI && HighLogic.LoadedScene != GameScenes.CREDITS && HighLogic.LoadedScene != GameScenes.LOADING &&                  HighLogic.LoadedScene != GameScenes.LOADINGBUFFER && HighLogic.LoadedScene != GameScenes.SETTINGS)              {                  var ainfoV = Attribute.GetCustomAttribute(typeof(ContractConfigurator).Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                  windowPos = GUILayout.Window(                      typeof(ContractConfigurator).FullName.GetHashCode()'                      windowPos'                      WindowGUI'                      "Contract Configurator " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(windowPos.xMax - 18' windowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                  {                      showGUI = false;                  }                    GUI.depth = 0;                  if (drawToolTip)                  {                      DrawToolTip();                  }              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,OnGUI,The following statement contains a magic number: if (showGUI && HighLogic.LoadedScene != GameScenes.CREDITS && HighLogic.LoadedScene != GameScenes.LOADING &&                  HighLogic.LoadedScene != GameScenes.LOADINGBUFFER && HighLogic.LoadedScene != GameScenes.SETTINGS)              {                  var ainfoV = Attribute.GetCustomAttribute(typeof(ContractConfigurator).Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                  windowPos = GUILayout.Window(                      typeof(ContractConfigurator).FullName.GetHashCode()'                      windowPos'                      WindowGUI'                      "Contract Configurator " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(windowPos.xMax - 18' windowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                  {                      showGUI = false;                  }                    GUI.depth = 0;                  if (drawToolTip)                  {                      DrawToolTip();                  }              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,OnGUI,The following statement contains a magic number: if (showGUI && HighLogic.LoadedScene != GameScenes.CREDITS && HighLogic.LoadedScene != GameScenes.LOADING &&                  HighLogic.LoadedScene != GameScenes.LOADINGBUFFER && HighLogic.LoadedScene != GameScenes.SETTINGS)              {                  var ainfoV = Attribute.GetCustomAttribute(typeof(ContractConfigurator).Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                  windowPos = GUILayout.Window(                      typeof(ContractConfigurator).FullName.GetHashCode()'                      windowPos'                      WindowGUI'                      "Contract Configurator " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(windowPos.xMax - 18' windowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                  {                      showGUI = false;                  }                    GUI.depth = 0;                  if (drawToolTip)                  {                      DrawToolTip();                  }              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,OnGUI,The following statement contains a magic number: if (showGUI && HighLogic.LoadedScene != GameScenes.CREDITS && HighLogic.LoadedScene != GameScenes.LOADING &&                  HighLogic.LoadedScene != GameScenes.LOADINGBUFFER && HighLogic.LoadedScene != GameScenes.SETTINGS)              {                  var ainfoV = Attribute.GetCustomAttribute(typeof(ContractConfigurator).Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                  windowPos = GUILayout.Window(                      typeof(ContractConfigurator).FullName.GetHashCode()'                      windowPos'                      WindowGUI'                      "Contract Configurator " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(windowPos.xMax - 18' windowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                  {                      showGUI = false;                  }                    GUI.depth = 0;                  if (drawToolTip)                  {                      DrawToolTip();                  }              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,WindowGUI,The following statement contains a magic number: GUILayout.BeginVertical(GUILayout.Width(500));
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,WindowGUI,The following statement contains a magic number: scrollPosition = GUILayout.BeginScrollView(scrollPosition' GUILayout.Height(640));
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,WindowGUI,The following statement contains a magic number: GUILayout.Space(4);
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,GroupGui,The following statement contains a magic number: if (contractGroup != null)              {                  GUILayout.BeginHorizontal();                    if (indent != 0)                  {                      GUILayout.Label(""' GUILayout.ExpandWidth(false)' GUILayout.Width(indent * 16));                  }                    if (GUILayout.Button(contractGroup.expandInDebug ? "-" : "+"' GUILayout.Width(20)' GUILayout.Height(20)))                  {                      contractGroup.expandInDebug = !contractGroup.expandInDebug;                  }                    GUIStyle style = greenLabel;                  if (!contractGroup.enabled)                  {                      style = redLabel;                  }                  else                  {                      if (contractGroup.hasWarnings)                      {                          style = yellowLabel;                      }                        foreach (ContractType contractType in guiContracts.Where(ct => contractGroup == null ? ct.group == null : contractGroup.BelongsToGroup(ct)))                      {                          if (!contractType.enabled)                          {                              style = redLabel;                              break;                          }                          else if (contractType.hasWarnings)                          {                              style = yellowLabel;                          }                      }                  }                    GUILayout.Label(new GUIContent(contractGroup.ToString()' DebugInfo(contractGroup))' style);                  GUILayout.EndHorizontal();              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,GroupGui,The following statement contains a magic number: if (contractGroup != null)              {                  GUILayout.BeginHorizontal();                    if (indent != 0)                  {                      GUILayout.Label(""' GUILayout.ExpandWidth(false)' GUILayout.Width(indent * 16));                  }                    if (GUILayout.Button(contractGroup.expandInDebug ? "-" : "+"' GUILayout.Width(20)' GUILayout.Height(20)))                  {                      contractGroup.expandInDebug = !contractGroup.expandInDebug;                  }                    GUIStyle style = greenLabel;                  if (!contractGroup.enabled)                  {                      style = redLabel;                  }                  else                  {                      if (contractGroup.hasWarnings)                      {                          style = yellowLabel;                      }                        foreach (ContractType contractType in guiContracts.Where(ct => contractGroup == null ? ct.group == null : contractGroup.BelongsToGroup(ct)))                      {                          if (!contractType.enabled)                          {                              style = redLabel;                              break;                          }                          else if (contractType.hasWarnings)                          {                              style = yellowLabel;                          }                      }                  }                    GUILayout.Label(new GUIContent(contractGroup.ToString()' DebugInfo(contractGroup))' style);                  GUILayout.EndHorizontal();              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,GroupGui,The following statement contains a magic number: if (contractGroup != null)              {                  GUILayout.BeginHorizontal();                    if (indent != 0)                  {                      GUILayout.Label(""' GUILayout.ExpandWidth(false)' GUILayout.Width(indent * 16));                  }                    if (GUILayout.Button(contractGroup.expandInDebug ? "-" : "+"' GUILayout.Width(20)' GUILayout.Height(20)))                  {                      contractGroup.expandInDebug = !contractGroup.expandInDebug;                  }                    GUIStyle style = greenLabel;                  if (!contractGroup.enabled)                  {                      style = redLabel;                  }                  else                  {                      if (contractGroup.hasWarnings)                      {                          style = yellowLabel;                      }                        foreach (ContractType contractType in guiContracts.Where(ct => contractGroup == null ? ct.group == null : contractGroup.BelongsToGroup(ct)))                      {                          if (!contractType.enabled)                          {                              style = redLabel;                              break;                          }                          else if (contractType.hasWarnings)                          {                              style = yellowLabel;                          }                      }                  }                    GUILayout.Label(new GUIContent(contractGroup.ToString()' DebugInfo(contractGroup))' style);                  GUILayout.EndHorizontal();              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,GroupGui,The following statement contains a magic number: if (contractGroup == null || contractGroup.expandInDebug)              {                  // Child groups                  if (contractGroup != null)                  {                      foreach (ContractGroup childGroup in ContractGroup.AllGroups.Where(g => g != null && g.parent != null && g.parent.name == contractGroup.name).OrderBy(cg => cg.name))                      {                          GroupGui(childGroup' indent + 1);                      }                  }                    // Child contract types                  foreach (ContractType contractType in guiContracts.Where(ct => ct.group == contractGroup).OrderBy(ct => ct.name))                  {                      GUILayout.BeginHorizontal();                        if (contractGroup != null)                      {                          GUILayout.Label(""' GUILayout.ExpandWidth(false)' GUILayout.Width((indent+1) * 16));                      }                        if (GUILayout.Button(contractType.expandInDebug ? "-" : "+"' GUILayout.Width(20)' GUILayout.Height(20)))                      {                          contractType.expandInDebug = !contractType.expandInDebug;                      }                      GUILayout.Label(new GUIContent(contractType.ToString()' DebugInfo(contractType))'                          contractType.enabled ? contractType.hasWarnings ? yellowLabel : GUI.skin.label : redLabel);                      GUILayout.EndHorizontal();                        if (contractType.expandInDebug)                      {                          // Output children                          ParamGui(contractType' contractType.ParamFactories' indent + (contractGroup == null ? 1 : 2));                          RequirementGui(contractType' contractType.Requirements' indent + (contractGroup == null ? 1 : 2));                          BehaviourGui(contractType' contractType.BehaviourFactories' indent + (contractGroup == null ? 1 : 2));                            GUILayout.Space(8);                      }                  }              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,GroupGui,The following statement contains a magic number: if (contractGroup == null || contractGroup.expandInDebug)              {                  // Child groups                  if (contractGroup != null)                  {                      foreach (ContractGroup childGroup in ContractGroup.AllGroups.Where(g => g != null && g.parent != null && g.parent.name == contractGroup.name).OrderBy(cg => cg.name))                      {                          GroupGui(childGroup' indent + 1);                      }                  }                    // Child contract types                  foreach (ContractType contractType in guiContracts.Where(ct => ct.group == contractGroup).OrderBy(ct => ct.name))                  {                      GUILayout.BeginHorizontal();                        if (contractGroup != null)                      {                          GUILayout.Label(""' GUILayout.ExpandWidth(false)' GUILayout.Width((indent+1) * 16));                      }                        if (GUILayout.Button(contractType.expandInDebug ? "-" : "+"' GUILayout.Width(20)' GUILayout.Height(20)))                      {                          contractType.expandInDebug = !contractType.expandInDebug;                      }                      GUILayout.Label(new GUIContent(contractType.ToString()' DebugInfo(contractType))'                          contractType.enabled ? contractType.hasWarnings ? yellowLabel : GUI.skin.label : redLabel);                      GUILayout.EndHorizontal();                        if (contractType.expandInDebug)                      {                          // Output children                          ParamGui(contractType' contractType.ParamFactories' indent + (contractGroup == null ? 1 : 2));                          RequirementGui(contractType' contractType.Requirements' indent + (contractGroup == null ? 1 : 2));                          BehaviourGui(contractType' contractType.BehaviourFactories' indent + (contractGroup == null ? 1 : 2));                            GUILayout.Space(8);                      }                  }              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,GroupGui,The following statement contains a magic number: if (contractGroup == null || contractGroup.expandInDebug)              {                  // Child groups                  if (contractGroup != null)                  {                      foreach (ContractGroup childGroup in ContractGroup.AllGroups.Where(g => g != null && g.parent != null && g.parent.name == contractGroup.name).OrderBy(cg => cg.name))                      {                          GroupGui(childGroup' indent + 1);                      }                  }                    // Child contract types                  foreach (ContractType contractType in guiContracts.Where(ct => ct.group == contractGroup).OrderBy(ct => ct.name))                  {                      GUILayout.BeginHorizontal();                        if (contractGroup != null)                      {                          GUILayout.Label(""' GUILayout.ExpandWidth(false)' GUILayout.Width((indent+1) * 16));                      }                        if (GUILayout.Button(contractType.expandInDebug ? "-" : "+"' GUILayout.Width(20)' GUILayout.Height(20)))                      {                          contractType.expandInDebug = !contractType.expandInDebug;                      }                      GUILayout.Label(new GUIContent(contractType.ToString()' DebugInfo(contractType))'                          contractType.enabled ? contractType.hasWarnings ? yellowLabel : GUI.skin.label : redLabel);                      GUILayout.EndHorizontal();                        if (contractType.expandInDebug)                      {                          // Output children                          ParamGui(contractType' contractType.ParamFactories' indent + (contractGroup == null ? 1 : 2));                          RequirementGui(contractType' contractType.Requirements' indent + (contractGroup == null ? 1 : 2));                          BehaviourGui(contractType' contractType.BehaviourFactories' indent + (contractGroup == null ? 1 : 2));                            GUILayout.Space(8);                      }                  }              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,GroupGui,The following statement contains a magic number: if (contractGroup == null || contractGroup.expandInDebug)              {                  // Child groups                  if (contractGroup != null)                  {                      foreach (ContractGroup childGroup in ContractGroup.AllGroups.Where(g => g != null && g.parent != null && g.parent.name == contractGroup.name).OrderBy(cg => cg.name))                      {                          GroupGui(childGroup' indent + 1);                      }                  }                    // Child contract types                  foreach (ContractType contractType in guiContracts.Where(ct => ct.group == contractGroup).OrderBy(ct => ct.name))                  {                      GUILayout.BeginHorizontal();                        if (contractGroup != null)                      {                          GUILayout.Label(""' GUILayout.ExpandWidth(false)' GUILayout.Width((indent+1) * 16));                      }                        if (GUILayout.Button(contractType.expandInDebug ? "-" : "+"' GUILayout.Width(20)' GUILayout.Height(20)))                      {                          contractType.expandInDebug = !contractType.expandInDebug;                      }                      GUILayout.Label(new GUIContent(contractType.ToString()' DebugInfo(contractType))'                          contractType.enabled ? contractType.hasWarnings ? yellowLabel : GUI.skin.label : redLabel);                      GUILayout.EndHorizontal();                        if (contractType.expandInDebug)                      {                          // Output children                          ParamGui(contractType' contractType.ParamFactories' indent + (contractGroup == null ? 1 : 2));                          RequirementGui(contractType' contractType.Requirements' indent + (contractGroup == null ? 1 : 2));                          BehaviourGui(contractType' contractType.BehaviourFactories' indent + (contractGroup == null ? 1 : 2));                            GUILayout.Space(8);                      }                  }              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,GroupGui,The following statement contains a magic number: if (contractGroup == null || contractGroup.expandInDebug)              {                  // Child groups                  if (contractGroup != null)                  {                      foreach (ContractGroup childGroup in ContractGroup.AllGroups.Where(g => g != null && g.parent != null && g.parent.name == contractGroup.name).OrderBy(cg => cg.name))                      {                          GroupGui(childGroup' indent + 1);                      }                  }                    // Child contract types                  foreach (ContractType contractType in guiContracts.Where(ct => ct.group == contractGroup).OrderBy(ct => ct.name))                  {                      GUILayout.BeginHorizontal();                        if (contractGroup != null)                      {                          GUILayout.Label(""' GUILayout.ExpandWidth(false)' GUILayout.Width((indent+1) * 16));                      }                        if (GUILayout.Button(contractType.expandInDebug ? "-" : "+"' GUILayout.Width(20)' GUILayout.Height(20)))                      {                          contractType.expandInDebug = !contractType.expandInDebug;                      }                      GUILayout.Label(new GUIContent(contractType.ToString()' DebugInfo(contractType))'                          contractType.enabled ? contractType.hasWarnings ? yellowLabel : GUI.skin.label : redLabel);                      GUILayout.EndHorizontal();                        if (contractType.expandInDebug)                      {                          // Output children                          ParamGui(contractType' contractType.ParamFactories' indent + (contractGroup == null ? 1 : 2));                          RequirementGui(contractType' contractType.Requirements' indent + (contractGroup == null ? 1 : 2));                          BehaviourGui(contractType' contractType.BehaviourFactories' indent + (contractGroup == null ? 1 : 2));                            GUILayout.Space(8);                      }                  }              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,GroupGui,The following statement contains a magic number: if (contractGroup == null || contractGroup.expandInDebug)              {                  // Child groups                  if (contractGroup != null)                  {                      foreach (ContractGroup childGroup in ContractGroup.AllGroups.Where(g => g != null && g.parent != null && g.parent.name == contractGroup.name).OrderBy(cg => cg.name))                      {                          GroupGui(childGroup' indent + 1);                      }                  }                    // Child contract types                  foreach (ContractType contractType in guiContracts.Where(ct => ct.group == contractGroup).OrderBy(ct => ct.name))                  {                      GUILayout.BeginHorizontal();                        if (contractGroup != null)                      {                          GUILayout.Label(""' GUILayout.ExpandWidth(false)' GUILayout.Width((indent+1) * 16));                      }                        if (GUILayout.Button(contractType.expandInDebug ? "-" : "+"' GUILayout.Width(20)' GUILayout.Height(20)))                      {                          contractType.expandInDebug = !contractType.expandInDebug;                      }                      GUILayout.Label(new GUIContent(contractType.ToString()' DebugInfo(contractType))'                          contractType.enabled ? contractType.hasWarnings ? yellowLabel : GUI.skin.label : redLabel);                      GUILayout.EndHorizontal();                        if (contractType.expandInDebug)                      {                          // Output children                          ParamGui(contractType' contractType.ParamFactories' indent + (contractGroup == null ? 1 : 2));                          RequirementGui(contractType' contractType.Requirements' indent + (contractGroup == null ? 1 : 2));                          BehaviourGui(contractType' contractType.BehaviourFactories' indent + (contractGroup == null ? 1 : 2));                            GUILayout.Space(8);                      }                  }              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,GroupGui,The following statement contains a magic number: if (contractGroup == null || contractGroup.expandInDebug)              {                  // Child groups                  if (contractGroup != null)                  {                      foreach (ContractGroup childGroup in ContractGroup.AllGroups.Where(g => g != null && g.parent != null && g.parent.name == contractGroup.name).OrderBy(cg => cg.name))                      {                          GroupGui(childGroup' indent + 1);                      }                  }                    // Child contract types                  foreach (ContractType contractType in guiContracts.Where(ct => ct.group == contractGroup).OrderBy(ct => ct.name))                  {                      GUILayout.BeginHorizontal();                        if (contractGroup != null)                      {                          GUILayout.Label(""' GUILayout.ExpandWidth(false)' GUILayout.Width((indent+1) * 16));                      }                        if (GUILayout.Button(contractType.expandInDebug ? "-" : "+"' GUILayout.Width(20)' GUILayout.Height(20)))                      {                          contractType.expandInDebug = !contractType.expandInDebug;                      }                      GUILayout.Label(new GUIContent(contractType.ToString()' DebugInfo(contractType))'                          contractType.enabled ? contractType.hasWarnings ? yellowLabel : GUI.skin.label : redLabel);                      GUILayout.EndHorizontal();                        if (contractType.expandInDebug)                      {                          // Output children                          ParamGui(contractType' contractType.ParamFactories' indent + (contractGroup == null ? 1 : 2));                          RequirementGui(contractType' contractType.Requirements' indent + (contractGroup == null ? 1 : 2));                          BehaviourGui(contractType' contractType.BehaviourFactories' indent + (contractGroup == null ? 1 : 2));                            GUILayout.Space(8);                      }                  }              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,ParamGui,The following statement contains a magic number: foreach (ParameterFactory param in paramList)              {                  GUILayout.BeginHorizontal(GUILayout.ExpandWidth(false));                  GUILayout.Space(28);  				GUILayout.Label(new GUIContent(new string(' '' indent * 4) + param' DebugInfo(param))'                      param.enabled ? param.hasWarnings ? yellowLabel : GUI.skin.label : redLabel);                  if (contractType.enabled)                  {                      if (GUILayout.Button(param.enabled ? check : cross' GUILayout.ExpandWidth(false)))                      {                          param.enabled = !param.enabled;                      }                  }                  GUILayout.EndHorizontal();                    ParamGui(contractType' param.ChildParameters' indent + 1);                  RequirementGui(contractType' param.ChildRequirements' indent + 1);              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,ParamGui,The following statement contains a magic number: foreach (ParameterFactory param in paramList)              {                  GUILayout.BeginHorizontal(GUILayout.ExpandWidth(false));                  GUILayout.Space(28);  				GUILayout.Label(new GUIContent(new string(' '' indent * 4) + param' DebugInfo(param))'                      param.enabled ? param.hasWarnings ? yellowLabel : GUI.skin.label : redLabel);                  if (contractType.enabled)                  {                      if (GUILayout.Button(param.enabled ? check : cross' GUILayout.ExpandWidth(false)))                      {                          param.enabled = !param.enabled;                      }                  }                  GUILayout.EndHorizontal();                    ParamGui(contractType' param.ChildParameters' indent + 1);                  RequirementGui(contractType' param.ChildRequirements' indent + 1);              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,RequirementGui,The following statement contains a magic number: foreach (ContractRequirement requirement in requirementList)              {                  GUILayout.BeginHorizontal(GUILayout.ExpandWidth(false));                  GUILayout.Space(28);                  GUIStyle style = requirement.lastResult == null ? GUI.skin.label : requirement.lastResult.Value ? greenLabel : yellowLabel;                  GUILayout.Label(new GUIContent(new string(' '' indent * 4) + requirement' DebugInfo(requirement))'                      requirement.enabled ? requirement.hasWarnings ? yellowLabel : style : redLabel);                  if (contractType.enabled)                  {                      if (GUILayout.Button(requirement.enabled ? check : cross' GUILayout.ExpandWidth(false)))                      {                          requirement.enabled = !requirement.enabled;                      }                  }                  GUILayout.EndHorizontal();                    RequirementGui(contractType' requirement.ChildRequirements' indent + 1);              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,RequirementGui,The following statement contains a magic number: foreach (ContractRequirement requirement in requirementList)              {                  GUILayout.BeginHorizontal(GUILayout.ExpandWidth(false));                  GUILayout.Space(28);                  GUIStyle style = requirement.lastResult == null ? GUI.skin.label : requirement.lastResult.Value ? greenLabel : yellowLabel;                  GUILayout.Label(new GUIContent(new string(' '' indent * 4) + requirement' DebugInfo(requirement))'                      requirement.enabled ? requirement.hasWarnings ? yellowLabel : style : redLabel);                  if (contractType.enabled)                  {                      if (GUILayout.Button(requirement.enabled ? check : cross' GUILayout.ExpandWidth(false)))                      {                          requirement.enabled = !requirement.enabled;                      }                  }                  GUILayout.EndHorizontal();                    RequirementGui(contractType' requirement.ChildRequirements' indent + 1);              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,BehaviourGui,The following statement contains a magic number: foreach (BehaviourFactory behaviour in behaviourList)              {                  GUILayout.BeginHorizontal(GUILayout.ExpandWidth(false));                  GUILayout.Space(28);                  GUILayout.Label(new GUIContent(new string(' '' indent * 4) + behaviour' DebugInfo(behaviour))'                      behaviour.enabled ? behaviour.hasWarnings ? yellowLabel : GUI.skin.label : redLabel);                  if (contractType.enabled)                  {                      if (GUILayout.Button(behaviour.enabled ? check : cross' GUILayout.ExpandWidth(false)))                      {                          behaviour.enabled = !behaviour.enabled;                      }                  }                  GUILayout.EndHorizontal();              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,BehaviourGui,The following statement contains a magic number: foreach (BehaviourFactory behaviour in behaviourList)              {                  GUILayout.BeginHorizontal(GUILayout.ExpandWidth(false));                  GUILayout.Space(28);                  GUILayout.Label(new GUIContent(new string(' '' indent * 4) + behaviour' DebugInfo(behaviour))'                      behaviour.enabled ? behaviour.hasWarnings ? yellowLabel : GUI.skin.label : redLabel);                  if (contractType.enabled)                  {                      if (GUILayout.Button(behaviour.enabled ? check : cross' GUILayout.ExpandWidth(false)))                      {                          behaviour.enabled = !behaviour.enabled;                      }                  }                  GUILayout.EndHorizontal();              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,RightColumnGUI,The following statement contains a magic number: GUILayout.BeginVertical(GUILayout.Width(550));
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,RightColumnGUI,The following statement contains a magic number: if (selectedPane == SelectedPane.DEBUG_LOG)              {                  drawToolTip = false;                    scrollPosition2 = GUILayout.BeginScrollView(scrollPosition2' GUILayout.Width(550)' GUILayout.ExpandHeight(true));                  // Tooltip                  if (!string.IsNullOrEmpty(GUI.tooltip))                  {                      tooltip = GUI.tooltip.Replace("\t"' "    ");                  }                  GUILayout.Label(tooltip' bigTipStyle);                  GUILayout.EndScrollView();              }              else if (selectedPane == SelectedPane.BALANCE_MODE)              {                  if (Event.current.type == EventType.Repaint)                  {                      drawToolTip = string.IsNullOrEmpty(GUI.tooltip);                  }                    BalanceModeGUI();              }              else if (selectedPane == SelectedPane.LOCATION_MODE)              {                  if (Event.current.type == EventType.Repaint)                  {                      drawToolTip = string.IsNullOrEmpty(GUI.tooltip);                  }                    LocationModeGUI();              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,BalanceModeGUI,The following statement contains a magic number: int CT_WIDTH = 164;
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,BalanceModeGUI,The following statement contains a magic number: int CB_WIDTH = 56;
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,BalanceModeGUI,The following statement contains a magic number: int FUNDS_WIDTH = 60;
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,BalanceModeGUI,The following statement contains a magic number: int FUNDS2_WIDTH = 48;
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,BalanceModeGUI,The following statement contains a magic number: int SCIENCE_WIDTH = 36;
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,BalanceModeGUI,The following statement contains a magic number: int REP_WIDTH = 34;
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,BalanceModeGUI,The following statement contains a magic number: GUILayout.Label("<color=#8bed8b>Rewards</color>"' headerLabelCenter' GUILayout.Width(FUNDS_WIDTH + SCIENCE_WIDTH + REP_WIDTH - 2));
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,BalanceModeGUI,The following statement contains a magic number: scrollPosition2 = GUILayout.BeginScrollView(scrollPosition2' GUILayout.Width(550)' GUILayout.ExpandHeight(true));
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,DrawToolTip,The following statement contains a magic number: if (!string.IsNullOrEmpty(tooltip))              {                  if (Time.fixedTime > toolTipTime + 0.5)                  {                      GUIContent tip = new GUIContent(tooltip);                        Vector2 textDimensions = GUI.skin.box.CalcSize(tip);                      if (textDimensions.x > 240)                      {                          textDimensions.x = 240;                          textDimensions.y = tipStyle.CalcHeight(tip' 240);                      }                      tooltipPosition.width = textDimensions.x;                      tooltipPosition.height = textDimensions.y;                      tooltipPosition.x = Event.current.mousePosition.x + tooltipPosition.width > Screen.width ?                          Screen.width - tooltipPosition.width : Event.current.mousePosition.x;                      tooltipPosition.y = Event.current.mousePosition.y + 20;                        GUI.Label(tooltipPosition' tip' tipStyle);                  }              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,DrawToolTip,The following statement contains a magic number: if (!string.IsNullOrEmpty(tooltip))              {                  if (Time.fixedTime > toolTipTime + 0.5)                  {                      GUIContent tip = new GUIContent(tooltip);                        Vector2 textDimensions = GUI.skin.box.CalcSize(tip);                      if (textDimensions.x > 240)                      {                          textDimensions.x = 240;                          textDimensions.y = tipStyle.CalcHeight(tip' 240);                      }                      tooltipPosition.width = textDimensions.x;                      tooltipPosition.height = textDimensions.y;                      tooltipPosition.x = Event.current.mousePosition.x + tooltipPosition.width > Screen.width ?                          Screen.width - tooltipPosition.width : Event.current.mousePosition.x;                      tooltipPosition.y = Event.current.mousePosition.y + 20;                        GUI.Label(tooltipPosition' tip' tipStyle);                  }              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,DrawToolTip,The following statement contains a magic number: if (!string.IsNullOrEmpty(tooltip))              {                  if (Time.fixedTime > toolTipTime + 0.5)                  {                      GUIContent tip = new GUIContent(tooltip);                        Vector2 textDimensions = GUI.skin.box.CalcSize(tip);                      if (textDimensions.x > 240)                      {                          textDimensions.x = 240;                          textDimensions.y = tipStyle.CalcHeight(tip' 240);                      }                      tooltipPosition.width = textDimensions.x;                      tooltipPosition.height = textDimensions.y;                      tooltipPosition.x = Event.current.mousePosition.x + tooltipPosition.width > Screen.width ?                          Screen.width - tooltipPosition.width : Event.current.mousePosition.x;                      tooltipPosition.y = Event.current.mousePosition.y + 20;                        GUI.Label(tooltipPosition' tip' tipStyle);                  }              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,DrawToolTip,The following statement contains a magic number: if (!string.IsNullOrEmpty(tooltip))              {                  if (Time.fixedTime > toolTipTime + 0.5)                  {                      GUIContent tip = new GUIContent(tooltip);                        Vector2 textDimensions = GUI.skin.box.CalcSize(tip);                      if (textDimensions.x > 240)                      {                          textDimensions.x = 240;                          textDimensions.y = tipStyle.CalcHeight(tip' 240);                      }                      tooltipPosition.width = textDimensions.x;                      tooltipPosition.height = textDimensions.y;                      tooltipPosition.x = Event.current.mousePosition.x + tooltipPosition.width > Screen.width ?                          Screen.width - tooltipPosition.width : Event.current.mousePosition.x;                      tooltipPosition.y = Event.current.mousePosition.y + 20;                        GUI.Label(tooltipPosition' tip' tipStyle);                  }              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,DrawToolTip,The following statement contains a magic number: if (!string.IsNullOrEmpty(tooltip))              {                  if (Time.fixedTime > toolTipTime + 0.5)                  {                      GUIContent tip = new GUIContent(tooltip);                        Vector2 textDimensions = GUI.skin.box.CalcSize(tip);                      if (textDimensions.x > 240)                      {                          textDimensions.x = 240;                          textDimensions.y = tipStyle.CalcHeight(tip' 240);                      }                      tooltipPosition.width = textDimensions.x;                      tooltipPosition.height = textDimensions.y;                      tooltipPosition.x = Event.current.mousePosition.x + tooltipPosition.width > Screen.width ?                          Screen.width - tooltipPosition.width : Event.current.mousePosition.x;                      tooltipPosition.y = Event.current.mousePosition.y + 20;                        GUI.Label(tooltipPosition' tip' tipStyle);                  }              }
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,LocationModeGUI,The following statement contains a magic number: int TOP_HEADER_WIDTH = 96;
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,LocationModeGUI,The following statement contains a magic number: int TOP_EDIT_WIDTH = 160;
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,LocationModeGUI,The following statement contains a magic number: int CITY_WIDTH = 124;
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,LocationModeGUI,The following statement contains a magic number: int HEADING_WIDTH = 400;
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,LocationModeGUI,The following statement contains a magic number: GUILayout.Space(8);
Magic Number,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,LocationModeGUI,The following statement contains a magic number: scrollPosition2 = GUILayout.BeginScrollView(scrollPosition2' GUILayout.Width(550)' GUILayout.ExpandHeight(true));
Magic Number,ContractConfigurator,ExceptionLogWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ExceptionLogWindow.cs,WindowGUI,The following statement contains a magic number: scrollPosition = GUILayout.BeginScrollView(scrollPosition' GUILayout.Height(280));
Magic Number,ContractConfigurator,Extensions,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Extensions.cs,GetHashes,The following statement contains a magic number: while (queue.Any() || otherVessel.Any())              {                  bool decoupler = false;                    // Start a new ship                  if (queue.Count == 0)                  {                      // Reset our hash                      if (count != 0)                      {                          yield return hash;                      }                      count = 0;                      hash = 0;                        // Find an unhandled part to use as the new vessel                      while (otherVessel.Any())                      {                          ProtoPartSnapshot px = otherVessel.Dequeue();                          if (!visited.ContainsKey(px) || visited[px] != 2)                          {                              queue.Enqueue(px);                              break;                          }                      }                      dockedParts.Clear();                      continue;                  }                    if (!queue.Any())                  {                      break;                  }                    ProtoPartSnapshot p = queue.Dequeue();                    // Check if this is for a new vessel                  if (dockedParts.ContainsKey(p.flightID))                  {                      otherVessel.Enqueue(p);                      continue;                  }                    // Special handling of certain modules                  foreach (ProtoPartModuleSnapshot pm in p.modules)                  {                      if (pm.moduleName == "ModuleDecouple" || pm.moduleName == "ModuleDockingNode" || pm.moduleName == "ModuleGrappleNode")                      {                          // Just assume all parts can decouple from this' it's easier and                          // effectively the same thing                          decoupler = true;                            // Parent may be null if this is the root of the stack                          if (p.parent != null)                          {                              dockedParts[p.parent.flightID] = p.parent.flightID;                          }                            // Add all children as possible new vessels                          foreach (ProtoPartSnapshot child in parts.Where(childPart => childPart.parent == p))                          {                              dockedParts[child.flightID] = child.flightID;                          }                            if (pm.moduleName == "ModuleGrappleNode")                          {                              ModuleGrappleNode grapple = pm.moduleRef as ModuleGrappleNode;                              ProtoPartSnapshot dockedPart = parts.Where(childPart => childPart.flightID == grapple.dockedPartUId).FirstOrDefault();                              if (dockedPart != null)                              {                                  otherVessel.Enqueue(dockedPart);                              }                          }                      }                  }                    // Go through our child parts                  foreach (ProtoPartSnapshot child in parts.Where(childPart => childPart.parent == p))                  {                      if (!visited.ContainsKey(child))                      {                          queue.Enqueue(child);                          visited[child] = 1;                      }                  }                    // Confirm if parent part has been visited                  if (p.parent != null && !visited.ContainsKey(p.parent))                  {                      queue.Enqueue(p.parent);                      visited[p.parent] = 1;                  }                    // Add this part to the hash                  if (!decoupler)                  {                      count++;                      hash ^= p.flightID;                  }                    // We've processed this node                  visited[p] = 2;              }
Magic Number,ContractConfigurator,Extensions,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Extensions.cs,GetHashes,The following statement contains a magic number: while (queue.Any() || otherVessel.Any())              {                  bool decoupler = false;                    // Start a new ship                  if (queue.Count == 0)                  {                      // Reset our hash                      if (count != 0)                      {                          yield return hash;                      }                      count = 0;                      hash = 0;                        // Find an unhandled part to use as the new vessel                      while (otherVessel.Any())                      {                          ProtoPartSnapshot px = otherVessel.Dequeue();                          if (!visited.ContainsKey(px) || visited[px] != 2)                          {                              queue.Enqueue(px);                              break;                          }                      }                      dockedParts.Clear();                      continue;                  }                    if (!queue.Any())                  {                      break;                  }                    ProtoPartSnapshot p = queue.Dequeue();                    // Check if this is for a new vessel                  if (dockedParts.ContainsKey(p.flightID))                  {                      otherVessel.Enqueue(p);                      continue;                  }                    // Special handling of certain modules                  foreach (ProtoPartModuleSnapshot pm in p.modules)                  {                      if (pm.moduleName == "ModuleDecouple" || pm.moduleName == "ModuleDockingNode" || pm.moduleName == "ModuleGrappleNode")                      {                          // Just assume all parts can decouple from this' it's easier and                          // effectively the same thing                          decoupler = true;                            // Parent may be null if this is the root of the stack                          if (p.parent != null)                          {                              dockedParts[p.parent.flightID] = p.parent.flightID;                          }                            // Add all children as possible new vessels                          foreach (ProtoPartSnapshot child in parts.Where(childPart => childPart.parent == p))                          {                              dockedParts[child.flightID] = child.flightID;                          }                            if (pm.moduleName == "ModuleGrappleNode")                          {                              ModuleGrappleNode grapple = pm.moduleRef as ModuleGrappleNode;                              ProtoPartSnapshot dockedPart = parts.Where(childPart => childPart.flightID == grapple.dockedPartUId).FirstOrDefault();                              if (dockedPart != null)                              {                                  otherVessel.Enqueue(dockedPart);                              }                          }                      }                  }                    // Go through our child parts                  foreach (ProtoPartSnapshot child in parts.Where(childPart => childPart.parent == p))                  {                      if (!visited.ContainsKey(child))                      {                          queue.Enqueue(child);                          visited[child] = 1;                      }                  }                    // Confirm if parent part has been visited                  if (p.parent != null && !visited.ContainsKey(p.parent))                  {                      queue.Enqueue(p.parent);                      visited[p.parent] = 1;                  }                    // Add this part to the hash                  if (!decoupler)                  {                      count++;                      hash ^= p.flightID;                  }                    // We've processed this node                  visited[p] = 2;              }
Magic Number,ContractConfigurator,RendezvousFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\RendezvousFactory.cs,Load,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<double>(configNode' "distance"' x => distance = x' this' 2000.0);
Magic Number,ContractConfigurator,RendezvousFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\RendezvousFactory.cs,ValidateVesselList,The following statement contains a magic number: if (parent is VesselParameterGroupFactory)              {                  if (vessels.Count > 1)                  {                      LoggingUtil.LogError(this' ErrorPrefix() + ": When used under a VesselParameterGroup' no more than one vessel may be specified for the Rendezvous parameter.");                      valid = false;                  }              }              else              {                  if (vessels.Count == 0)                  {                      LoggingUtil.LogError(this' ErrorPrefix() + ": Need at least one vessel specified for the Rendezvous parameter.");                      valid = false;                  }                  if (vessels.Count > 2)                  {                      LoggingUtil.LogError(this' ErrorPrefix() + ": Cannot specify more than two vessels for the Rendezvous parameter.");                      valid = false;                  }              }
Magic Number,ContractConfigurator,DockingFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\DockingFactory.cs,Load,The following statement contains a magic number: if (parent is VesselParameterGroupFactory)              {                  if (configNode.GetValues("vessel").Count() > 1)                  {                      LoggingUtil.LogError(this' ErrorPrefix() + ": When used under a VesselParameterGroup' no more than one vessel may be specified for the Docking parameter.");                      valid = false;                  }              }              else              {                  if (configNode.GetValues("vessel").Count() == 0)                  {                      LoggingUtil.LogError(this' ErrorPrefix() + ": Need at least one vessel specified for the Docking parameter.");                      valid = false;                  }                  if (configNode.GetValues("vessel").Count() > 2)                  {                      LoggingUtil.LogError(this' ErrorPrefix() + ": Cannot specify more than two vessels for the Docking parameter.");                      valid = false;                  }              }
Magic Number,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<double>(configNode' "minInclination"' x => minInclination = x' this' 0.0' x => Validation.Between(x' 0.0' 180.0));
Magic Number,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<double>(configNode' "maxInclination"' x => maxInclination = x' this' 180.0' x => Validation.Between(x' 0.0' 180.0));
Magic Number,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<double>(configNode' "maxInclination"' x => maxInclination = x' this' 180.0' x => Validation.Between(x' 0.0' 180.0));
Magic Number,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<double>(configNode' "minArgumentOfPeriapsis"' x => minArgumentOfPeriapsis = x' this' 0.0' x => Validation.Between(x' 0.0' 360.0));
Magic Number,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<double>(configNode' "maxArgumentOfPeriapsis"' x => maxArgumentOfPeriapsis = x' this' 360.0' x => Validation.Between(x' 0.0' 360.0));
Magic Number,ContractConfigurator,OrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\OrbitFactory.cs,Load,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<double>(configNode' "maxArgumentOfPeriapsis"' x => maxArgumentOfPeriapsis = x' this' 360.0' x => Validation.Between(x' 0.0' 360.0));
Magic Number,ContractConfigurator,LocationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\LocationUtil.cs,TerrainHeight,The following statement contains a magic number: double latRads = Math.PI / 180.0 * latitude;
Magic Number,ContractConfigurator,LocationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\LocationUtil.cs,TerrainHeight,The following statement contains a magic number: double lonRads = Math.PI / 180.0 * longitude;
Magic Number,ContractConfigurator,FacilityRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\FacilityRequirement.cs,LoadFromConfig,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<int>(configNode' "minLevel"' x => minLevel = x' this' 1' x => Validation.Between(x' 1' 3));
Magic Number,ContractConfigurator,FacilityRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\FacilityRequirement.cs,LoadFromConfig,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxLevel"' x => maxLevel = x' this' 3' x => Validation.Between(x' 1' 3));
Magic Number,ContractConfigurator,FacilityRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\FacilityRequirement.cs,LoadFromConfig,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxLevel"' x => maxLevel = x' this' 3' x => Validation.Between(x' 1' 3));
Magic Number,ContractConfigurator,HasAstronautRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\HasAstronautRequirement.cs,LoadFromConfig,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<int>(configNode' "minExperience"' x => minExperience = x' this' 0' x => Validation.Between(x' 0' 5));
Magic Number,ContractConfigurator,HasAstronautRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\HasAstronautRequirement.cs,LoadFromConfig,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxExperience"' x => maxExperience = x' this' 5' x => Validation.Between(x' 0' 5));
Magic Number,ContractConfigurator,HasAstronautRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\HasAstronautRequirement.cs,LoadFromConfig,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxExperience"' x => maxExperience = x' this' 5' x => Validation.Between(x' 0' 5));
Magic Number,ContractConfigurator,HasAstronautRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\HasAstronautRequirement.cs,RequirementText,The following statement contains a magic number: if (minExperience > 0 && maxExperience < 5)              {                  output += " with between " + minExperience + " and " + maxExperience + " experience levels";              }              else if (minExperience > 0)              {                  output += " with at least " + minExperience + " experience levels";              }              else if (maxExperience < 5)              {                  output += " with no more than  " + maxExperience + " experience levels";              }
Magic Number,ContractConfigurator,HasAstronautRequirement,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Requirement\HasAstronautRequirement.cs,RequirementText,The following statement contains a magic number: if (minExperience > 0 && maxExperience < 5)              {                  output += " with between " + minExperience + " and " + maxExperience + " experience levels";              }              else if (minExperience > 0)              {                  output += " with at least " + minExperience + " experience levels";              }              else if (maxExperience < 5)              {                  output += " with no more than  " + maxExperience + " experience levels";              }
Magic Number,ContractConfigurator,ReachSpecificOrbitFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\ReachSpecificOrbitFactory.cs,Load,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<double>(configNode' "deviationWindow"' x => deviationWindow = x' this' 10.0' x => Validation.GE(x' 0.0));
Magic Number,ContractConfigurator,PersistentDataStore,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\PersistentDataStore.cs,OutputValue,The following statement contains a magic number: if (type == typeof(CelestialBody))              {                  strValue = ((CelestialBody)value).name;              }              else if (type == typeof(Vessel))              {                  strValue = ((Vessel)value).id.ToString();              }              else if (type == typeof(ScienceSubject))              {                  strValue = ((ScienceSubject)value).id;              }              else if (type == typeof(ScienceExperiment))              {                  strValue = ((ScienceExperiment)(value)).id;              }              else if (type == typeof(AvailablePart))              {                  strValue = ((AvailablePart)(value)).name;              }              else if (type == typeof(Biome))              {                  Biome b = (Biome)value;                  strValue = b.body.name + ";" + b.biome;              }              else if (type.Name == "List`1")              {                  strValue = "[ ";                  System.Collections.IEnumerable list = (System.Collections.IEnumerable)value;                  foreach (object o in list)                  {                      Type t;                      strValue += OutputValue(o' out t) + "' ";                  }                  strValue = strValue.Length == 2 ? "[]" : (strValue.Remove(strValue.Length - 2) + " ]");              }              else              {                  strValue = value.ToString();              }
Magic Number,ContractConfigurator,PersistentDataStore,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ScenarioModules\PersistentDataStore.cs,OutputValue,The following statement contains a magic number: if (type == typeof(CelestialBody))              {                  strValue = ((CelestialBody)value).name;              }              else if (type == typeof(Vessel))              {                  strValue = ((Vessel)value).id.ToString();              }              else if (type == typeof(ScienceSubject))              {                  strValue = ((ScienceSubject)value).id;              }              else if (type == typeof(ScienceExperiment))              {                  strValue = ((ScienceExperiment)(value)).id;              }              else if (type == typeof(AvailablePart))              {                  strValue = ((AvailablePart)(value)).name;              }              else if (type == typeof(Biome))              {                  Biome b = (Biome)value;                  strValue = b.body.name + ";" + b.biome;              }              else if (type.Name == "List`1")              {                  strValue = "[ ";                  System.Collections.IEnumerable list = (System.Collections.IEnumerable)value;                  foreach (object o in list)                  {                      Type t;                      strValue += OutputValue(o' out t) + "' ";                  }                  strValue = strValue.Length == 2 ? "[]" : (strValue.Remove(strValue.Length - 2) + " ]");              }              else              {                  strValue = value.ToString();              }
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,ParseDuration,The following statement contains a magic number: int years = m.Groups[2].Value.Equals("") ? 0 : Convert.ToInt32(m.Groups[2].Value);
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,ParseDuration,The following statement contains a magic number: int years = m.Groups[2].Value.Equals("") ? 0 : Convert.ToInt32(m.Groups[2].Value);
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,ParseDuration,The following statement contains a magic number: int days = m.Groups[4].Value.Equals("") ? 0 : Convert.ToInt32(m.Groups[4].Value);
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,ParseDuration,The following statement contains a magic number: int days = m.Groups[4].Value.Equals("") ? 0 : Convert.ToInt32(m.Groups[4].Value);
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,ParseDuration,The following statement contains a magic number: int hours = m.Groups[6].Value.Equals("") ? 0 : Convert.ToInt32(m.Groups[6].Value);
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,ParseDuration,The following statement contains a magic number: int hours = m.Groups[6].Value.Equals("") ? 0 : Convert.ToInt32(m.Groups[6].Value);
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,ParseDuration,The following statement contains a magic number: int minutes = m.Groups[8].Value.Equals("") ? 0 : Convert.ToInt32(m.Groups[8].Value);
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,ParseDuration,The following statement contains a magic number: int minutes = m.Groups[8].Value.Equals("") ? 0 : Convert.ToInt32(m.Groups[8].Value);
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,ParseDuration,The following statement contains a magic number: int seconds = m.Groups[10].Value.Equals("") ? 0 : Convert.ToInt32(m.Groups[10].Value);
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,ParseDuration,The following statement contains a magic number: int seconds = m.Groups[10].Value.Equals("") ? 0 : Convert.ToInt32(m.Groups[10].Value);
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,StringValue,The following statement contains a magic number: if (displayMilli)              {                  time -= seconds;                  int millis = (int)(time * 1000);                  output += "." + millis.ToString("D3");              }
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,SetTimeConsts,The following statement contains a magic number: SecondsPerYear = 31536000;
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,SetTimeConsts,The following statement contains a magic number: SecondsPerDay = 86400;
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,SetTimeConsts,The following statement contains a magic number: SecondsPerHour = 3600;
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,SetTimeConsts,The following statement contains a magic number: SecondsPerMinute = 60;
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,SetTimeConsts,The following statement contains a magic number: if (GameSettings.KERBIN_TIME)              {                  SecondsPerYear = 9201600;  // = 426d                  SecondsPerDay = 21600;     // = 6h                  SecondsPerHour = 3600;     // = 60m                  SecondsPerMinute = 60;     // = 60s              }
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,SetTimeConsts,The following statement contains a magic number: if (GameSettings.KERBIN_TIME)              {                  SecondsPerYear = 9201600;  // = 426d                  SecondsPerDay = 21600;     // = 6h                  SecondsPerHour = 3600;     // = 60m                  SecondsPerMinute = 60;     // = 60s              }
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,SetTimeConsts,The following statement contains a magic number: if (GameSettings.KERBIN_TIME)              {                  SecondsPerYear = 9201600;  // = 426d                  SecondsPerDay = 21600;     // = 6h                  SecondsPerHour = 3600;     // = 60m                  SecondsPerMinute = 60;     // = 60s              }
Magic Number,ContractConfigurator,DurationUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DurationUtil.cs,SetTimeConsts,The following statement contains a magic number: if (GameSettings.KERBIN_TIME)              {                  SecondsPerYear = 9201600;  // = 426d                  SecondsPerDay = 21600;     // = 6h                  SecondsPerHour = 3600;     // = 60m                  SecondsPerMinute = 60;     // = 60s              }
Magic Number,ContractConfigurator,HasResourceFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasResourceFactory.cs,Load,The following statement contains a magic number: foreach (ConfigNode childNode in nodes)              {                  HasResource.Filter filter = new HasResource.Filter();                    valid &= ConfigNodeUtil.ParseValue<double>(childNode' "minQuantity"' x => filter.minQuantity = x' this' 0.01' x => Validation.GE(x' 0.0));                  valid &= ConfigNodeUtil.ParseValue<double>(childNode' "maxQuantity"' x => filter.maxQuantity = x' this' double.MaxValue' x => Validation.GE(x' 0.0));                  valid &= ConfigNodeUtil.ParseValue<Resource>(childNode' "resource"' x => filter.resource = x.res' this);                    filters.Add(filter);              }
Magic Number,ContractConfigurator,HasCrewFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasCrewFactory.cs,Load,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<int>(configNode' "minExperience"' x => minExperience = x' this' 0' x => Validation.Between(x' 0' 5));
Magic Number,ContractConfigurator,HasCrewFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasCrewFactory.cs,Load,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxExperience"' x => maxExperience = x' this' 5' x => Validation.Between(x' 0' 5));
Magic Number,ContractConfigurator,HasCrewFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ParameterFactory\HasCrewFactory.cs,Load,The following statement contains a magic number: valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxExperience"' x => maxExperience = x' this' 5' x => Validation.Between(x' 0' 5));
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,ContractConfiguratorReload,The following statement contains a magic number: ScreenMessages.PostScreenMessage("Loaded " + successContracts + " out of " + totalContracts                  + " contracts successfully."' 5' ScreenMessageStyle.UPPER_CENTER);
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,RegisterParameterFactories,The following statement contains a magic number: foreach (Type subclass in GetAllTypes<ParameterFactory>().Where(t => !t.IsAbstract))              {                  string name = subclass.Name;                  if (name.EndsWith("Factory"))                  {                      name = name.Remove(name.Length - 7' 7);                  }                    try                  {                      ParameterFactory.Register(subclass' name);                  }                  catch (Exception e)                  {                      LoggingUtil.LogError(this' "Error registering parameter factory " + subclass.Name);                      LoggingUtil.LogException(e);                  }              }
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,RegisterParameterFactories,The following statement contains a magic number: foreach (Type subclass in GetAllTypes<ParameterFactory>().Where(t => !t.IsAbstract))              {                  string name = subclass.Name;                  if (name.EndsWith("Factory"))                  {                      name = name.Remove(name.Length - 7' 7);                  }                    try                  {                      ParameterFactory.Register(subclass' name);                  }                  catch (Exception e)                  {                      LoggingUtil.LogError(this' "Error registering parameter factory " + subclass.Name);                      LoggingUtil.LogException(e);                  }              }
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,RegisterBehaviourFactories,The following statement contains a magic number: foreach (Type subclass in GetAllTypes<BehaviourFactory>().Where(t => !t.IsAbstract))              {                  string name = subclass.Name;                  if (name.EndsWith("Factory"))                  {                      name = name.Remove(name.Length - 7' 7);                  }                    try                  {                      BehaviourFactory.Register(subclass' name);                  }                  catch (Exception e)                  {                      LoggingUtil.LogError(this' "Error registering behaviour factory " + subclass.Name);                      LoggingUtil.LogException(e);                  }              }
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,RegisterBehaviourFactories,The following statement contains a magic number: foreach (Type subclass in GetAllTypes<BehaviourFactory>().Where(t => !t.IsAbstract))              {                  string name = subclass.Name;                  if (name.EndsWith("Factory"))                  {                      name = name.Remove(name.Length - 7' 7);                  }                    try                  {                      BehaviourFactory.Register(subclass' name);                  }                  catch (Exception e)                  {                      LoggingUtil.LogError(this' "Error registering behaviour factory " + subclass.Name);                      LoggingUtil.LogException(e);                  }              }
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,RegisterContractRequirements,The following statement contains a magic number: foreach (Type subclass in GetAllTypes<ContractRequirement>().Where(t => !t.IsAbstract))              {                  string name = subclass.Name;                  if (name.EndsWith("Requirement"))                  {                      name = name.Remove(name.Length - 11' 11);                  }                    try                  {                      ContractRequirement.Register(subclass' name);                  }                  catch (Exception e)                  {                      LoggingUtil.LogError(this' "Error registering contract requirement " + subclass.Name);                      LoggingUtil.LogException(e);                  }              }
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,RegisterContractRequirements,The following statement contains a magic number: foreach (Type subclass in GetAllTypes<ContractRequirement>().Where(t => !t.IsAbstract))              {                  string name = subclass.Name;                  if (name.EndsWith("Requirement"))                  {                      name = name.Remove(name.Length - 11' 11);                  }                    try                  {                      ContractRequirement.Register(subclass' name);                  }                  catch (Exception e)                  {                      LoggingUtil.LogError(this' "Error registering contract requirement " + subclass.Name);                      LoggingUtil.LogException(e);                  }              }
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,LoadContractTypeConfig,The following statement contains a magic number: if (!reloading && LoggingUtil.logLevel == LoggingUtil.LogLevel.DEBUG || LoggingUtil.logLevel == LoggingUtil.LogLevel.VERBOSE)              {                  ScreenMessages.PostScreenMessage("Contract Configurator: Loaded " + successContracts + " out of " + totalContracts                      + " contracts successfully."' 5' ScreenMessageStyle.UPPER_CENTER);              }
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,ContractLimit,The following statement contains a magic number: switch (prestige)              {                  case Contract.ContractPrestige.Trivial:                      return Math.Max(2' (int)Math.Round((rep + rep * level / 3) * mult / 200 + 6 + level));                  case Contract.ContractPrestige.Significant:                      return Math.Max(1' (int)Math.Round((rep + rep * level / 3) * mult / 250 + 4 + level));                  case Contract.ContractPrestige.Exceptional:                      return Math.Max(0' (int)Math.Round((rep + rep * level / 3) * mult / (1000/3.0) + 2 + level));              }
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,ContractLimit,The following statement contains a magic number: switch (prestige)              {                  case Contract.ContractPrestige.Trivial:                      return Math.Max(2' (int)Math.Round((rep + rep * level / 3) * mult / 200 + 6 + level));                  case Contract.ContractPrestige.Significant:                      return Math.Max(1' (int)Math.Round((rep + rep * level / 3) * mult / 250 + 4 + level));                  case Contract.ContractPrestige.Exceptional:                      return Math.Max(0' (int)Math.Round((rep + rep * level / 3) * mult / (1000/3.0) + 2 + level));              }
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,ContractLimit,The following statement contains a magic number: switch (prestige)              {                  case Contract.ContractPrestige.Trivial:                      return Math.Max(2' (int)Math.Round((rep + rep * level / 3) * mult / 200 + 6 + level));                  case Contract.ContractPrestige.Significant:                      return Math.Max(1' (int)Math.Round((rep + rep * level / 3) * mult / 250 + 4 + level));                  case Contract.ContractPrestige.Exceptional:                      return Math.Max(0' (int)Math.Round((rep + rep * level / 3) * mult / (1000/3.0) + 2 + level));              }
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,ContractLimit,The following statement contains a magic number: switch (prestige)              {                  case Contract.ContractPrestige.Trivial:                      return Math.Max(2' (int)Math.Round((rep + rep * level / 3) * mult / 200 + 6 + level));                  case Contract.ContractPrestige.Significant:                      return Math.Max(1' (int)Math.Round((rep + rep * level / 3) * mult / 250 + 4 + level));                  case Contract.ContractPrestige.Exceptional:                      return Math.Max(0' (int)Math.Round((rep + rep * level / 3) * mult / (1000/3.0) + 2 + level));              }
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,ContractLimit,The following statement contains a magic number: switch (prestige)              {                  case Contract.ContractPrestige.Trivial:                      return Math.Max(2' (int)Math.Round((rep + rep * level / 3) * mult / 200 + 6 + level));                  case Contract.ContractPrestige.Significant:                      return Math.Max(1' (int)Math.Round((rep + rep * level / 3) * mult / 250 + 4 + level));                  case Contract.ContractPrestige.Exceptional:                      return Math.Max(0' (int)Math.Round((rep + rep * level / 3) * mult / (1000/3.0) + 2 + level));              }
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,ContractLimit,The following statement contains a magic number: switch (prestige)              {                  case Contract.ContractPrestige.Trivial:                      return Math.Max(2' (int)Math.Round((rep + rep * level / 3) * mult / 200 + 6 + level));                  case Contract.ContractPrestige.Significant:                      return Math.Max(1' (int)Math.Round((rep + rep * level / 3) * mult / 250 + 4 + level));                  case Contract.ContractPrestige.Exceptional:                      return Math.Max(0' (int)Math.Round((rep + rep * level / 3) * mult / (1000/3.0) + 2 + level));              }
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,ContractLimit,The following statement contains a magic number: switch (prestige)              {                  case Contract.ContractPrestige.Trivial:                      return Math.Max(2' (int)Math.Round((rep + rep * level / 3) * mult / 200 + 6 + level));                  case Contract.ContractPrestige.Significant:                      return Math.Max(1' (int)Math.Round((rep + rep * level / 3) * mult / 250 + 4 + level));                  case Contract.ContractPrestige.Exceptional:                      return Math.Max(0' (int)Math.Round((rep + rep * level / 3) * mult / (1000/3.0) + 2 + level));              }
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,ContractLimit,The following statement contains a magic number: switch (prestige)              {                  case Contract.ContractPrestige.Trivial:                      return Math.Max(2' (int)Math.Round((rep + rep * level / 3) * mult / 200 + 6 + level));                  case Contract.ContractPrestige.Significant:                      return Math.Max(1' (int)Math.Round((rep + rep * level / 3) * mult / 250 + 4 + level));                  case Contract.ContractPrestige.Exceptional:                      return Math.Max(0' (int)Math.Round((rep + rep * level / 3) * mult / (1000/3.0) + 2 + level));              }
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,ContractLimit,The following statement contains a magic number: switch (prestige)              {                  case Contract.ContractPrestige.Trivial:                      return Math.Max(2' (int)Math.Round((rep + rep * level / 3) * mult / 200 + 6 + level));                  case Contract.ContractPrestige.Significant:                      return Math.Max(1' (int)Math.Round((rep + rep * level / 3) * mult / 250 + 4 + level));                  case Contract.ContractPrestige.Exceptional:                      return Math.Max(0' (int)Math.Round((rep + rep * level / 3) * mult / (1000/3.0) + 2 + level));              }
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,ContractLimit,The following statement contains a magic number: switch (prestige)              {                  case Contract.ContractPrestige.Trivial:                      return Math.Max(2' (int)Math.Round((rep + rep * level / 3) * mult / 200 + 6 + level));                  case Contract.ContractPrestige.Significant:                      return Math.Max(1' (int)Math.Round((rep + rep * level / 3) * mult / 250 + 4 + level));                  case Contract.ContractPrestige.Exceptional:                      return Math.Max(0' (int)Math.Round((rep + rep * level / 3) * mult / (1000/3.0) + 2 + level));              }
Magic Number,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,ContractLimit,The following statement contains a magic number: switch (prestige)              {                  case Contract.ContractPrestige.Trivial:                      return Math.Max(2' (int)Math.Round((rep + rep * level / 3) * mult / 200 + 6 + level));                  case Contract.ContractPrestige.Significant:                      return Math.Max(1' (int)Math.Round((rep + rep * level / 3) * mult / 250 + 4 + level));                  case Contract.ContractPrestige.Exceptional:                      return Math.Max(0' (int)Math.Round((rep + rep * level / 3) * mult / (1000/3.0) + 2 + level));              }
Magic Number,ContractConfigurator,ContractType,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractType.cs,Load,The following statement contains a magic number: try              {                  // Logging on                  LoggingUtil.CaptureLog = true;                  ConfigNodeUtil.SetCurrentDataNode(null);                  LoggingUtil.LogInfo(this' "Loading CONTRACT_TYPE: '" + name + "'");                    // Clear the config node cache                  ConfigNodeUtil.ClearCache(true);                    // Load values that are immediately required                  bool valid = true;                  valid &= ConfigNodeUtil.ParseValue<ContractGroup>(configNode' "group"' x => group = x' this' (ContractGroup)null);                    // Set up the data node                  dataNode = new DataNode(configNode.GetValue("name")' group != null ? group.dataNode : null' this);                  ConfigNodeUtil.SetCurrentDataNode(dataNode);                    valid &= ConfigNodeUtil.ParseValue<string>(configNode' "name"' x => name = x' this);                    // Try to turn on trace mode                  valid &= ConfigNodeUtil.ParseValue<bool>(configNode' "trace"' x => trace = x' this' false);                  if (trace)                  {                      LoggingUtil.logLevel = LoggingUtil.LogLevel.VERBOSE;                      LoggingUtil.LogWarning(this' "Tracing enabled for contract type " + name);                  }                    // Load contract text details                  valid &= ConfigNodeUtil.ParseValue<string>(configNode' "title"' x => title = x' this);                  valid &= ConfigNodeUtil.ParseValue<string>(configNode' "tag"' x => tag = x' this' "");                  valid &= ConfigNodeUtil.ParseValue<string>(configNode' "description"' x => description = x' this' (string)null);                  valid &= ConfigNodeUtil.ParseValue<string>(configNode' "topic"' x => topic = x' this' "");                  valid &= ConfigNodeUtil.ParseValue<string>(configNode' "subject"' x => subject = x' this' "");                  valid &= ConfigNodeUtil.ParseValue<string>(configNode' "notes"' x => notes = x' this' (string)null);                  valid &= ConfigNodeUtil.ParseValue<string>(configNode' "synopsis"' x => synopsis = x' this);                  valid &= ConfigNodeUtil.ParseValue<string>(configNode' "completedMessage"' x => completedMessage = x' this);                    if (configNode.HasValue("motivation)"))                  {                      string motivation;                      valid &= ConfigNodeUtil.ParseValue<string>(configNode' "motivation"' x => motivation = x' this' "");                      LoggingUtil.LogWarning(this' "The 'motivation' attribute is no longer supported as of Contract Configurator 1.23.0");                  }                    // Load optional attributes                  valid &= ConfigNodeUtil.ParseValue<Agent>(configNode' "agent"' x => agent = x' this' group != null ? group.agent : null);                  valid &= ConfigNodeUtil.ParseValue<float>(configNode' "minExpiry"' x => minExpiry = x' this' 5.0f' x => Validation.GE(x' 0.0f));                  valid &= ConfigNodeUtil.ParseValue<float>(configNode' "maxExpiry"' x => maxExpiry = x' this' 100.0f' x => Validation.GE(x' minExpiry));                  valid &= ConfigNodeUtil.ParseValue<float>(configNode' "deadline"' x => deadline = x' this' 0.0f' x => Validation.GE(x' 0.0f));                  valid &= ConfigNodeUtil.ParseValue<bool>(configNode' "cancellable"' x => cancellable = x' this' true);                  valid &= ConfigNodeUtil.ParseValue<bool>(configNode' "declinable"' x => declinable = x' this' true);                  valid &= ConfigNodeUtil.ParseValue<bool>(configNode' "autoAccept"' x => autoAccept = x' this' false);                  valid &= ConfigNodeUtil.ParseValue<List<Contract.ContractPrestige>>(configNode' "prestige"' x => prestige = x' this' new List<Contract.ContractPrestige>());                  valid &= ConfigNodeUtil.ParseValue<CelestialBody>(configNode' "targetBody"' x => targetBody = x' this' (CelestialBody)null);                    valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxCompletions"' x => maxCompletions = x' this' 0' x => Validation.GE(x' 0));                  valid &= ConfigNodeUtil.ParseValue<int>(configNode' "maxSimultaneous"' x => maxSimultaneous = x' this' (maxCompletions == 0 ? 4 : 0)' x => Validation.GE(x' 0));                    // Load rewards                  valid &= ConfigNodeUtil.ParseValue<float>(configNode' "rewardFunds"' x => rewardFunds = x' this' 0.0f);                  valid &= ConfigNodeUtil.ParseValue<float>(configNode' "rewardReputation"' x => rewardReputation = x' this' 0.0f);                  valid &= ConfigNodeUtil.ParseValue<float>(configNode' "rewardScience"' x => rewardScience = x' this' 0.0f);                  valid &= ConfigNodeUtil.ParseValue<float>(configNode' "failureFunds"' x => failureFunds = x' this' 0.0f);                  valid &= ConfigNodeUtil.ParseValue<float>(configNode' "failureReputation"' x => failureReputation = x' this' 0.0f);                  valid &= ConfigNodeUtil.ParseValue<float>(configNode' "advanceFunds"' x => advanceFunds = x' this' 0.0f);                    // Load other values                  if (configNode.HasValue("weight"))                  {                      double weight;                      valid &= ConfigNodeUtil.ParseValue<double>(configNode' "weight"' x => weight = x' this);                      LoggingUtil.LogWarning(this' ErrorPrefix() + ": The weight attribute is deprecated as of Contract Configurator 1.15.0.  Contracts are no longer generated using a weighted system.");                  }                    // Merge in data from the parent contract group                  for (ContractGroup currentGroup = group; currentGroup != null; currentGroup = currentGroup.parent)                  {                      // Merge dataValues - this is a flag saying what values need to be unique at the contract level                      foreach (KeyValuePair<string' DataValueInfo> pair in currentGroup.dataValues)                      {                          dataValues[currentGroup.name + ":" + pair.Key] = pair.Value;                      }                        // Merge uniquenessChecks                      foreach (KeyValuePair<string' DataNode.UniquenessCheck> pair in currentGroup.uniquenessChecks)                      {                          uniquenessChecks[currentGroup.name + ":" + pair.Key] = pair.Value;                      }                  }                    // Load DATA nodes                  valid &= dataNode.ParseDataNodes(configNode' this' dataValues' uniquenessChecks);                    log = LoggingUtil.capturedLog;                  LoggingUtil.CaptureLog = false;                    // Load parameters                  foreach (ConfigNode contractParameter in ConfigNodeUtil.GetChildNodes(configNode' "PARAMETER"))                  {                      ParameterFactory paramFactory = null;                      valid &= ParameterFactory.GenerateParameterFactory(contractParameter' this' out paramFactory);                      if (paramFactory != null)                      {                          paramFactories.Add(paramFactory);                          if (paramFactory.hasWarnings)                          {                              hasWarnings = true;                          }                      }                  }                    // Load behaviours                  foreach (ConfigNode requirementNode in ConfigNodeUtil.GetChildNodes(configNode' "BEHAVIOUR"))                  {                      BehaviourFactory behaviourFactory = null;                      valid &= BehaviourFactory.GenerateBehaviourFactory(requirementNode' this' out behaviourFactory);                      if (behaviourFactory != null)                      {                          behaviourFactories.Add(behaviourFactory);                          if (behaviourFactory.hasWarnings)                          {                              hasWarnings = true;                          }                      }                  }                    // Load requirements                  foreach (ConfigNode requirementNode in ConfigNodeUtil.GetChildNodes(configNode' "REQUIREMENT"))                  {                      ContractRequirement requirement = null;                      valid &= ContractRequirement.GenerateRequirement(requirementNode' this' out requirement);                      if (requirement != null)                      {                          requirements.Add(requirement);                          if (requirement.hasWarnings)                          {                              hasWarnings = true;                          }                      }                  }                    // Logging on                  LoggingUtil.CaptureLog = true;                    // Check we have at least one valid parameter                  if (paramFactories.Count() == 0)                  {                      LoggingUtil.LogError(this' ErrorPrefix() + ": Need at least one parameter for a contract!");                      valid = false;                  }                    ConfigNodeUtil.SetCurrentDataNode(dataNode);                    //                  // Process the DATA_EXPAND nodes - this could cause a restart to the load process                  //                  ConfigNode dataExpandNode = configNode.GetNodes("DATA_EXPAND").FirstOrDefault();                  if (dataExpandNode != null)                  {                      Type type = null;                      valid &= ConfigNodeUtil.ParseValue<Type>(dataExpandNode' "type"' x => type = x' this);                        if (type != null)                      {                          foreach (ConfigNode.Value pair in dataExpandNode.values)                          {                              string key = pair.name;                              if (key != "type")                              {                                  object value = null;                                    // Create the setter function                                  Type actionType = typeof(Action<>).MakeGenericType(type);                                  Delegate del = Delegate.CreateDelegate(actionType' value' typeof(DataNode).GetMethod("NullAction"));                                    // Set the ParseDataExpandString method generic value                                  MethodInfo method = methodParseExpand.MakeGenericMethod(new Type[] { type });                                    // Invoke the ParseDataExpandString method                                  List<string> values = (List<string>)method.Invoke(this' new object[] { dataExpandNode' key });                                    // Stop at this point if we're invalid                                  if (values == null || !valid)                                  {                                      if (values == null)                                      {                                          LoggingUtil.LogWarning(this' ErrorPrefix() + ": Received an empty list of values when trying to do a DATA_EXPAND");                                      }                                      valid = false;                                      break;                                  }                                    // Expand                                  configNode.RemoveNode(dataExpandNode);                                  foreach (string val in values)                                  {                                      // Set up for expansion                                      ConfigNode copy = configNode.CreateCopy();                                      string newName = name + "." + val;                                      copy.SetValue("name"' newName);                                        // Set up the data node in the copy                                      ConfigNode dataNode = new ConfigNode("DATA");                                      copy.AddNode(dataNode);                                      dataNode.AddValue("type"' dataExpandNode.GetValue("type"));                                      dataNode.AddValue(key' val);                                      dataNode.AddValue("isLiteral"' true);                                        ContractType contractTypeCopy = new ContractType(newName);                                      contractTypeCopy.Load(copy);                                  }                                    // Remove the original                                  contractTypes.Remove(name);                                    // Don't do any more loading for this one                                  LoggingUtil.LogInfo(this' "Successfully expanded CONTRACT_TYPE '" + name + "'");                                  return valid;                              }                          }                      }                  }                    //                  // Do the deferred loads                  //                  valid &= ConfigNodeUtil.ExecuteDeferredLoads();                    //                  // Do generic fields that need to happen after deferred loads                  //                  ConfigNodeUtil.SetCurrentDataNode(dataNode);                    // Generic title                  valid &= ConfigNodeUtil.ParseValue<string>(configNode' "genericTitle"' x => genericTitle = x' this' title);                  if (!configNode.HasValue("genericTitle") && !dataNode.IsDeterministic("title"))                  {                      LoggingUtil.Log(minVersion >= ContractConfigurator.ENHANCED_UI_VERSION ? LoggingUtil.LogLevel.ERROR : LoggingUtil.LogLevel.WARNING' this'                          ErrorPrefix() + ": The field 'genericTitle' is required when the title is not determistic (ie. when expressions are used).");                        // Error on newer versions of contract packs                      if (minVersion >= ContractConfigurator.ENHANCED_UI_VERSION)                      {                          valid = false;                      }                  }                  else if (!dataNode.IsDeterministic("genericTitle"))                  {                      valid = false;                      LoggingUtil.LogError(this' ErrorPrefix() + ": The field 'genericTitle' must be deterministic.");                  }                    // Generic description                  valid &= ConfigNodeUtil.ParseValue<string>(configNode' "genericDescription"' x => genericDescription = x' this' description);                  if (!configNode.HasValue("genericDescription") && !dataNode.IsDeterministic("description"))                  {                      LoggingUtil.Log(minVersion >= ContractConfigurator.ENHANCED_UI_VERSION ? LoggingUtil.LogLevel.ERROR : LoggingUtil.LogLevel.WARNING' this'                          ErrorPrefix() + ": The field 'genericDescription' is required when the description is not determistic (ie. when expressions are used).");                        // Error on newer versions of contract packs                      if (minVersion >= ContractConfigurator.ENHANCED_UI_VERSION)                      {                          valid = false;                      }                  }                  else if (!dataNode.IsDeterministic("genericDescription"))                  {                      valid = false;                      LoggingUtil.LogError(this' ErrorPrefix() + ": The field 'genericDescription' must be deterministic.");                  }                    // Sorting key                  valid &= ConfigNodeUtil.ParseValue<string>(configNode' "sortKey"' x => sortKey = x' this' genericTitle);                    // Check for unexpected values - always do this last                  valid &= ConfigNodeUtil.ValidateUnexpectedValues(configNode' this);                    if (valid)                  {                      LoggingUtil.LogInfo(this' "Successfully loaded CONTRACT_TYPE '" + name + "'");                  }                  else                  {                      LoggingUtil.LogWarning(this' "Errors encountered while trying to load CONTRACT_TYPE '" + name + "'");                  }                  config = configNode.ToString();                  hash = config.GetHashCode();                  enabled = valid;                  log += LoggingUtil.capturedLog;                    if (LoggingUtil.logLevel >= LoggingUtil.LogLevel.DEBUG)                  {                      // Get the contract configurator log file                      string[] dirComponents = new string[] { KSPUtil.ApplicationRootPath' "GameData"' "ContractConfigurator"' "log"' (group == null ? "!NO_GROUP" : group.Root.name) };                      string[] pathComponents = dirComponents.Union(new string[] { name + ".log" }).ToArray();                      string dir = string.Join(Path.DirectorySeparatorChar.ToString()' dirComponents);                      string path = string.Join(Path.DirectorySeparatorChar.ToString()' pathComponents);                        // Delete the file if it exists                      if (File.Exists(path))                      {                          try                          {                              File.Delete(path);                          }                          catch (Exception e)                          {                              LoggingUtil.LogException(new Exception("Exception while attempting to delete the file: " + path' e));                          }                      }                        // Create the directory if it doesn't exist                      Directory.CreateDirectory(dir);                        // Now write the config and the cleaned up log to it                      try                      {                          using (StreamWriter sw = File.AppendText(path))                          {                              sw.Write("Debug information for CONTRACT_TYPE '" + name + "':\n");                              sw.Write("\nConfiguration:\n");                              sw.Write(config);                              sw.Write("\nData Nodes:\n");                              sw.Write(DataNodeDebug(dataNode));                              sw.Write("\nOutput log:\n");                              sw.Write(log);                          }                      }                      catch                      {                          LoggingUtil.LogError(this' "Exception while attempting to write to the file: " + path);                      }                  }                    return valid;              }              catch (Exception e)              {                  enabled = false;                  throw new Exception("Error loading CONTRACT_TYPE '" + name + "'"' e);              }              finally              {                  LoggingUtil.CaptureLog = false;                  LoggingUtil.logLevel = origLogLevel;                  loaded = true;              }
Magic Number,ContractConfigurator,ConfiguredContract,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ConfiguredContract.cs,ConfiguredContract,The following statement contains a magic number: this.dateExpire = Contract.GameTime + 5.0 * 3600.0 * 6.0;
Magic Number,ContractConfigurator,ConfiguredContract,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ConfiguredContract.cs,ConfiguredContract,The following statement contains a magic number: this.dateExpire = Contract.GameTime + 5.0 * 3600.0 * 6.0;
Magic Number,ContractConfigurator,ConfiguredContract,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ConfiguredContract.cs,ConfiguredContract,The following statement contains a magic number: this.dateExpire = Contract.GameTime + 5.0 * 3600.0 * 6.0;
Magic Number,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseSingleValue,The following statement contains a magic number: if (typeof(T).Name == "Nullable`1")              {                  if (typeof(T).GetGenericArguments()[0].IsEnum)                  {                      value = (T)Enum.Parse(typeof(T).GetGenericArguments()[0]' stringValue' true);                  }                  else                  {                      value = (T)Convert.ChangeType(stringValue' typeof(T).GetGenericArguments()[0]);                  }              }              else if (allowExpression && (parser = BaseParser.GetParser<T>()) != null)              {                  if (initialLoad)                  {                      value = parser.ParseExpression(key' stringValue' currentDataNode);                  }                  else                  {                      value = parser.ExecuteExpression(key' stringValue' currentDataNode);                  }              }              // Enum parsing logic              else if (typeof(T).IsEnum)              {                  value = (T)Enum.Parse(typeof(T)' stringValue' true);              }              else if (typeof(T) == typeof(AvailablePart))              {                  value = (T)(object)ParsePartValue(stringValue);              }              else if (typeof(T) == typeof(ContractGroup))              {                  if (!ContractGroup.contractGroups.ContainsKey(stringValue))                  {                      throw new ArgumentException("No contract group with name '" + stringValue + "'");                  }                  value = (T)(object)ContractGroup.contractGroups[stringValue];              }              else if (typeof(T) == typeof(CelestialBody))              {                  value = (T)(object)ParseCelestialBodyValue(stringValue);              }              else if (typeof(T) == typeof(PartResourceDefinition))              {                  value = (T)(object)ParseResourceValue(stringValue);              }              else if (typeof(T) == typeof(Resource))              {                  value = (T)(object)new Resource(ParseResourceValue(stringValue));              }              else if (typeof(T) == typeof(Agent))              {                  value = (T)(object)ParseAgentValue(stringValue);              }              else if (typeof(T) == typeof(Duration))              {                  value = (T)(object)new Duration(DurationUtil.ParseDuration(stringValue));              }              else if (typeof(T) == typeof(ProtoCrewMember))              {                  value = (T)(object)ParseProtoCrewMemberValue(stringValue);              }              else if (typeof(T) == typeof(Kerbal))              {                  value = (T)(object)new Kerbal(stringValue);              }              else if (typeof(T) == typeof(Guid))              {                  value = (T)(object)new Guid(stringValue);              }              else if (typeof(T) == typeof(Vessel))              {                  value = (T)(object)ParseVesselValue(stringValue);              }              else if (typeof(T) == typeof(VesselIdentifier))              {                  value = (T)(object)new VesselIdentifier(stringValue);              }              else if (typeof(T) == typeof(Vector3))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  float x = (float)Convert.ChangeType(vals[0]' typeof(float));                  float y = (float)Convert.ChangeType(vals[1]' typeof(float));                  float z = (float)Convert.ChangeType(vals[2]' typeof(float));                  value = (T)(object)new Vector3(x' y' z);              }              else if (typeof(T) == typeof(Vector3d))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  double x = (double)Convert.ChangeType(vals[0]' typeof(double));                  double y = (double)Convert.ChangeType(vals[1]' typeof(double));                  double z = (double)Convert.ChangeType(vals[2]' typeof(double));                  value = (T)(object)new Vector3d(x' y' z);              }              else if (typeof(T) == typeof(Type))              {                  value = (T)(object)ParseTypeValue(stringValue);              }              else if (typeof(T) == typeof(ScienceSubject))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetSubjectByID(stringValue) : null);              }              else if (typeof(T) == typeof(ScienceExperiment))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetExperiment(stringValue) : null);              }              else if (typeof(T) == typeof(Color))              {                  if ((stringValue.Length != 7 && stringValue.Length != 9) || stringValue[0] != '#')                  {                      throw new ArgumentException("Invalid color code '" + stringValue + "': Must be # followed by 6 or 8 hex digits (ARGB or RGB).");                  }                  stringValue = stringValue.Replace("#"' "");                  int a  = 255;                  if (stringValue.Length == 8)                  {                      a = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      stringValue = stringValue.Substring(2' 6);                  }                  int r = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                  int g = byte.Parse(stringValue.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                  int b = byte.Parse(stringValue.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                    value = (T)(object)(new Color(r / 255.0f' g / 255.0f' b / 255.0f' a / 255.0f));              }              else if (typeof(T) == typeof(Biome))              {                  string[] biomeData = stringValue.Split(new char[] {';'});                  CelestialBody cb = ParseCelestialBodyValue(biomeData[0]);                  value = (T)(object)(new Biome(cb' biomeData[1]));              }              // Do newline conversions              else if (typeof(T) == typeof(string))              {                  value = (T)(object)stringValue.Replace("\\n"' "\n");              }              // Try a basic type              else              {                  value = (T)Convert.ChangeType(stringValue' typeof(T));              }
Magic Number,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseSingleValue,The following statement contains a magic number: if (typeof(T).Name == "Nullable`1")              {                  if (typeof(T).GetGenericArguments()[0].IsEnum)                  {                      value = (T)Enum.Parse(typeof(T).GetGenericArguments()[0]' stringValue' true);                  }                  else                  {                      value = (T)Convert.ChangeType(stringValue' typeof(T).GetGenericArguments()[0]);                  }              }              else if (allowExpression && (parser = BaseParser.GetParser<T>()) != null)              {                  if (initialLoad)                  {                      value = parser.ParseExpression(key' stringValue' currentDataNode);                  }                  else                  {                      value = parser.ExecuteExpression(key' stringValue' currentDataNode);                  }              }              // Enum parsing logic              else if (typeof(T).IsEnum)              {                  value = (T)Enum.Parse(typeof(T)' stringValue' true);              }              else if (typeof(T) == typeof(AvailablePart))              {                  value = (T)(object)ParsePartValue(stringValue);              }              else if (typeof(T) == typeof(ContractGroup))              {                  if (!ContractGroup.contractGroups.ContainsKey(stringValue))                  {                      throw new ArgumentException("No contract group with name '" + stringValue + "'");                  }                  value = (T)(object)ContractGroup.contractGroups[stringValue];              }              else if (typeof(T) == typeof(CelestialBody))              {                  value = (T)(object)ParseCelestialBodyValue(stringValue);              }              else if (typeof(T) == typeof(PartResourceDefinition))              {                  value = (T)(object)ParseResourceValue(stringValue);              }              else if (typeof(T) == typeof(Resource))              {                  value = (T)(object)new Resource(ParseResourceValue(stringValue));              }              else if (typeof(T) == typeof(Agent))              {                  value = (T)(object)ParseAgentValue(stringValue);              }              else if (typeof(T) == typeof(Duration))              {                  value = (T)(object)new Duration(DurationUtil.ParseDuration(stringValue));              }              else if (typeof(T) == typeof(ProtoCrewMember))              {                  value = (T)(object)ParseProtoCrewMemberValue(stringValue);              }              else if (typeof(T) == typeof(Kerbal))              {                  value = (T)(object)new Kerbal(stringValue);              }              else if (typeof(T) == typeof(Guid))              {                  value = (T)(object)new Guid(stringValue);              }              else if (typeof(T) == typeof(Vessel))              {                  value = (T)(object)ParseVesselValue(stringValue);              }              else if (typeof(T) == typeof(VesselIdentifier))              {                  value = (T)(object)new VesselIdentifier(stringValue);              }              else if (typeof(T) == typeof(Vector3))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  float x = (float)Convert.ChangeType(vals[0]' typeof(float));                  float y = (float)Convert.ChangeType(vals[1]' typeof(float));                  float z = (float)Convert.ChangeType(vals[2]' typeof(float));                  value = (T)(object)new Vector3(x' y' z);              }              else if (typeof(T) == typeof(Vector3d))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  double x = (double)Convert.ChangeType(vals[0]' typeof(double));                  double y = (double)Convert.ChangeType(vals[1]' typeof(double));                  double z = (double)Convert.ChangeType(vals[2]' typeof(double));                  value = (T)(object)new Vector3d(x' y' z);              }              else if (typeof(T) == typeof(Type))              {                  value = (T)(object)ParseTypeValue(stringValue);              }              else if (typeof(T) == typeof(ScienceSubject))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetSubjectByID(stringValue) : null);              }              else if (typeof(T) == typeof(ScienceExperiment))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetExperiment(stringValue) : null);              }              else if (typeof(T) == typeof(Color))              {                  if ((stringValue.Length != 7 && stringValue.Length != 9) || stringValue[0] != '#')                  {                      throw new ArgumentException("Invalid color code '" + stringValue + "': Must be # followed by 6 or 8 hex digits (ARGB or RGB).");                  }                  stringValue = stringValue.Replace("#"' "");                  int a  = 255;                  if (stringValue.Length == 8)                  {                      a = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      stringValue = stringValue.Substring(2' 6);                  }                  int r = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                  int g = byte.Parse(stringValue.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                  int b = byte.Parse(stringValue.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                    value = (T)(object)(new Color(r / 255.0f' g / 255.0f' b / 255.0f' a / 255.0f));              }              else if (typeof(T) == typeof(Biome))              {                  string[] biomeData = stringValue.Split(new char[] {';'});                  CelestialBody cb = ParseCelestialBodyValue(biomeData[0]);                  value = (T)(object)(new Biome(cb' biomeData[1]));              }              // Do newline conversions              else if (typeof(T) == typeof(string))              {                  value = (T)(object)stringValue.Replace("\\n"' "\n");              }              // Try a basic type              else              {                  value = (T)Convert.ChangeType(stringValue' typeof(T));              }
Magic Number,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseSingleValue,The following statement contains a magic number: if (typeof(T).Name == "Nullable`1")              {                  if (typeof(T).GetGenericArguments()[0].IsEnum)                  {                      value = (T)Enum.Parse(typeof(T).GetGenericArguments()[0]' stringValue' true);                  }                  else                  {                      value = (T)Convert.ChangeType(stringValue' typeof(T).GetGenericArguments()[0]);                  }              }              else if (allowExpression && (parser = BaseParser.GetParser<T>()) != null)              {                  if (initialLoad)                  {                      value = parser.ParseExpression(key' stringValue' currentDataNode);                  }                  else                  {                      value = parser.ExecuteExpression(key' stringValue' currentDataNode);                  }              }              // Enum parsing logic              else if (typeof(T).IsEnum)              {                  value = (T)Enum.Parse(typeof(T)' stringValue' true);              }              else if (typeof(T) == typeof(AvailablePart))              {                  value = (T)(object)ParsePartValue(stringValue);              }              else if (typeof(T) == typeof(ContractGroup))              {                  if (!ContractGroup.contractGroups.ContainsKey(stringValue))                  {                      throw new ArgumentException("No contract group with name '" + stringValue + "'");                  }                  value = (T)(object)ContractGroup.contractGroups[stringValue];              }              else if (typeof(T) == typeof(CelestialBody))              {                  value = (T)(object)ParseCelestialBodyValue(stringValue);              }              else if (typeof(T) == typeof(PartResourceDefinition))              {                  value = (T)(object)ParseResourceValue(stringValue);              }              else if (typeof(T) == typeof(Resource))              {                  value = (T)(object)new Resource(ParseResourceValue(stringValue));              }              else if (typeof(T) == typeof(Agent))              {                  value = (T)(object)ParseAgentValue(stringValue);              }              else if (typeof(T) == typeof(Duration))              {                  value = (T)(object)new Duration(DurationUtil.ParseDuration(stringValue));              }              else if (typeof(T) == typeof(ProtoCrewMember))              {                  value = (T)(object)ParseProtoCrewMemberValue(stringValue);              }              else if (typeof(T) == typeof(Kerbal))              {                  value = (T)(object)new Kerbal(stringValue);              }              else if (typeof(T) == typeof(Guid))              {                  value = (T)(object)new Guid(stringValue);              }              else if (typeof(T) == typeof(Vessel))              {                  value = (T)(object)ParseVesselValue(stringValue);              }              else if (typeof(T) == typeof(VesselIdentifier))              {                  value = (T)(object)new VesselIdentifier(stringValue);              }              else if (typeof(T) == typeof(Vector3))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  float x = (float)Convert.ChangeType(vals[0]' typeof(float));                  float y = (float)Convert.ChangeType(vals[1]' typeof(float));                  float z = (float)Convert.ChangeType(vals[2]' typeof(float));                  value = (T)(object)new Vector3(x' y' z);              }              else if (typeof(T) == typeof(Vector3d))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  double x = (double)Convert.ChangeType(vals[0]' typeof(double));                  double y = (double)Convert.ChangeType(vals[1]' typeof(double));                  double z = (double)Convert.ChangeType(vals[2]' typeof(double));                  value = (T)(object)new Vector3d(x' y' z);              }              else if (typeof(T) == typeof(Type))              {                  value = (T)(object)ParseTypeValue(stringValue);              }              else if (typeof(T) == typeof(ScienceSubject))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetSubjectByID(stringValue) : null);              }              else if (typeof(T) == typeof(ScienceExperiment))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetExperiment(stringValue) : null);              }              else if (typeof(T) == typeof(Color))              {                  if ((stringValue.Length != 7 && stringValue.Length != 9) || stringValue[0] != '#')                  {                      throw new ArgumentException("Invalid color code '" + stringValue + "': Must be # followed by 6 or 8 hex digits (ARGB or RGB).");                  }                  stringValue = stringValue.Replace("#"' "");                  int a  = 255;                  if (stringValue.Length == 8)                  {                      a = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      stringValue = stringValue.Substring(2' 6);                  }                  int r = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                  int g = byte.Parse(stringValue.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                  int b = byte.Parse(stringValue.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                    value = (T)(object)(new Color(r / 255.0f' g / 255.0f' b / 255.0f' a / 255.0f));              }              else if (typeof(T) == typeof(Biome))              {                  string[] biomeData = stringValue.Split(new char[] {';'});                  CelestialBody cb = ParseCelestialBodyValue(biomeData[0]);                  value = (T)(object)(new Biome(cb' biomeData[1]));              }              // Do newline conversions              else if (typeof(T) == typeof(string))              {                  value = (T)(object)stringValue.Replace("\\n"' "\n");              }              // Try a basic type              else              {                  value = (T)Convert.ChangeType(stringValue' typeof(T));              }
Magic Number,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseSingleValue,The following statement contains a magic number: if (typeof(T).Name == "Nullable`1")              {                  if (typeof(T).GetGenericArguments()[0].IsEnum)                  {                      value = (T)Enum.Parse(typeof(T).GetGenericArguments()[0]' stringValue' true);                  }                  else                  {                      value = (T)Convert.ChangeType(stringValue' typeof(T).GetGenericArguments()[0]);                  }              }              else if (allowExpression && (parser = BaseParser.GetParser<T>()) != null)              {                  if (initialLoad)                  {                      value = parser.ParseExpression(key' stringValue' currentDataNode);                  }                  else                  {                      value = parser.ExecuteExpression(key' stringValue' currentDataNode);                  }              }              // Enum parsing logic              else if (typeof(T).IsEnum)              {                  value = (T)Enum.Parse(typeof(T)' stringValue' true);              }              else if (typeof(T) == typeof(AvailablePart))              {                  value = (T)(object)ParsePartValue(stringValue);              }              else if (typeof(T) == typeof(ContractGroup))              {                  if (!ContractGroup.contractGroups.ContainsKey(stringValue))                  {                      throw new ArgumentException("No contract group with name '" + stringValue + "'");                  }                  value = (T)(object)ContractGroup.contractGroups[stringValue];              }              else if (typeof(T) == typeof(CelestialBody))              {                  value = (T)(object)ParseCelestialBodyValue(stringValue);              }              else if (typeof(T) == typeof(PartResourceDefinition))              {                  value = (T)(object)ParseResourceValue(stringValue);              }              else if (typeof(T) == typeof(Resource))              {                  value = (T)(object)new Resource(ParseResourceValue(stringValue));              }              else if (typeof(T) == typeof(Agent))              {                  value = (T)(object)ParseAgentValue(stringValue);              }              else if (typeof(T) == typeof(Duration))              {                  value = (T)(object)new Duration(DurationUtil.ParseDuration(stringValue));              }              else if (typeof(T) == typeof(ProtoCrewMember))              {                  value = (T)(object)ParseProtoCrewMemberValue(stringValue);              }              else if (typeof(T) == typeof(Kerbal))              {                  value = (T)(object)new Kerbal(stringValue);              }              else if (typeof(T) == typeof(Guid))              {                  value = (T)(object)new Guid(stringValue);              }              else if (typeof(T) == typeof(Vessel))              {                  value = (T)(object)ParseVesselValue(stringValue);              }              else if (typeof(T) == typeof(VesselIdentifier))              {                  value = (T)(object)new VesselIdentifier(stringValue);              }              else if (typeof(T) == typeof(Vector3))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  float x = (float)Convert.ChangeType(vals[0]' typeof(float));                  float y = (float)Convert.ChangeType(vals[1]' typeof(float));                  float z = (float)Convert.ChangeType(vals[2]' typeof(float));                  value = (T)(object)new Vector3(x' y' z);              }              else if (typeof(T) == typeof(Vector3d))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  double x = (double)Convert.ChangeType(vals[0]' typeof(double));                  double y = (double)Convert.ChangeType(vals[1]' typeof(double));                  double z = (double)Convert.ChangeType(vals[2]' typeof(double));                  value = (T)(object)new Vector3d(x' y' z);              }              else if (typeof(T) == typeof(Type))              {                  value = (T)(object)ParseTypeValue(stringValue);              }              else if (typeof(T) == typeof(ScienceSubject))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetSubjectByID(stringValue) : null);              }              else if (typeof(T) == typeof(ScienceExperiment))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetExperiment(stringValue) : null);              }              else if (typeof(T) == typeof(Color))              {                  if ((stringValue.Length != 7 && stringValue.Length != 9) || stringValue[0] != '#')                  {                      throw new ArgumentException("Invalid color code '" + stringValue + "': Must be # followed by 6 or 8 hex digits (ARGB or RGB).");                  }                  stringValue = stringValue.Replace("#"' "");                  int a  = 255;                  if (stringValue.Length == 8)                  {                      a = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      stringValue = stringValue.Substring(2' 6);                  }                  int r = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                  int g = byte.Parse(stringValue.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                  int b = byte.Parse(stringValue.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                    value = (T)(object)(new Color(r / 255.0f' g / 255.0f' b / 255.0f' a / 255.0f));              }              else if (typeof(T) == typeof(Biome))              {                  string[] biomeData = stringValue.Split(new char[] {';'});                  CelestialBody cb = ParseCelestialBodyValue(biomeData[0]);                  value = (T)(object)(new Biome(cb' biomeData[1]));              }              // Do newline conversions              else if (typeof(T) == typeof(string))              {                  value = (T)(object)stringValue.Replace("\\n"' "\n");              }              // Try a basic type              else              {                  value = (T)Convert.ChangeType(stringValue' typeof(T));              }
Magic Number,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseSingleValue,The following statement contains a magic number: if (typeof(T).Name == "Nullable`1")              {                  if (typeof(T).GetGenericArguments()[0].IsEnum)                  {                      value = (T)Enum.Parse(typeof(T).GetGenericArguments()[0]' stringValue' true);                  }                  else                  {                      value = (T)Convert.ChangeType(stringValue' typeof(T).GetGenericArguments()[0]);                  }              }              else if (allowExpression && (parser = BaseParser.GetParser<T>()) != null)              {                  if (initialLoad)                  {                      value = parser.ParseExpression(key' stringValue' currentDataNode);                  }                  else                  {                      value = parser.ExecuteExpression(key' stringValue' currentDataNode);                  }              }              // Enum parsing logic              else if (typeof(T).IsEnum)              {                  value = (T)Enum.Parse(typeof(T)' stringValue' true);              }              else if (typeof(T) == typeof(AvailablePart))              {                  value = (T)(object)ParsePartValue(stringValue);              }              else if (typeof(T) == typeof(ContractGroup))              {                  if (!ContractGroup.contractGroups.ContainsKey(stringValue))                  {                      throw new ArgumentException("No contract group with name '" + stringValue + "'");                  }                  value = (T)(object)ContractGroup.contractGroups[stringValue];              }              else if (typeof(T) == typeof(CelestialBody))              {                  value = (T)(object)ParseCelestialBodyValue(stringValue);              }              else if (typeof(T) == typeof(PartResourceDefinition))              {                  value = (T)(object)ParseResourceValue(stringValue);              }              else if (typeof(T) == typeof(Resource))              {                  value = (T)(object)new Resource(ParseResourceValue(stringValue));              }              else if (typeof(T) == typeof(Agent))              {                  value = (T)(object)ParseAgentValue(stringValue);              }              else if (typeof(T) == typeof(Duration))              {                  value = (T)(object)new Duration(DurationUtil.ParseDuration(stringValue));              }              else if (typeof(T) == typeof(ProtoCrewMember))              {                  value = (T)(object)ParseProtoCrewMemberValue(stringValue);              }              else if (typeof(T) == typeof(Kerbal))              {                  value = (T)(object)new Kerbal(stringValue);              }              else if (typeof(T) == typeof(Guid))              {                  value = (T)(object)new Guid(stringValue);              }              else if (typeof(T) == typeof(Vessel))              {                  value = (T)(object)ParseVesselValue(stringValue);              }              else if (typeof(T) == typeof(VesselIdentifier))              {                  value = (T)(object)new VesselIdentifier(stringValue);              }              else if (typeof(T) == typeof(Vector3))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  float x = (float)Convert.ChangeType(vals[0]' typeof(float));                  float y = (float)Convert.ChangeType(vals[1]' typeof(float));                  float z = (float)Convert.ChangeType(vals[2]' typeof(float));                  value = (T)(object)new Vector3(x' y' z);              }              else if (typeof(T) == typeof(Vector3d))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  double x = (double)Convert.ChangeType(vals[0]' typeof(double));                  double y = (double)Convert.ChangeType(vals[1]' typeof(double));                  double z = (double)Convert.ChangeType(vals[2]' typeof(double));                  value = (T)(object)new Vector3d(x' y' z);              }              else if (typeof(T) == typeof(Type))              {                  value = (T)(object)ParseTypeValue(stringValue);              }              else if (typeof(T) == typeof(ScienceSubject))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetSubjectByID(stringValue) : null);              }              else if (typeof(T) == typeof(ScienceExperiment))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetExperiment(stringValue) : null);              }              else if (typeof(T) == typeof(Color))              {                  if ((stringValue.Length != 7 && stringValue.Length != 9) || stringValue[0] != '#')                  {                      throw new ArgumentException("Invalid color code '" + stringValue + "': Must be # followed by 6 or 8 hex digits (ARGB or RGB).");                  }                  stringValue = stringValue.Replace("#"' "");                  int a  = 255;                  if (stringValue.Length == 8)                  {                      a = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      stringValue = stringValue.Substring(2' 6);                  }                  int r = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                  int g = byte.Parse(stringValue.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                  int b = byte.Parse(stringValue.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                    value = (T)(object)(new Color(r / 255.0f' g / 255.0f' b / 255.0f' a / 255.0f));              }              else if (typeof(T) == typeof(Biome))              {                  string[] biomeData = stringValue.Split(new char[] {';'});                  CelestialBody cb = ParseCelestialBodyValue(biomeData[0]);                  value = (T)(object)(new Biome(cb' biomeData[1]));              }              // Do newline conversions              else if (typeof(T) == typeof(string))              {                  value = (T)(object)stringValue.Replace("\\n"' "\n");              }              // Try a basic type              else              {                  value = (T)Convert.ChangeType(stringValue' typeof(T));              }
Magic Number,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseSingleValue,The following statement contains a magic number: if (typeof(T).Name == "Nullable`1")              {                  if (typeof(T).GetGenericArguments()[0].IsEnum)                  {                      value = (T)Enum.Parse(typeof(T).GetGenericArguments()[0]' stringValue' true);                  }                  else                  {                      value = (T)Convert.ChangeType(stringValue' typeof(T).GetGenericArguments()[0]);                  }              }              else if (allowExpression && (parser = BaseParser.GetParser<T>()) != null)              {                  if (initialLoad)                  {                      value = parser.ParseExpression(key' stringValue' currentDataNode);                  }                  else                  {                      value = parser.ExecuteExpression(key' stringValue' currentDataNode);                  }              }              // Enum parsing logic              else if (typeof(T).IsEnum)              {                  value = (T)Enum.Parse(typeof(T)' stringValue' true);              }              else if (typeof(T) == typeof(AvailablePart))              {                  value = (T)(object)ParsePartValue(stringValue);              }              else if (typeof(T) == typeof(ContractGroup))              {                  if (!ContractGroup.contractGroups.ContainsKey(stringValue))                  {                      throw new ArgumentException("No contract group with name '" + stringValue + "'");                  }                  value = (T)(object)ContractGroup.contractGroups[stringValue];              }              else if (typeof(T) == typeof(CelestialBody))              {                  value = (T)(object)ParseCelestialBodyValue(stringValue);              }              else if (typeof(T) == typeof(PartResourceDefinition))              {                  value = (T)(object)ParseResourceValue(stringValue);              }              else if (typeof(T) == typeof(Resource))              {                  value = (T)(object)new Resource(ParseResourceValue(stringValue));              }              else if (typeof(T) == typeof(Agent))              {                  value = (T)(object)ParseAgentValue(stringValue);              }              else if (typeof(T) == typeof(Duration))              {                  value = (T)(object)new Duration(DurationUtil.ParseDuration(stringValue));              }              else if (typeof(T) == typeof(ProtoCrewMember))              {                  value = (T)(object)ParseProtoCrewMemberValue(stringValue);              }              else if (typeof(T) == typeof(Kerbal))              {                  value = (T)(object)new Kerbal(stringValue);              }              else if (typeof(T) == typeof(Guid))              {                  value = (T)(object)new Guid(stringValue);              }              else if (typeof(T) == typeof(Vessel))              {                  value = (T)(object)ParseVesselValue(stringValue);              }              else if (typeof(T) == typeof(VesselIdentifier))              {                  value = (T)(object)new VesselIdentifier(stringValue);              }              else if (typeof(T) == typeof(Vector3))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  float x = (float)Convert.ChangeType(vals[0]' typeof(float));                  float y = (float)Convert.ChangeType(vals[1]' typeof(float));                  float z = (float)Convert.ChangeType(vals[2]' typeof(float));                  value = (T)(object)new Vector3(x' y' z);              }              else if (typeof(T) == typeof(Vector3d))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  double x = (double)Convert.ChangeType(vals[0]' typeof(double));                  double y = (double)Convert.ChangeType(vals[1]' typeof(double));                  double z = (double)Convert.ChangeType(vals[2]' typeof(double));                  value = (T)(object)new Vector3d(x' y' z);              }              else if (typeof(T) == typeof(Type))              {                  value = (T)(object)ParseTypeValue(stringValue);              }              else if (typeof(T) == typeof(ScienceSubject))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetSubjectByID(stringValue) : null);              }              else if (typeof(T) == typeof(ScienceExperiment))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetExperiment(stringValue) : null);              }              else if (typeof(T) == typeof(Color))              {                  if ((stringValue.Length != 7 && stringValue.Length != 9) || stringValue[0] != '#')                  {                      throw new ArgumentException("Invalid color code '" + stringValue + "': Must be # followed by 6 or 8 hex digits (ARGB or RGB).");                  }                  stringValue = stringValue.Replace("#"' "");                  int a  = 255;                  if (stringValue.Length == 8)                  {                      a = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      stringValue = stringValue.Substring(2' 6);                  }                  int r = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                  int g = byte.Parse(stringValue.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                  int b = byte.Parse(stringValue.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                    value = (T)(object)(new Color(r / 255.0f' g / 255.0f' b / 255.0f' a / 255.0f));              }              else if (typeof(T) == typeof(Biome))              {                  string[] biomeData = stringValue.Split(new char[] {';'});                  CelestialBody cb = ParseCelestialBodyValue(biomeData[0]);                  value = (T)(object)(new Biome(cb' biomeData[1]));              }              // Do newline conversions              else if (typeof(T) == typeof(string))              {                  value = (T)(object)stringValue.Replace("\\n"' "\n");              }              // Try a basic type              else              {                  value = (T)Convert.ChangeType(stringValue' typeof(T));              }
Magic Number,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseSingleValue,The following statement contains a magic number: if (typeof(T).Name == "Nullable`1")              {                  if (typeof(T).GetGenericArguments()[0].IsEnum)                  {                      value = (T)Enum.Parse(typeof(T).GetGenericArguments()[0]' stringValue' true);                  }                  else                  {                      value = (T)Convert.ChangeType(stringValue' typeof(T).GetGenericArguments()[0]);                  }              }              else if (allowExpression && (parser = BaseParser.GetParser<T>()) != null)              {                  if (initialLoad)                  {                      value = parser.ParseExpression(key' stringValue' currentDataNode);                  }                  else                  {                      value = parser.ExecuteExpression(key' stringValue' currentDataNode);                  }              }              // Enum parsing logic              else if (typeof(T).IsEnum)              {                  value = (T)Enum.Parse(typeof(T)' stringValue' true);              }              else if (typeof(T) == typeof(AvailablePart))              {                  value = (T)(object)ParsePartValue(stringValue);              }              else if (typeof(T) == typeof(ContractGroup))              {                  if (!ContractGroup.contractGroups.ContainsKey(stringValue))                  {                      throw new ArgumentException("No contract group with name '" + stringValue + "'");                  }                  value = (T)(object)ContractGroup.contractGroups[stringValue];              }              else if (typeof(T) == typeof(CelestialBody))              {                  value = (T)(object)ParseCelestialBodyValue(stringValue);              }              else if (typeof(T) == typeof(PartResourceDefinition))              {                  value = (T)(object)ParseResourceValue(stringValue);              }              else if (typeof(T) == typeof(Resource))              {                  value = (T)(object)new Resource(ParseResourceValue(stringValue));              }              else if (typeof(T) == typeof(Agent))              {                  value = (T)(object)ParseAgentValue(stringValue);              }              else if (typeof(T) == typeof(Duration))              {                  value = (T)(object)new Duration(DurationUtil.ParseDuration(stringValue));              }              else if (typeof(T) == typeof(ProtoCrewMember))              {                  value = (T)(object)ParseProtoCrewMemberValue(stringValue);              }              else if (typeof(T) == typeof(Kerbal))              {                  value = (T)(object)new Kerbal(stringValue);              }              else if (typeof(T) == typeof(Guid))              {                  value = (T)(object)new Guid(stringValue);              }              else if (typeof(T) == typeof(Vessel))              {                  value = (T)(object)ParseVesselValue(stringValue);              }              else if (typeof(T) == typeof(VesselIdentifier))              {                  value = (T)(object)new VesselIdentifier(stringValue);              }              else if (typeof(T) == typeof(Vector3))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  float x = (float)Convert.ChangeType(vals[0]' typeof(float));                  float y = (float)Convert.ChangeType(vals[1]' typeof(float));                  float z = (float)Convert.ChangeType(vals[2]' typeof(float));                  value = (T)(object)new Vector3(x' y' z);              }              else if (typeof(T) == typeof(Vector3d))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  double x = (double)Convert.ChangeType(vals[0]' typeof(double));                  double y = (double)Convert.ChangeType(vals[1]' typeof(double));                  double z = (double)Convert.ChangeType(vals[2]' typeof(double));                  value = (T)(object)new Vector3d(x' y' z);              }              else if (typeof(T) == typeof(Type))              {                  value = (T)(object)ParseTypeValue(stringValue);              }              else if (typeof(T) == typeof(ScienceSubject))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetSubjectByID(stringValue) : null);              }              else if (typeof(T) == typeof(ScienceExperiment))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetExperiment(stringValue) : null);              }              else if (typeof(T) == typeof(Color))              {                  if ((stringValue.Length != 7 && stringValue.Length != 9) || stringValue[0] != '#')                  {                      throw new ArgumentException("Invalid color code '" + stringValue + "': Must be # followed by 6 or 8 hex digits (ARGB or RGB).");                  }                  stringValue = stringValue.Replace("#"' "");                  int a  = 255;                  if (stringValue.Length == 8)                  {                      a = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      stringValue = stringValue.Substring(2' 6);                  }                  int r = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                  int g = byte.Parse(stringValue.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                  int b = byte.Parse(stringValue.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                    value = (T)(object)(new Color(r / 255.0f' g / 255.0f' b / 255.0f' a / 255.0f));              }              else if (typeof(T) == typeof(Biome))              {                  string[] biomeData = stringValue.Split(new char[] {';'});                  CelestialBody cb = ParseCelestialBodyValue(biomeData[0]);                  value = (T)(object)(new Biome(cb' biomeData[1]));              }              // Do newline conversions              else if (typeof(T) == typeof(string))              {                  value = (T)(object)stringValue.Replace("\\n"' "\n");              }              // Try a basic type              else              {                  value = (T)Convert.ChangeType(stringValue' typeof(T));              }
Magic Number,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseSingleValue,The following statement contains a magic number: if (typeof(T).Name == "Nullable`1")              {                  if (typeof(T).GetGenericArguments()[0].IsEnum)                  {                      value = (T)Enum.Parse(typeof(T).GetGenericArguments()[0]' stringValue' true);                  }                  else                  {                      value = (T)Convert.ChangeType(stringValue' typeof(T).GetGenericArguments()[0]);                  }              }              else if (allowExpression && (parser = BaseParser.GetParser<T>()) != null)              {                  if (initialLoad)                  {                      value = parser.ParseExpression(key' stringValue' currentDataNode);                  }                  else                  {                      value = parser.ExecuteExpression(key' stringValue' currentDataNode);                  }              }              // Enum parsing logic              else if (typeof(T).IsEnum)              {                  value = (T)Enum.Parse(typeof(T)' stringValue' true);              }              else if (typeof(T) == typeof(AvailablePart))              {                  value = (T)(object)ParsePartValue(stringValue);              }              else if (typeof(T) == typeof(ContractGroup))              {                  if (!ContractGroup.contractGroups.ContainsKey(stringValue))                  {                      throw new ArgumentException("No contract group with name '" + stringValue + "'");                  }                  value = (T)(object)ContractGroup.contractGroups[stringValue];              }              else if (typeof(T) == typeof(CelestialBody))              {                  value = (T)(object)ParseCelestialBodyValue(stringValue);              }              else if (typeof(T) == typeof(PartResourceDefinition))              {                  value = (T)(object)ParseResourceValue(stringValue);              }              else if (typeof(T) == typeof(Resource))              {                  value = (T)(object)new Resource(ParseResourceValue(stringValue));              }              else if (typeof(T) == typeof(Agent))              {                  value = (T)(object)ParseAgentValue(stringValue);              }              else if (typeof(T) == typeof(Duration))              {                  value = (T)(object)new Duration(DurationUtil.ParseDuration(stringValue));              }              else if (typeof(T) == typeof(ProtoCrewMember))              {                  value = (T)(object)ParseProtoCrewMemberValue(stringValue);              }              else if (typeof(T) == typeof(Kerbal))              {                  value = (T)(object)new Kerbal(stringValue);              }              else if (typeof(T) == typeof(Guid))              {                  value = (T)(object)new Guid(stringValue);              }              else if (typeof(T) == typeof(Vessel))              {                  value = (T)(object)ParseVesselValue(stringValue);              }              else if (typeof(T) == typeof(VesselIdentifier))              {                  value = (T)(object)new VesselIdentifier(stringValue);              }              else if (typeof(T) == typeof(Vector3))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  float x = (float)Convert.ChangeType(vals[0]' typeof(float));                  float y = (float)Convert.ChangeType(vals[1]' typeof(float));                  float z = (float)Convert.ChangeType(vals[2]' typeof(float));                  value = (T)(object)new Vector3(x' y' z);              }              else if (typeof(T) == typeof(Vector3d))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  double x = (double)Convert.ChangeType(vals[0]' typeof(double));                  double y = (double)Convert.ChangeType(vals[1]' typeof(double));                  double z = (double)Convert.ChangeType(vals[2]' typeof(double));                  value = (T)(object)new Vector3d(x' y' z);              }              else if (typeof(T) == typeof(Type))              {                  value = (T)(object)ParseTypeValue(stringValue);              }              else if (typeof(T) == typeof(ScienceSubject))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetSubjectByID(stringValue) : null);              }              else if (typeof(T) == typeof(ScienceExperiment))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetExperiment(stringValue) : null);              }              else if (typeof(T) == typeof(Color))              {                  if ((stringValue.Length != 7 && stringValue.Length != 9) || stringValue[0] != '#')                  {                      throw new ArgumentException("Invalid color code '" + stringValue + "': Must be # followed by 6 or 8 hex digits (ARGB or RGB).");                  }                  stringValue = stringValue.Replace("#"' "");                  int a  = 255;                  if (stringValue.Length == 8)                  {                      a = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      stringValue = stringValue.Substring(2' 6);                  }                  int r = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                  int g = byte.Parse(stringValue.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                  int b = byte.Parse(stringValue.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                    value = (T)(object)(new Color(r / 255.0f' g / 255.0f' b / 255.0f' a / 255.0f));              }              else if (typeof(T) == typeof(Biome))              {                  string[] biomeData = stringValue.Split(new char[] {';'});                  CelestialBody cb = ParseCelestialBodyValue(biomeData[0]);                  value = (T)(object)(new Biome(cb' biomeData[1]));              }              // Do newline conversions              else if (typeof(T) == typeof(string))              {                  value = (T)(object)stringValue.Replace("\\n"' "\n");              }              // Try a basic type              else              {                  value = (T)Convert.ChangeType(stringValue' typeof(T));              }
Magic Number,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseSingleValue,The following statement contains a magic number: if (typeof(T).Name == "Nullable`1")              {                  if (typeof(T).GetGenericArguments()[0].IsEnum)                  {                      value = (T)Enum.Parse(typeof(T).GetGenericArguments()[0]' stringValue' true);                  }                  else                  {                      value = (T)Convert.ChangeType(stringValue' typeof(T).GetGenericArguments()[0]);                  }              }              else if (allowExpression && (parser = BaseParser.GetParser<T>()) != null)              {                  if (initialLoad)                  {                      value = parser.ParseExpression(key' stringValue' currentDataNode);                  }                  else                  {                      value = parser.ExecuteExpression(key' stringValue' currentDataNode);                  }              }              // Enum parsing logic              else if (typeof(T).IsEnum)              {                  value = (T)Enum.Parse(typeof(T)' stringValue' true);              }              else if (typeof(T) == typeof(AvailablePart))              {                  value = (T)(object)ParsePartValue(stringValue);              }              else if (typeof(T) == typeof(ContractGroup))              {                  if (!ContractGroup.contractGroups.ContainsKey(stringValue))                  {                      throw new ArgumentException("No contract group with name '" + stringValue + "'");                  }                  value = (T)(object)ContractGroup.contractGroups[stringValue];              }              else if (typeof(T) == typeof(CelestialBody))              {                  value = (T)(object)ParseCelestialBodyValue(stringValue);              }              else if (typeof(T) == typeof(PartResourceDefinition))              {                  value = (T)(object)ParseResourceValue(stringValue);              }              else if (typeof(T) == typeof(Resource))              {                  value = (T)(object)new Resource(ParseResourceValue(stringValue));              }              else if (typeof(T) == typeof(Agent))              {                  value = (T)(object)ParseAgentValue(stringValue);              }              else if (typeof(T) == typeof(Duration))              {                  value = (T)(object)new Duration(DurationUtil.ParseDuration(stringValue));              }              else if (typeof(T) == typeof(ProtoCrewMember))              {                  value = (T)(object)ParseProtoCrewMemberValue(stringValue);              }              else if (typeof(T) == typeof(Kerbal))              {                  value = (T)(object)new Kerbal(stringValue);              }              else if (typeof(T) == typeof(Guid))              {                  value = (T)(object)new Guid(stringValue);              }              else if (typeof(T) == typeof(Vessel))              {                  value = (T)(object)ParseVesselValue(stringValue);              }              else if (typeof(T) == typeof(VesselIdentifier))              {                  value = (T)(object)new VesselIdentifier(stringValue);              }              else if (typeof(T) == typeof(Vector3))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  float x = (float)Convert.ChangeType(vals[0]' typeof(float));                  float y = (float)Convert.ChangeType(vals[1]' typeof(float));                  float z = (float)Convert.ChangeType(vals[2]' typeof(float));                  value = (T)(object)new Vector3(x' y' z);              }              else if (typeof(T) == typeof(Vector3d))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  double x = (double)Convert.ChangeType(vals[0]' typeof(double));                  double y = (double)Convert.ChangeType(vals[1]' typeof(double));                  double z = (double)Convert.ChangeType(vals[2]' typeof(double));                  value = (T)(object)new Vector3d(x' y' z);              }              else if (typeof(T) == typeof(Type))              {                  value = (T)(object)ParseTypeValue(stringValue);              }              else if (typeof(T) == typeof(ScienceSubject))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetSubjectByID(stringValue) : null);              }              else if (typeof(T) == typeof(ScienceExperiment))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetExperiment(stringValue) : null);              }              else if (typeof(T) == typeof(Color))              {                  if ((stringValue.Length != 7 && stringValue.Length != 9) || stringValue[0] != '#')                  {                      throw new ArgumentException("Invalid color code '" + stringValue + "': Must be # followed by 6 or 8 hex digits (ARGB or RGB).");                  }                  stringValue = stringValue.Replace("#"' "");                  int a  = 255;                  if (stringValue.Length == 8)                  {                      a = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      stringValue = stringValue.Substring(2' 6);                  }                  int r = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                  int g = byte.Parse(stringValue.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                  int b = byte.Parse(stringValue.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                    value = (T)(object)(new Color(r / 255.0f' g / 255.0f' b / 255.0f' a / 255.0f));              }              else if (typeof(T) == typeof(Biome))              {                  string[] biomeData = stringValue.Split(new char[] {';'});                  CelestialBody cb = ParseCelestialBodyValue(biomeData[0]);                  value = (T)(object)(new Biome(cb' biomeData[1]));              }              // Do newline conversions              else if (typeof(T) == typeof(string))              {                  value = (T)(object)stringValue.Replace("\\n"' "\n");              }              // Try a basic type              else              {                  value = (T)Convert.ChangeType(stringValue' typeof(T));              }
Magic Number,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseSingleValue,The following statement contains a magic number: if (typeof(T).Name == "Nullable`1")              {                  if (typeof(T).GetGenericArguments()[0].IsEnum)                  {                      value = (T)Enum.Parse(typeof(T).GetGenericArguments()[0]' stringValue' true);                  }                  else                  {                      value = (T)Convert.ChangeType(stringValue' typeof(T).GetGenericArguments()[0]);                  }              }              else if (allowExpression && (parser = BaseParser.GetParser<T>()) != null)              {                  if (initialLoad)                  {                      value = parser.ParseExpression(key' stringValue' currentDataNode);                  }                  else                  {                      value = parser.ExecuteExpression(key' stringValue' currentDataNode);                  }              }              // Enum parsing logic              else if (typeof(T).IsEnum)              {                  value = (T)Enum.Parse(typeof(T)' stringValue' true);              }              else if (typeof(T) == typeof(AvailablePart))              {                  value = (T)(object)ParsePartValue(stringValue);              }              else if (typeof(T) == typeof(ContractGroup))              {                  if (!ContractGroup.contractGroups.ContainsKey(stringValue))                  {                      throw new ArgumentException("No contract group with name '" + stringValue + "'");                  }                  value = (T)(object)ContractGroup.contractGroups[stringValue];              }              else if (typeof(T) == typeof(CelestialBody))              {                  value = (T)(object)ParseCelestialBodyValue(stringValue);              }              else if (typeof(T) == typeof(PartResourceDefinition))              {                  value = (T)(object)ParseResourceValue(stringValue);              }              else if (typeof(T) == typeof(Resource))              {                  value = (T)(object)new Resource(ParseResourceValue(stringValue));              }              else if (typeof(T) == typeof(Agent))              {                  value = (T)(object)ParseAgentValue(stringValue);              }              else if (typeof(T) == typeof(Duration))              {                  value = (T)(object)new Duration(DurationUtil.ParseDuration(stringValue));              }              else if (typeof(T) == typeof(ProtoCrewMember))              {                  value = (T)(object)ParseProtoCrewMemberValue(stringValue);              }              else if (typeof(T) == typeof(Kerbal))              {                  value = (T)(object)new Kerbal(stringValue);              }              else if (typeof(T) == typeof(Guid))              {                  value = (T)(object)new Guid(stringValue);              }              else if (typeof(T) == typeof(Vessel))              {                  value = (T)(object)ParseVesselValue(stringValue);              }              else if (typeof(T) == typeof(VesselIdentifier))              {                  value = (T)(object)new VesselIdentifier(stringValue);              }              else if (typeof(T) == typeof(Vector3))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  float x = (float)Convert.ChangeType(vals[0]' typeof(float));                  float y = (float)Convert.ChangeType(vals[1]' typeof(float));                  float z = (float)Convert.ChangeType(vals[2]' typeof(float));                  value = (T)(object)new Vector3(x' y' z);              }              else if (typeof(T) == typeof(Vector3d))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  double x = (double)Convert.ChangeType(vals[0]' typeof(double));                  double y = (double)Convert.ChangeType(vals[1]' typeof(double));                  double z = (double)Convert.ChangeType(vals[2]' typeof(double));                  value = (T)(object)new Vector3d(x' y' z);              }              else if (typeof(T) == typeof(Type))              {                  value = (T)(object)ParseTypeValue(stringValue);              }              else if (typeof(T) == typeof(ScienceSubject))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetSubjectByID(stringValue) : null);              }              else if (typeof(T) == typeof(ScienceExperiment))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetExperiment(stringValue) : null);              }              else if (typeof(T) == typeof(Color))              {                  if ((stringValue.Length != 7 && stringValue.Length != 9) || stringValue[0] != '#')                  {                      throw new ArgumentException("Invalid color code '" + stringValue + "': Must be # followed by 6 or 8 hex digits (ARGB or RGB).");                  }                  stringValue = stringValue.Replace("#"' "");                  int a  = 255;                  if (stringValue.Length == 8)                  {                      a = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      stringValue = stringValue.Substring(2' 6);                  }                  int r = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                  int g = byte.Parse(stringValue.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                  int b = byte.Parse(stringValue.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                    value = (T)(object)(new Color(r / 255.0f' g / 255.0f' b / 255.0f' a / 255.0f));              }              else if (typeof(T) == typeof(Biome))              {                  string[] biomeData = stringValue.Split(new char[] {';'});                  CelestialBody cb = ParseCelestialBodyValue(biomeData[0]);                  value = (T)(object)(new Biome(cb' biomeData[1]));              }              // Do newline conversions              else if (typeof(T) == typeof(string))              {                  value = (T)(object)stringValue.Replace("\\n"' "\n");              }              // Try a basic type              else              {                  value = (T)Convert.ChangeType(stringValue' typeof(T));              }
Magic Number,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseSingleValue,The following statement contains a magic number: if (typeof(T).Name == "Nullable`1")              {                  if (typeof(T).GetGenericArguments()[0].IsEnum)                  {                      value = (T)Enum.Parse(typeof(T).GetGenericArguments()[0]' stringValue' true);                  }                  else                  {                      value = (T)Convert.ChangeType(stringValue' typeof(T).GetGenericArguments()[0]);                  }              }              else if (allowExpression && (parser = BaseParser.GetParser<T>()) != null)              {                  if (initialLoad)                  {                      value = parser.ParseExpression(key' stringValue' currentDataNode);                  }                  else                  {                      value = parser.ExecuteExpression(key' stringValue' currentDataNode);                  }              }              // Enum parsing logic              else if (typeof(T).IsEnum)              {                  value = (T)Enum.Parse(typeof(T)' stringValue' true);              }              else if (typeof(T) == typeof(AvailablePart))              {                  value = (T)(object)ParsePartValue(stringValue);              }              else if (typeof(T) == typeof(ContractGroup))              {                  if (!ContractGroup.contractGroups.ContainsKey(stringValue))                  {                      throw new ArgumentException("No contract group with name '" + stringValue + "'");                  }                  value = (T)(object)ContractGroup.contractGroups[stringValue];              }              else if (typeof(T) == typeof(CelestialBody))              {                  value = (T)(object)ParseCelestialBodyValue(stringValue);              }              else if (typeof(T) == typeof(PartResourceDefinition))              {                  value = (T)(object)ParseResourceValue(stringValue);              }              else if (typeof(T) == typeof(Resource))              {                  value = (T)(object)new Resource(ParseResourceValue(stringValue));              }              else if (typeof(T) == typeof(Agent))              {                  value = (T)(object)ParseAgentValue(stringValue);              }              else if (typeof(T) == typeof(Duration))              {                  value = (T)(object)new Duration(DurationUtil.ParseDuration(stringValue));              }              else if (typeof(T) == typeof(ProtoCrewMember))              {                  value = (T)(object)ParseProtoCrewMemberValue(stringValue);              }              else if (typeof(T) == typeof(Kerbal))              {                  value = (T)(object)new Kerbal(stringValue);              }              else if (typeof(T) == typeof(Guid))              {                  value = (T)(object)new Guid(stringValue);              }              else if (typeof(T) == typeof(Vessel))              {                  value = (T)(object)ParseVesselValue(stringValue);              }              else if (typeof(T) == typeof(VesselIdentifier))              {                  value = (T)(object)new VesselIdentifier(stringValue);              }              else if (typeof(T) == typeof(Vector3))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  float x = (float)Convert.ChangeType(vals[0]' typeof(float));                  float y = (float)Convert.ChangeType(vals[1]' typeof(float));                  float z = (float)Convert.ChangeType(vals[2]' typeof(float));                  value = (T)(object)new Vector3(x' y' z);              }              else if (typeof(T) == typeof(Vector3d))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  double x = (double)Convert.ChangeType(vals[0]' typeof(double));                  double y = (double)Convert.ChangeType(vals[1]' typeof(double));                  double z = (double)Convert.ChangeType(vals[2]' typeof(double));                  value = (T)(object)new Vector3d(x' y' z);              }              else if (typeof(T) == typeof(Type))              {                  value = (T)(object)ParseTypeValue(stringValue);              }              else if (typeof(T) == typeof(ScienceSubject))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetSubjectByID(stringValue) : null);              }              else if (typeof(T) == typeof(ScienceExperiment))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetExperiment(stringValue) : null);              }              else if (typeof(T) == typeof(Color))              {                  if ((stringValue.Length != 7 && stringValue.Length != 9) || stringValue[0] != '#')                  {                      throw new ArgumentException("Invalid color code '" + stringValue + "': Must be # followed by 6 or 8 hex digits (ARGB or RGB).");                  }                  stringValue = stringValue.Replace("#"' "");                  int a  = 255;                  if (stringValue.Length == 8)                  {                      a = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      stringValue = stringValue.Substring(2' 6);                  }                  int r = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                  int g = byte.Parse(stringValue.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                  int b = byte.Parse(stringValue.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                    value = (T)(object)(new Color(r / 255.0f' g / 255.0f' b / 255.0f' a / 255.0f));              }              else if (typeof(T) == typeof(Biome))              {                  string[] biomeData = stringValue.Split(new char[] {';'});                  CelestialBody cb = ParseCelestialBodyValue(biomeData[0]);                  value = (T)(object)(new Biome(cb' biomeData[1]));              }              // Do newline conversions              else if (typeof(T) == typeof(string))              {                  value = (T)(object)stringValue.Replace("\\n"' "\n");              }              // Try a basic type              else              {                  value = (T)Convert.ChangeType(stringValue' typeof(T));              }
Magic Number,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseSingleValue,The following statement contains a magic number: if (typeof(T).Name == "Nullable`1")              {                  if (typeof(T).GetGenericArguments()[0].IsEnum)                  {                      value = (T)Enum.Parse(typeof(T).GetGenericArguments()[0]' stringValue' true);                  }                  else                  {                      value = (T)Convert.ChangeType(stringValue' typeof(T).GetGenericArguments()[0]);                  }              }              else if (allowExpression && (parser = BaseParser.GetParser<T>()) != null)              {                  if (initialLoad)                  {                      value = parser.ParseExpression(key' stringValue' currentDataNode);                  }                  else                  {                      value = parser.ExecuteExpression(key' stringValue' currentDataNode);                  }              }              // Enum parsing logic              else if (typeof(T).IsEnum)              {                  value = (T)Enum.Parse(typeof(T)' stringValue' true);              }              else if (typeof(T) == typeof(AvailablePart))              {                  value = (T)(object)ParsePartValue(stringValue);              }              else if (typeof(T) == typeof(ContractGroup))              {                  if (!ContractGroup.contractGroups.ContainsKey(stringValue))                  {                      throw new ArgumentException("No contract group with name '" + stringValue + "'");                  }                  value = (T)(object)ContractGroup.contractGroups[stringValue];              }              else if (typeof(T) == typeof(CelestialBody))              {                  value = (T)(object)ParseCelestialBodyValue(stringValue);              }              else if (typeof(T) == typeof(PartResourceDefinition))              {                  value = (T)(object)ParseResourceValue(stringValue);              }              else if (typeof(T) == typeof(Resource))              {                  value = (T)(object)new Resource(ParseResourceValue(stringValue));              }              else if (typeof(T) == typeof(Agent))              {                  value = (T)(object)ParseAgentValue(stringValue);              }              else if (typeof(T) == typeof(Duration))              {                  value = (T)(object)new Duration(DurationUtil.ParseDuration(stringValue));              }              else if (typeof(T) == typeof(ProtoCrewMember))              {                  value = (T)(object)ParseProtoCrewMemberValue(stringValue);              }              else if (typeof(T) == typeof(Kerbal))              {                  value = (T)(object)new Kerbal(stringValue);              }              else if (typeof(T) == typeof(Guid))              {                  value = (T)(object)new Guid(stringValue);              }              else if (typeof(T) == typeof(Vessel))              {                  value = (T)(object)ParseVesselValue(stringValue);              }              else if (typeof(T) == typeof(VesselIdentifier))              {                  value = (T)(object)new VesselIdentifier(stringValue);              }              else if (typeof(T) == typeof(Vector3))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  float x = (float)Convert.ChangeType(vals[0]' typeof(float));                  float y = (float)Convert.ChangeType(vals[1]' typeof(float));                  float z = (float)Convert.ChangeType(vals[2]' typeof(float));                  value = (T)(object)new Vector3(x' y' z);              }              else if (typeof(T) == typeof(Vector3d))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  double x = (double)Convert.ChangeType(vals[0]' typeof(double));                  double y = (double)Convert.ChangeType(vals[1]' typeof(double));                  double z = (double)Convert.ChangeType(vals[2]' typeof(double));                  value = (T)(object)new Vector3d(x' y' z);              }              else if (typeof(T) == typeof(Type))              {                  value = (T)(object)ParseTypeValue(stringValue);              }              else if (typeof(T) == typeof(ScienceSubject))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetSubjectByID(stringValue) : null);              }              else if (typeof(T) == typeof(ScienceExperiment))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetExperiment(stringValue) : null);              }              else if (typeof(T) == typeof(Color))              {                  if ((stringValue.Length != 7 && stringValue.Length != 9) || stringValue[0] != '#')                  {                      throw new ArgumentException("Invalid color code '" + stringValue + "': Must be # followed by 6 or 8 hex digits (ARGB or RGB).");                  }                  stringValue = stringValue.Replace("#"' "");                  int a  = 255;                  if (stringValue.Length == 8)                  {                      a = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      stringValue = stringValue.Substring(2' 6);                  }                  int r = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                  int g = byte.Parse(stringValue.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                  int b = byte.Parse(stringValue.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                    value = (T)(object)(new Color(r / 255.0f' g / 255.0f' b / 255.0f' a / 255.0f));              }              else if (typeof(T) == typeof(Biome))              {                  string[] biomeData = stringValue.Split(new char[] {';'});                  CelestialBody cb = ParseCelestialBodyValue(biomeData[0]);                  value = (T)(object)(new Biome(cb' biomeData[1]));              }              // Do newline conversions              else if (typeof(T) == typeof(string))              {                  value = (T)(object)stringValue.Replace("\\n"' "\n");              }              // Try a basic type              else              {                  value = (T)Convert.ChangeType(stringValue' typeof(T));              }
Magic Number,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseSingleValue,The following statement contains a magic number: if (typeof(T).Name == "Nullable`1")              {                  if (typeof(T).GetGenericArguments()[0].IsEnum)                  {                      value = (T)Enum.Parse(typeof(T).GetGenericArguments()[0]' stringValue' true);                  }                  else                  {                      value = (T)Convert.ChangeType(stringValue' typeof(T).GetGenericArguments()[0]);                  }              }              else if (allowExpression && (parser = BaseParser.GetParser<T>()) != null)              {                  if (initialLoad)                  {                      value = parser.ParseExpression(key' stringValue' currentDataNode);                  }                  else                  {                      value = parser.ExecuteExpression(key' stringValue' currentDataNode);                  }              }              // Enum parsing logic              else if (typeof(T).IsEnum)              {                  value = (T)Enum.Parse(typeof(T)' stringValue' true);              }              else if (typeof(T) == typeof(AvailablePart))              {                  value = (T)(object)ParsePartValue(stringValue);              }              else if (typeof(T) == typeof(ContractGroup))              {                  if (!ContractGroup.contractGroups.ContainsKey(stringValue))                  {                      throw new ArgumentException("No contract group with name '" + stringValue + "'");                  }                  value = (T)(object)ContractGroup.contractGroups[stringValue];              }              else if (typeof(T) == typeof(CelestialBody))              {                  value = (T)(object)ParseCelestialBodyValue(stringValue);              }              else if (typeof(T) == typeof(PartResourceDefinition))              {                  value = (T)(object)ParseResourceValue(stringValue);              }              else if (typeof(T) == typeof(Resource))              {                  value = (T)(object)new Resource(ParseResourceValue(stringValue));              }              else if (typeof(T) == typeof(Agent))              {                  value = (T)(object)ParseAgentValue(stringValue);              }              else if (typeof(T) == typeof(Duration))              {                  value = (T)(object)new Duration(DurationUtil.ParseDuration(stringValue));              }              else if (typeof(T) == typeof(ProtoCrewMember))              {                  value = (T)(object)ParseProtoCrewMemberValue(stringValue);              }              else if (typeof(T) == typeof(Kerbal))              {                  value = (T)(object)new Kerbal(stringValue);              }              else if (typeof(T) == typeof(Guid))              {                  value = (T)(object)new Guid(stringValue);              }              else if (typeof(T) == typeof(Vessel))              {                  value = (T)(object)ParseVesselValue(stringValue);              }              else if (typeof(T) == typeof(VesselIdentifier))              {                  value = (T)(object)new VesselIdentifier(stringValue);              }              else if (typeof(T) == typeof(Vector3))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  float x = (float)Convert.ChangeType(vals[0]' typeof(float));                  float y = (float)Convert.ChangeType(vals[1]' typeof(float));                  float z = (float)Convert.ChangeType(vals[2]' typeof(float));                  value = (T)(object)new Vector3(x' y' z);              }              else if (typeof(T) == typeof(Vector3d))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  double x = (double)Convert.ChangeType(vals[0]' typeof(double));                  double y = (double)Convert.ChangeType(vals[1]' typeof(double));                  double z = (double)Convert.ChangeType(vals[2]' typeof(double));                  value = (T)(object)new Vector3d(x' y' z);              }              else if (typeof(T) == typeof(Type))              {                  value = (T)(object)ParseTypeValue(stringValue);              }              else if (typeof(T) == typeof(ScienceSubject))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetSubjectByID(stringValue) : null);              }              else if (typeof(T) == typeof(ScienceExperiment))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetExperiment(stringValue) : null);              }              else if (typeof(T) == typeof(Color))              {                  if ((stringValue.Length != 7 && stringValue.Length != 9) || stringValue[0] != '#')                  {                      throw new ArgumentException("Invalid color code '" + stringValue + "': Must be # followed by 6 or 8 hex digits (ARGB or RGB).");                  }                  stringValue = stringValue.Replace("#"' "");                  int a  = 255;                  if (stringValue.Length == 8)                  {                      a = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      stringValue = stringValue.Substring(2' 6);                  }                  int r = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                  int g = byte.Parse(stringValue.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                  int b = byte.Parse(stringValue.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                    value = (T)(object)(new Color(r / 255.0f' g / 255.0f' b / 255.0f' a / 255.0f));              }              else if (typeof(T) == typeof(Biome))              {                  string[] biomeData = stringValue.Split(new char[] {';'});                  CelestialBody cb = ParseCelestialBodyValue(biomeData[0]);                  value = (T)(object)(new Biome(cb' biomeData[1]));              }              // Do newline conversions              else if (typeof(T) == typeof(string))              {                  value = (T)(object)stringValue.Replace("\\n"' "\n");              }              // Try a basic type              else              {                  value = (T)Convert.ChangeType(stringValue' typeof(T));              }
Magic Number,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseSingleValue,The following statement contains a magic number: if (typeof(T).Name == "Nullable`1")              {                  if (typeof(T).GetGenericArguments()[0].IsEnum)                  {                      value = (T)Enum.Parse(typeof(T).GetGenericArguments()[0]' stringValue' true);                  }                  else                  {                      value = (T)Convert.ChangeType(stringValue' typeof(T).GetGenericArguments()[0]);                  }              }              else if (allowExpression && (parser = BaseParser.GetParser<T>()) != null)              {                  if (initialLoad)                  {                      value = parser.ParseExpression(key' stringValue' currentDataNode);                  }                  else                  {                      value = parser.ExecuteExpression(key' stringValue' currentDataNode);                  }              }              // Enum parsing logic              else if (typeof(T).IsEnum)              {                  value = (T)Enum.Parse(typeof(T)' stringValue' true);              }              else if (typeof(T) == typeof(AvailablePart))              {                  value = (T)(object)ParsePartValue(stringValue);              }              else if (typeof(T) == typeof(ContractGroup))              {                  if (!ContractGroup.contractGroups.ContainsKey(stringValue))                  {                      throw new ArgumentException("No contract group with name '" + stringValue + "'");                  }                  value = (T)(object)ContractGroup.contractGroups[stringValue];              }              else if (typeof(T) == typeof(CelestialBody))              {                  value = (T)(object)ParseCelestialBodyValue(stringValue);              }              else if (typeof(T) == typeof(PartResourceDefinition))              {                  value = (T)(object)ParseResourceValue(stringValue);              }              else if (typeof(T) == typeof(Resource))              {                  value = (T)(object)new Resource(ParseResourceValue(stringValue));              }              else if (typeof(T) == typeof(Agent))              {                  value = (T)(object)ParseAgentValue(stringValue);              }              else if (typeof(T) == typeof(Duration))              {                  value = (T)(object)new Duration(DurationUtil.ParseDuration(stringValue));              }              else if (typeof(T) == typeof(ProtoCrewMember))              {                  value = (T)(object)ParseProtoCrewMemberValue(stringValue);              }              else if (typeof(T) == typeof(Kerbal))              {                  value = (T)(object)new Kerbal(stringValue);              }              else if (typeof(T) == typeof(Guid))              {                  value = (T)(object)new Guid(stringValue);              }              else if (typeof(T) == typeof(Vessel))              {                  value = (T)(object)ParseVesselValue(stringValue);              }              else if (typeof(T) == typeof(VesselIdentifier))              {                  value = (T)(object)new VesselIdentifier(stringValue);              }              else if (typeof(T) == typeof(Vector3))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  float x = (float)Convert.ChangeType(vals[0]' typeof(float));                  float y = (float)Convert.ChangeType(vals[1]' typeof(float));                  float z = (float)Convert.ChangeType(vals[2]' typeof(float));                  value = (T)(object)new Vector3(x' y' z);              }              else if (typeof(T) == typeof(Vector3d))              {                  string[] vals = stringValue.Split(new char[] { ''' });                  double x = (double)Convert.ChangeType(vals[0]' typeof(double));                  double y = (double)Convert.ChangeType(vals[1]' typeof(double));                  double z = (double)Convert.ChangeType(vals[2]' typeof(double));                  value = (T)(object)new Vector3d(x' y' z);              }              else if (typeof(T) == typeof(Type))              {                  value = (T)(object)ParseTypeValue(stringValue);              }              else if (typeof(T) == typeof(ScienceSubject))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetSubjectByID(stringValue) : null);              }              else if (typeof(T) == typeof(ScienceExperiment))              {                  value = (T)(object)(ResearchAndDevelopment.Instance != null ? ResearchAndDevelopment.GetExperiment(stringValue) : null);              }              else if (typeof(T) == typeof(Color))              {                  if ((stringValue.Length != 7 && stringValue.Length != 9) || stringValue[0] != '#')                  {                      throw new ArgumentException("Invalid color code '" + stringValue + "': Must be # followed by 6 or 8 hex digits (ARGB or RGB).");                  }                  stringValue = stringValue.Replace("#"' "");                  int a  = 255;                  if (stringValue.Length == 8)                  {                      a = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                      stringValue = stringValue.Substring(2' 6);                  }                  int r = byte.Parse(stringValue.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber);                  int g = byte.Parse(stringValue.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber);                  int b = byte.Parse(stringValue.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber);                    value = (T)(object)(new Color(r / 255.0f' g / 255.0f' b / 255.0f' a / 255.0f));              }              else if (typeof(T) == typeof(Biome))              {                  string[] biomeData = stringValue.Split(new char[] {';'});                  CelestialBody cb = ParseCelestialBodyValue(biomeData[0]);                  value = (T)(object)(new Biome(cb' biomeData[1]));              }              // Do newline conversions              else if (typeof(T) == typeof(string))              {                  value = (T)(object)stringValue.Replace("\\n"' "\n");              }              // Try a basic type              else              {                  value = (T)Convert.ChangeType(stringValue' typeof(T));              }
Magic Number,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,AtLeastOne,The following statement contains a magic number: if (values.Count() == 2)              {                  LoggingUtil.LogError(obj' obj.ErrorPrefix(configNode) + ": Either " + output + " is required.");              }              else              {                  LoggingUtil.LogError(obj' obj.ErrorPrefix(configNode) + ": One of " + output + " is required.");              }
Magic Number,ContractConfigurator,ConfigNodeUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\ConfigNodeUtil.cs,ParseTypeValue,The following statement contains a magic number: if (name.StartsWith("List<") && name.EndsWith(">"))              {                  string innerType = name.Substring("List<".Length' name.Length - "List<>".Length);                    Type listType = typeof(List<>);                  return listType.MakeGenericType(ParseTypeValue(innerType));              }              else if (name.Contains('.'))              {                  return Type.GetType(name);              }              else              {                  if (typeMap.ContainsKey(name))                  {                      return typeMap[name];                  }                    // Get all assemblies' but look at the ContractConfigurator ones first                  foreach (Assembly assembly in AppDomain.CurrentDomain.GetAssemblies().                      OrderBy(a => a.FullName.Contains("ContractConfigurator") ? 0 :                          a.FullName.Contains("Assembly-CSharp") ? 1 : 2))                  {                      try                      {                          Type type = assembly.GetTypes().Where(t => t.Name == name).OrderBy(t => t.FullName.Length).FirstOrDefault();                          if (type != null)                          {                              // Cache it                              typeMap[name] = type;                              return type;                          }                      }                      catch                      {                          // Ignore exception' as assembly type errors gets logged elsewhere                      }                  }                    throw new ArgumentException("'" + name + "' is not a valid type.");              }
Magic Number,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistanceToWaypoint,The following statement contains a magic number: if (height == double.MaxValue)              {                  double latRads = Math.PI / 180.0 * waypoint.latitude;                  double lonRads = Math.PI / 180.0 * waypoint.longitude;                  Vector3d radialVector = new Vector3d(Math.Cos(latRads) * Math.Cos(lonRads)' Math.Sin(latRads)' Math.Cos(latRads) * Math.Sin(lonRads));                  height = celestialBody.pqsController.GetSurfaceHeight(radialVector) - celestialBody.pqsController.radius;                    // Clamp to zero for ocean worlds                  if (celestialBody.ocean)                  {                      height = Math.Max(height' 0.0);                  }              }
Magic Number,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistanceToWaypoint,The following statement contains a magic number: if (height == double.MaxValue)              {                  double latRads = Math.PI / 180.0 * waypoint.latitude;                  double lonRads = Math.PI / 180.0 * waypoint.longitude;                  Vector3d radialVector = new Vector3d(Math.Cos(latRads) * Math.Cos(lonRads)' Math.Sin(latRads)' Math.Cos(latRads) * Math.Sin(lonRads));                  height = celestialBody.pqsController.GetSurfaceHeight(radialVector) - celestialBody.pqsController.radius;                    // Clamp to zero for ocean worlds                  if (celestialBody.ocean)                  {                      height = Math.Max(height' 0.0);                  }              }
Magic Number,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistanceToWaypoint,The following statement contains a magic number: double sin1 = Math.Sin(Math.PI / 180.0 * (vessel.latitude - waypoint.latitude) / 2);
Magic Number,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistanceToWaypoint,The following statement contains a magic number: double sin1 = Math.Sin(Math.PI / 180.0 * (vessel.latitude - waypoint.latitude) / 2);
Magic Number,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistanceToWaypoint,The following statement contains a magic number: double sin2 = Math.Sin(Math.PI / 180.0 * (vessel.longitude - waypoint.longitude) / 2);
Magic Number,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistanceToWaypoint,The following statement contains a magic number: double sin2 = Math.Sin(Math.PI / 180.0 * (vessel.longitude - waypoint.longitude) / 2);
Magic Number,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistanceToWaypoint,The following statement contains a magic number: double cos1 = Math.Cos(Math.PI / 180.0 * waypoint.latitude);
Magic Number,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistanceToWaypoint,The following statement contains a magic number: double cos2 = Math.Cos(Math.PI / 180.0 * vessel.latitude);
Magic Number,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistanceToWaypoint,The following statement contains a magic number: double lateralDist = 2 * (celestialBody.Radius + height + waypoint.altitude) *                  Math.Asin(Math.Sqrt(sin1 * sin1 + cos1 * cos2 * sin2 * sin2));
Magic Number,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistanceToWaypoint,The following statement contains a magic number: if (heightDist <= lateralDist / 2.0)              {                  return lateralDist;              }              else              {                  // Get the ratio to use in our formula                  double x = (heightDist - lateralDist / 2.0) / lateralDist;                    // x / (x + 1) starts at 0 when x = 0' and increases to 1                  return (x / (x + 1)) * heightDist + lateralDist;              }
Magic Number,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistanceToWaypoint,The following statement contains a magic number: if (heightDist <= lateralDist / 2.0)              {                  return lateralDist;              }              else              {                  // Get the ratio to use in our formula                  double x = (heightDist - lateralDist / 2.0) / lateralDist;                    // x / (x + 1) starts at 0 when x = 0' and increases to 1                  return (x / (x + 1)) * heightDist + lateralDist;              }
Magic Number,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistance,The following statement contains a magic number: double sin1 = Math.Sin(Math.PI / 180.0 * (lat1 - lat2) / 2);
Magic Number,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistance,The following statement contains a magic number: double sin1 = Math.Sin(Math.PI / 180.0 * (lat1 - lat2) / 2);
Magic Number,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistance,The following statement contains a magic number: double sin2 = Math.Sin(Math.PI / 180.0 * (lon1 - lon2) / 2);
Magic Number,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistance,The following statement contains a magic number: double sin2 = Math.Sin(Math.PI / 180.0 * (lon1 - lon2) / 2);
Magic Number,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistance,The following statement contains a magic number: double cos1 = Math.Cos(Math.PI / 180.0 * lat2);
Magic Number,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistance,The following statement contains a magic number: double cos2 = Math.Cos(Math.PI / 180.0 * lat1);
Magic Number,ContractConfigurator,WaypointUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\WaypointUtil.cs,GetDistance,The following statement contains a magic number: return  2 * (altitude) * Math.Asin(Math.Sqrt(sin1 * sin1 + cos1 * cos2 * sin2 * sin2));
Magic Number,ContractConfigurator.ExpressionParser,BaseParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\BaseParser.cs,LogEntryDebug,The following statement contains a magic number: string log = (spacing > 0 ? new String(' '' spacing * 2) : "");
Magic Number,ContractConfigurator.ExpressionParser,BaseParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\BaseParser.cs,LogExitDebug,The following statement contains a magic number: string log = (spacing > 0 ? new String(' '' spacing * 2) : "");
Magic Number,ContractConfigurator.ExpressionParser,LocationParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\LocationParser.cs,BiomeAtLocation,The following statement contains a magic number: double latRads = location.lat * Math.PI / 180.0;
Magic Number,ContractConfigurator.ExpressionParser,LocationParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\LocationParser.cs,BiomeAtLocation,The following statement contains a magic number: double lonRads = location.lon * Math.PI / 180.0;
Magic Number,ContractConfigurator.ExpressionParser,OrbitParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\OrbitParser.cs,CreateOrbit,The following statement contains a magic number: orbitNode.AddValue("INC"' dVals[2]);
Magic Number,ContractConfigurator.ExpressionParser,OrbitParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\OrbitParser.cs,CreateOrbit,The following statement contains a magic number: orbitNode.AddValue("LPE"' dVals[3]);
Magic Number,ContractConfigurator.ExpressionParser,OrbitParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\OrbitParser.cs,CreateOrbit,The following statement contains a magic number: orbitNode.AddValue("LAN"' dVals[4]);
Magic Number,ContractConfigurator.ExpressionParser,OrbitParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\OrbitParser.cs,CreateOrbit,The following statement contains a magic number: orbitNode.AddValue("MNA"' dVals[5]);
Magic Number,ContractConfigurator.ExpressionParser,OrbitParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\OrbitParser.cs,CreateOrbit,The following statement contains a magic number: orbitNode.AddValue("EPH"' dVals[6]);
Magic Number,ContractConfigurator.ExpressionParser,DurationParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\DurationParser.cs,EQ,The following statement contains a magic number: return Math.Abs(a.Value - b.Value) < 0.001;
Magic Number,ContractConfigurator.ExpressionParser,ListExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\ListExpressionParser.cs,ParseWhereMethod,The following statement contains a magic number: try              {                  // Start with method call                  ParseToken("(");                    // Get the identifier for the object                  Match m = Regex.Match(expression' @"([A-Za-z][\w\d]*)[\s]*=>[\s]*(.*)");                  string identifier = m.Groups[1].Value;                  expression = (string.IsNullOrEmpty(identifier) ? expression : m.Groups[2].Value);                    List<T> values = obj == null || obj.Count == 0 ? new T[] { default(T) }.ToList() : obj;                  List<T> filteredList = new List<T>();                    // Save the expression' then execute for each value                  string savedExpression = expression;                  try                  {                      foreach (T value in values)                      {                          expression = savedExpression;                          tempVariables[identifier] = new KeyValuePair<object' Type>(value' typeof(T));                          ExpressionParser<T> parser = GetParser<T>(this);                          try                          {                              bool keep = parser.ParseStatement<bool>();                              if (keep && obj.Count != 0)                              {                                  filteredList.Add(value);                              }                          }                          finally                          {                              expression = parser.expression;                          }                      }                  }                  finally                  {                      if (tempVariables.ContainsKey(identifier))                      {                          tempVariables.Remove(identifier);                      }                  }                    // Finish the method call                  ParseToken(")");                    // Check for a method call before we return                  Token methodToken = ParseMethodToken();                  ExpressionParser<TResult> retValParser = GetParser<TResult>(this);                  TResult result;                  if (methodToken != null)                  {                      result = ParseMethod<TResult>(methodToken' filteredList);                  }                  else                  {                      // No method' attempt to convert - most likely fails                      result = retValParser.ConvertType(filteredList);                  }                    verbose &= LogExitDebug<TResult>("ParseWhereMethod"' result);                  return result;              }              catch              {                  verbose &= LogException<TResult>("ParseWhereMethod");                  throw;              }
Magic Number,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,SCANsatCoverage,The following statement contains a magic number: if (!SCANsatUtil.VerifySCANsatVersion())              {                  return 100.0;              }
Magic Number,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,SCANsatCoverage,The following statement contains a magic number: if (cb == null)              {                  return 100.0;              }
Magic Number,ContractConfigurator.ExpressionParser,DataNode,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\DataNode.cs,OutputValue,The following statement contains a magic number: if (type == typeof(ScienceSubject))              {                  output = ((ScienceSubject)(value)).id;              }              else if (type == typeof(ScienceExperiment))              {                  output = ((ScienceExperiment)(value)).id;              }              else if (type == typeof(AvailablePart))              {                  output = ((AvailablePart)(value)).name;              }              else if (type == typeof(Vessel))              {                  output = ((Vessel)(value)).vesselName;              }              else if (type.Name == "List`1")              {                  output = "[ ";                  System.Collections.IEnumerable list = (System.Collections.IEnumerable)value;                  foreach (object o in list)                  {                      output += OutputValue(o) + "' ";                  }                  output = output.Length == 2 ? "[]" : (output.Remove(output.Length - 2) + " ]");              }              else              {                  output = value.ToString();              }
Magic Number,ContractConfigurator.ExpressionParser,DataNode,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\DataNode.cs,OutputValue,The following statement contains a magic number: if (type == typeof(ScienceSubject))              {                  output = ((ScienceSubject)(value)).id;              }              else if (type == typeof(ScienceExperiment))              {                  output = ((ScienceExperiment)(value)).id;              }              else if (type == typeof(AvailablePart))              {                  output = ((AvailablePart)(value)).name;              }              else if (type == typeof(Vessel))              {                  output = ((Vessel)(value)).vesselName;              }              else if (type.Name == "List`1")              {                  output = "[ ";                  System.Collections.IEnumerable list = (System.Collections.IEnumerable)value;                  foreach (object o in list)                  {                      output += OutputValue(o) + "' ";                  }                  output = output.Length == 2 ? "[]" : (output.Remove(output.Length - 2) + " ]");              }              else              {                  output = value.ToString();              }
Magic Number,ContractConfigurator.ExpressionParser,DataNode,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\DataNode.cs,NodeForKey,The following statement contains a magic number: if (names.Count() > 2)              {                  throw new ArgumentException("Key value '" + key + "' is invalid' can only have one namespace preceeded by a colon (:).");              }
Magic Number,ContractConfigurator.ExpressionParser,Function<T1;T2;TResult>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Function.cs,ParameterCount,The following statement contains a magic number: return 2;
Magic Number,ContractConfigurator.ExpressionParser,Function<T1;T2;T3;TResult>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Function.cs,Invoke,The following statement contains a magic number: return Invoke((T1)parameters[0]' (T2)parameters[1]' (T3)parameters[2]);
Magic Number,ContractConfigurator.ExpressionParser,Function<T1;T2;T3;TResult>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Function.cs,ParameterCount,The following statement contains a magic number: return 3;
Magic Number,ContractConfigurator.ExpressionParser,Function<T1;T2;T3;TResult>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Function.cs,ParameterType,The following statement contains a magic number: switch (i)              {                  case 0:                      return typeof(T1);                  case 1:                      return typeof(T2);                  case 2:                      return typeof(T3);                  default:                      throw new NotSupportedException();              }
Magic Number,ContractConfigurator.ExpressionParser,Method<C;T1;T2;TResult>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Method.cs,Invoke,The following statement contains a magic number: return Invoke((C)parameters[0]' (T1)parameters[1]' (T2)parameters[2]);
Magic Number,ContractConfigurator.ExpressionParser,Method<C;T1;T2;TResult>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Method.cs,ParameterCount,The following statement contains a magic number: return 2;
Magic Number,ContractConfigurator.ExpressionParser,FloatCalculator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,EQ,The following statement contains a magic number: return Math.Abs(a - b) <= 0.001;
Magic Number,ContractConfigurator.ExpressionParser,FloatCalculator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,NE,The following statement contains a magic number: return Math.Abs(a - b) > 0.001;
Magic Number,ContractConfigurator.ExpressionParser,DoubleCalculator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,EQ,The following statement contains a magic number: return Math.Abs(a - b) <= 0.001;
Magic Number,ContractConfigurator.ExpressionParser,DoubleCalculator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,NE,The following statement contains a magic number: return Math.Abs(a - b) > 0.001;
Magic Number,ContractConfigurator.ExpressionParser,NumericValueExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,PrintNumber,The following statement contains a magic number: if (typeof(T) == typeof(int) || typeof(T) == typeof(short))              {                  int ival = (int)(object)tval;                  if (ival == 0) return "zero";                  if (ival == 1) return "one";                  if (ival == 2) return "two";                  if (ival == 3) return "three";                  if (ival == 4) return "four";                  if (ival == 5) return "five";                  if (ival == 6) return "six";                  if (ival == 7) return "seven";                  if (ival == 8) return "eight";                  if (ival == 9) return "nine";                  return ival.ToString("N0");              }              else if (typeof(T) == typeof(float) || typeof(T) == typeof(double))              {                  double dval = (double)(object)tval;                  if (dval < 1.0)                  {                      return dval.ToString("N5");                  }                  return dval.ToString("N2");              }
Magic Number,ContractConfigurator.ExpressionParser,NumericValueExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,PrintNumber,The following statement contains a magic number: if (typeof(T) == typeof(int) || typeof(T) == typeof(short))              {                  int ival = (int)(object)tval;                  if (ival == 0) return "zero";                  if (ival == 1) return "one";                  if (ival == 2) return "two";                  if (ival == 3) return "three";                  if (ival == 4) return "four";                  if (ival == 5) return "five";                  if (ival == 6) return "six";                  if (ival == 7) return "seven";                  if (ival == 8) return "eight";                  if (ival == 9) return "nine";                  return ival.ToString("N0");              }              else if (typeof(T) == typeof(float) || typeof(T) == typeof(double))              {                  double dval = (double)(object)tval;                  if (dval < 1.0)                  {                      return dval.ToString("N5");                  }                  return dval.ToString("N2");              }
Magic Number,ContractConfigurator.ExpressionParser,NumericValueExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,PrintNumber,The following statement contains a magic number: if (typeof(T) == typeof(int) || typeof(T) == typeof(short))              {                  int ival = (int)(object)tval;                  if (ival == 0) return "zero";                  if (ival == 1) return "one";                  if (ival == 2) return "two";                  if (ival == 3) return "three";                  if (ival == 4) return "four";                  if (ival == 5) return "five";                  if (ival == 6) return "six";                  if (ival == 7) return "seven";                  if (ival == 8) return "eight";                  if (ival == 9) return "nine";                  return ival.ToString("N0");              }              else if (typeof(T) == typeof(float) || typeof(T) == typeof(double))              {                  double dval = (double)(object)tval;                  if (dval < 1.0)                  {                      return dval.ToString("N5");                  }                  return dval.ToString("N2");              }
Magic Number,ContractConfigurator.ExpressionParser,NumericValueExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,PrintNumber,The following statement contains a magic number: if (typeof(T) == typeof(int) || typeof(T) == typeof(short))              {                  int ival = (int)(object)tval;                  if (ival == 0) return "zero";                  if (ival == 1) return "one";                  if (ival == 2) return "two";                  if (ival == 3) return "three";                  if (ival == 4) return "four";                  if (ival == 5) return "five";                  if (ival == 6) return "six";                  if (ival == 7) return "seven";                  if (ival == 8) return "eight";                  if (ival == 9) return "nine";                  return ival.ToString("N0");              }              else if (typeof(T) == typeof(float) || typeof(T) == typeof(double))              {                  double dval = (double)(object)tval;                  if (dval < 1.0)                  {                      return dval.ToString("N5");                  }                  return dval.ToString("N2");              }
Magic Number,ContractConfigurator.ExpressionParser,NumericValueExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,PrintNumber,The following statement contains a magic number: if (typeof(T) == typeof(int) || typeof(T) == typeof(short))              {                  int ival = (int)(object)tval;                  if (ival == 0) return "zero";                  if (ival == 1) return "one";                  if (ival == 2) return "two";                  if (ival == 3) return "three";                  if (ival == 4) return "four";                  if (ival == 5) return "five";                  if (ival == 6) return "six";                  if (ival == 7) return "seven";                  if (ival == 8) return "eight";                  if (ival == 9) return "nine";                  return ival.ToString("N0");              }              else if (typeof(T) == typeof(float) || typeof(T) == typeof(double))              {                  double dval = (double)(object)tval;                  if (dval < 1.0)                  {                      return dval.ToString("N5");                  }                  return dval.ToString("N2");              }
Magic Number,ContractConfigurator.ExpressionParser,NumericValueExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,PrintNumber,The following statement contains a magic number: if (typeof(T) == typeof(int) || typeof(T) == typeof(short))              {                  int ival = (int)(object)tval;                  if (ival == 0) return "zero";                  if (ival == 1) return "one";                  if (ival == 2) return "two";                  if (ival == 3) return "three";                  if (ival == 4) return "four";                  if (ival == 5) return "five";                  if (ival == 6) return "six";                  if (ival == 7) return "seven";                  if (ival == 8) return "eight";                  if (ival == 9) return "nine";                  return ival.ToString("N0");              }              else if (typeof(T) == typeof(float) || typeof(T) == typeof(double))              {                  double dval = (double)(object)tval;                  if (dval < 1.0)                  {                      return dval.ToString("N5");                  }                  return dval.ToString("N2");              }
Magic Number,ContractConfigurator.ExpressionParser,NumericValueExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,PrintNumber,The following statement contains a magic number: if (typeof(T) == typeof(int) || typeof(T) == typeof(short))              {                  int ival = (int)(object)tval;                  if (ival == 0) return "zero";                  if (ival == 1) return "one";                  if (ival == 2) return "two";                  if (ival == 3) return "three";                  if (ival == 4) return "four";                  if (ival == 5) return "five";                  if (ival == 6) return "six";                  if (ival == 7) return "seven";                  if (ival == 8) return "eight";                  if (ival == 9) return "nine";                  return ival.ToString("N0");              }              else if (typeof(T) == typeof(float) || typeof(T) == typeof(double))              {                  double dval = (double)(object)tval;                  if (dval < 1.0)                  {                      return dval.ToString("N5");                  }                  return dval.ToString("N2");              }
Magic Number,ContractConfigurator.ExpressionParser,NumericValueExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\NumericValueExpressionParser.cs,PrintNumber,The following statement contains a magic number: if (typeof(T) == typeof(int) || typeof(T) == typeof(short))              {                  int ival = (int)(object)tval;                  if (ival == 0) return "zero";                  if (ival == 1) return "one";                  if (ival == 2) return "two";                  if (ival == 3) return "three";                  if (ival == 4) return "four";                  if (ival == 5) return "five";                  if (ival == 6) return "six";                  if (ival == 7) return "seven";                  if (ival == 8) return "eight";                  if (ival == 9) return "nine";                  return ival.ToString("N0");              }              else if (typeof(T) == typeof(float) || typeof(T) == typeof(double))              {                  double dval = (double)(object)tval;                  if (dval < 1.0)                  {                      return dval.ToString("N5");                  }                  return dval.ToString("N2");              }
Magic Number,ContractConfigurator.ExpressionParser,StringExpressionParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\SimpleTypes\StringExpressionParser.cs,RegisterMethods,The following statement contains a magic number: RegisterMethod(new Method<string' string>("FirstCap"' s => s == null ? "" : s.Count() > 2 ? s.Substring(0' 1).ToUpper() + s.Substring(1) : s.ToUpper()));
Magic Number,ContractConfigurator.ExpressionParser,ExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\ExpressionParser.cs,ParseSpecialIdentifier,The following statement contains a magic number: try              {                  if (currentDataNode != null)                  {                      string identifier = token.sval;                      DataNode dataNode = currentDataNode;                      while (identifier.Contains("/"))                      {                          if (identifier[0] == '/')                          {                              identifier = identifier.Substring(1);                              dataNode = dataNode.Root ?? dataNode;                              continue;                          }                          else if (identifier.StartsWith("../"))                          {                              identifier = identifier.Substring(3);                              dataNode = dataNode.Parent;                              continue;                          }                          else                          {                              int index = identifier.IndexOf('/');                              string currentIdentifier = identifier.Substring(0' index);                              identifier = identifier.Substring(index + 1);                              DataNode newNode = dataNode.GetChild(currentIdentifier);                                if (newNode == null)                              {                                  throw new DataNode.ValueNotInitialized(dataNode.Path() + currentIdentifier + "/" + identifier);                              }                              dataNode = newNode;                          }                      }                        // Check if the identifier is a data node (versus a key in the current data node)                      DataNode childNode = dataNode.GetChild(identifier);                      object o = null;                      Type dataType = null;                      if (childNode != null)                      {                          dataNode = childNode;                          o = dataNode.Factory;                          dataType = o.GetType();                      }                      // Handle as a simple data value                      else                      {                          if (!dataNode.IsInitialized(identifier))                          {                              throw new DataNode.ValueNotInitialized(dataNode.Path() + identifier);                          }                            o = dataNode[identifier];                          if (!dataNode.IsDeterministic(identifier))                          {                              currentDataNode.SetDeterministic(currentKey' false);                          }                            dataType = dataNode.GetType(identifier);                      }                        T result;                      try                      {                          MethodInfo completeIdentifierParsing = methodCompleteIdentifierParsing.MakeGenericMethod(new Type[] { dataType });                            result = (T)completeIdentifierParsing.Invoke(this' new object[] { o });                      }                      catch (TargetInvocationException tie)                      {                          Exception e = ExceptionUtil.UnwrapTargetInvokationException(tie);                          if (e != null)                          {                              throw e;                          }                          throw;                      }                        verbose &= LogExitDebug<T>("ParseSpecialIdentifier"' result);                      return result;                  }                  else                  {                      throw new ArgumentException("Cannot get value for @" + token.sval + ": not available in this context.");                  }              }              catch              {                  verbose &= LogException<T>("ParseSpecialIdentifier");                  throw;              }
Magic Number,ContractConfigurator.ExpressionParser,ExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\ExpressionParser.cs,ParseOperator,The following statement contains a magic number: char[] chars = expression.Substring(0' 2).ToCharArray();
Magic Number,ContractConfigurator.ExpressionParser,ExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\ExpressionParser.cs,ParseOperator,The following statement contains a magic number: throw new ArgumentException("Expected an operator' found: " + expression.Substring(0' 2));
Magic Number,ContractConfigurator.Parameters,Duration,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Duration.cs,Duration,The following statement contains a magic number: waitTime = Time.fixedTime + 0.5;
Magic Number,ContractConfigurator.Parameters,Duration,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Duration.cs,GetParameterTitle,The following statement contains a magic number: if (currentVessel != null && endTimes.ContainsKey(currentVessel.id) && endTimes[currentVessel.id] > 0.01 ||                  currentVessel == null && endTime > 0.01)              {                  double time = currentVessel != null ? endTimes[currentVessel.id] : endTime;                  if (time - Planetarium.GetUniversalTime() > 0.0)                  {                      title = (waitingText ?? "Time to completion:") + " " + DurationUtil.StringValue(time - Planetarium.GetUniversalTime());                  }                  else                  {                      title = completionText ?? "Wait time over";                  }              }              else              {                  title = (preWaitText ?? "Waiting time required:") + " " + DurationUtil.StringValue(duration);              }
Magic Number,ContractConfigurator.Parameters,Duration,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Duration.cs,GetParameterTitle,The following statement contains a magic number: if (currentVessel != null && endTimes.ContainsKey(currentVessel.id) && endTimes[currentVessel.id] > 0.01 ||                  currentVessel == null && endTime > 0.01)              {                  double time = currentVessel != null ? endTimes[currentVessel.id] : endTime;                  if (time - Planetarium.GetUniversalTime() > 0.0)                  {                      title = (waitingText ?? "Time to completion:") + " " + DurationUtil.StringValue(time - Planetarium.GetUniversalTime());                  }                  else                  {                      title = completionText ?? "Wait time over";                  }              }              else              {                  title = (preWaitText ?? "Waiting time required:") + " " + DurationUtil.StringValue(duration);              }
Magic Number,ContractConfigurator.Parameters,Duration,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Duration.cs,OnContractAccepted,The following statement contains a magic number: if (contract == Root && startCriteria == StartCriteria.CONTRACT_ACCEPTANCE)              {                  triggered = true;                  waitTime = Time.fixedTime + 0.5;              }
Magic Number,ContractConfigurator.Parameters,Duration,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Duration.cs,OnLaunch,The following statement contains a magic number: if (startCriteria == StartCriteria.NEXT_LAUNCH)              {                  triggered = true;                  waitTime = Time.fixedTime + 0.5;              }
Magic Number,ContractConfigurator.Parameters,Duration,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Duration.cs,OnParameterChange,The following statement contains a magic number: waitTime = Time.fixedTime + 0.5;
Magic Number,ContractConfigurator.Parameters,HasAstronaut,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\HasAstronaut.cs,GetParameterTitle,The following statement contains a magic number: if (string.IsNullOrEmpty(title))              {                  string traitString = String.IsNullOrEmpty(trait) ? "Kerbal" : trait;                  output = "Astronauts: ";                  if (maxCount == int.MaxValue)                  {                      output += "At least " + minCount + " " + traitString + (minCount != 1 ? "s" : "");                  }                  else if (minCount == 0)                  {                      output += "At most " + maxCount + " " + traitString + (maxCount != 1 ? "s" : "");                  }                  else if (minCount == maxCount)                  {                      output += minCount + " " + traitString + (minCount != 1 ? "s" : "");                  }                  else                  {                      output += "Between " + minCount + " and " + maxCount + " " + traitString + "s";                  }                    if (minExperience != 0 && maxExperience != 5)                  {                      if (minExperience == 0)                      {                          output += " with experience level of at most " + maxExperience;                      }                      else if (maxExperience == 5)                      {                          output += " with experience level of at least " + minExperience;                      }                      else                      {                          output += " with experience level between " + minExperience + " and " + maxExperience;                      }                  }              }              else              {                  output = title;              }
Magic Number,ContractConfigurator.Parameters,HasAstronaut,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\HasAstronaut.cs,GetParameterTitle,The following statement contains a magic number: if (string.IsNullOrEmpty(title))              {                  string traitString = String.IsNullOrEmpty(trait) ? "Kerbal" : trait;                  output = "Astronauts: ";                  if (maxCount == int.MaxValue)                  {                      output += "At least " + minCount + " " + traitString + (minCount != 1 ? "s" : "");                  }                  else if (minCount == 0)                  {                      output += "At most " + maxCount + " " + traitString + (maxCount != 1 ? "s" : "");                  }                  else if (minCount == maxCount)                  {                      output += minCount + " " + traitString + (minCount != 1 ? "s" : "");                  }                  else                  {                      output += "Between " + minCount + " and " + maxCount + " " + traitString + "s";                  }                    if (minExperience != 0 && maxExperience != 5)                  {                      if (minExperience == 0)                      {                          output += " with experience level of at most " + maxExperience;                      }                      else if (maxExperience == 5)                      {                          output += " with experience level of at least " + minExperience;                      }                      else                      {                          output += " with experience level between " + minExperience + " and " + maxExperience;                      }                  }              }              else              {                  output = title;              }
Magic Number,ContractConfigurator.Parameters,ParameterDelegate<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\ParameterDelegate.cs,InitializeBitArrays,The following statement contains a magic number: while (length < values.Count())              {                  length *= 2;              }
Magic Number,ContractConfigurator.Parameters,RecoverKerbalCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\RecoverKerbalCustom.cs,OnCrewKilled,The following statement contains a magic number: if (recovered.ContainsKey(evt.sender))              {                  kerbalKilledCheck = Time.frameCount + 5;              }
Magic Number,ContractConfigurator.Parameters,CollectScienceCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\CollectScienceCustom.cs,OnUpdate,The following statement contains a magic number: if (UnityEngine.Time.fixedTime - lastUpdate > UPDATE_FREQUENCY)              {                  lastUpdate = UnityEngine.Time.fixedTime;                  string biome;                  if (landedSituations.Contains(v.situation) && !string.IsNullOrEmpty(v.landedAt))                  {                      biome = Vessel.GetLandedAtString(v.landedAt).Replace(" "' "");                  }                  else                  {                      biome = ScienceUtil.GetExperimentBiome(v.mainBody' v.latitude' v.longitude);                  }                                    // Run the OnVesselChange' this will pick up a kerbal that grabbed science'                  // or science that was dumped from a pod.                  if (updateTicks++ % 4 == 0)                  {                      OnVesselChange(v);                  }                  else                  {                      // Check if there was a biome change                      if (biome != lastBiome)                      {                          // Update the delegates' that will do the biome check                          UpdateDelegates();                      }                  }                    lastVessel = v;                  lastBiome = biome;              }
Magic Number,ContractConfigurator.Parameters,CollectScienceCustom,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\CollectScienceCustom.cs,RecoveryMethod,The following statement contains a magic number: if (recoveryMethod != ScienceRecoveryMethod.Ideal)              {                  return recoveryMethod;              }              else if (string.IsNullOrEmpty(exp) || exp == "surfaceSample")              {                  return ScienceRecoveryMethod.Recover;              }              else              {                  if (!idealRecoverMethodCache.ContainsKey(exp))                  {                      IEnumerable<ConfigNode> expNodes = PartLoader.Instance.loadedParts.                          Where(p => p.moduleInfos.Any(mod => mod.moduleName == "Science Experiment")).                          SelectMany(p =>                              p.partConfig.GetNodes("MODULE").                              Where(node => node.GetValue("name") == "ModuleScienceExperiment" && node.GetValue("experimentID") == exp)                          );                        // Either has no parts or a full science transmitter                      if (!expNodes.Any() || expNodes.Any(n => ConfigNodeUtil.ParseValue<float>(n' "xmitDataScalar"' 0.0f) >= 0.999))                      {                          idealRecoverMethodCache[exp] = ScienceRecoveryMethod.RecoverOrTransmit;                      }                      else                      {                          idealRecoverMethodCache[exp] = ScienceRecoveryMethod.Recover;                      }                  }                    return idealRecoverMethodCache[exp];              }
Magic Number,ContractConfigurator.Parameters,NoStaging,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\NoStaging.cs,OnPartJointBreak,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  Part p = i == 0 ? pj.Parent : pj.Child;                  foreach (PartModule pm in p.Modules)                  {                      if (pm.moduleName.StartsWith("ModuleDocking"))                      {                          dockingPortCount++;                          break;                      }                  }              }
Magic Number,ContractConfigurator.Parameters,NoStaging,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\NoStaging.cs,OnPartJointBreak,The following statement contains a magic number: if (dockingPortCount == 2)              {                  staged.Add(pj.Parent.vessel);                  lastUndockTime = UnityEngine.Time.fixedTime;              }              // Need to check for a stage seperation              else              {                  possibleStages.Clear();                  possibleStages.Add(pj.Parent.vessel);                  lastPartJointTime = UnityEngine.Time.fixedTime;              }
Magic Number,ContractConfigurator.Parameters,ResourceConsumption,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\ResourceConsuption.cs,VesselMeetsCondition,The following statement contains a magic number: return delta - minRate >= -0.001 && maxRate - delta >= -0.001;
Magic Number,ContractConfigurator.Parameters,ResourceConsumption,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\ResourceConsuption.cs,VesselMeetsCondition,The following statement contains a magic number: return delta - minRate >= -0.001 && maxRate - delta >= -0.001;
Magic Number,ContractConfigurator.Parameters,VesselNotDestroyed,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\VesselNotDestroyed.cs,OnVesselWillDestroy,The following statement contains a magic number: if (v.vesselType == VesselType.EVA && Time.fixedTime - lastVesselChange < 0.25)              {                  return;              }
Magic Number,ContractConfigurator.Parameters,OrbitParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\OrbitParameter.cs,OrbitParameter,The following statement contains a magic number: maxInclination = 180;
Magic Number,ContractConfigurator.Parameters,OrbitParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\OrbitParameter.cs,CreateDelegates,The following statement contains a magic number: if (minInclination != 0.0 || maxInclination != 180.0)              {                  string output = "Inclination: ";                  if (minInclination == 0.0)                  {                      output += "Below " + maxInclination.ToString("F1") + "°";                  }                  else if (maxInclination == 180.0)                  {                      output += "Above " + minInclination.ToString("F1") + "°";                  }                  else                  {                      output += "Between " + minInclination.ToString("F1") + "° and " + maxInclination.ToString("F1") + "°";                  }                    AddParameter(new ParameterDelegate<Vessel>(output' CheckInclination));              }
Magic Number,ContractConfigurator.Parameters,OrbitParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\OrbitParameter.cs,CreateDelegates,The following statement contains a magic number: if (minInclination != 0.0 || maxInclination != 180.0)              {                  string output = "Inclination: ";                  if (minInclination == 0.0)                  {                      output += "Below " + maxInclination.ToString("F1") + "°";                  }                  else if (maxInclination == 180.0)                  {                      output += "Above " + minInclination.ToString("F1") + "°";                  }                  else                  {                      output += "Between " + minInclination.ToString("F1") + "° and " + maxInclination.ToString("F1") + "°";                  }                    AddParameter(new ParameterDelegate<Vessel>(output' CheckInclination));              }
Magic Number,ContractConfigurator.Parameters,OrbitParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\OrbitParameter.cs,CheckInclination,The following statement contains a magic number: if (inclination > 180.0)              {                  inclination = 360 - inclination;              }
Magic Number,ContractConfigurator.Parameters,OrbitParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\OrbitParameter.cs,CheckInclination,The following statement contains a magic number: if (inclination > 180.0)              {                  inclination = 360 - inclination;              }
Magic Number,ContractConfigurator.Parameters,OrbitParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\OrbitParameter.cs,CheckAoP,The following statement contains a magic number: while (aop < 0.0)              {                  aop += 360.0;              }
Magic Number,ContractConfigurator.Parameters,OrbitParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\OrbitParameter.cs,CheckAoP,The following statement contains a magic number: while (aop > 360.0)              {                  aop -= 360.0;              }
Magic Number,ContractConfigurator.Parameters,OrbitParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\OrbitParameter.cs,CheckAoP,The following statement contains a magic number: while (aop > 360.0)              {                  aop -= 360.0;              }
Magic Number,ContractConfigurator.Parameters,OrbitParameter,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\OrbitParameter.cs,OnParameterLoad,The following statement contains a magic number: try              {                  base.OnParameterLoad(node);                  situation = ConfigNodeUtil.ParseValue<Vessel.Situations>(node' "situation"' Vessel.Situations.ORBITING);                  minAltitude = ConfigNodeUtil.ParseValue<double>(node' "minAltitude");                  maxAltitude = ConfigNodeUtil.ParseValue<double>(node' "maxAltitude"' double.MaxValue);                  minApoapsis = ConfigNodeUtil.ParseValue<double>(node' "minApoapsis");                  maxApoapsis = ConfigNodeUtil.ParseValue<double>(node' "maxApoapsis"' double.MaxValue);                  minPeriapsis = ConfigNodeUtil.ParseValue<double>(node' "minPeriapsis");                  maxPeriapsis = ConfigNodeUtil.ParseValue<double>(node' "maxPeriapsis"' double.MaxValue);                  minEccentricity = ConfigNodeUtil.ParseValue<double>(node' "minEccentricity");                  maxEccentricity = ConfigNodeUtil.ParseValue<double>(node' "maxEccentricity"' double.MaxValue);                  minInclination = ConfigNodeUtil.ParseValue<double>(node' "minInclination");                  maxInclination = ConfigNodeUtil.ParseValue<double>(node' "maxInclination"' double.MaxValue);                  minArgumentOfPeriapsis = ConfigNodeUtil.ParseValue<double>(node' "minArgumentOfPeriapsis"' 0.0);                  maxArgumentOfPeriapsis = ConfigNodeUtil.ParseValue<double>(node' "maxArgumentOfPeriapsis"' 360.0);                  minPeriod = ConfigNodeUtil.ParseValue<double>(node' "minPeriod");                  maxPeriod = ConfigNodeUtil.ParseValue<double>(node' "maxPeriod"' double.MaxValue);                  targetBody = ConfigNodeUtil.ParseValue<CelestialBody>(node' "targetBody"' (CelestialBody)null);                  displayNotes = ConfigNodeUtil.ParseValue<bool?>(node' "displayNotes"' (bool?)false).Value;                    if (node.HasNode("ORBIT"))                  {                      orbit = new OrbitSnapshot(node.GetNode("ORBIT")).Load();                      deviationWindow = ConfigNodeUtil.ParseValue<double>(node' "deviationWindow");                  }                    CreateDelegates();              }              finally              {                  ParameterDelegate<Vessel>.OnDelegateContainerLoad(node);              }
Magic Number,ContractConfigurator.Parameters,ReachState,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\ReachState.cs,CheckVesselSpeed,The following statement contains a magic number: speed = Math.Round(speed' maxSpeed > 0.5 ? 1 : 0);
Magic Number,ContractConfigurator.Parameters,VisitWaypoint,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\VisitWaypoint.cs,VesselMeetsCondition,The following statement contains a magic number: if (distance == 0.0 && horizontalDistance == 0.0)              {                  // Close to the surface                  if (waypoint.altitude < 25.0)                  {                      distance = 500.0;                  }                  else                  {                      distance = Math.Max(1000.0' waypoint.altitude / 5.0);                  }              }
Magic Number,ContractConfigurator.Parameters,VisitWaypoint,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\VisitWaypoint.cs,VesselMeetsCondition,The following statement contains a magic number: if (distance == 0.0 && horizontalDistance == 0.0)              {                  // Close to the surface                  if (waypoint.altitude < 25.0)                  {                      distance = 500.0;                  }                  else                  {                      distance = Math.Max(1000.0' waypoint.altitude / 5.0);                  }              }
Magic Number,ContractConfigurator.Parameters,VisitWaypoint,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\VisitWaypoint.cs,VesselMeetsCondition,The following statement contains a magic number: if (distance == 0.0 && horizontalDistance == 0.0)              {                  // Close to the surface                  if (waypoint.altitude < 25.0)                  {                      distance = 500.0;                  }                  else                  {                      distance = Math.Max(1000.0' waypoint.altitude / 5.0);                  }              }
Magic Number,ContractConfigurator.Parameters,VisitWaypoint,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\VisitWaypoint.cs,VesselMeetsCondition,The following statement contains a magic number: if (distance == 0.0 && horizontalDistance == 0.0)              {                  // Close to the surface                  if (waypoint.altitude < 25.0)                  {                      distance = 500.0;                  }                  else                  {                      distance = Math.Max(1000.0' waypoint.altitude / 5.0);                  }              }
Magic Number,ContractConfigurator.Parameters,Timer,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\Timer.cs,GetParameterTitle,The following statement contains a magic number: if (state == ParameterState.Failed)              {                  return "Time expired!";              }              else if (endTime > 0.01)              {                  return "Time remaining: " + DurationUtil.StringValue(endTime - Planetarium.GetUniversalTime());              }              else              {                  return "Time limit: " + DurationUtil.StringValue(duration);              }
Magic Number,ContractConfigurator.Parameters,HasResource,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\HasResource.cs,CreateDelegates,The following statement contains a magic number: foreach (Filter filter in filters)              {                  string output = (capacity ? "Resource Capacity: " : "Resource: ") + filter.resource.name + ": ";                  if (filter.maxQuantity == 0)                  {                      output += "None";                  }                  else if (filter.maxQuantity == double.MaxValue && (filter.minQuantity > 0.0 && filter.minQuantity <= 0.01))                  {                      output += "Not zero units";                  }                  else if (filter.maxQuantity == double.MaxValue)                  {                      output += "At least " + filter.minQuantity + " units";                  }                  else if (filter.minQuantity == 0)                  {                      output += "At most " + filter.maxQuantity + " units";                  }                  else                  {                      output += "Between " + filter.minQuantity + " and " + filter.maxQuantity + " units";                  }                    AddParameter(new ParameterDelegate<Vessel>(output' v => VesselHasResource(v' filter.resource' capacity' filter.minQuantity' filter.maxQuantity)'                      ParameterDelegateMatchType.VALIDATE));              }
Magic Number,ContractConfigurator.Parameters,HasCrew,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\HasCrew.cs,GetParameterTitle,The following statement contains a magic number: if (string.IsNullOrEmpty(title))              {                  if (kerbals.Count == 0 && (state == ParameterState.Complete || ParameterCount == 1))                  {                      if (ParameterCount == 1)                      {                          hideChildren = true;                      }                        string traitString = String.IsNullOrEmpty(trait) ? "Kerbal" : TraitTitle(trait);                      output = "Crew: ";                      if (maxCrew == 0)                      {                          output += "Unmanned";                      }                      else if (maxCrew == int.MaxValue)                      {                          output += "At least " + minCrew + " " + traitString + (minCrew != 1 ? "s" : "");                      }                      else if (minCrew == 0)                      {                          output += "At most " + maxCrew + " " + traitString + (maxCrew != 1 ? "s" : "");                      }                      else if (minCrew == maxCrew)                      {                          output += minCrew + " " + traitString + (minCrew != 1 ? "s" : "");                      }                      else                      {                          output += "Between " + minCrew + " and " + maxCrew + " " + traitString + "s";                      }                        if (minExperience != 0 || maxExperience != 5)                      {                          if (minExperience == 0)                          {                              output += " with experience level of at most " + maxExperience;                          }                          else if (maxExperience == 5)                          {                              output += " with experience level of at least " + minExperience;                          }                          else                          {                              output += " with experience level between " + minExperience + " and " + maxExperience;                          }                      }                  }                  else                  {                      output = "Crew";                      if (state == ParameterState.Complete || ParameterCount == 1)                      {                          if (ParameterCount == 1)                          {                              hideChildren = true;                          }                            output += ": " + ParameterDelegate<ProtoCrewMember>.GetDelegateText(this);                      }                  }              }              else              {                  output = title;              }
Magic Number,ContractConfigurator.Parameters,HasCrew,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\HasCrew.cs,GetParameterTitle,The following statement contains a magic number: if (string.IsNullOrEmpty(title))              {                  if (kerbals.Count == 0 && (state == ParameterState.Complete || ParameterCount == 1))                  {                      if (ParameterCount == 1)                      {                          hideChildren = true;                      }                        string traitString = String.IsNullOrEmpty(trait) ? "Kerbal" : TraitTitle(trait);                      output = "Crew: ";                      if (maxCrew == 0)                      {                          output += "Unmanned";                      }                      else if (maxCrew == int.MaxValue)                      {                          output += "At least " + minCrew + " " + traitString + (minCrew != 1 ? "s" : "");                      }                      else if (minCrew == 0)                      {                          output += "At most " + maxCrew + " " + traitString + (maxCrew != 1 ? "s" : "");                      }                      else if (minCrew == maxCrew)                      {                          output += minCrew + " " + traitString + (minCrew != 1 ? "s" : "");                      }                      else                      {                          output += "Between " + minCrew + " and " + maxCrew + " " + traitString + "s";                      }                        if (minExperience != 0 || maxExperience != 5)                      {                          if (minExperience == 0)                          {                              output += " with experience level of at most " + maxExperience;                          }                          else if (maxExperience == 5)                          {                              output += " with experience level of at least " + minExperience;                          }                          else                          {                              output += " with experience level between " + minExperience + " and " + maxExperience;                          }                      }                  }                  else                  {                      output = "Crew";                      if (state == ParameterState.Complete || ParameterCount == 1)                      {                          if (ParameterCount == 1)                          {                              hideChildren = true;                          }                            output += ": " + ParameterDelegate<ProtoCrewMember>.GetDelegateText(this);                      }                  }              }              else              {                  output = title;              }
Magic Number,ContractConfigurator.Parameters,HasCrew,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\HasCrew.cs,CreateDelegates,The following statement contains a magic number: if (minExperience != 0 || maxExperience != 5)              {                  string filterText;                  if (minExperience == 0)                  {                      filterText = "Experience Level: At most " + maxExperience;                  }                  else if (maxExperience == 5)                  {                      filterText = "Experience Level: At least " + minExperience;                  }                  else                  {                      filterText = "Experience Level: Between " + minExperience + " and " + maxExperience;                  }                    AddParameter(new ParameterDelegate<ProtoCrewMember>(filterText'                      cm => cm.experienceLevel >= minExperience && cm.experienceLevel <= maxExperience));              }
Magic Number,ContractConfigurator.Parameters,HasCrew,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\HasCrew.cs,CreateDelegates,The following statement contains a magic number: if (minExperience != 0 || maxExperience != 5)              {                  string filterText;                  if (minExperience == 0)                  {                      filterText = "Experience Level: At most " + maxExperience;                  }                  else if (maxExperience == 5)                  {                      filterText = "Experience Level: At least " + minExperience;                  }                  else                  {                      filterText = "Experience Level: Between " + minExperience + " and " + maxExperience;                  }                    AddParameter(new ParameterDelegate<ProtoCrewMember>(filterText'                      cm => cm.experienceLevel >= minExperience && cm.experienceLevel <= maxExperience));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/TrackingStation"' false);                  activeWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 88' 40' 40)' new Vector2(0' 0));                  activeWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 48' 40' 40)' new Vector2(0' 0));                  offeredWaypointEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 88' 40' 40)' new Vector2(0' 0));                  offeredWaypointDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 48' 40' 40)' new Vector2(0' 0));                  activeOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 88' 40' 40)' new Vector2(0' 0));                  activeOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(80' 48' 40' 40)' new Vector2(0' 0));                  offeredOrbitEnabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 8' 40' 40)' new Vector2(0' 0));                  offeredOrbitDisabledSprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(40' 8' 40' 40)' new Vector2(0' 0));              }
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Start,The following statement contains a magic number: activeWaypointButton.GetComponent<RectTransform>().SetLocalPositionZ(750);
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Start,The following statement contains a magic number: offeredWaypointButton.GetComponent<RectTransform>().SetLocalPositionZ(750);
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Start,The following statement contains a magic number: activeOrbitButton.GetComponent<RectTransform>().SetLocalPositionZ(750);
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Start,The following statement contains a magic number: offeredOrbitButton.GetComponent<RectTransform>().SetLocalPositionZ(750);
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Start,The following statement contains a magic number: trackingFiltersRect.sizeDelta = new Vector2(trackingFiltersRect.sizeDelta.x + 44 * 2' trackingFiltersRect.sizeDelta.y);
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Start,The following statement contains a magic number: trackingFiltersRect.sizeDelta = new Vector2(trackingFiltersRect.sizeDelta.x + 44 * 2' trackingFiltersRect.sizeDelta.y);
Magic Number,ContractConfigurator.Util,TrackingStationUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\TrackingStationUI.cs,Start,The following statement contains a magic number: if (commNet != null)              {                  RectTransform r = commNet.GetComponent<RectTransform>();                  r.localPosition = new Vector3(r.localPosition.x + 132' r.localPosition.y);              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Awake,The following statement contains a magic number: if (uiAtlas == null)              {                  uiAtlas = GameDatabase.Instance.GetTexture("ContractConfigurator/ui/MissionControl"' false);                  itemEnabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 205' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  itemDisabled = UnityEngine.Sprite.Create(uiAtlas' new Rect(101' 153' 26' 50)' new Vector2(13' 25)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(16' 6' 6' 6));                  prestigeSprites[0] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 223' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[1] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 234' 35' 11)' new Vector2(17.5f' 5.5f));                  prestigeSprites[2] = UnityEngine.Sprite.Create(uiAtlas' new Rect(58' 245' 35' 11)' new Vector2(17.5f' 5.5f));                    // Set up item status image state array                  itemStatusStates[0] = new UIStateImage.ImageState();                  itemStatusStates[1] = new UIStateImage.ImageState();                  itemStatusStates[2] = new UIStateImage.ImageState();                  itemStatusStates[3] = new UIStateImage.ImageState();                  itemStatusStates[0].name = "Offered";                  itemStatusStates[1].name = "Active";                  itemStatusStates[2].name = "Completed";                  itemStatusStates[3].name = "Unavailable";                  itemStatusStates[0].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 1' 1)' new Vector2(0.5f' 0.5f));                  itemStatusStates[1].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 20' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[2].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 10' 10' 10)' new Vector2(5f' 5f));                  itemStatusStates[3].sprite = UnityEngine.Sprite.Create(uiAtlas' new Rect(118' 0' 10' 10)' new Vector2(5f' 5f));                    // Set up group status image state array                  groupExpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 156' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupExpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 104' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedActive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 52' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));                  groupUnexpandedInactive = UnityEngine.Sprite.Create(uiAtlas' new Rect(0' 0' 97' 52)' new Vector2(78f' 25f)' 100.0f' 0' SpriteMeshType.Tight' new Vector4(81' 6' 6' 6));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Update,The following statement contains a magic number: if (ticks == 1)              {                  maxActive = GameVariables.Instance.GetActiveContractsLimit(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.MissionControl));                    int[] widths = new int[] { 57' 92' 77' 89 };                    // Get the available/active/complete groups                  GameObject sortGroup = MissionControl.Instance.gameObject.GetChild("Sorting Group");                  GameObject toggleAvailable = sortGroup.GetChild("Toggle Available");                  GameObject toggleAllObj = sortGroup.GetChild("Toggle All");                  if (toggleAllObj == null)                  {                      toggleAllObj = UnityEngine.Object.Instantiate<GameObject>(toggleAvailable);                      toggleAllObj.name = "Toggle All";                      toggleAllObj.transform.SetParent(sortGroup.transform);                      toggleAllObj.transform.SetAsFirstSibling();                  }                    // Setup the toggle                  TMPro.TextMeshProUGUI toggleAllText = toggleAllObj.GetChild("Text").GetComponent<TMPro.TextMeshProUGUI>();                  toggleAllText.text = "All";                  Toggle toggleAll = toggleAllObj.GetComponent<Toggle>();                  toggleAll.onValueChanged.AddListener(new UnityAction<bool>(OnClickAll));                  sortGroup.GetComponent<ToggleGroup>().RegisterToggle(toggleAll);                    // Set positioning info                  RectTransform toggleAllRect = toggleAllObj.GetComponent<RectTransform>();                  RectTransform toggleAvailableRect = toggleAvailable.GetComponent<RectTransform>();                  RectTransform toggleActiveRect = MissionControl.Instance.toggleDisplayModeActive.GetComponent<RectTransform>();                  RectTransform toggleArchiveRect = MissionControl.Instance.toggleDisplayModeArchive.GetComponent<RectTransform>();                  float x = toggleAvailableRect.anchoredPosition.x;                  float y = toggleAvailableRect.anchoredPosition.y;                  float h = toggleAvailableRect.sizeDelta.y;                  toggleAllRect.anchoredPosition3D = toggleAvailable.GetComponent<RectTransform>().anchoredPosition3D;                  toggleAllRect.anchoredPosition = new Vector2(x' y);                  toggleAllRect.sizeDelta = new Vector2(widths[0]' h);                  x += widths[0];                  toggleAvailableRect.anchoredPosition = new Vector2(x' y);                  toggleAvailableRect.sizeDelta = new Vector2(widths[1]' h);                  x += widths[1];                  toggleActiveRect.anchoredPosition = new Vector2(x' y);                  toggleActiveRect.sizeDelta = new Vector2(widths[2]' h);                  x += widths[2];                  toggleArchiveRect.anchoredPosition = new Vector2(x' y);                  toggleArchiveRect.sizeDelta = new Vector2(widths[3]' h);                    RectTransform contractCountRect = MissionControl.Instance.textMCStats.gameObject.GetComponent<RectTransform>();                  contractCountRect.anchoredPosition = new Vector2(contractCountRect.anchoredPosition.x' contractCountRect.anchoredPosition.y + contractCountRect.sizeDelta.y * 3);                  contractCountRect.sizeDelta = new Vector2(contractCountRect.sizeDelta.x' contractCountRect.sizeDelta.y * 4);                    // Set Positioning of child elements                  foreach (RectTransform rect in new RectTransform[] { toggleAllRect' toggleAvailableRect' toggleActiveRect' toggleArchiveRect })                  {                      RectTransform bgRect = rect.gameObject.GetChild("Background").GetComponent<RectTransform>();                      bgRect.sizeDelta = rect.sizeDelta;                      RectTransform checkRect = bgRect.gameObject.GetChild("Checkmark").GetComponent<RectTransform>();                      checkRect.anchoredPosition = new Vector2(checkRect.anchoredPosition.x + (105 - rect.sizeDelta.x) / 2.0f' checkRect.anchoredPosition.y);                  }                    // Replace the handlers with our own                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.RemoveAllListeners();                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.AddListener(new UnityAction<bool>(OnClickAvailable));                  MissionControl.Instance.toggleDisplayModeActive.onValueChanged.AddListener(new UnityAction<bool>(OnClickActive));                  MissionControl.Instance.toggleDisplayModeArchive.onValueChanged.AddListener(new UnityAction<bool>(OnClickArchive));                  MissionControl.Instance.btnAccept.onClick.RemoveAllListeners();                  MissionControl.Instance.btnAccept.onClick.AddListener(new UnityAction(OnClickAccept));                  MissionControl.Instance.btnDecline.onClick.RemoveAllListeners();                  MissionControl.Instance.btnDecline.onClick.AddListener(new UnityAction(OnClickDecline));                  MissionControl.Instance.btnCancel.onClick.RemoveAllListeners();                  MissionControl.Instance.btnCancel.onClick.AddListener(new UnityAction(OnClickCancel));                    // Very harsh way to disable the onContractsListChanged in the stock mission control                  GameEvents.Contract.onContractsListChanged = new EventVoid("onContractsListChanged");                    // Contract state change handlers                  GameEvents.Contract.onOffered.Add(new EventData<Contract>.OnEvent(OnContractOffered));                  GameEvents.Contract.onDeclined.Add(new EventData<Contract>.OnEvent(OnContractDeclined));                  GameEvents.Contract.onFinished.Add(new EventData<Contract>.OnEvent(OnContractFinished));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Update,The following statement contains a magic number: if (ticks == 1)              {                  maxActive = GameVariables.Instance.GetActiveContractsLimit(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.MissionControl));                    int[] widths = new int[] { 57' 92' 77' 89 };                    // Get the available/active/complete groups                  GameObject sortGroup = MissionControl.Instance.gameObject.GetChild("Sorting Group");                  GameObject toggleAvailable = sortGroup.GetChild("Toggle Available");                  GameObject toggleAllObj = sortGroup.GetChild("Toggle All");                  if (toggleAllObj == null)                  {                      toggleAllObj = UnityEngine.Object.Instantiate<GameObject>(toggleAvailable);                      toggleAllObj.name = "Toggle All";                      toggleAllObj.transform.SetParent(sortGroup.transform);                      toggleAllObj.transform.SetAsFirstSibling();                  }                    // Setup the toggle                  TMPro.TextMeshProUGUI toggleAllText = toggleAllObj.GetChild("Text").GetComponent<TMPro.TextMeshProUGUI>();                  toggleAllText.text = "All";                  Toggle toggleAll = toggleAllObj.GetComponent<Toggle>();                  toggleAll.onValueChanged.AddListener(new UnityAction<bool>(OnClickAll));                  sortGroup.GetComponent<ToggleGroup>().RegisterToggle(toggleAll);                    // Set positioning info                  RectTransform toggleAllRect = toggleAllObj.GetComponent<RectTransform>();                  RectTransform toggleAvailableRect = toggleAvailable.GetComponent<RectTransform>();                  RectTransform toggleActiveRect = MissionControl.Instance.toggleDisplayModeActive.GetComponent<RectTransform>();                  RectTransform toggleArchiveRect = MissionControl.Instance.toggleDisplayModeArchive.GetComponent<RectTransform>();                  float x = toggleAvailableRect.anchoredPosition.x;                  float y = toggleAvailableRect.anchoredPosition.y;                  float h = toggleAvailableRect.sizeDelta.y;                  toggleAllRect.anchoredPosition3D = toggleAvailable.GetComponent<RectTransform>().anchoredPosition3D;                  toggleAllRect.anchoredPosition = new Vector2(x' y);                  toggleAllRect.sizeDelta = new Vector2(widths[0]' h);                  x += widths[0];                  toggleAvailableRect.anchoredPosition = new Vector2(x' y);                  toggleAvailableRect.sizeDelta = new Vector2(widths[1]' h);                  x += widths[1];                  toggleActiveRect.anchoredPosition = new Vector2(x' y);                  toggleActiveRect.sizeDelta = new Vector2(widths[2]' h);                  x += widths[2];                  toggleArchiveRect.anchoredPosition = new Vector2(x' y);                  toggleArchiveRect.sizeDelta = new Vector2(widths[3]' h);                    RectTransform contractCountRect = MissionControl.Instance.textMCStats.gameObject.GetComponent<RectTransform>();                  contractCountRect.anchoredPosition = new Vector2(contractCountRect.anchoredPosition.x' contractCountRect.anchoredPosition.y + contractCountRect.sizeDelta.y * 3);                  contractCountRect.sizeDelta = new Vector2(contractCountRect.sizeDelta.x' contractCountRect.sizeDelta.y * 4);                    // Set Positioning of child elements                  foreach (RectTransform rect in new RectTransform[] { toggleAllRect' toggleAvailableRect' toggleActiveRect' toggleArchiveRect })                  {                      RectTransform bgRect = rect.gameObject.GetChild("Background").GetComponent<RectTransform>();                      bgRect.sizeDelta = rect.sizeDelta;                      RectTransform checkRect = bgRect.gameObject.GetChild("Checkmark").GetComponent<RectTransform>();                      checkRect.anchoredPosition = new Vector2(checkRect.anchoredPosition.x + (105 - rect.sizeDelta.x) / 2.0f' checkRect.anchoredPosition.y);                  }                    // Replace the handlers with our own                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.RemoveAllListeners();                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.AddListener(new UnityAction<bool>(OnClickAvailable));                  MissionControl.Instance.toggleDisplayModeActive.onValueChanged.AddListener(new UnityAction<bool>(OnClickActive));                  MissionControl.Instance.toggleDisplayModeArchive.onValueChanged.AddListener(new UnityAction<bool>(OnClickArchive));                  MissionControl.Instance.btnAccept.onClick.RemoveAllListeners();                  MissionControl.Instance.btnAccept.onClick.AddListener(new UnityAction(OnClickAccept));                  MissionControl.Instance.btnDecline.onClick.RemoveAllListeners();                  MissionControl.Instance.btnDecline.onClick.AddListener(new UnityAction(OnClickDecline));                  MissionControl.Instance.btnCancel.onClick.RemoveAllListeners();                  MissionControl.Instance.btnCancel.onClick.AddListener(new UnityAction(OnClickCancel));                    // Very harsh way to disable the onContractsListChanged in the stock mission control                  GameEvents.Contract.onContractsListChanged = new EventVoid("onContractsListChanged");                    // Contract state change handlers                  GameEvents.Contract.onOffered.Add(new EventData<Contract>.OnEvent(OnContractOffered));                  GameEvents.Contract.onDeclined.Add(new EventData<Contract>.OnEvent(OnContractDeclined));                  GameEvents.Contract.onFinished.Add(new EventData<Contract>.OnEvent(OnContractFinished));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Update,The following statement contains a magic number: if (ticks == 1)              {                  maxActive = GameVariables.Instance.GetActiveContractsLimit(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.MissionControl));                    int[] widths = new int[] { 57' 92' 77' 89 };                    // Get the available/active/complete groups                  GameObject sortGroup = MissionControl.Instance.gameObject.GetChild("Sorting Group");                  GameObject toggleAvailable = sortGroup.GetChild("Toggle Available");                  GameObject toggleAllObj = sortGroup.GetChild("Toggle All");                  if (toggleAllObj == null)                  {                      toggleAllObj = UnityEngine.Object.Instantiate<GameObject>(toggleAvailable);                      toggleAllObj.name = "Toggle All";                      toggleAllObj.transform.SetParent(sortGroup.transform);                      toggleAllObj.transform.SetAsFirstSibling();                  }                    // Setup the toggle                  TMPro.TextMeshProUGUI toggleAllText = toggleAllObj.GetChild("Text").GetComponent<TMPro.TextMeshProUGUI>();                  toggleAllText.text = "All";                  Toggle toggleAll = toggleAllObj.GetComponent<Toggle>();                  toggleAll.onValueChanged.AddListener(new UnityAction<bool>(OnClickAll));                  sortGroup.GetComponent<ToggleGroup>().RegisterToggle(toggleAll);                    // Set positioning info                  RectTransform toggleAllRect = toggleAllObj.GetComponent<RectTransform>();                  RectTransform toggleAvailableRect = toggleAvailable.GetComponent<RectTransform>();                  RectTransform toggleActiveRect = MissionControl.Instance.toggleDisplayModeActive.GetComponent<RectTransform>();                  RectTransform toggleArchiveRect = MissionControl.Instance.toggleDisplayModeArchive.GetComponent<RectTransform>();                  float x = toggleAvailableRect.anchoredPosition.x;                  float y = toggleAvailableRect.anchoredPosition.y;                  float h = toggleAvailableRect.sizeDelta.y;                  toggleAllRect.anchoredPosition3D = toggleAvailable.GetComponent<RectTransform>().anchoredPosition3D;                  toggleAllRect.anchoredPosition = new Vector2(x' y);                  toggleAllRect.sizeDelta = new Vector2(widths[0]' h);                  x += widths[0];                  toggleAvailableRect.anchoredPosition = new Vector2(x' y);                  toggleAvailableRect.sizeDelta = new Vector2(widths[1]' h);                  x += widths[1];                  toggleActiveRect.anchoredPosition = new Vector2(x' y);                  toggleActiveRect.sizeDelta = new Vector2(widths[2]' h);                  x += widths[2];                  toggleArchiveRect.anchoredPosition = new Vector2(x' y);                  toggleArchiveRect.sizeDelta = new Vector2(widths[3]' h);                    RectTransform contractCountRect = MissionControl.Instance.textMCStats.gameObject.GetComponent<RectTransform>();                  contractCountRect.anchoredPosition = new Vector2(contractCountRect.anchoredPosition.x' contractCountRect.anchoredPosition.y + contractCountRect.sizeDelta.y * 3);                  contractCountRect.sizeDelta = new Vector2(contractCountRect.sizeDelta.x' contractCountRect.sizeDelta.y * 4);                    // Set Positioning of child elements                  foreach (RectTransform rect in new RectTransform[] { toggleAllRect' toggleAvailableRect' toggleActiveRect' toggleArchiveRect })                  {                      RectTransform bgRect = rect.gameObject.GetChild("Background").GetComponent<RectTransform>();                      bgRect.sizeDelta = rect.sizeDelta;                      RectTransform checkRect = bgRect.gameObject.GetChild("Checkmark").GetComponent<RectTransform>();                      checkRect.anchoredPosition = new Vector2(checkRect.anchoredPosition.x + (105 - rect.sizeDelta.x) / 2.0f' checkRect.anchoredPosition.y);                  }                    // Replace the handlers with our own                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.RemoveAllListeners();                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.AddListener(new UnityAction<bool>(OnClickAvailable));                  MissionControl.Instance.toggleDisplayModeActive.onValueChanged.AddListener(new UnityAction<bool>(OnClickActive));                  MissionControl.Instance.toggleDisplayModeArchive.onValueChanged.AddListener(new UnityAction<bool>(OnClickArchive));                  MissionControl.Instance.btnAccept.onClick.RemoveAllListeners();                  MissionControl.Instance.btnAccept.onClick.AddListener(new UnityAction(OnClickAccept));                  MissionControl.Instance.btnDecline.onClick.RemoveAllListeners();                  MissionControl.Instance.btnDecline.onClick.AddListener(new UnityAction(OnClickDecline));                  MissionControl.Instance.btnCancel.onClick.RemoveAllListeners();                  MissionControl.Instance.btnCancel.onClick.AddListener(new UnityAction(OnClickCancel));                    // Very harsh way to disable the onContractsListChanged in the stock mission control                  GameEvents.Contract.onContractsListChanged = new EventVoid("onContractsListChanged");                    // Contract state change handlers                  GameEvents.Contract.onOffered.Add(new EventData<Contract>.OnEvent(OnContractOffered));                  GameEvents.Contract.onDeclined.Add(new EventData<Contract>.OnEvent(OnContractDeclined));                  GameEvents.Contract.onFinished.Add(new EventData<Contract>.OnEvent(OnContractFinished));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Update,The following statement contains a magic number: if (ticks == 1)              {                  maxActive = GameVariables.Instance.GetActiveContractsLimit(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.MissionControl));                    int[] widths = new int[] { 57' 92' 77' 89 };                    // Get the available/active/complete groups                  GameObject sortGroup = MissionControl.Instance.gameObject.GetChild("Sorting Group");                  GameObject toggleAvailable = sortGroup.GetChild("Toggle Available");                  GameObject toggleAllObj = sortGroup.GetChild("Toggle All");                  if (toggleAllObj == null)                  {                      toggleAllObj = UnityEngine.Object.Instantiate<GameObject>(toggleAvailable);                      toggleAllObj.name = "Toggle All";                      toggleAllObj.transform.SetParent(sortGroup.transform);                      toggleAllObj.transform.SetAsFirstSibling();                  }                    // Setup the toggle                  TMPro.TextMeshProUGUI toggleAllText = toggleAllObj.GetChild("Text").GetComponent<TMPro.TextMeshProUGUI>();                  toggleAllText.text = "All";                  Toggle toggleAll = toggleAllObj.GetComponent<Toggle>();                  toggleAll.onValueChanged.AddListener(new UnityAction<bool>(OnClickAll));                  sortGroup.GetComponent<ToggleGroup>().RegisterToggle(toggleAll);                    // Set positioning info                  RectTransform toggleAllRect = toggleAllObj.GetComponent<RectTransform>();                  RectTransform toggleAvailableRect = toggleAvailable.GetComponent<RectTransform>();                  RectTransform toggleActiveRect = MissionControl.Instance.toggleDisplayModeActive.GetComponent<RectTransform>();                  RectTransform toggleArchiveRect = MissionControl.Instance.toggleDisplayModeArchive.GetComponent<RectTransform>();                  float x = toggleAvailableRect.anchoredPosition.x;                  float y = toggleAvailableRect.anchoredPosition.y;                  float h = toggleAvailableRect.sizeDelta.y;                  toggleAllRect.anchoredPosition3D = toggleAvailable.GetComponent<RectTransform>().anchoredPosition3D;                  toggleAllRect.anchoredPosition = new Vector2(x' y);                  toggleAllRect.sizeDelta = new Vector2(widths[0]' h);                  x += widths[0];                  toggleAvailableRect.anchoredPosition = new Vector2(x' y);                  toggleAvailableRect.sizeDelta = new Vector2(widths[1]' h);                  x += widths[1];                  toggleActiveRect.anchoredPosition = new Vector2(x' y);                  toggleActiveRect.sizeDelta = new Vector2(widths[2]' h);                  x += widths[2];                  toggleArchiveRect.anchoredPosition = new Vector2(x' y);                  toggleArchiveRect.sizeDelta = new Vector2(widths[3]' h);                    RectTransform contractCountRect = MissionControl.Instance.textMCStats.gameObject.GetComponent<RectTransform>();                  contractCountRect.anchoredPosition = new Vector2(contractCountRect.anchoredPosition.x' contractCountRect.anchoredPosition.y + contractCountRect.sizeDelta.y * 3);                  contractCountRect.sizeDelta = new Vector2(contractCountRect.sizeDelta.x' contractCountRect.sizeDelta.y * 4);                    // Set Positioning of child elements                  foreach (RectTransform rect in new RectTransform[] { toggleAllRect' toggleAvailableRect' toggleActiveRect' toggleArchiveRect })                  {                      RectTransform bgRect = rect.gameObject.GetChild("Background").GetComponent<RectTransform>();                      bgRect.sizeDelta = rect.sizeDelta;                      RectTransform checkRect = bgRect.gameObject.GetChild("Checkmark").GetComponent<RectTransform>();                      checkRect.anchoredPosition = new Vector2(checkRect.anchoredPosition.x + (105 - rect.sizeDelta.x) / 2.0f' checkRect.anchoredPosition.y);                  }                    // Replace the handlers with our own                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.RemoveAllListeners();                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.AddListener(new UnityAction<bool>(OnClickAvailable));                  MissionControl.Instance.toggleDisplayModeActive.onValueChanged.AddListener(new UnityAction<bool>(OnClickActive));                  MissionControl.Instance.toggleDisplayModeArchive.onValueChanged.AddListener(new UnityAction<bool>(OnClickArchive));                  MissionControl.Instance.btnAccept.onClick.RemoveAllListeners();                  MissionControl.Instance.btnAccept.onClick.AddListener(new UnityAction(OnClickAccept));                  MissionControl.Instance.btnDecline.onClick.RemoveAllListeners();                  MissionControl.Instance.btnDecline.onClick.AddListener(new UnityAction(OnClickDecline));                  MissionControl.Instance.btnCancel.onClick.RemoveAllListeners();                  MissionControl.Instance.btnCancel.onClick.AddListener(new UnityAction(OnClickCancel));                    // Very harsh way to disable the onContractsListChanged in the stock mission control                  GameEvents.Contract.onContractsListChanged = new EventVoid("onContractsListChanged");                    // Contract state change handlers                  GameEvents.Contract.onOffered.Add(new EventData<Contract>.OnEvent(OnContractOffered));                  GameEvents.Contract.onDeclined.Add(new EventData<Contract>.OnEvent(OnContractDeclined));                  GameEvents.Contract.onFinished.Add(new EventData<Contract>.OnEvent(OnContractFinished));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Update,The following statement contains a magic number: if (ticks == 1)              {                  maxActive = GameVariables.Instance.GetActiveContractsLimit(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.MissionControl));                    int[] widths = new int[] { 57' 92' 77' 89 };                    // Get the available/active/complete groups                  GameObject sortGroup = MissionControl.Instance.gameObject.GetChild("Sorting Group");                  GameObject toggleAvailable = sortGroup.GetChild("Toggle Available");                  GameObject toggleAllObj = sortGroup.GetChild("Toggle All");                  if (toggleAllObj == null)                  {                      toggleAllObj = UnityEngine.Object.Instantiate<GameObject>(toggleAvailable);                      toggleAllObj.name = "Toggle All";                      toggleAllObj.transform.SetParent(sortGroup.transform);                      toggleAllObj.transform.SetAsFirstSibling();                  }                    // Setup the toggle                  TMPro.TextMeshProUGUI toggleAllText = toggleAllObj.GetChild("Text").GetComponent<TMPro.TextMeshProUGUI>();                  toggleAllText.text = "All";                  Toggle toggleAll = toggleAllObj.GetComponent<Toggle>();                  toggleAll.onValueChanged.AddListener(new UnityAction<bool>(OnClickAll));                  sortGroup.GetComponent<ToggleGroup>().RegisterToggle(toggleAll);                    // Set positioning info                  RectTransform toggleAllRect = toggleAllObj.GetComponent<RectTransform>();                  RectTransform toggleAvailableRect = toggleAvailable.GetComponent<RectTransform>();                  RectTransform toggleActiveRect = MissionControl.Instance.toggleDisplayModeActive.GetComponent<RectTransform>();                  RectTransform toggleArchiveRect = MissionControl.Instance.toggleDisplayModeArchive.GetComponent<RectTransform>();                  float x = toggleAvailableRect.anchoredPosition.x;                  float y = toggleAvailableRect.anchoredPosition.y;                  float h = toggleAvailableRect.sizeDelta.y;                  toggleAllRect.anchoredPosition3D = toggleAvailable.GetComponent<RectTransform>().anchoredPosition3D;                  toggleAllRect.anchoredPosition = new Vector2(x' y);                  toggleAllRect.sizeDelta = new Vector2(widths[0]' h);                  x += widths[0];                  toggleAvailableRect.anchoredPosition = new Vector2(x' y);                  toggleAvailableRect.sizeDelta = new Vector2(widths[1]' h);                  x += widths[1];                  toggleActiveRect.anchoredPosition = new Vector2(x' y);                  toggleActiveRect.sizeDelta = new Vector2(widths[2]' h);                  x += widths[2];                  toggleArchiveRect.anchoredPosition = new Vector2(x' y);                  toggleArchiveRect.sizeDelta = new Vector2(widths[3]' h);                    RectTransform contractCountRect = MissionControl.Instance.textMCStats.gameObject.GetComponent<RectTransform>();                  contractCountRect.anchoredPosition = new Vector2(contractCountRect.anchoredPosition.x' contractCountRect.anchoredPosition.y + contractCountRect.sizeDelta.y * 3);                  contractCountRect.sizeDelta = new Vector2(contractCountRect.sizeDelta.x' contractCountRect.sizeDelta.y * 4);                    // Set Positioning of child elements                  foreach (RectTransform rect in new RectTransform[] { toggleAllRect' toggleAvailableRect' toggleActiveRect' toggleArchiveRect })                  {                      RectTransform bgRect = rect.gameObject.GetChild("Background").GetComponent<RectTransform>();                      bgRect.sizeDelta = rect.sizeDelta;                      RectTransform checkRect = bgRect.gameObject.GetChild("Checkmark").GetComponent<RectTransform>();                      checkRect.anchoredPosition = new Vector2(checkRect.anchoredPosition.x + (105 - rect.sizeDelta.x) / 2.0f' checkRect.anchoredPosition.y);                  }                    // Replace the handlers with our own                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.RemoveAllListeners();                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.AddListener(new UnityAction<bool>(OnClickAvailable));                  MissionControl.Instance.toggleDisplayModeActive.onValueChanged.AddListener(new UnityAction<bool>(OnClickActive));                  MissionControl.Instance.toggleDisplayModeArchive.onValueChanged.AddListener(new UnityAction<bool>(OnClickArchive));                  MissionControl.Instance.btnAccept.onClick.RemoveAllListeners();                  MissionControl.Instance.btnAccept.onClick.AddListener(new UnityAction(OnClickAccept));                  MissionControl.Instance.btnDecline.onClick.RemoveAllListeners();                  MissionControl.Instance.btnDecline.onClick.AddListener(new UnityAction(OnClickDecline));                  MissionControl.Instance.btnCancel.onClick.RemoveAllListeners();                  MissionControl.Instance.btnCancel.onClick.AddListener(new UnityAction(OnClickCancel));                    // Very harsh way to disable the onContractsListChanged in the stock mission control                  GameEvents.Contract.onContractsListChanged = new EventVoid("onContractsListChanged");                    // Contract state change handlers                  GameEvents.Contract.onOffered.Add(new EventData<Contract>.OnEvent(OnContractOffered));                  GameEvents.Contract.onDeclined.Add(new EventData<Contract>.OnEvent(OnContractDeclined));                  GameEvents.Contract.onFinished.Add(new EventData<Contract>.OnEvent(OnContractFinished));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Update,The following statement contains a magic number: if (ticks == 1)              {                  maxActive = GameVariables.Instance.GetActiveContractsLimit(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.MissionControl));                    int[] widths = new int[] { 57' 92' 77' 89 };                    // Get the available/active/complete groups                  GameObject sortGroup = MissionControl.Instance.gameObject.GetChild("Sorting Group");                  GameObject toggleAvailable = sortGroup.GetChild("Toggle Available");                  GameObject toggleAllObj = sortGroup.GetChild("Toggle All");                  if (toggleAllObj == null)                  {                      toggleAllObj = UnityEngine.Object.Instantiate<GameObject>(toggleAvailable);                      toggleAllObj.name = "Toggle All";                      toggleAllObj.transform.SetParent(sortGroup.transform);                      toggleAllObj.transform.SetAsFirstSibling();                  }                    // Setup the toggle                  TMPro.TextMeshProUGUI toggleAllText = toggleAllObj.GetChild("Text").GetComponent<TMPro.TextMeshProUGUI>();                  toggleAllText.text = "All";                  Toggle toggleAll = toggleAllObj.GetComponent<Toggle>();                  toggleAll.onValueChanged.AddListener(new UnityAction<bool>(OnClickAll));                  sortGroup.GetComponent<ToggleGroup>().RegisterToggle(toggleAll);                    // Set positioning info                  RectTransform toggleAllRect = toggleAllObj.GetComponent<RectTransform>();                  RectTransform toggleAvailableRect = toggleAvailable.GetComponent<RectTransform>();                  RectTransform toggleActiveRect = MissionControl.Instance.toggleDisplayModeActive.GetComponent<RectTransform>();                  RectTransform toggleArchiveRect = MissionControl.Instance.toggleDisplayModeArchive.GetComponent<RectTransform>();                  float x = toggleAvailableRect.anchoredPosition.x;                  float y = toggleAvailableRect.anchoredPosition.y;                  float h = toggleAvailableRect.sizeDelta.y;                  toggleAllRect.anchoredPosition3D = toggleAvailable.GetComponent<RectTransform>().anchoredPosition3D;                  toggleAllRect.anchoredPosition = new Vector2(x' y);                  toggleAllRect.sizeDelta = new Vector2(widths[0]' h);                  x += widths[0];                  toggleAvailableRect.anchoredPosition = new Vector2(x' y);                  toggleAvailableRect.sizeDelta = new Vector2(widths[1]' h);                  x += widths[1];                  toggleActiveRect.anchoredPosition = new Vector2(x' y);                  toggleActiveRect.sizeDelta = new Vector2(widths[2]' h);                  x += widths[2];                  toggleArchiveRect.anchoredPosition = new Vector2(x' y);                  toggleArchiveRect.sizeDelta = new Vector2(widths[3]' h);                    RectTransform contractCountRect = MissionControl.Instance.textMCStats.gameObject.GetComponent<RectTransform>();                  contractCountRect.anchoredPosition = new Vector2(contractCountRect.anchoredPosition.x' contractCountRect.anchoredPosition.y + contractCountRect.sizeDelta.y * 3);                  contractCountRect.sizeDelta = new Vector2(contractCountRect.sizeDelta.x' contractCountRect.sizeDelta.y * 4);                    // Set Positioning of child elements                  foreach (RectTransform rect in new RectTransform[] { toggleAllRect' toggleAvailableRect' toggleActiveRect' toggleArchiveRect })                  {                      RectTransform bgRect = rect.gameObject.GetChild("Background").GetComponent<RectTransform>();                      bgRect.sizeDelta = rect.sizeDelta;                      RectTransform checkRect = bgRect.gameObject.GetChild("Checkmark").GetComponent<RectTransform>();                      checkRect.anchoredPosition = new Vector2(checkRect.anchoredPosition.x + (105 - rect.sizeDelta.x) / 2.0f' checkRect.anchoredPosition.y);                  }                    // Replace the handlers with our own                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.RemoveAllListeners();                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.AddListener(new UnityAction<bool>(OnClickAvailable));                  MissionControl.Instance.toggleDisplayModeActive.onValueChanged.AddListener(new UnityAction<bool>(OnClickActive));                  MissionControl.Instance.toggleDisplayModeArchive.onValueChanged.AddListener(new UnityAction<bool>(OnClickArchive));                  MissionControl.Instance.btnAccept.onClick.RemoveAllListeners();                  MissionControl.Instance.btnAccept.onClick.AddListener(new UnityAction(OnClickAccept));                  MissionControl.Instance.btnDecline.onClick.RemoveAllListeners();                  MissionControl.Instance.btnDecline.onClick.AddListener(new UnityAction(OnClickDecline));                  MissionControl.Instance.btnCancel.onClick.RemoveAllListeners();                  MissionControl.Instance.btnCancel.onClick.AddListener(new UnityAction(OnClickCancel));                    // Very harsh way to disable the onContractsListChanged in the stock mission control                  GameEvents.Contract.onContractsListChanged = new EventVoid("onContractsListChanged");                    // Contract state change handlers                  GameEvents.Contract.onOffered.Add(new EventData<Contract>.OnEvent(OnContractOffered));                  GameEvents.Contract.onDeclined.Add(new EventData<Contract>.OnEvent(OnContractDeclined));                  GameEvents.Contract.onFinished.Add(new EventData<Contract>.OnEvent(OnContractFinished));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Update,The following statement contains a magic number: if (ticks == 1)              {                  maxActive = GameVariables.Instance.GetActiveContractsLimit(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.MissionControl));                    int[] widths = new int[] { 57' 92' 77' 89 };                    // Get the available/active/complete groups                  GameObject sortGroup = MissionControl.Instance.gameObject.GetChild("Sorting Group");                  GameObject toggleAvailable = sortGroup.GetChild("Toggle Available");                  GameObject toggleAllObj = sortGroup.GetChild("Toggle All");                  if (toggleAllObj == null)                  {                      toggleAllObj = UnityEngine.Object.Instantiate<GameObject>(toggleAvailable);                      toggleAllObj.name = "Toggle All";                      toggleAllObj.transform.SetParent(sortGroup.transform);                      toggleAllObj.transform.SetAsFirstSibling();                  }                    // Setup the toggle                  TMPro.TextMeshProUGUI toggleAllText = toggleAllObj.GetChild("Text").GetComponent<TMPro.TextMeshProUGUI>();                  toggleAllText.text = "All";                  Toggle toggleAll = toggleAllObj.GetComponent<Toggle>();                  toggleAll.onValueChanged.AddListener(new UnityAction<bool>(OnClickAll));                  sortGroup.GetComponent<ToggleGroup>().RegisterToggle(toggleAll);                    // Set positioning info                  RectTransform toggleAllRect = toggleAllObj.GetComponent<RectTransform>();                  RectTransform toggleAvailableRect = toggleAvailable.GetComponent<RectTransform>();                  RectTransform toggleActiveRect = MissionControl.Instance.toggleDisplayModeActive.GetComponent<RectTransform>();                  RectTransform toggleArchiveRect = MissionControl.Instance.toggleDisplayModeArchive.GetComponent<RectTransform>();                  float x = toggleAvailableRect.anchoredPosition.x;                  float y = toggleAvailableRect.anchoredPosition.y;                  float h = toggleAvailableRect.sizeDelta.y;                  toggleAllRect.anchoredPosition3D = toggleAvailable.GetComponent<RectTransform>().anchoredPosition3D;                  toggleAllRect.anchoredPosition = new Vector2(x' y);                  toggleAllRect.sizeDelta = new Vector2(widths[0]' h);                  x += widths[0];                  toggleAvailableRect.anchoredPosition = new Vector2(x' y);                  toggleAvailableRect.sizeDelta = new Vector2(widths[1]' h);                  x += widths[1];                  toggleActiveRect.anchoredPosition = new Vector2(x' y);                  toggleActiveRect.sizeDelta = new Vector2(widths[2]' h);                  x += widths[2];                  toggleArchiveRect.anchoredPosition = new Vector2(x' y);                  toggleArchiveRect.sizeDelta = new Vector2(widths[3]' h);                    RectTransform contractCountRect = MissionControl.Instance.textMCStats.gameObject.GetComponent<RectTransform>();                  contractCountRect.anchoredPosition = new Vector2(contractCountRect.anchoredPosition.x' contractCountRect.anchoredPosition.y + contractCountRect.sizeDelta.y * 3);                  contractCountRect.sizeDelta = new Vector2(contractCountRect.sizeDelta.x' contractCountRect.sizeDelta.y * 4);                    // Set Positioning of child elements                  foreach (RectTransform rect in new RectTransform[] { toggleAllRect' toggleAvailableRect' toggleActiveRect' toggleArchiveRect })                  {                      RectTransform bgRect = rect.gameObject.GetChild("Background").GetComponent<RectTransform>();                      bgRect.sizeDelta = rect.sizeDelta;                      RectTransform checkRect = bgRect.gameObject.GetChild("Checkmark").GetComponent<RectTransform>();                      checkRect.anchoredPosition = new Vector2(checkRect.anchoredPosition.x + (105 - rect.sizeDelta.x) / 2.0f' checkRect.anchoredPosition.y);                  }                    // Replace the handlers with our own                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.RemoveAllListeners();                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.AddListener(new UnityAction<bool>(OnClickAvailable));                  MissionControl.Instance.toggleDisplayModeActive.onValueChanged.AddListener(new UnityAction<bool>(OnClickActive));                  MissionControl.Instance.toggleDisplayModeArchive.onValueChanged.AddListener(new UnityAction<bool>(OnClickArchive));                  MissionControl.Instance.btnAccept.onClick.RemoveAllListeners();                  MissionControl.Instance.btnAccept.onClick.AddListener(new UnityAction(OnClickAccept));                  MissionControl.Instance.btnDecline.onClick.RemoveAllListeners();                  MissionControl.Instance.btnDecline.onClick.AddListener(new UnityAction(OnClickDecline));                  MissionControl.Instance.btnCancel.onClick.RemoveAllListeners();                  MissionControl.Instance.btnCancel.onClick.AddListener(new UnityAction(OnClickCancel));                    // Very harsh way to disable the onContractsListChanged in the stock mission control                  GameEvents.Contract.onContractsListChanged = new EventVoid("onContractsListChanged");                    // Contract state change handlers                  GameEvents.Contract.onOffered.Add(new EventData<Contract>.OnEvent(OnContractOffered));                  GameEvents.Contract.onDeclined.Add(new EventData<Contract>.OnEvent(OnContractDeclined));                  GameEvents.Contract.onFinished.Add(new EventData<Contract>.OnEvent(OnContractFinished));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Update,The following statement contains a magic number: if (ticks == 1)              {                  maxActive = GameVariables.Instance.GetActiveContractsLimit(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.MissionControl));                    int[] widths = new int[] { 57' 92' 77' 89 };                    // Get the available/active/complete groups                  GameObject sortGroup = MissionControl.Instance.gameObject.GetChild("Sorting Group");                  GameObject toggleAvailable = sortGroup.GetChild("Toggle Available");                  GameObject toggleAllObj = sortGroup.GetChild("Toggle All");                  if (toggleAllObj == null)                  {                      toggleAllObj = UnityEngine.Object.Instantiate<GameObject>(toggleAvailable);                      toggleAllObj.name = "Toggle All";                      toggleAllObj.transform.SetParent(sortGroup.transform);                      toggleAllObj.transform.SetAsFirstSibling();                  }                    // Setup the toggle                  TMPro.TextMeshProUGUI toggleAllText = toggleAllObj.GetChild("Text").GetComponent<TMPro.TextMeshProUGUI>();                  toggleAllText.text = "All";                  Toggle toggleAll = toggleAllObj.GetComponent<Toggle>();                  toggleAll.onValueChanged.AddListener(new UnityAction<bool>(OnClickAll));                  sortGroup.GetComponent<ToggleGroup>().RegisterToggle(toggleAll);                    // Set positioning info                  RectTransform toggleAllRect = toggleAllObj.GetComponent<RectTransform>();                  RectTransform toggleAvailableRect = toggleAvailable.GetComponent<RectTransform>();                  RectTransform toggleActiveRect = MissionControl.Instance.toggleDisplayModeActive.GetComponent<RectTransform>();                  RectTransform toggleArchiveRect = MissionControl.Instance.toggleDisplayModeArchive.GetComponent<RectTransform>();                  float x = toggleAvailableRect.anchoredPosition.x;                  float y = toggleAvailableRect.anchoredPosition.y;                  float h = toggleAvailableRect.sizeDelta.y;                  toggleAllRect.anchoredPosition3D = toggleAvailable.GetComponent<RectTransform>().anchoredPosition3D;                  toggleAllRect.anchoredPosition = new Vector2(x' y);                  toggleAllRect.sizeDelta = new Vector2(widths[0]' h);                  x += widths[0];                  toggleAvailableRect.anchoredPosition = new Vector2(x' y);                  toggleAvailableRect.sizeDelta = new Vector2(widths[1]' h);                  x += widths[1];                  toggleActiveRect.anchoredPosition = new Vector2(x' y);                  toggleActiveRect.sizeDelta = new Vector2(widths[2]' h);                  x += widths[2];                  toggleArchiveRect.anchoredPosition = new Vector2(x' y);                  toggleArchiveRect.sizeDelta = new Vector2(widths[3]' h);                    RectTransform contractCountRect = MissionControl.Instance.textMCStats.gameObject.GetComponent<RectTransform>();                  contractCountRect.anchoredPosition = new Vector2(contractCountRect.anchoredPosition.x' contractCountRect.anchoredPosition.y + contractCountRect.sizeDelta.y * 3);                  contractCountRect.sizeDelta = new Vector2(contractCountRect.sizeDelta.x' contractCountRect.sizeDelta.y * 4);                    // Set Positioning of child elements                  foreach (RectTransform rect in new RectTransform[] { toggleAllRect' toggleAvailableRect' toggleActiveRect' toggleArchiveRect })                  {                      RectTransform bgRect = rect.gameObject.GetChild("Background").GetComponent<RectTransform>();                      bgRect.sizeDelta = rect.sizeDelta;                      RectTransform checkRect = bgRect.gameObject.GetChild("Checkmark").GetComponent<RectTransform>();                      checkRect.anchoredPosition = new Vector2(checkRect.anchoredPosition.x + (105 - rect.sizeDelta.x) / 2.0f' checkRect.anchoredPosition.y);                  }                    // Replace the handlers with our own                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.RemoveAllListeners();                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.AddListener(new UnityAction<bool>(OnClickAvailable));                  MissionControl.Instance.toggleDisplayModeActive.onValueChanged.AddListener(new UnityAction<bool>(OnClickActive));                  MissionControl.Instance.toggleDisplayModeArchive.onValueChanged.AddListener(new UnityAction<bool>(OnClickArchive));                  MissionControl.Instance.btnAccept.onClick.RemoveAllListeners();                  MissionControl.Instance.btnAccept.onClick.AddListener(new UnityAction(OnClickAccept));                  MissionControl.Instance.btnDecline.onClick.RemoveAllListeners();                  MissionControl.Instance.btnDecline.onClick.AddListener(new UnityAction(OnClickDecline));                  MissionControl.Instance.btnCancel.onClick.RemoveAllListeners();                  MissionControl.Instance.btnCancel.onClick.AddListener(new UnityAction(OnClickCancel));                    // Very harsh way to disable the onContractsListChanged in the stock mission control                  GameEvents.Contract.onContractsListChanged = new EventVoid("onContractsListChanged");                    // Contract state change handlers                  GameEvents.Contract.onOffered.Add(new EventData<Contract>.OnEvent(OnContractOffered));                  GameEvents.Contract.onDeclined.Add(new EventData<Contract>.OnEvent(OnContractDeclined));                  GameEvents.Contract.onFinished.Add(new EventData<Contract>.OnEvent(OnContractFinished));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Update,The following statement contains a magic number: if (ticks == 1)              {                  maxActive = GameVariables.Instance.GetActiveContractsLimit(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.MissionControl));                    int[] widths = new int[] { 57' 92' 77' 89 };                    // Get the available/active/complete groups                  GameObject sortGroup = MissionControl.Instance.gameObject.GetChild("Sorting Group");                  GameObject toggleAvailable = sortGroup.GetChild("Toggle Available");                  GameObject toggleAllObj = sortGroup.GetChild("Toggle All");                  if (toggleAllObj == null)                  {                      toggleAllObj = UnityEngine.Object.Instantiate<GameObject>(toggleAvailable);                      toggleAllObj.name = "Toggle All";                      toggleAllObj.transform.SetParent(sortGroup.transform);                      toggleAllObj.transform.SetAsFirstSibling();                  }                    // Setup the toggle                  TMPro.TextMeshProUGUI toggleAllText = toggleAllObj.GetChild("Text").GetComponent<TMPro.TextMeshProUGUI>();                  toggleAllText.text = "All";                  Toggle toggleAll = toggleAllObj.GetComponent<Toggle>();                  toggleAll.onValueChanged.AddListener(new UnityAction<bool>(OnClickAll));                  sortGroup.GetComponent<ToggleGroup>().RegisterToggle(toggleAll);                    // Set positioning info                  RectTransform toggleAllRect = toggleAllObj.GetComponent<RectTransform>();                  RectTransform toggleAvailableRect = toggleAvailable.GetComponent<RectTransform>();                  RectTransform toggleActiveRect = MissionControl.Instance.toggleDisplayModeActive.GetComponent<RectTransform>();                  RectTransform toggleArchiveRect = MissionControl.Instance.toggleDisplayModeArchive.GetComponent<RectTransform>();                  float x = toggleAvailableRect.anchoredPosition.x;                  float y = toggleAvailableRect.anchoredPosition.y;                  float h = toggleAvailableRect.sizeDelta.y;                  toggleAllRect.anchoredPosition3D = toggleAvailable.GetComponent<RectTransform>().anchoredPosition3D;                  toggleAllRect.anchoredPosition = new Vector2(x' y);                  toggleAllRect.sizeDelta = new Vector2(widths[0]' h);                  x += widths[0];                  toggleAvailableRect.anchoredPosition = new Vector2(x' y);                  toggleAvailableRect.sizeDelta = new Vector2(widths[1]' h);                  x += widths[1];                  toggleActiveRect.anchoredPosition = new Vector2(x' y);                  toggleActiveRect.sizeDelta = new Vector2(widths[2]' h);                  x += widths[2];                  toggleArchiveRect.anchoredPosition = new Vector2(x' y);                  toggleArchiveRect.sizeDelta = new Vector2(widths[3]' h);                    RectTransform contractCountRect = MissionControl.Instance.textMCStats.gameObject.GetComponent<RectTransform>();                  contractCountRect.anchoredPosition = new Vector2(contractCountRect.anchoredPosition.x' contractCountRect.anchoredPosition.y + contractCountRect.sizeDelta.y * 3);                  contractCountRect.sizeDelta = new Vector2(contractCountRect.sizeDelta.x' contractCountRect.sizeDelta.y * 4);                    // Set Positioning of child elements                  foreach (RectTransform rect in new RectTransform[] { toggleAllRect' toggleAvailableRect' toggleActiveRect' toggleArchiveRect })                  {                      RectTransform bgRect = rect.gameObject.GetChild("Background").GetComponent<RectTransform>();                      bgRect.sizeDelta = rect.sizeDelta;                      RectTransform checkRect = bgRect.gameObject.GetChild("Checkmark").GetComponent<RectTransform>();                      checkRect.anchoredPosition = new Vector2(checkRect.anchoredPosition.x + (105 - rect.sizeDelta.x) / 2.0f' checkRect.anchoredPosition.y);                  }                    // Replace the handlers with our own                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.RemoveAllListeners();                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.AddListener(new UnityAction<bool>(OnClickAvailable));                  MissionControl.Instance.toggleDisplayModeActive.onValueChanged.AddListener(new UnityAction<bool>(OnClickActive));                  MissionControl.Instance.toggleDisplayModeArchive.onValueChanged.AddListener(new UnityAction<bool>(OnClickArchive));                  MissionControl.Instance.btnAccept.onClick.RemoveAllListeners();                  MissionControl.Instance.btnAccept.onClick.AddListener(new UnityAction(OnClickAccept));                  MissionControl.Instance.btnDecline.onClick.RemoveAllListeners();                  MissionControl.Instance.btnDecline.onClick.AddListener(new UnityAction(OnClickDecline));                  MissionControl.Instance.btnCancel.onClick.RemoveAllListeners();                  MissionControl.Instance.btnCancel.onClick.AddListener(new UnityAction(OnClickCancel));                    // Very harsh way to disable the onContractsListChanged in the stock mission control                  GameEvents.Contract.onContractsListChanged = new EventVoid("onContractsListChanged");                    // Contract state change handlers                  GameEvents.Contract.onOffered.Add(new EventData<Contract>.OnEvent(OnContractOffered));                  GameEvents.Contract.onDeclined.Add(new EventData<Contract>.OnEvent(OnContractDeclined));                  GameEvents.Contract.onFinished.Add(new EventData<Contract>.OnEvent(OnContractFinished));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Update,The following statement contains a magic number: if (ticks == 1)              {                  maxActive = GameVariables.Instance.GetActiveContractsLimit(ScenarioUpgradeableFacilities.GetFacilityLevel(SpaceCenterFacility.MissionControl));                    int[] widths = new int[] { 57' 92' 77' 89 };                    // Get the available/active/complete groups                  GameObject sortGroup = MissionControl.Instance.gameObject.GetChild("Sorting Group");                  GameObject toggleAvailable = sortGroup.GetChild("Toggle Available");                  GameObject toggleAllObj = sortGroup.GetChild("Toggle All");                  if (toggleAllObj == null)                  {                      toggleAllObj = UnityEngine.Object.Instantiate<GameObject>(toggleAvailable);                      toggleAllObj.name = "Toggle All";                      toggleAllObj.transform.SetParent(sortGroup.transform);                      toggleAllObj.transform.SetAsFirstSibling();                  }                    // Setup the toggle                  TMPro.TextMeshProUGUI toggleAllText = toggleAllObj.GetChild("Text").GetComponent<TMPro.TextMeshProUGUI>();                  toggleAllText.text = "All";                  Toggle toggleAll = toggleAllObj.GetComponent<Toggle>();                  toggleAll.onValueChanged.AddListener(new UnityAction<bool>(OnClickAll));                  sortGroup.GetComponent<ToggleGroup>().RegisterToggle(toggleAll);                    // Set positioning info                  RectTransform toggleAllRect = toggleAllObj.GetComponent<RectTransform>();                  RectTransform toggleAvailableRect = toggleAvailable.GetComponent<RectTransform>();                  RectTransform toggleActiveRect = MissionControl.Instance.toggleDisplayModeActive.GetComponent<RectTransform>();                  RectTransform toggleArchiveRect = MissionControl.Instance.toggleDisplayModeArchive.GetComponent<RectTransform>();                  float x = toggleAvailableRect.anchoredPosition.x;                  float y = toggleAvailableRect.anchoredPosition.y;                  float h = toggleAvailableRect.sizeDelta.y;                  toggleAllRect.anchoredPosition3D = toggleAvailable.GetComponent<RectTransform>().anchoredPosition3D;                  toggleAllRect.anchoredPosition = new Vector2(x' y);                  toggleAllRect.sizeDelta = new Vector2(widths[0]' h);                  x += widths[0];                  toggleAvailableRect.anchoredPosition = new Vector2(x' y);                  toggleAvailableRect.sizeDelta = new Vector2(widths[1]' h);                  x += widths[1];                  toggleActiveRect.anchoredPosition = new Vector2(x' y);                  toggleActiveRect.sizeDelta = new Vector2(widths[2]' h);                  x += widths[2];                  toggleArchiveRect.anchoredPosition = new Vector2(x' y);                  toggleArchiveRect.sizeDelta = new Vector2(widths[3]' h);                    RectTransform contractCountRect = MissionControl.Instance.textMCStats.gameObject.GetComponent<RectTransform>();                  contractCountRect.anchoredPosition = new Vector2(contractCountRect.anchoredPosition.x' contractCountRect.anchoredPosition.y + contractCountRect.sizeDelta.y * 3);                  contractCountRect.sizeDelta = new Vector2(contractCountRect.sizeDelta.x' contractCountRect.sizeDelta.y * 4);                    // Set Positioning of child elements                  foreach (RectTransform rect in new RectTransform[] { toggleAllRect' toggleAvailableRect' toggleActiveRect' toggleArchiveRect })                  {                      RectTransform bgRect = rect.gameObject.GetChild("Background").GetComponent<RectTransform>();                      bgRect.sizeDelta = rect.sizeDelta;                      RectTransform checkRect = bgRect.gameObject.GetChild("Checkmark").GetComponent<RectTransform>();                      checkRect.anchoredPosition = new Vector2(checkRect.anchoredPosition.x + (105 - rect.sizeDelta.x) / 2.0f' checkRect.anchoredPosition.y);                  }                    // Replace the handlers with our own                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.RemoveAllListeners();                  MissionControl.Instance.toggleDisplayModeAvailable.onValueChanged.AddListener(new UnityAction<bool>(OnClickAvailable));                  MissionControl.Instance.toggleDisplayModeActive.onValueChanged.AddListener(new UnityAction<bool>(OnClickActive));                  MissionControl.Instance.toggleDisplayModeArchive.onValueChanged.AddListener(new UnityAction<bool>(OnClickArchive));                  MissionControl.Instance.btnAccept.onClick.RemoveAllListeners();                  MissionControl.Instance.btnAccept.onClick.AddListener(new UnityAction(OnClickAccept));                  MissionControl.Instance.btnDecline.onClick.RemoveAllListeners();                  MissionControl.Instance.btnDecline.onClick.AddListener(new UnityAction(OnClickDecline));                  MissionControl.Instance.btnCancel.onClick.RemoveAllListeners();                  MissionControl.Instance.btnCancel.onClick.AddListener(new UnityAction(OnClickCancel));                    // Very harsh way to disable the onContractsListChanged in the stock mission control                  GameEvents.Contract.onContractsListChanged = new EventVoid("onContractsListChanged");                    // Contract state change handlers                  GameEvents.Contract.onOffered.Add(new EventData<Contract>.OnEvent(OnContractOffered));                  GameEvents.Contract.onDeclined.Add(new EventData<Contract>.OnEvent(OnContractDeclined));                  GameEvents.Contract.onFinished.Add(new EventData<Contract>.OnEvent(OnContractFinished));              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Update,The following statement contains a magic number: if (ticks == 1 || ticks == 2)              {                  // Set to the last view                  MissionControl.Instance.toggleDisplayModeAvailable.isOn = false;                  switch (HighLogic.CurrentGame.Parameters.CustomParams<ContractConfiguratorParameters>().lastMCButton)                  {                      case ContractConfiguratorParameters.MissionControlButton.All:                          GameObject sortGroup = MissionControl.Instance.gameObject.GetChild("Sorting Group");                          GameObject toggleAllObj = sortGroup.GetChild("Toggle All");                          Toggle toggleAll = toggleAllObj.GetComponent<Toggle>();                          toggleAll.isOn = true;                          OnClickAll(true);                          break;                      case ContractConfiguratorParameters.MissionControlButton.Available:                          MissionControl.Instance.toggleDisplayModeAvailable.isOn = true;                          MissionControl.Instance.OnClickAvailable(true);                          OnClickAvailable(true);                          break;                      case ContractConfiguratorParameters.MissionControlButton.Active:                          MissionControl.Instance.toggleDisplayModeActive.isOn = true;                          MissionControl.Instance.OnClickActive(true);                          OnClickActive(true);                          break;                      case ContractConfiguratorParameters.MissionControlButton.Archive:                          MissionControl.Instance.toggleDisplayModeArchive.isOn = true;                          MissionControl.Instance.OnClickArchive(true);                          OnClickArchive(true);                          break;                  }              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,CreateGroupItem,The following statement contains a magic number: textRect.anchoredPosition = new Vector2(textRect.anchoredPosition.x' textRect.anchoredPosition.y + 6);
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetupGroupItem,The following statement contains a magic number: if (transform != null)              {                  availableTextObject = transform.gameObject;              }              else              {                  availableTextObject = UnityEngine.Object.Instantiate<GameObject>(groupContainer.mcListItem.title.gameObject);                  availableTextObject.name = "AvailableText";                  availableTextObject.transform.SetParent(groupContainer.mcListItem.title.transform.parent);                  RectTransform availableTextRect = availableTextObject.GetComponent<RectTransform>();                  availableTextRect.anchoredPosition3D = textRect.anchoredPosition3D;                  availableTextRect.sizeDelta = new Vector2(textRect.sizeDelta.x + 4' textRect.sizeDelta.y - 4);              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetupGroupItem,The following statement contains a magic number: if (transform != null)              {                  availableTextObject = transform.gameObject;              }              else              {                  availableTextObject = UnityEngine.Object.Instantiate<GameObject>(groupContainer.mcListItem.title.gameObject);                  availableTextObject.name = "AvailableText";                  availableTextObject.transform.SetParent(groupContainer.mcListItem.title.transform.parent);                  RectTransform availableTextRect = availableTextObject.GetComponent<RectTransform>();                  availableTextRect.anchoredPosition3D = textRect.anchoredPosition3D;                  availableTextRect.sizeDelta = new Vector2(textRect.sizeDelta.x + 4' textRect.sizeDelta.y - 4);              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetupGroupItem,The following statement contains a magic number: availableText.fontSize = groupContainer.mcListItem.title.fontSize - 3;
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,CreateContractItem,The following statement contains a magic number: textRect.anchoredPosition = new Vector2(textRect.anchoredPosition.x - 60' textRect.anchoredPosition.y);
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,CreateContractItem,The following statement contains a magic number: textRect.sizeDelta = new Vector2(textRect.sizeDelta.x + 60 - 20' textRect.sizeDelta.y);
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,CreateContractItem,The following statement contains a magic number: textRect.sizeDelta = new Vector2(textRect.sizeDelta.x + 60 - 20' textRect.sizeDelta.y);
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,CreateContractItem,The following statement contains a magic number: mcListItem.difficulty.states[2].sprite = prestigeSprites[2];
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,CreateContractItem,The following statement contains a magic number: mcListItem.difficulty.states[2].sprite = prestigeSprites[2];
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,CreateContractItem,The following statement contains a magic number: diffRect.sizeDelta = new Vector2(35' 11);
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,CreateContractItem,The following statement contains a magic number: diffRect.sizeDelta = new Vector2(35' 11);
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetIndent,The following statement contains a magic number: spacerLayout.minWidth = indent * 12;
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetIndent,The following statement contains a magic number: le.preferredWidth = 316 - indent * 12;
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetIndent,The following statement contains a magic number: le.preferredWidth = 316 - indent * 12;
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetContractTitle,The following statement contains a magic number: if (displayModeAll)              {                  float preferredHeight = mcListItem.title.GetPreferredValues(mcListItem.title.text' 316 - cc.indent * 12 - 64' TMPro.TMP_Math.FLOAT_MAX).y;                  bool twoLines = preferredHeight > 17;                  mcListItem.GetComponent<LayoutElement>().preferredHeight = twoLines ? 38 : 25;                  if (cc.statusRect != null)                  {                      cc.statusRect.anchoredPosition = new Vector2(16.0f' 0f);                  }              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetContractTitle,The following statement contains a magic number: if (displayModeAll)              {                  float preferredHeight = mcListItem.title.GetPreferredValues(mcListItem.title.text' 316 - cc.indent * 12 - 64' TMPro.TMP_Math.FLOAT_MAX).y;                  bool twoLines = preferredHeight > 17;                  mcListItem.GetComponent<LayoutElement>().preferredHeight = twoLines ? 38 : 25;                  if (cc.statusRect != null)                  {                      cc.statusRect.anchoredPosition = new Vector2(16.0f' 0f);                  }              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetContractTitle,The following statement contains a magic number: if (displayModeAll)              {                  float preferredHeight = mcListItem.title.GetPreferredValues(mcListItem.title.text' 316 - cc.indent * 12 - 64' TMPro.TMP_Math.FLOAT_MAX).y;                  bool twoLines = preferredHeight > 17;                  mcListItem.GetComponent<LayoutElement>().preferredHeight = twoLines ? 38 : 25;                  if (cc.statusRect != null)                  {                      cc.statusRect.anchoredPosition = new Vector2(16.0f' 0f);                  }              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetContractTitle,The following statement contains a magic number: if (displayModeAll)              {                  float preferredHeight = mcListItem.title.GetPreferredValues(mcListItem.title.text' 316 - cc.indent * 12 - 64' TMPro.TMP_Math.FLOAT_MAX).y;                  bool twoLines = preferredHeight > 17;                  mcListItem.GetComponent<LayoutElement>().preferredHeight = twoLines ? 38 : 25;                  if (cc.statusRect != null)                  {                      cc.statusRect.anchoredPosition = new Vector2(16.0f' 0f);                  }              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetContractTitle,The following statement contains a magic number: if (displayModeAll)              {                  float preferredHeight = mcListItem.title.GetPreferredValues(mcListItem.title.text' 316 - cc.indent * 12 - 64' TMPro.TMP_Math.FLOAT_MAX).y;                  bool twoLines = preferredHeight > 17;                  mcListItem.GetComponent<LayoutElement>().preferredHeight = twoLines ? 38 : 25;                  if (cc.statusRect != null)                  {                      cc.statusRect.anchoredPosition = new Vector2(16.0f' 0f);                  }              }
Magic Number,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,SetContractTitle,The following statement contains a magic number: if (displayModeAll)              {                  float preferredHeight = mcListItem.title.GetPreferredValues(mcListItem.title.text' 316 - cc.indent * 12 - 64' TMPro.TMP_Math.FLOAT_MAX).y;                  bool twoLines = preferredHeight > 17;                  mcListItem.GetComponent<LayoutElement>().preferredHeight = twoLines ? 38 : 25;                  if (cc.statusRect != null)                  {                      cc.statusRect.anchoredPosition = new Vector2(16.0f' 0f);                  }              }
Magic Number,ContractConfigurator.Util,Science,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Science.cs,GetBiome,The following statement contains a magic number: string sitAndBiome = m.Groups[2].Value;
Magic Number,ContractConfigurator.Util,Science,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Science.cs,GetBiome,The following statement contains a magic number: while (!string.IsNullOrEmpty(sitAndBiome))              {                  try                  {                      Enum.Parse(typeof(ExperimentSituations)' sitAndBiome' true);                      break;                  }                  catch                  {                      m = Regex.Match(sitAndBiome' @"(.*)([A-Z][\w&]*)$$");                      sitAndBiome = m.Groups[1].Value;                      biome = m.Groups[2].Value + biome;                  }              }
Magic Number,ContractConfigurator.Util,TextureUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\TextureUtil.cs,LoadTexture,The following statement contains a magic number: try              {                  string path = "GameData/" + url;                  // PNG loading                  if (File.Exists(path) && path.Contains(".png"))                  {                      texture = new Texture2D(2' 2' TextureFormat.RGBA32' false);                      texture.LoadImage(File.ReadAllBytes(path.Replace('/'' Path.DirectorySeparatorChar)));                  }                  // DDS loading                  else if (File.Exists(path) && path.Contains(".dds"))                  {                      BinaryReader br = new BinaryReader(new MemoryStream(File.ReadAllBytes(path)));                        if (br.ReadUInt32() != DDSValues.uintMagic)                      {                          throw new Exception("Format issue with DDS texture '" + path + "'!");                      }                      DDSHeader ddsHeader = new DDSHeader(br);                      if (ddsHeader.ddspf.dwFourCC == DDSValues.uintDX10)                      {                          DDSHeaderDX10 ddsHeaderDx10 = new DDSHeaderDX10(br);                      }                        TextureFormat texFormat;                      if (ddsHeader.ddspf.dwFourCC == DDSValues.uintDXT1)                      {                          texFormat = UnityEngine.TextureFormat.DXT1;                      }                      else if (ddsHeader.ddspf.dwFourCC == DDSValues.uintDXT3)                      {                          texFormat = UnityEngine.TextureFormat.DXT1 | UnityEngine.TextureFormat.Alpha8;                      }                      else if (ddsHeader.ddspf.dwFourCC == DDSValues.uintDXT5)                      {                          texFormat = UnityEngine.TextureFormat.DXT5;                      }                      else                      {                          throw new Exception("Unhandled DDS format!");                      }                        texture = new Texture2D((int)ddsHeader.dwWidth' (int)ddsHeader.dwHeight' texFormat' false);                      texture.LoadRawTextureData(br.ReadBytes((int)(br.BaseStream.Length - br.BaseStream.Position)));                      texture.Apply(false' true);                  }                  else                  {                      throw new Exception("Couldn't find file for image  '" + url + "'");                  }              }              catch (Exception e)              {                  LoggingUtil.LogError(typeof(TextureUtil)' "Couldn't create texture for '" + url + "'!");                  LoggingUtil.LogException(e);                  texture = null;              }
Magic Number,ContractConfigurator.Util,TextureUtil,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\TextureUtil.cs,LoadTexture,The following statement contains a magic number: try              {                  string path = "GameData/" + url;                  // PNG loading                  if (File.Exists(path) && path.Contains(".png"))                  {                      texture = new Texture2D(2' 2' TextureFormat.RGBA32' false);                      texture.LoadImage(File.ReadAllBytes(path.Replace('/'' Path.DirectorySeparatorChar)));                  }                  // DDS loading                  else if (File.Exists(path) && path.Contains(".dds"))                  {                      BinaryReader br = new BinaryReader(new MemoryStream(File.ReadAllBytes(path)));                        if (br.ReadUInt32() != DDSValues.uintMagic)                      {                          throw new Exception("Format issue with DDS texture '" + path + "'!");                      }                      DDSHeader ddsHeader = new DDSHeader(br);                      if (ddsHeader.ddspf.dwFourCC == DDSValues.uintDX10)                      {                          DDSHeaderDX10 ddsHeaderDx10 = new DDSHeaderDX10(br);                      }                        TextureFormat texFormat;                      if (ddsHeader.ddspf.dwFourCC == DDSValues.uintDXT1)                      {                          texFormat = UnityEngine.TextureFormat.DXT1;                      }                      else if (ddsHeader.ddspf.dwFourCC == DDSValues.uintDXT3)                      {                          texFormat = UnityEngine.TextureFormat.DXT1 | UnityEngine.TextureFormat.Alpha8;                      }                      else if (ddsHeader.ddspf.dwFourCC == DDSValues.uintDXT5)                      {                          texFormat = UnityEngine.TextureFormat.DXT5;                      }                      else                      {                          throw new Exception("Unhandled DDS format!");                      }                        texture = new Texture2D((int)ddsHeader.dwWidth' (int)ddsHeader.dwHeight' texFormat' false);                      texture.LoadRawTextureData(br.ReadBytes((int)(br.BaseStream.Length - br.BaseStream.Position)));                      texture.Apply(false' true);                  }                  else                  {                      throw new Exception("Couldn't find file for image  '" + url + "'");                  }              }              catch (Exception e)              {                  LoggingUtil.LogError(typeof(TextureUtil)' "Couldn't create texture for '" + url + "'!");                  LoggingUtil.LogException(e);                  texture = null;              }
Magic Number,ContractConfigurator.Util,Version,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Version.cs,ParseVersion,The following statement contains a magic number: int minor = m.Groups[3].Value.Equals("") ? 0 : Convert.ToInt32(m.Groups[3].Value);
Magic Number,ContractConfigurator.Util,Version,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Version.cs,ParseVersion,The following statement contains a magic number: int minor = m.Groups[3].Value.Equals("") ? 0 : Convert.ToInt32(m.Groups[3].Value);
Magic Number,ContractConfigurator.Util,Version,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Version.cs,ParseVersion,The following statement contains a magic number: int build = m.Groups[5].Value.Equals("") ? 0 : Convert.ToInt32(m.Groups[5].Value);
Magic Number,ContractConfigurator.Util,Version,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Version.cs,ParseVersion,The following statement contains a magic number: int build = m.Groups[5].Value.Equals("") ? 0 : Convert.ToInt32(m.Groups[5].Value);
Magic Number,ContractConfigurator.Util,Version,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Version.cs,ParseVersion,The following statement contains a magic number: int revision = m.Groups[7].Value.Equals("") ? 0 : Convert.ToInt32(m.Groups[7].Value);
Magic Number,ContractConfigurator.Util,Version,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\Version.cs,ParseVersion,The following statement contains a magic number: int revision = m.Groups[7].Value.Equals("") ? 0 : Convert.ToInt32(m.Groups[7].Value);
Magic Number,ContractConfigurator.CutScene,MoveEVAKerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\Action\MoveEVAKerbal.cs,Update,The following statement contains a magic number: if (currentDistance > lastDist + 0.005 || currentDistance < 0.5)              {                  if (NextWaypoint())                  {                      currentDistance = float.MaxValue;                  }                  else                  {                      done = true;                  }              }
Magic Number,ContractConfigurator.CutScene,MoveEVAKerbal,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\Action\MoveEVAKerbal.cs,Update,The following statement contains a magic number: if (currentDistance > lastDist + 0.005 || currentDistance < 0.5)              {                  if (NextWaypoint())                  {                      currentDistance = float.MaxValue;                  }                  else                  {                      done = true;                  }              }
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,SetupStyles,The following statement contains a magic number: toggleCenteredStyle.padding = new RectOffset(4' 4' 4' 4);
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,SetupStyles,The following statement contains a magic number: toggleCenteredStyle.padding = new RectOffset(4' 4' 4' 4);
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,SetupStyles,The following statement contains a magic number: toggleCenteredStyle.padding = new RectOffset(4' 4' 4' 4);
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,SetupStyles,The following statement contains a magic number: toggleCenteredStyle.padding = new RectOffset(4' 4' 4' 4);
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,OnGUI,The following statement contains a magic number: if (showGUI)              {                  if (!stylesSetup)                  {                      SetupStyles();                  }                    GUI.skin = HighLogic.Skin;                    var ainfoV = Attribute.GetCustomAttribute(typeof(CutSceneConfigurator).Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                    // Main window                  windowPos = GUILayout.Window(                      typeof(CutSceneConfigurator).FullName.GetHashCode()'                      windowPos'                      WindowGUI'                      "Cut Scene Configurator " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(windowPos.xMax - 18' windowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                  {                      showGUI = false;                  }                    // Show the delete confirmation dialog                  if (deleteCurrent)                  {                      rmWindowPos = GUILayout.Window(                          typeof(CutSceneConfigurator).FullName.GetHashCode() + 1'                          rmWindowPos'                          DeleteGUI'                          "Delete Cut Scene Action");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                      {                          deleteCurrent = false;                      }                  }                    GUI.depth = 0;                  DrawToolTip();              }
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,OnGUI,The following statement contains a magic number: if (showGUI)              {                  if (!stylesSetup)                  {                      SetupStyles();                  }                    GUI.skin = HighLogic.Skin;                    var ainfoV = Attribute.GetCustomAttribute(typeof(CutSceneConfigurator).Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                    // Main window                  windowPos = GUILayout.Window(                      typeof(CutSceneConfigurator).FullName.GetHashCode()'                      windowPos'                      WindowGUI'                      "Cut Scene Configurator " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(windowPos.xMax - 18' windowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                  {                      showGUI = false;                  }                    // Show the delete confirmation dialog                  if (deleteCurrent)                  {                      rmWindowPos = GUILayout.Window(                          typeof(CutSceneConfigurator).FullName.GetHashCode() + 1'                          rmWindowPos'                          DeleteGUI'                          "Delete Cut Scene Action");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                      {                          deleteCurrent = false;                      }                  }                    GUI.depth = 0;                  DrawToolTip();              }
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,OnGUI,The following statement contains a magic number: if (showGUI)              {                  if (!stylesSetup)                  {                      SetupStyles();                  }                    GUI.skin = HighLogic.Skin;                    var ainfoV = Attribute.GetCustomAttribute(typeof(CutSceneConfigurator).Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                    // Main window                  windowPos = GUILayout.Window(                      typeof(CutSceneConfigurator).FullName.GetHashCode()'                      windowPos'                      WindowGUI'                      "Cut Scene Configurator " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(windowPos.xMax - 18' windowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                  {                      showGUI = false;                  }                    // Show the delete confirmation dialog                  if (deleteCurrent)                  {                      rmWindowPos = GUILayout.Window(                          typeof(CutSceneConfigurator).FullName.GetHashCode() + 1'                          rmWindowPos'                          DeleteGUI'                          "Delete Cut Scene Action");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                      {                          deleteCurrent = false;                      }                  }                    GUI.depth = 0;                  DrawToolTip();              }
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,OnGUI,The following statement contains a magic number: if (showGUI)              {                  if (!stylesSetup)                  {                      SetupStyles();                  }                    GUI.skin = HighLogic.Skin;                    var ainfoV = Attribute.GetCustomAttribute(typeof(CutSceneConfigurator).Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                    // Main window                  windowPos = GUILayout.Window(                      typeof(CutSceneConfigurator).FullName.GetHashCode()'                      windowPos'                      WindowGUI'                      "Cut Scene Configurator " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(windowPos.xMax - 18' windowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                  {                      showGUI = false;                  }                    // Show the delete confirmation dialog                  if (deleteCurrent)                  {                      rmWindowPos = GUILayout.Window(                          typeof(CutSceneConfigurator).FullName.GetHashCode() + 1'                          rmWindowPos'                          DeleteGUI'                          "Delete Cut Scene Action");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                      {                          deleteCurrent = false;                      }                  }                    GUI.depth = 0;                  DrawToolTip();              }
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,OnGUI,The following statement contains a magic number: if (showGUI)              {                  if (!stylesSetup)                  {                      SetupStyles();                  }                    GUI.skin = HighLogic.Skin;                    var ainfoV = Attribute.GetCustomAttribute(typeof(CutSceneConfigurator).Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                    // Main window                  windowPos = GUILayout.Window(                      typeof(CutSceneConfigurator).FullName.GetHashCode()'                      windowPos'                      WindowGUI'                      "Cut Scene Configurator " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(windowPos.xMax - 18' windowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                  {                      showGUI = false;                  }                    // Show the delete confirmation dialog                  if (deleteCurrent)                  {                      rmWindowPos = GUILayout.Window(                          typeof(CutSceneConfigurator).FullName.GetHashCode() + 1'                          rmWindowPos'                          DeleteGUI'                          "Delete Cut Scene Action");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                      {                          deleteCurrent = false;                      }                  }                    GUI.depth = 0;                  DrawToolTip();              }
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,OnGUI,The following statement contains a magic number: if (showGUI)              {                  if (!stylesSetup)                  {                      SetupStyles();                  }                    GUI.skin = HighLogic.Skin;                    var ainfoV = Attribute.GetCustomAttribute(typeof(CutSceneConfigurator).Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                    // Main window                  windowPos = GUILayout.Window(                      typeof(CutSceneConfigurator).FullName.GetHashCode()'                      windowPos'                      WindowGUI'                      "Cut Scene Configurator " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(windowPos.xMax - 18' windowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                  {                      showGUI = false;                  }                    // Show the delete confirmation dialog                  if (deleteCurrent)                  {                      rmWindowPos = GUILayout.Window(                          typeof(CutSceneConfigurator).FullName.GetHashCode() + 1'                          rmWindowPos'                          DeleteGUI'                          "Delete Cut Scene Action");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                      {                          deleteCurrent = false;                      }                  }                    GUI.depth = 0;                  DrawToolTip();              }
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,OnGUI,The following statement contains a magic number: if (showGUI)              {                  if (!stylesSetup)                  {                      SetupStyles();                  }                    GUI.skin = HighLogic.Skin;                    var ainfoV = Attribute.GetCustomAttribute(typeof(CutSceneConfigurator).Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                    // Main window                  windowPos = GUILayout.Window(                      typeof(CutSceneConfigurator).FullName.GetHashCode()'                      windowPos'                      WindowGUI'                      "Cut Scene Configurator " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(windowPos.xMax - 18' windowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                  {                      showGUI = false;                  }                    // Show the delete confirmation dialog                  if (deleteCurrent)                  {                      rmWindowPos = GUILayout.Window(                          typeof(CutSceneConfigurator).FullName.GetHashCode() + 1'                          rmWindowPos'                          DeleteGUI'                          "Delete Cut Scene Action");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                      {                          deleteCurrent = false;                      }                  }                    GUI.depth = 0;                  DrawToolTip();              }
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,OnGUI,The following statement contains a magic number: if (showGUI)              {                  if (!stylesSetup)                  {                      SetupStyles();                  }                    GUI.skin = HighLogic.Skin;                    var ainfoV = Attribute.GetCustomAttribute(typeof(CutSceneConfigurator).Assembly' typeof(AssemblyInformationalVersionAttribute)) as AssemblyInformationalVersionAttribute;                    // Main window                  windowPos = GUILayout.Window(                      typeof(CutSceneConfigurator).FullName.GetHashCode()'                      windowPos'                      WindowGUI'                      "Cut Scene Configurator " + ainfoV.InformationalVersion);                    // Add the close icon                  if (GUI.Button(new Rect(windowPos.xMax - 18' windowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                  {                      showGUI = false;                  }                    // Show the delete confirmation dialog                  if (deleteCurrent)                  {                      rmWindowPos = GUILayout.Window(                          typeof(CutSceneConfigurator).FullName.GetHashCode() + 1'                          rmWindowPos'                          DeleteGUI'                          "Delete Cut Scene Action");                        // Add the close icon                      if (GUI.Button(new Rect(rmWindowPos.xMax - 18' rmWindowPos.yMin + 2' 16' 16)' closeIcon' GUI.skin.label))                      {                          deleteCurrent = false;                      }                  }                    GUI.depth = 0;                  DrawToolTip();              }
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,WindowGUI,The following statement contains a magic number: const int LIST_WIDTH = 500;
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,WindowGUI,The following statement contains a magic number: if (currentMode == Modes.Camera)              {                  listCount = currentCutScene.cameras.Count;                  foreach (CutSceneCamera camera in currentCutScene.cameras)                  {                      if (currentCamera == camera)                      {                          currentIndex = i;                      }                      i++;                        GUILayout.BeginHorizontal();                      if (GUILayout.Toggle(camera == currentCamera' camera.FullDescription()' toggleStyle' GUILayout.Width(LIST_WIDTH - 36)))                      {                          currentCamera = camera;                          currentItem = camera;                      }                      GUILayout.EndHorizontal();                  }              }              // Display the listing of actors              else if (currentMode == Modes.Actor)              {                  listCount = currentCutScene.actors.Count;                  foreach (Actor actor in currentCutScene.actors)                  {                      if (currentActor == actor)                      {                          currentIndex = i;                      }                      i++;                        GUILayout.BeginHorizontal();                      if (GUILayout.Toggle(actor == currentActor' actor.FullDescription()' toggleStyle' GUILayout.Width(LIST_WIDTH - 36)))                      {                          currentActor = actor;                          currentItem = actor;                      }                      GUILayout.EndHorizontal();                  }              }              // Display the listing of cut scene actions              else if (currentMode == Modes.Action)              {                  listCount = currentCutScene.actions.Count;                  foreach (CutSceneAction action in currentCutScene.actions)                  {                      if (currentAction == action)                      {                          currentIndex = i;                      }                      i++;                        GUILayout.BeginHorizontal();                      if (GUILayout.Toggle(action == currentAction' action.FullDescription()' toggleStyle' GUILayout.Width(LIST_WIDTH - 72)))                      {                          currentAction = action;                          currentItem = action;                      }                      GUILayout.BeginVertical();                      GUILayout.Space(3);                      action.async = GUILayout.Toggle(action.async' new GUIContent(""' "If checked' moves to the next action before waiting for this one to complete."));                      GUILayout.EndVertical();                      GUILayout.EndHorizontal();                  }              }
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,WindowGUI,The following statement contains a magic number: if (currentMode == Modes.Camera)              {                  listCount = currentCutScene.cameras.Count;                  foreach (CutSceneCamera camera in currentCutScene.cameras)                  {                      if (currentCamera == camera)                      {                          currentIndex = i;                      }                      i++;                        GUILayout.BeginHorizontal();                      if (GUILayout.Toggle(camera == currentCamera' camera.FullDescription()' toggleStyle' GUILayout.Width(LIST_WIDTH - 36)))                      {                          currentCamera = camera;                          currentItem = camera;                      }                      GUILayout.EndHorizontal();                  }              }              // Display the listing of actors              else if (currentMode == Modes.Actor)              {                  listCount = currentCutScene.actors.Count;                  foreach (Actor actor in currentCutScene.actors)                  {                      if (currentActor == actor)                      {                          currentIndex = i;                      }                      i++;                        GUILayout.BeginHorizontal();                      if (GUILayout.Toggle(actor == currentActor' actor.FullDescription()' toggleStyle' GUILayout.Width(LIST_WIDTH - 36)))                      {                          currentActor = actor;                          currentItem = actor;                      }                      GUILayout.EndHorizontal();                  }              }              // Display the listing of cut scene actions              else if (currentMode == Modes.Action)              {                  listCount = currentCutScene.actions.Count;                  foreach (CutSceneAction action in currentCutScene.actions)                  {                      if (currentAction == action)                      {                          currentIndex = i;                      }                      i++;                        GUILayout.BeginHorizontal();                      if (GUILayout.Toggle(action == currentAction' action.FullDescription()' toggleStyle' GUILayout.Width(LIST_WIDTH - 72)))                      {                          currentAction = action;                          currentItem = action;                      }                      GUILayout.BeginVertical();                      GUILayout.Space(3);                      action.async = GUILayout.Toggle(action.async' new GUIContent(""' "If checked' moves to the next action before waiting for this one to complete."));                      GUILayout.EndVertical();                      GUILayout.EndHorizontal();                  }              }
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,WindowGUI,The following statement contains a magic number: if (currentMode == Modes.Camera)              {                  listCount = currentCutScene.cameras.Count;                  foreach (CutSceneCamera camera in currentCutScene.cameras)                  {                      if (currentCamera == camera)                      {                          currentIndex = i;                      }                      i++;                        GUILayout.BeginHorizontal();                      if (GUILayout.Toggle(camera == currentCamera' camera.FullDescription()' toggleStyle' GUILayout.Width(LIST_WIDTH - 36)))                      {                          currentCamera = camera;                          currentItem = camera;                      }                      GUILayout.EndHorizontal();                  }              }              // Display the listing of actors              else if (currentMode == Modes.Actor)              {                  listCount = currentCutScene.actors.Count;                  foreach (Actor actor in currentCutScene.actors)                  {                      if (currentActor == actor)                      {                          currentIndex = i;                      }                      i++;                        GUILayout.BeginHorizontal();                      if (GUILayout.Toggle(actor == currentActor' actor.FullDescription()' toggleStyle' GUILayout.Width(LIST_WIDTH - 36)))                      {                          currentActor = actor;                          currentItem = actor;                      }                      GUILayout.EndHorizontal();                  }              }              // Display the listing of cut scene actions              else if (currentMode == Modes.Action)              {                  listCount = currentCutScene.actions.Count;                  foreach (CutSceneAction action in currentCutScene.actions)                  {                      if (currentAction == action)                      {                          currentIndex = i;                      }                      i++;                        GUILayout.BeginHorizontal();                      if (GUILayout.Toggle(action == currentAction' action.FullDescription()' toggleStyle' GUILayout.Width(LIST_WIDTH - 72)))                      {                          currentAction = action;                          currentItem = action;                      }                      GUILayout.BeginVertical();                      GUILayout.Space(3);                      action.async = GUILayout.Toggle(action.async' new GUIContent(""' "If checked' moves to the next action before waiting for this one to complete."));                      GUILayout.EndVertical();                      GUILayout.EndHorizontal();                  }              }
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,WindowGUI,The following statement contains a magic number: if (currentMode == Modes.Camera)              {                  listCount = currentCutScene.cameras.Count;                  foreach (CutSceneCamera camera in currentCutScene.cameras)                  {                      if (currentCamera == camera)                      {                          currentIndex = i;                      }                      i++;                        GUILayout.BeginHorizontal();                      if (GUILayout.Toggle(camera == currentCamera' camera.FullDescription()' toggleStyle' GUILayout.Width(LIST_WIDTH - 36)))                      {                          currentCamera = camera;                          currentItem = camera;                      }                      GUILayout.EndHorizontal();                  }              }              // Display the listing of actors              else if (currentMode == Modes.Actor)              {                  listCount = currentCutScene.actors.Count;                  foreach (Actor actor in currentCutScene.actors)                  {                      if (currentActor == actor)                      {                          currentIndex = i;                      }                      i++;                        GUILayout.BeginHorizontal();                      if (GUILayout.Toggle(actor == currentActor' actor.FullDescription()' toggleStyle' GUILayout.Width(LIST_WIDTH - 36)))                      {                          currentActor = actor;                          currentItem = actor;                      }                      GUILayout.EndHorizontal();                  }              }              // Display the listing of cut scene actions              else if (currentMode == Modes.Action)              {                  listCount = currentCutScene.actions.Count;                  foreach (CutSceneAction action in currentCutScene.actions)                  {                      if (currentAction == action)                      {                          currentIndex = i;                      }                      i++;                        GUILayout.BeginHorizontal();                      if (GUILayout.Toggle(action == currentAction' action.FullDescription()' toggleStyle' GUILayout.Width(LIST_WIDTH - 72)))                      {                          currentAction = action;                          currentItem = action;                      }                      GUILayout.BeginVertical();                      GUILayout.Space(3);                      action.async = GUILayout.Toggle(action.async' new GUIContent(""' "If checked' moves to the next action before waiting for this one to complete."));                      GUILayout.EndVertical();                      GUILayout.EndHorizontal();                  }              }
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,DrawDetailPane,The following statement contains a magic number: const int DETAIL_WIDTH = 500;
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,DrawDetailPane,The following statement contains a magic number: detailScrollPosition = GUILayout.BeginScrollView(detailScrollPosition' false' true' GUILayout.Height(LIST_HEIGHT + 64 ));
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,DrawToolTip,The following statement contains a magic number: if (!string.IsNullOrEmpty(toolTip))              {                  if (Time.fixedTime > toolTipTime + 0.10)                  {                      GUIContent tip = new GUIContent(toolTip);                        Vector2 textDimensions = tipStyle.CalcSize(tip);                      if (textDimensions.x > 320)                      {                          textDimensions.x = 320;                          textDimensions.y = tipStyle.CalcHeight(tip' 320);                      }                      tooltipPosition.width = textDimensions.x;                      tooltipPosition.height = textDimensions.y;                      tooltipPosition.x = Event.current.mousePosition.x + tooltipPosition.width > Screen.width ?                          Screen.width - tooltipPosition.width : Event.current.mousePosition.x;                      tooltipPosition.y = Event.current.mousePosition.y + 20;                        GUI.Label(tooltipPosition' tip' tipStyle);                  }              }
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,DrawToolTip,The following statement contains a magic number: if (!string.IsNullOrEmpty(toolTip))              {                  if (Time.fixedTime > toolTipTime + 0.10)                  {                      GUIContent tip = new GUIContent(toolTip);                        Vector2 textDimensions = tipStyle.CalcSize(tip);                      if (textDimensions.x > 320)                      {                          textDimensions.x = 320;                          textDimensions.y = tipStyle.CalcHeight(tip' 320);                      }                      tooltipPosition.width = textDimensions.x;                      tooltipPosition.height = textDimensions.y;                      tooltipPosition.x = Event.current.mousePosition.x + tooltipPosition.width > Screen.width ?                          Screen.width - tooltipPosition.width : Event.current.mousePosition.x;                      tooltipPosition.y = Event.current.mousePosition.y + 20;                        GUI.Label(tooltipPosition' tip' tipStyle);                  }              }
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,DrawToolTip,The following statement contains a magic number: if (!string.IsNullOrEmpty(toolTip))              {                  if (Time.fixedTime > toolTipTime + 0.10)                  {                      GUIContent tip = new GUIContent(toolTip);                        Vector2 textDimensions = tipStyle.CalcSize(tip);                      if (textDimensions.x > 320)                      {                          textDimensions.x = 320;                          textDimensions.y = tipStyle.CalcHeight(tip' 320);                      }                      tooltipPosition.width = textDimensions.x;                      tooltipPosition.height = textDimensions.y;                      tooltipPosition.x = Event.current.mousePosition.x + tooltipPosition.width > Screen.width ?                          Screen.width - tooltipPosition.width : Event.current.mousePosition.x;                      tooltipPosition.y = Event.current.mousePosition.y + 20;                        GUI.Label(tooltipPosition' tip' tipStyle);                  }              }
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,DrawToolTip,The following statement contains a magic number: if (!string.IsNullOrEmpty(toolTip))              {                  if (Time.fixedTime > toolTipTime + 0.10)                  {                      GUIContent tip = new GUIContent(toolTip);                        Vector2 textDimensions = tipStyle.CalcSize(tip);                      if (textDimensions.x > 320)                      {                          textDimensions.x = 320;                          textDimensions.y = tipStyle.CalcHeight(tip' 320);                      }                      tooltipPosition.width = textDimensions.x;                      tooltipPosition.height = textDimensions.y;                      tooltipPosition.x = Event.current.mousePosition.x + tooltipPosition.width > Screen.width ?                          Screen.width - tooltipPosition.width : Event.current.mousePosition.x;                      tooltipPosition.y = Event.current.mousePosition.y + 20;                        GUI.Label(tooltipPosition' tip' tipStyle);                  }              }
Magic Number,CutSceneConfigurator,CutSceneConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\CutScene\CutSceneConfigurator.cs,DrawToolTip,The following statement contains a magic number: if (!string.IsNullOrEmpty(toolTip))              {                  if (Time.fixedTime > toolTipTime + 0.10)                  {                      GUIContent tip = new GUIContent(toolTip);                        Vector2 textDimensions = tipStyle.CalcSize(tip);                      if (textDimensions.x > 320)                      {                          textDimensions.x = 320;                          textDimensions.y = tipStyle.CalcHeight(tip' 320);                      }                      tooltipPosition.width = textDimensions.x;                      tooltipPosition.height = textDimensions.y;                      tooltipPosition.x = Event.current.mousePosition.x + tooltipPosition.width > Screen.width ?                          Screen.width - tooltipPosition.width : Event.current.mousePosition.x;                      tooltipPosition.y = Event.current.mousePosition.y + 20;                        GUI.Label(tooltipPosition' tip' tipStyle);                  }              }
Missing Default,ContractConfigurator.Behaviour,ChangeVesselOwnershipFactory,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\BehaviourFactory\ChangeVesselOwnershipFactory.cs,Load,The following switch statement is missing a default case: switch (x)                          {                              case TriggeredBehaviour.LegacyState.ContractAccepted:                                  onState = TriggeredBehaviour.State.CONTRACT_ACCEPTED;                                  break;                              case TriggeredBehaviour.LegacyState.ContractCompletedFailure:                                  onState = TriggeredBehaviour.State.CONTRACT_FAILED;                                  break;                              case TriggeredBehaviour.LegacyState.ContractCompletedSuccess:                                  onState = TriggeredBehaviour.State.CONTRACT_SUCCESS;                                  break;                              case TriggeredBehaviour.LegacyState.ParameterCompleted:                                  onState = TriggeredBehaviour.State.PARAMETER_COMPLETED;                                  break;                          }
Missing Default,ContractConfigurator.Behaviour,TriggeredBehaviour,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\TriggeredBehaviour.cs,OnLoad,The following switch statement is missing a default case: switch (state)                      {                          case LegacyState.ContractAccepted:                              onState = State.CONTRACT_ACCEPTED;                              break;                          case LegacyState.ContractCompletedFailure:                              onState = State.CONTRACT_FAILED;                              break;                          case LegacyState.ContractCompletedSuccess:                              onState = State.CONTRACT_SUCCESS;                              break;                          case LegacyState.ParameterCompleted:                              onState = State.PARAMETER_COMPLETED;                              break;                      }
Missing Default,ContractConfigurator.Behaviour,InstructorSection,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Behaviour\DialogBox.cs,OnGUI,The following switch statement is missing a default case: switch (animation.Value)                          {                              case Animation.idle:                                  animState = instructor.anim_idle;                                  break;                              case Animation.idle_lookAround:                                  animState = instructor.anim_idle_lookAround;                                  break;                              case Animation.idle_sigh:                                  animState = instructor.anim_idle_sigh;                                  break;                              case Animation.idle_wonder:                                  animState = instructor.anim_idle_wonder;                                  break;                              case Animation.true_thumbUp:                                  animState = instructor.anim_true_thumbUp;                                  break;                              case Animation.true_thumbsUp:                                  animState = instructor.anim_true_thumbsUp;                                  break;                              case Animation.true_nodA:                                  animState = instructor.anim_true_nodA;                                  break;                              case Animation.true_nodB:                                  animState = instructor.anim_true_nodB;                                  break;                              case Animation.true_smileA:                                  animState = instructor.anim_true_smileA;                                  break;                              case Animation.true_smileB:                                  animState = instructor.anim_true_smileB;                                  break;                              case Animation.false_disappointed:                                  animState = instructor.anim_false_disappointed;                                  break;                              case Animation.false_disagreeA:                                  animState = instructor.anim_false_disagreeA;                                  break;                              case Animation.false_disagreeB:                                  animState = instructor.anim_false_disagreeB;                                  break;                              case Animation.false_disagreeC:                                  animState = instructor.anim_false_disagreeC;                                  break;                              case Animation.false_sadA:                                  animState = instructor.anim_false_sadA;                                  break;                          }
Missing Default,ContractConfigurator,DebugWindow,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Util\DebugWindow.cs,CurrencyGUIContent,The following switch statement is missing a default case: switch (currency)              {                  case Currency.Funds:                      text += "b4d455";                      break;                  case Currency.Reputation:                      text += "e0d503";                      break;                  case Currency.Science:                      text += "6dcff6";                      break;              }
Missing Default,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,Update,The following switch statement is missing a default case: switch (reloadStep)                  {                      case ReloadStep.GAME_DATABASE:                          lastMessage = ScreenMessages.PostScreenMessage("Reloading game database..."' Time.deltaTime'                              ScreenMessageStyle.UPPER_CENTER);                          break;                      case ReloadStep.MODULE_MANAGER:                          lastMessage = ScreenMessages.PostScreenMessage("Reloading module manager..."' Time.deltaTime'                              ScreenMessageStyle.UPPER_CENTER);                          break;                      case ReloadStep.CLEAR_CONFIG:                          lastMessage = ScreenMessages.PostScreenMessage("Clearing previously loaded contract configuration..."' Time.deltaTime'                              ScreenMessageStyle.UPPER_CENTER);                          break;                      case ReloadStep.LOAD_CONFIG:                          lastMessage = ScreenMessages.PostScreenMessage("Loading contract configuration (" + attemptedContracts + "/" + totalContracts + ")..."' Time.deltaTime'                              ScreenMessageStyle.UPPER_CENTER);                          break;                  }
Missing Default,ContractConfigurator,ContractConfigurator,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ContractConfigurator.cs,ContractLimit,The following switch statement is missing a default case: switch (prestige)              {                  case Contract.ContractPrestige.Trivial:                      return Math.Max(2' (int)Math.Round((rep + rep * level / 3) * mult / 200 + 6 + level));                  case Contract.ContractPrestige.Significant:                      return Math.Max(1' (int)Math.Round((rep + rep * level / 3) * mult / 250 + 4 + level));                  case Contract.ContractPrestige.Exceptional:                      return Math.Max(0' (int)Math.Round((rep + rep * level / 3) * mult / (1000/3.0) + 2 + level));              }
Missing Default,ContractConfigurator.ExpressionParser,WaypointGeneratorParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Behaviours\WaypointGeneratorParser.cs,GetIdentifiers,The following switch statement is missing a default case: switch(type)              {                  case "WAYPOINT":                      yield return "latitude";                      yield return "longitude";                      break;                  case "RANDOM_WAYPOINT":                  case "RANDOM_WAYPOINT_NEAR":                      yield return "count";                      yield return "waterAllowed";                      if (type == "RANDOM_WAYPOINT")                      {                          yield return "forceEquatorial";                      }                      else                      {                          yield return "nearIndex";                          yield return "minDistance";                          yield return "maxDistance";                      }                      break;                  case "PQS_CITY":                      yield return "pqsCity";                      yield return "pqsOffset";                      break;              }
Missing Default,ContractConfigurator.ExpressionParser,CelestialBodyParser,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\Parsers\Classes\CelestialBodyParser.cs,CheckTree,The following switch statement is missing a default case: switch (pi)              {                  case ProgressItem.REACHED:                      return tree.IsReached;                  case ProgressItem.ORBITED:                      return tree.orbit.IsComplete;                  case ProgressItem.LANDED:                      return tree.landing.IsComplete;                  case ProgressItem.ESCAPED:                      return tree.escape.IsComplete;                  case ProgressItem.RETURNED_FROM:                      return tree.returnFromFlyby.IsComplete;              }
Missing Default,ContractConfigurator.ExpressionParser,ExpressionParser<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\ExpressionParser\ExpressionParser.cs,ParseToken,The following switch statement is missing a default case: switch (c)              {                  case '(':                      expression = expression.Substring(1);                      return new Token(TokenType.START_BRACKET);                  case ')':                      expression = expression.Substring(1);                      return new Token(TokenType.END_BRACKET);                  case ''':                      expression = expression.Substring(1);                      return new Token(TokenType.COMMA);                  case '?':                      expression = expression.Substring(1);                      return new Token(TokenType.TERNARY_START);                  case ':':                      expression = expression.Substring(1);                      return new Token(TokenType.TERNARY_END);                  case '[':                      expression = expression.Substring(1);                      return new Token(TokenType.LIST_START);                  case ']':                      expression = expression.Substring(1);                      return new Token(TokenType.LIST_END);                  case '"':                      expression = expression.Substring(1);                      return new Token(TokenType.QUOTE);                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '0':                      return ParseNumericConstant();                  case '|':                  case '&':                  case '+':                  case '-':                  case '!':                  case '<':                  case '>':                  case '=':                  case '*':                  case '/':                      return ParseOperator();                  case '@':                      return ParseSpecialIdentifier();                  case '$':                      return ParseDataStoreIdentifier();                  case '.':                      return ParseMethod();              }
Missing Default,ContractConfigurator.Parameters,MatchExtension,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\ParameterDelegate.cs,Prefix,The following switch statement is missing a default case: switch (type)              {                  case ParameterDelegateMatchType.FILTER:                      return "With ";                  case ParameterDelegateMatchType.VALIDATE:                      return "With ";                  case ParameterDelegateMatchType.VALIDATE_ALL:                      return "All have ";                  case ParameterDelegateMatchType.NONE:                      return "None have ";              }
Missing Default,ContractConfigurator.Parameters,ParameterDelegate<T>,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\ParameterDelegate.cs,CheckChildConditions,The following switch statement is missing a default case: switch (paramDelegate.matchType)                      {                          case ParameterDelegateMatchType.FILTER:                              count = newCount;                              break;                          case ParameterDelegateMatchType.VALIDATE:                              conditionMet &= newCount > 0;                              break;                          case ParameterDelegateMatchType.VALIDATE_ALL:                              conditionMet &= count == newCount;                              break;                          case ParameterDelegateMatchType.NONE:                              conditionMet &= newCount == 0;                              break;                      }
Missing Default,ContractConfigurator.Parameters,VesselHasVisited,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\Parameter\VesselParameter\VesselHasVisited.cs,VesselHasVisited,The following switch statement is missing a default case: switch (entryType)                  {                      case FlightLog.EntryType.BoardVessel:                          this.title = "Board a vessel on ";                          break;                      case FlightLog.EntryType.Die:                          this.title = "Die on ";                          break;                      case FlightLog.EntryType.Escape:                          this.title += "an escape from";                          break;                      case FlightLog.EntryType.ExitVessel:                          this.title = "Exit a vessel on ";                          break;                      case FlightLog.EntryType.Flight:                          this.title += "a flight on ";                          break;                      case FlightLog.EntryType.Flyby:                          this.title += "a flyby of ";                          break;                      case FlightLog.EntryType.Land:                          this.title += "a landing on ";                          break;                      case FlightLog.EntryType.Launch:                          this.title += "a launch from ";                          break;                      case FlightLog.EntryType.Orbit:                          this.title += "an orbit of ";                          break;                      case FlightLog.EntryType.PlantFlag:                          this.title = "Plant a flag on ";                          break;                      case FlightLog.EntryType.Recover:                          this.title += " a recovery on ";                          break;                      case FlightLog.EntryType.Spawn:                          this.title = "Spawn on ";                          break;                      case FlightLog.EntryType.Suborbit:                          this.title += "a sub-orbital trajectory of ";                          break;                  }
Missing Default,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,Update,The following switch statement is missing a default case: switch (HighLogic.CurrentGame.Parameters.CustomParams<ContractConfiguratorParameters>().lastMCButton)                  {                      case ContractConfiguratorParameters.MissionControlButton.All:                          GameObject sortGroup = MissionControl.Instance.gameObject.GetChild("Sorting Group");                          GameObject toggleAllObj = sortGroup.GetChild("Toggle All");                          Toggle toggleAll = toggleAllObj.GetComponent<Toggle>();                          toggleAll.isOn = true;                          OnClickAll(true);                          break;                      case ContractConfiguratorParameters.MissionControlButton.Available:                          MissionControl.Instance.toggleDisplayModeAvailable.isOn = true;                          MissionControl.Instance.OnClickAvailable(true);                          OnClickAvailable(true);                          break;                      case ContractConfiguratorParameters.MissionControlButton.Active:                          MissionControl.Instance.toggleDisplayModeActive.isOn = true;                          MissionControl.Instance.OnClickActive(true);                          OnClickActive(true);                          break;                      case ContractConfiguratorParameters.MissionControlButton.Archive:                          MissionControl.Instance.toggleDisplayModeArchive.isOn = true;                          MissionControl.Instance.OnClickArchive(true);                          OnClickArchive(true);                          break;                  }
Missing Default,ContractConfigurator.Util,MissionControlUI,C:\repos\jrossignol_ContractConfigurator\source\ContractConfigurator\MissionControlUI.cs,UpdateContractCounts,The following switch statement is missing a default case: switch (c.Prestige)                      {                          case Contract.ContractPrestige.Trivial:                              trivialCount++;                              break;                          case Contract.ContractPrestige.Significant:                              significantCount++;                              break;                          case Contract.ContractPrestige.Exceptional:                              exceptionalCount++;                              break;                      }
