Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,XSPWorkerRequest,Cyclomatic complexity of the method is 8
Complex Method,Mono.WebServer.XSP,SecurityConfiguration,C:\repos\robashton_zombify\src\Zombify.Server\SecurityConfiguration.cs,LoadPkcs12File,Cyclomatic complexity of the method is 8
Long Parameter List,Mono.WebServer,XSPWebSource,C:\repos\robashton_zombify\src\Zombify.Server\XSPWebSource.cs,XSPWebSource,The method has 8 parameters. Parameters: address' port' securityProtocol' cert' keyCB' allowClientCert' requireClientCert' single_app
Long Parameter List,Mono.WebServer,XSPApplicationHost,C:\repos\robashton_zombify\src\Zombify.Server\XSPApplicationHost.cs,ProcessRequest,The method has 13 parameters. Parameters: reqId' localEPAddr' localEPPort' remoteEPAdds' remoteEPPort' verb' path' queryString' protocol' inputBuffer' redirect' socket' ssl
Long Parameter List,Mono.WebServer,XSPApplicationHost,C:\repos\robashton_zombify\src\Zombify.Server\XSPApplicationHost.cs,ProcessRequest,The method has 11 parameters. Parameters: reqId' localEP' remoteEP' verb' path' queryString' protocol' inputBuffer' redirect' socket' ssl
Long Parameter List,Mono.WebServer,XSPWorker,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorker.cs,XSPWorker,The method has 9 parameters. Parameters: client' localEP' server' secureConnection' SecurityProtocol' cert' keyCB' allowClientCert' requireClientCert
Long Parameter List,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,XSPWorkerRequest,The method has 12 parameters. Parameters: requestId' requestBroker' appHost' localEP' remoteEP' verb' path' queryString' protocol' inputBuffer' socket' secure
Long Parameter List,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,setsockopt,The method has 5 parameters. Parameters: handle' level' opt' val' len
Long Statement,Zombify.Server,TestListener,C:\repos\robashton_zombify\src\Zombify.Server\TestListener.cs,HandleRequest,The length of the statement  "            var deserializeMethod = typeof(JToken).GetMethods().Where(x=> x.Name == "ToObject" && x.GetParameters().Length == 0).Single(); " is 126.
Complex Conditional,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,ReadEntityBody,The conditional expression  "verb == "GET" || verb == "HEAD" || size == 0 || buffer == null"  is complex.
Empty Catch Block,Mono.WebServer,XSPRequestBroker,C:\repos\robashton_zombify\src\Zombify.Server\XSPRequestBroker.cs,Close,The method has an empty catch block.
Empty Catch Block,Mono.WebServer,XSPWorker,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorker.cs,HandleInitialException,The method has an empty catch block.
Empty Catch Block,Mono.WebServer,XSPWorker,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorker.cs,HandleInitialException,The method has an empty catch block.
Empty Catch Block,Mono.WebServer,XSPWorker,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorker.cs,RunInternal,The method has an empty catch block.
Empty Catch Block,Mono.WebServer,XSPWorker,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorker.cs,Close,The method has an empty catch block.
Empty Catch Block,Mono.WebServer,XSPWorker,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorker.cs,Close,The method has an empty catch block.
Empty Catch Block,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,CheckOS,The method has an empty catch block.
Empty Catch Block,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,GetPreloadedEntityBody,The method has an empty catch block.
Magic Number,Zombify.Server,Server,C:\repos\robashton_zombify\src\Zombify.Server\Main.cs,Run,The following statement contains a magic number: if (server.Start(true' null' 500) == false)                return 2;
Magic Number,Zombify.Server,Server,C:\repos\robashton_zombify\src\Zombify.Server\Main.cs,Run,The following statement contains a magic number: if (server.Start(true' null' 500) == false)                return 2;
Magic Number,Zombify.Server,Server,C:\repos\robashton_zombify\src\Zombify.Server\Main.cs,Run,The following statement contains a magic number: while (true)            {                doSleep = false;                try                {                    Console.ReadLine();                    break;                }                catch (IOException)                {                    // This might happen on appdomain unload                    // until the previous threads are terminated.                    doSleep = true;                }                catch (ThreadAbortException)                {                    doSleep = true;                }                if (doSleep)                {                    Thread.Sleep(500);                }            }
Magic Number,Zombify.Server,Server,C:\repos\robashton_zombify\src\Zombify.Server\Main.cs,Run,The following statement contains a magic number: return 1337;
Magic Number,Zombify.Server,TestListener,C:\repos\robashton_zombify\src\Zombify.Server\TestListener.cs,onBeginGetContext,The following statement contains a magic number: try {                  HandleRequest(request);				                  response.StatusCode = 200;                  using(var stream = response.OutputStream){}              } catch(Exception ex) {                  response.StatusCode = 500;                  using(var stream = response.OutputStream) {                      using(var writer = new StreamWriter(stream)) {                          writer.Write (ex.ToString());                      }                  }              }
Magic Number,Zombify.Server,TestListener,C:\repos\robashton_zombify\src\Zombify.Server\TestListener.cs,onBeginGetContext,The following statement contains a magic number: try {                  HandleRequest(request);				                  response.StatusCode = 200;                  using(var stream = response.OutputStream){}              } catch(Exception ex) {                  response.StatusCode = 500;                  using(var stream = response.OutputStream) {                      using(var writer = new StreamWriter(stream)) {                          writer.Write (ex.ToString());                      }                  }              }
Magic Number,Mono.WebServer,XSPApplicationHost,C:\repos\robashton_zombify\src\Zombify.Server\XSPApplicationHost.cs,Redirect,The following statement contains a magic number: wr.SendStatus (301' "Moved Permanently");
Magic Number,Mono.WebServer,XSPWorker,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorker.cs,GetRemainingReuses,The following statement contains a magic number: return 100 - reuses;
Magic Number,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,XSPWorkerRequest,The following statement contains a magic number: if (platform == 4 || platform == 6 || platform == 128)  				plat = "Unix";  			else  				plat = ((PlatformID) platform).ToString ();
Magic Number,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,XSPWorkerRequest,The following statement contains a magic number: if (platform == 4 || platform == 6 || platform == 128)  				plat = "Unix";  			else  				plat = ((PlatformID) platform).ToString ();
Magic Number,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,XSPWorkerRequest,The following statement contains a magic number: if (platform == 4 || platform == 6 || platform == 128)  				plat = "Unix";  			else  				plat = ((PlatformID) platform).ToString ();
Magic Number,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,XSPWorkerRequest,The following statement contains a magic number: statusCode = 200;
Magic Number,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,FillBuffer,The following statement contains a magic number: inputLength = requestBroker.Read (requestId' 32*1024' out inputBuffer);
Magic Number,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,FillBuffer,The following statement contains a magic number: inputLength = requestBroker.Read (requestId' 32*1024' out inputBuffer);
Magic Number,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,ReadLine,The following statement contains a magic number: do {  				if (inputBuffer == null || position >= inputLength)  					FillBuffer ();    				if (position >= inputLength)  					break;  				  				cr = false;  				int count = 0;  				byte b = 0;  				int i;  				for (i = position; count < 8192 && i < inputLength; i++' count++) {  					b = inputBuffer [i];  					if (b == '\r') {  						cr = true;  						count--;  						continue;  					} else if (b == '\n' || cr) {  						count--;  						break;  					}  				}    				if (position >= inputLength && b == '\r' || b == '\n')  					count++;    				if (count >= 8192 || count + text.Length >= 8192)  					throw new InvalidOperationException ("Line too long.");    				if (count <= 0) {  					position = i + 1;  					break;  				}    				text.Append (Encoding.GetString (inputBuffer' position' count));  				position = i + 1;    				if (i >= inputLength) {  					b = inputBuffer [inputLength - 1];  					if (b != '\r' && b != '\n')  						continue;  					FillBuffer();  					if (b == '\r' && inputLength > 0 && inputBuffer[0] == '\n')  						position++;  				}  				break;  			} while (true);
Magic Number,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,ReadLine,The following statement contains a magic number: do {  				if (inputBuffer == null || position >= inputLength)  					FillBuffer ();    				if (position >= inputLength)  					break;  				  				cr = false;  				int count = 0;  				byte b = 0;  				int i;  				for (i = position; count < 8192 && i < inputLength; i++' count++) {  					b = inputBuffer [i];  					if (b == '\r') {  						cr = true;  						count--;  						continue;  					} else if (b == '\n' || cr) {  						count--;  						break;  					}  				}    				if (position >= inputLength && b == '\r' || b == '\n')  					count++;    				if (count >= 8192 || count + text.Length >= 8192)  					throw new InvalidOperationException ("Line too long.");    				if (count <= 0) {  					position = i + 1;  					break;  				}    				text.Append (Encoding.GetString (inputBuffer' position' count));  				position = i + 1;    				if (i >= inputLength) {  					b = inputBuffer [inputLength - 1];  					if (b != '\r' && b != '\n')  						continue;  					FillBuffer();  					if (b == '\r' && inputLength > 0 && inputBuffer[0] == '\n')  						position++;  				}  				break;  			} while (true);
Magic Number,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,ReadLine,The following statement contains a magic number: do {  				if (inputBuffer == null || position >= inputLength)  					FillBuffer ();    				if (position >= inputLength)  					break;  				  				cr = false;  				int count = 0;  				byte b = 0;  				int i;  				for (i = position; count < 8192 && i < inputLength; i++' count++) {  					b = inputBuffer [i];  					if (b == '\r') {  						cr = true;  						count--;  						continue;  					} else if (b == '\n' || cr) {  						count--;  						break;  					}  				}    				if (position >= inputLength && b == '\r' || b == '\n')  					count++;    				if (count >= 8192 || count + text.Length >= 8192)  					throw new InvalidOperationException ("Line too long.");    				if (count <= 0) {  					position = i + 1;  					break;  				}    				text.Append (Encoding.GetString (inputBuffer' position' count));  				position = i + 1;    				if (i >= inputLength) {  					b = inputBuffer [inputLength - 1];  					if (b != '\r' && b != '\n')  						continue;  					FillBuffer();  					if (b == '\r' && inputLength > 0 && inputBuffer[0] == '\n')  						position++;  				}  				break;  			} while (true);
Magic Number,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,GetRequestHeaders,The following statement contains a magic number: try {  				string line;  				headers = new Hashtable (CaseInsensitiveHashCodeProvider.DefaultInvariant'  							CaseInsensitiveComparer.DefaultInvariant);  				while ((line = ReadLine ()) != null && line.Length > 0) {  					int colon = line.IndexOf (':');  					if (colon == -1 || line.Length < colon + 2)  						throw new Exception ();  					string key = line.Substring (0' colon);  					string value = line.Substring (colon + 1).Trim ();  					headers [key] = value;  				}  			} catch (IOException) {  				throw;  			} catch (Exception e) {  				throw new Exception ("Error reading headers."' e);  			}
Magic Number,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,GetHeaders,The following statement contains a magic number: if (statusCode == 200)  				basicHeaders.Append (" 200 ");  			else {  				basicHeaders.Append (' ');  				basicHeaders.Append (statusCode.ToString (CultureInfo.InvariantCulture));  				basicHeaders.Append (' ');  			}
Magic Number,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,ReadInput,The following statement contains a magic number: while (size > 0) {  				byte[] readBuffer;  				int read = requestBroker.Read (requestId' size' out readBuffer);  				if (read == 0)  					break;    				if (read < 0)  					throw new HttpException (500' "Error reading request.");  				Buffer.BlockCopy (readBuffer' 0' buffer' offset' read);  				offset += read;  				size -= read;  				localsize += read;  			}
Magic Number,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,SendStatus,The following statement contains a magic number: if (statusCode == 400 || statusCode >= 500) {  				sentConnection = false;  				keepAlive = false;  				SendUnknownResponseHeader ("Connection"' "close");  			}
Magic Number,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,SendStatus,The following statement contains a magic number: if (statusCode == 400 || statusCode >= 500) {  				sentConnection = false;  				keepAlive = false;  				SendUnknownResponseHeader ("Connection"' "close");  			}
Magic Number,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,Cork,The following statement contains a magic number: return setsockopt ((int) socket' 6' 3' ref t' (IntPtr) IntPtr.Size);
Magic Number,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,Cork,The following statement contains a magic number: return setsockopt ((int) socket' 6' 3' ref t' (IntPtr) IntPtr.Size);
Magic Number,Mono.WebServer,XSPWorkerRequest,C:\repos\robashton_zombify\src\Zombify.Server\XSPWorkerRequest.cs,Send,The following statement contains a magic number: while (total < len) {  				fixed (byte *ptr = buffer) {  					// 0x4000 no sigpipe  					int n = send ((int) socket' ptr + total' (IntPtr) (len - total)' (int) 0x4000);  					if (n >= 0) {  						total += n;  					} else if (Marshal.GetLastWin32Error () != 4 /* EINTR */) {  						throw new IOException ();  					}  				}  			}
Missing Default,Mono.WebServer.XSP,SecurityConfiguration,C:\repos\robashton_zombify\src\Zombify.Server\SecurityConfiguration.cs,ToString,The following switch statement is missing a default case: switch (protocol) {  			case SecurityProtocolType.Default:  				sb.Append ("auto-detect SSL3/TLS1");  				break;  			case SecurityProtocolType.Ssl3:  				sb.Append ("SSL3");  				break;  			case SecurityProtocolType.Tls:  				sb.Append ("TLS1");  				break;  			}
