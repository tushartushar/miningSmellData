Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,OnKeyDown,The method has 114 lines of code.
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,ClipmapTerrainOnGlobe,The following statement contains a magic number: _window = Device.CreateWindow(800' 600' "Chapter 13:  Clipmap Terrain on a Globe");
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,ClipmapTerrainOnGlobe,The following statement contains a magic number: _window = Device.CreateWindow(800' 600' "Chapter 13:  Clipmap Terrain on a Globe");
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,ClipmapTerrainOnGlobe,The following statement contains a magic number: _clipmap = new GlobeClipmapTerrain(_window.Context' terrainSource' imagery' _ellipsoid' 511);
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,ClipmapTerrainOnGlobe,The following statement contains a magic number: _sceneState.Camera.FieldOfViewY = Math.PI / 3.0;
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,ClipmapTerrainOnGlobe,The following statement contains a magic number: _sceneState.Camera.PerspectiveNearPlaneDistance = 0.000001 * _ellipsoid.MaximumRadius;
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,ClipmapTerrainOnGlobe,The following statement contains a magic number: _sceneState.Camera.PerspectiveFarPlaneDistance = 10.0 * _ellipsoid.MaximumRadius;
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,ClipmapTerrainOnGlobe,The following statement contains a magic number: _sceneState.SunPosition = new Vector3D(200000' 300000' 200000) * _ellipsoid.MaximumRadius;
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,ClipmapTerrainOnGlobe,The following statement contains a magic number: _sceneState.SunPosition = new Vector3D(200000' 300000' 200000) * _ellipsoid.MaximumRadius;
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,ClipmapTerrainOnGlobe,The following statement contains a magic number: _sceneState.SunPosition = new Vector3D(200000' 300000' 200000) * _ellipsoid.MaximumRadius;
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,ClipmapTerrainOnGlobe,The following statement contains a magic number: _lookCamera.Range = 1.5 * _ellipsoid.MaximumRadius;
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,ClipmapTerrainOnGlobe,The following statement contains a magic number: _hudFont = new Font("Arial"' 16);
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,OnKeyDown,The following statement contains a magic number: if (e.Key == KeyboardKey.U)              {                  _sceneState.SunPosition = _sceneState.Camera.Eye;              }              else if (e.Key == KeyboardKey.W)              {                  _clipmap.Wireframe = !_clipmap.Wireframe;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.B)              {                  if (!_clipmap.BlendRegionsEnabled)                  {                      _clipmap.BlendRegionsEnabled = true;                      _clipmap.ShowBlendRegions = false;                  }                  else if (_clipmap.ShowBlendRegions)                  {                      _clipmap.BlendRegionsEnabled = false;                  }                  else                  {                      _clipmap.ShowBlendRegions = true;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.L)              {                  _clipmap.LodUpdateEnabled = !_clipmap.LodUpdateEnabled;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.C)              {                  _clipmap.ColorClipmapLevels = !_clipmap.ColorClipmapLevels;                  if (_clipmap.ColorClipmapLevels)                  {                      _clipmap.ShowImagery = false;                      _clipmap.Lighting = true;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.I)              {                  _clipmap.ShowImagery = !_clipmap.ShowImagery;                  _clipmap.Lighting = !_clipmap.ShowImagery;                  if (_clipmap.ShowImagery)                  {                      _clipmap.ColorClipmapLevels = false;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.S)              {                  _clipmap.Lighting = !_clipmap.Lighting;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.Z)              {                  if (_lookCamera != null)                  {                      double longitude = -119.5326056;                      double latitude = 37.74451389;                      Geodetic3D halfDome = new Geodetic3D(Trig.ToRadians(longitude)' Trig.ToRadians(latitude)' 2700.0);                      _lookCamera.ViewPoint(_ellipsoid' halfDome);                      _lookCamera.Azimuth = 0.0;                      _lookCamera.Elevation = Trig.ToRadians(30.0);                      _lookCamera.Range = 10000.0;                  }              }              else if (e.Key == KeyboardKey.F)              {                  if (_lookCamera != null)                  {                      _lookCamera.Dispose();                      _lookCamera = null;                      _flyCamera = new CameraFly(_sceneState.Camera' _window);                      _flyCamera.MovementRate = 1200.0;                  }                  else if (_flyCamera != null)                  {                      _flyCamera.Dispose();                      _flyCamera = null;                      _sceneState.Camera.Target = new Vector3D(0.0' 0.0' 0.0);                      _lookCamera = new CameraLookAtPoint(_sceneState.Camera' _window' _ellipsoid);                      _lookCamera.UpdateParametersFromCamera();                  }                  UpdateHUD();              }              else if (_flyCamera != null && (e.Key == KeyboardKey.Plus || e.Key == KeyboardKey.KeypadPlus))              {                  _flyCamera.MovementRate *= 2.0;                  UpdateHUD();              }              else if (_flyCamera != null && (e.Key == KeyboardKey.Minus || e.Key == KeyboardKey.KeypadMinus))              {                  _flyCamera.MovementRate *= 0.5;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.E)              {                  if (_clipmap.Ellipsoid.MaximumRadius == _clipmap.Ellipsoid.MinimumRadius)                  {                      _clipmap.Ellipsoid = Ellipsoid.Wgs84;                      _globe.Shape = Ellipsoid.Wgs84;                  }                  else                  {                      double radius = Ellipsoid.Wgs84.MaximumRadius;                      _clipmap.Ellipsoid = new Ellipsoid(radius' radius' radius);                      _globe.Shape = _clipmap.Ellipsoid;                  }              }
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,OnKeyDown,The following statement contains a magic number: if (e.Key == KeyboardKey.U)              {                  _sceneState.SunPosition = _sceneState.Camera.Eye;              }              else if (e.Key == KeyboardKey.W)              {                  _clipmap.Wireframe = !_clipmap.Wireframe;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.B)              {                  if (!_clipmap.BlendRegionsEnabled)                  {                      _clipmap.BlendRegionsEnabled = true;                      _clipmap.ShowBlendRegions = false;                  }                  else if (_clipmap.ShowBlendRegions)                  {                      _clipmap.BlendRegionsEnabled = false;                  }                  else                  {                      _clipmap.ShowBlendRegions = true;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.L)              {                  _clipmap.LodUpdateEnabled = !_clipmap.LodUpdateEnabled;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.C)              {                  _clipmap.ColorClipmapLevels = !_clipmap.ColorClipmapLevels;                  if (_clipmap.ColorClipmapLevels)                  {                      _clipmap.ShowImagery = false;                      _clipmap.Lighting = true;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.I)              {                  _clipmap.ShowImagery = !_clipmap.ShowImagery;                  _clipmap.Lighting = !_clipmap.ShowImagery;                  if (_clipmap.ShowImagery)                  {                      _clipmap.ColorClipmapLevels = false;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.S)              {                  _clipmap.Lighting = !_clipmap.Lighting;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.Z)              {                  if (_lookCamera != null)                  {                      double longitude = -119.5326056;                      double latitude = 37.74451389;                      Geodetic3D halfDome = new Geodetic3D(Trig.ToRadians(longitude)' Trig.ToRadians(latitude)' 2700.0);                      _lookCamera.ViewPoint(_ellipsoid' halfDome);                      _lookCamera.Azimuth = 0.0;                      _lookCamera.Elevation = Trig.ToRadians(30.0);                      _lookCamera.Range = 10000.0;                  }              }              else if (e.Key == KeyboardKey.F)              {                  if (_lookCamera != null)                  {                      _lookCamera.Dispose();                      _lookCamera = null;                      _flyCamera = new CameraFly(_sceneState.Camera' _window);                      _flyCamera.MovementRate = 1200.0;                  }                  else if (_flyCamera != null)                  {                      _flyCamera.Dispose();                      _flyCamera = null;                      _sceneState.Camera.Target = new Vector3D(0.0' 0.0' 0.0);                      _lookCamera = new CameraLookAtPoint(_sceneState.Camera' _window' _ellipsoid);                      _lookCamera.UpdateParametersFromCamera();                  }                  UpdateHUD();              }              else if (_flyCamera != null && (e.Key == KeyboardKey.Plus || e.Key == KeyboardKey.KeypadPlus))              {                  _flyCamera.MovementRate *= 2.0;                  UpdateHUD();              }              else if (_flyCamera != null && (e.Key == KeyboardKey.Minus || e.Key == KeyboardKey.KeypadMinus))              {                  _flyCamera.MovementRate *= 0.5;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.E)              {                  if (_clipmap.Ellipsoid.MaximumRadius == _clipmap.Ellipsoid.MinimumRadius)                  {                      _clipmap.Ellipsoid = Ellipsoid.Wgs84;                      _globe.Shape = Ellipsoid.Wgs84;                  }                  else                  {                      double radius = Ellipsoid.Wgs84.MaximumRadius;                      _clipmap.Ellipsoid = new Ellipsoid(radius' radius' radius);                      _globe.Shape = _clipmap.Ellipsoid;                  }              }
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,OnKeyDown,The following statement contains a magic number: if (e.Key == KeyboardKey.U)              {                  _sceneState.SunPosition = _sceneState.Camera.Eye;              }              else if (e.Key == KeyboardKey.W)              {                  _clipmap.Wireframe = !_clipmap.Wireframe;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.B)              {                  if (!_clipmap.BlendRegionsEnabled)                  {                      _clipmap.BlendRegionsEnabled = true;                      _clipmap.ShowBlendRegions = false;                  }                  else if (_clipmap.ShowBlendRegions)                  {                      _clipmap.BlendRegionsEnabled = false;                  }                  else                  {                      _clipmap.ShowBlendRegions = true;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.L)              {                  _clipmap.LodUpdateEnabled = !_clipmap.LodUpdateEnabled;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.C)              {                  _clipmap.ColorClipmapLevels = !_clipmap.ColorClipmapLevels;                  if (_clipmap.ColorClipmapLevels)                  {                      _clipmap.ShowImagery = false;                      _clipmap.Lighting = true;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.I)              {                  _clipmap.ShowImagery = !_clipmap.ShowImagery;                  _clipmap.Lighting = !_clipmap.ShowImagery;                  if (_clipmap.ShowImagery)                  {                      _clipmap.ColorClipmapLevels = false;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.S)              {                  _clipmap.Lighting = !_clipmap.Lighting;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.Z)              {                  if (_lookCamera != null)                  {                      double longitude = -119.5326056;                      double latitude = 37.74451389;                      Geodetic3D halfDome = new Geodetic3D(Trig.ToRadians(longitude)' Trig.ToRadians(latitude)' 2700.0);                      _lookCamera.ViewPoint(_ellipsoid' halfDome);                      _lookCamera.Azimuth = 0.0;                      _lookCamera.Elevation = Trig.ToRadians(30.0);                      _lookCamera.Range = 10000.0;                  }              }              else if (e.Key == KeyboardKey.F)              {                  if (_lookCamera != null)                  {                      _lookCamera.Dispose();                      _lookCamera = null;                      _flyCamera = new CameraFly(_sceneState.Camera' _window);                      _flyCamera.MovementRate = 1200.0;                  }                  else if (_flyCamera != null)                  {                      _flyCamera.Dispose();                      _flyCamera = null;                      _sceneState.Camera.Target = new Vector3D(0.0' 0.0' 0.0);                      _lookCamera = new CameraLookAtPoint(_sceneState.Camera' _window' _ellipsoid);                      _lookCamera.UpdateParametersFromCamera();                  }                  UpdateHUD();              }              else if (_flyCamera != null && (e.Key == KeyboardKey.Plus || e.Key == KeyboardKey.KeypadPlus))              {                  _flyCamera.MovementRate *= 2.0;                  UpdateHUD();              }              else if (_flyCamera != null && (e.Key == KeyboardKey.Minus || e.Key == KeyboardKey.KeypadMinus))              {                  _flyCamera.MovementRate *= 0.5;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.E)              {                  if (_clipmap.Ellipsoid.MaximumRadius == _clipmap.Ellipsoid.MinimumRadius)                  {                      _clipmap.Ellipsoid = Ellipsoid.Wgs84;                      _globe.Shape = Ellipsoid.Wgs84;                  }                  else                  {                      double radius = Ellipsoid.Wgs84.MaximumRadius;                      _clipmap.Ellipsoid = new Ellipsoid(radius' radius' radius);                      _globe.Shape = _clipmap.Ellipsoid;                  }              }
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,OnKeyDown,The following statement contains a magic number: if (e.Key == KeyboardKey.U)              {                  _sceneState.SunPosition = _sceneState.Camera.Eye;              }              else if (e.Key == KeyboardKey.W)              {                  _clipmap.Wireframe = !_clipmap.Wireframe;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.B)              {                  if (!_clipmap.BlendRegionsEnabled)                  {                      _clipmap.BlendRegionsEnabled = true;                      _clipmap.ShowBlendRegions = false;                  }                  else if (_clipmap.ShowBlendRegions)                  {                      _clipmap.BlendRegionsEnabled = false;                  }                  else                  {                      _clipmap.ShowBlendRegions = true;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.L)              {                  _clipmap.LodUpdateEnabled = !_clipmap.LodUpdateEnabled;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.C)              {                  _clipmap.ColorClipmapLevels = !_clipmap.ColorClipmapLevels;                  if (_clipmap.ColorClipmapLevels)                  {                      _clipmap.ShowImagery = false;                      _clipmap.Lighting = true;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.I)              {                  _clipmap.ShowImagery = !_clipmap.ShowImagery;                  _clipmap.Lighting = !_clipmap.ShowImagery;                  if (_clipmap.ShowImagery)                  {                      _clipmap.ColorClipmapLevels = false;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.S)              {                  _clipmap.Lighting = !_clipmap.Lighting;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.Z)              {                  if (_lookCamera != null)                  {                      double longitude = -119.5326056;                      double latitude = 37.74451389;                      Geodetic3D halfDome = new Geodetic3D(Trig.ToRadians(longitude)' Trig.ToRadians(latitude)' 2700.0);                      _lookCamera.ViewPoint(_ellipsoid' halfDome);                      _lookCamera.Azimuth = 0.0;                      _lookCamera.Elevation = Trig.ToRadians(30.0);                      _lookCamera.Range = 10000.0;                  }              }              else if (e.Key == KeyboardKey.F)              {                  if (_lookCamera != null)                  {                      _lookCamera.Dispose();                      _lookCamera = null;                      _flyCamera = new CameraFly(_sceneState.Camera' _window);                      _flyCamera.MovementRate = 1200.0;                  }                  else if (_flyCamera != null)                  {                      _flyCamera.Dispose();                      _flyCamera = null;                      _sceneState.Camera.Target = new Vector3D(0.0' 0.0' 0.0);                      _lookCamera = new CameraLookAtPoint(_sceneState.Camera' _window' _ellipsoid);                      _lookCamera.UpdateParametersFromCamera();                  }                  UpdateHUD();              }              else if (_flyCamera != null && (e.Key == KeyboardKey.Plus || e.Key == KeyboardKey.KeypadPlus))              {                  _flyCamera.MovementRate *= 2.0;                  UpdateHUD();              }              else if (_flyCamera != null && (e.Key == KeyboardKey.Minus || e.Key == KeyboardKey.KeypadMinus))              {                  _flyCamera.MovementRate *= 0.5;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.E)              {                  if (_clipmap.Ellipsoid.MaximumRadius == _clipmap.Ellipsoid.MinimumRadius)                  {                      _clipmap.Ellipsoid = Ellipsoid.Wgs84;                      _globe.Shape = Ellipsoid.Wgs84;                  }                  else                  {                      double radius = Ellipsoid.Wgs84.MaximumRadius;                      _clipmap.Ellipsoid = new Ellipsoid(radius' radius' radius);                      _globe.Shape = _clipmap.Ellipsoid;                  }              }
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,OnKeyDown,The following statement contains a magic number: if (e.Key == KeyboardKey.U)              {                  _sceneState.SunPosition = _sceneState.Camera.Eye;              }              else if (e.Key == KeyboardKey.W)              {                  _clipmap.Wireframe = !_clipmap.Wireframe;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.B)              {                  if (!_clipmap.BlendRegionsEnabled)                  {                      _clipmap.BlendRegionsEnabled = true;                      _clipmap.ShowBlendRegions = false;                  }                  else if (_clipmap.ShowBlendRegions)                  {                      _clipmap.BlendRegionsEnabled = false;                  }                  else                  {                      _clipmap.ShowBlendRegions = true;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.L)              {                  _clipmap.LodUpdateEnabled = !_clipmap.LodUpdateEnabled;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.C)              {                  _clipmap.ColorClipmapLevels = !_clipmap.ColorClipmapLevels;                  if (_clipmap.ColorClipmapLevels)                  {                      _clipmap.ShowImagery = false;                      _clipmap.Lighting = true;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.I)              {                  _clipmap.ShowImagery = !_clipmap.ShowImagery;                  _clipmap.Lighting = !_clipmap.ShowImagery;                  if (_clipmap.ShowImagery)                  {                      _clipmap.ColorClipmapLevels = false;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.S)              {                  _clipmap.Lighting = !_clipmap.Lighting;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.Z)              {                  if (_lookCamera != null)                  {                      double longitude = -119.5326056;                      double latitude = 37.74451389;                      Geodetic3D halfDome = new Geodetic3D(Trig.ToRadians(longitude)' Trig.ToRadians(latitude)' 2700.0);                      _lookCamera.ViewPoint(_ellipsoid' halfDome);                      _lookCamera.Azimuth = 0.0;                      _lookCamera.Elevation = Trig.ToRadians(30.0);                      _lookCamera.Range = 10000.0;                  }              }              else if (e.Key == KeyboardKey.F)              {                  if (_lookCamera != null)                  {                      _lookCamera.Dispose();                      _lookCamera = null;                      _flyCamera = new CameraFly(_sceneState.Camera' _window);                      _flyCamera.MovementRate = 1200.0;                  }                  else if (_flyCamera != null)                  {                      _flyCamera.Dispose();                      _flyCamera = null;                      _sceneState.Camera.Target = new Vector3D(0.0' 0.0' 0.0);                      _lookCamera = new CameraLookAtPoint(_sceneState.Camera' _window' _ellipsoid);                      _lookCamera.UpdateParametersFromCamera();                  }                  UpdateHUD();              }              else if (_flyCamera != null && (e.Key == KeyboardKey.Plus || e.Key == KeyboardKey.KeypadPlus))              {                  _flyCamera.MovementRate *= 2.0;                  UpdateHUD();              }              else if (_flyCamera != null && (e.Key == KeyboardKey.Minus || e.Key == KeyboardKey.KeypadMinus))              {                  _flyCamera.MovementRate *= 0.5;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.E)              {                  if (_clipmap.Ellipsoid.MaximumRadius == _clipmap.Ellipsoid.MinimumRadius)                  {                      _clipmap.Ellipsoid = Ellipsoid.Wgs84;                      _globe.Shape = Ellipsoid.Wgs84;                  }                  else                  {                      double radius = Ellipsoid.Wgs84.MaximumRadius;                      _clipmap.Ellipsoid = new Ellipsoid(radius' radius' radius);                      _globe.Shape = _clipmap.Ellipsoid;                  }              }
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,OnKeyDown,The following statement contains a magic number: if (e.Key == KeyboardKey.U)              {                  _sceneState.SunPosition = _sceneState.Camera.Eye;              }              else if (e.Key == KeyboardKey.W)              {                  _clipmap.Wireframe = !_clipmap.Wireframe;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.B)              {                  if (!_clipmap.BlendRegionsEnabled)                  {                      _clipmap.BlendRegionsEnabled = true;                      _clipmap.ShowBlendRegions = false;                  }                  else if (_clipmap.ShowBlendRegions)                  {                      _clipmap.BlendRegionsEnabled = false;                  }                  else                  {                      _clipmap.ShowBlendRegions = true;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.L)              {                  _clipmap.LodUpdateEnabled = !_clipmap.LodUpdateEnabled;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.C)              {                  _clipmap.ColorClipmapLevels = !_clipmap.ColorClipmapLevels;                  if (_clipmap.ColorClipmapLevels)                  {                      _clipmap.ShowImagery = false;                      _clipmap.Lighting = true;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.I)              {                  _clipmap.ShowImagery = !_clipmap.ShowImagery;                  _clipmap.Lighting = !_clipmap.ShowImagery;                  if (_clipmap.ShowImagery)                  {                      _clipmap.ColorClipmapLevels = false;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.S)              {                  _clipmap.Lighting = !_clipmap.Lighting;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.Z)              {                  if (_lookCamera != null)                  {                      double longitude = -119.5326056;                      double latitude = 37.74451389;                      Geodetic3D halfDome = new Geodetic3D(Trig.ToRadians(longitude)' Trig.ToRadians(latitude)' 2700.0);                      _lookCamera.ViewPoint(_ellipsoid' halfDome);                      _lookCamera.Azimuth = 0.0;                      _lookCamera.Elevation = Trig.ToRadians(30.0);                      _lookCamera.Range = 10000.0;                  }              }              else if (e.Key == KeyboardKey.F)              {                  if (_lookCamera != null)                  {                      _lookCamera.Dispose();                      _lookCamera = null;                      _flyCamera = new CameraFly(_sceneState.Camera' _window);                      _flyCamera.MovementRate = 1200.0;                  }                  else if (_flyCamera != null)                  {                      _flyCamera.Dispose();                      _flyCamera = null;                      _sceneState.Camera.Target = new Vector3D(0.0' 0.0' 0.0);                      _lookCamera = new CameraLookAtPoint(_sceneState.Camera' _window' _ellipsoid);                      _lookCamera.UpdateParametersFromCamera();                  }                  UpdateHUD();              }              else if (_flyCamera != null && (e.Key == KeyboardKey.Plus || e.Key == KeyboardKey.KeypadPlus))              {                  _flyCamera.MovementRate *= 2.0;                  UpdateHUD();              }              else if (_flyCamera != null && (e.Key == KeyboardKey.Minus || e.Key == KeyboardKey.KeypadMinus))              {                  _flyCamera.MovementRate *= 0.5;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.E)              {                  if (_clipmap.Ellipsoid.MaximumRadius == _clipmap.Ellipsoid.MinimumRadius)                  {                      _clipmap.Ellipsoid = Ellipsoid.Wgs84;                      _globe.Shape = Ellipsoid.Wgs84;                  }                  else                  {                      double radius = Ellipsoid.Wgs84.MaximumRadius;                      _clipmap.Ellipsoid = new Ellipsoid(radius' radius' radius);                      _globe.Shape = _clipmap.Ellipsoid;                  }              }
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,OnKeyDown,The following statement contains a magic number: if (e.Key == KeyboardKey.U)              {                  _sceneState.SunPosition = _sceneState.Camera.Eye;              }              else if (e.Key == KeyboardKey.W)              {                  _clipmap.Wireframe = !_clipmap.Wireframe;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.B)              {                  if (!_clipmap.BlendRegionsEnabled)                  {                      _clipmap.BlendRegionsEnabled = true;                      _clipmap.ShowBlendRegions = false;                  }                  else if (_clipmap.ShowBlendRegions)                  {                      _clipmap.BlendRegionsEnabled = false;                  }                  else                  {                      _clipmap.ShowBlendRegions = true;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.L)              {                  _clipmap.LodUpdateEnabled = !_clipmap.LodUpdateEnabled;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.C)              {                  _clipmap.ColorClipmapLevels = !_clipmap.ColorClipmapLevels;                  if (_clipmap.ColorClipmapLevels)                  {                      _clipmap.ShowImagery = false;                      _clipmap.Lighting = true;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.I)              {                  _clipmap.ShowImagery = !_clipmap.ShowImagery;                  _clipmap.Lighting = !_clipmap.ShowImagery;                  if (_clipmap.ShowImagery)                  {                      _clipmap.ColorClipmapLevels = false;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.S)              {                  _clipmap.Lighting = !_clipmap.Lighting;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.Z)              {                  if (_lookCamera != null)                  {                      double longitude = -119.5326056;                      double latitude = 37.74451389;                      Geodetic3D halfDome = new Geodetic3D(Trig.ToRadians(longitude)' Trig.ToRadians(latitude)' 2700.0);                      _lookCamera.ViewPoint(_ellipsoid' halfDome);                      _lookCamera.Azimuth = 0.0;                      _lookCamera.Elevation = Trig.ToRadians(30.0);                      _lookCamera.Range = 10000.0;                  }              }              else if (e.Key == KeyboardKey.F)              {                  if (_lookCamera != null)                  {                      _lookCamera.Dispose();                      _lookCamera = null;                      _flyCamera = new CameraFly(_sceneState.Camera' _window);                      _flyCamera.MovementRate = 1200.0;                  }                  else if (_flyCamera != null)                  {                      _flyCamera.Dispose();                      _flyCamera = null;                      _sceneState.Camera.Target = new Vector3D(0.0' 0.0' 0.0);                      _lookCamera = new CameraLookAtPoint(_sceneState.Camera' _window' _ellipsoid);                      _lookCamera.UpdateParametersFromCamera();                  }                  UpdateHUD();              }              else if (_flyCamera != null && (e.Key == KeyboardKey.Plus || e.Key == KeyboardKey.KeypadPlus))              {                  _flyCamera.MovementRate *= 2.0;                  UpdateHUD();              }              else if (_flyCamera != null && (e.Key == KeyboardKey.Minus || e.Key == KeyboardKey.KeypadMinus))              {                  _flyCamera.MovementRate *= 0.5;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.E)              {                  if (_clipmap.Ellipsoid.MaximumRadius == _clipmap.Ellipsoid.MinimumRadius)                  {                      _clipmap.Ellipsoid = Ellipsoid.Wgs84;                      _globe.Shape = Ellipsoid.Wgs84;                  }                  else                  {                      double radius = Ellipsoid.Wgs84.MaximumRadius;                      _clipmap.Ellipsoid = new Ellipsoid(radius' radius' radius);                      _globe.Shape = _clipmap.Ellipsoid;                  }              }
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,OnKeyDown,The following statement contains a magic number: if (e.Key == KeyboardKey.U)              {                  _sceneState.SunPosition = _sceneState.Camera.Eye;              }              else if (e.Key == KeyboardKey.W)              {                  _clipmap.Wireframe = !_clipmap.Wireframe;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.B)              {                  if (!_clipmap.BlendRegionsEnabled)                  {                      _clipmap.BlendRegionsEnabled = true;                      _clipmap.ShowBlendRegions = false;                  }                  else if (_clipmap.ShowBlendRegions)                  {                      _clipmap.BlendRegionsEnabled = false;                  }                  else                  {                      _clipmap.ShowBlendRegions = true;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.L)              {                  _clipmap.LodUpdateEnabled = !_clipmap.LodUpdateEnabled;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.C)              {                  _clipmap.ColorClipmapLevels = !_clipmap.ColorClipmapLevels;                  if (_clipmap.ColorClipmapLevels)                  {                      _clipmap.ShowImagery = false;                      _clipmap.Lighting = true;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.I)              {                  _clipmap.ShowImagery = !_clipmap.ShowImagery;                  _clipmap.Lighting = !_clipmap.ShowImagery;                  if (_clipmap.ShowImagery)                  {                      _clipmap.ColorClipmapLevels = false;                  }                  UpdateHUD();              }              else if (e.Key == KeyboardKey.S)              {                  _clipmap.Lighting = !_clipmap.Lighting;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.Z)              {                  if (_lookCamera != null)                  {                      double longitude = -119.5326056;                      double latitude = 37.74451389;                      Geodetic3D halfDome = new Geodetic3D(Trig.ToRadians(longitude)' Trig.ToRadians(latitude)' 2700.0);                      _lookCamera.ViewPoint(_ellipsoid' halfDome);                      _lookCamera.Azimuth = 0.0;                      _lookCamera.Elevation = Trig.ToRadians(30.0);                      _lookCamera.Range = 10000.0;                  }              }              else if (e.Key == KeyboardKey.F)              {                  if (_lookCamera != null)                  {                      _lookCamera.Dispose();                      _lookCamera = null;                      _flyCamera = new CameraFly(_sceneState.Camera' _window);                      _flyCamera.MovementRate = 1200.0;                  }                  else if (_flyCamera != null)                  {                      _flyCamera.Dispose();                      _flyCamera = null;                      _sceneState.Camera.Target = new Vector3D(0.0' 0.0' 0.0);                      _lookCamera = new CameraLookAtPoint(_sceneState.Camera' _window' _ellipsoid);                      _lookCamera.UpdateParametersFromCamera();                  }                  UpdateHUD();              }              else if (_flyCamera != null && (e.Key == KeyboardKey.Plus || e.Key == KeyboardKey.KeypadPlus))              {                  _flyCamera.MovementRate *= 2.0;                  UpdateHUD();              }              else if (_flyCamera != null && (e.Key == KeyboardKey.Minus || e.Key == KeyboardKey.KeypadMinus))              {                  _flyCamera.MovementRate *= 0.5;                  UpdateHUD();              }              else if (e.Key == KeyboardKey.E)              {                  if (_clipmap.Ellipsoid.MaximumRadius == _clipmap.Ellipsoid.MinimumRadius)                  {                      _clipmap.Ellipsoid = Ellipsoid.Wgs84;                      _globe.Shape = Ellipsoid.Wgs84;                  }                  else                  {                      double radius = Ellipsoid.Wgs84.MaximumRadius;                      _clipmap.Ellipsoid = new Ellipsoid(radius' radius' radius);                      _globe.Shape = _clipmap.Ellipsoid;                  }              }
Magic Number,OpenGlobe.Examples,ClipmapTerrainOnGlobe,C:\repos\virtualglobebook_OpenGlobe\Source\Examples\Chapter13\ClipmapTerrainOnGlobe\ClipmapTerrainOnGlobe.cs,Main,The following statement contains a magic number: using (ClipmapTerrainOnGlobe example = new ClipmapTerrainOnGlobe())              {                  example.Run(30.0);              }
