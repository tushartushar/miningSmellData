Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenGlobe.Renderer,KeyboardGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Input\KeyboardGL3x.cs,OpenTKToOpenGlobe,The method has 265 lines of code.
Long Method,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateMeshBuffers,The method has 206 lines of code.
Long Method,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The method has 106 lines of code.
Long Method,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The method has 100 lines of code.
Long Method,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The method has 106 lines of code.
Long Method,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,TextureToPixelType,The method has 103 lines of code.
Complex Method,OpenGlobe.Renderer,TextureAtlas,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Tools\TextureAtlas.cs,TextureAtlas,Cyclomatic complexity of the method is 12
Complex Method,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateMeshBuffers,Cyclomatic complexity of the method is 18
Complex Method,OpenGlobe.Renderer.GL3x,ContextGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\ContextGL3x.cs,VerifyDraw,Cyclomatic complexity of the method is 8
Complex Method,OpenGlobe.Renderer.GL3x,FramebufferGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Framebuffer\FramebufferGL3x.cs,Clean,Cyclomatic complexity of the method is 8
Long Parameter List,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,RequiredSizeInBytes,The method has 5 parameters. Parameters: width' height' format' dataType' rowAlignment
Long Parameter List,OpenGlobe.Renderer,VertexBufferAttribute,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\VertexArray\VertexBufferAttribute.cs,VertexBufferAttribute,The method has 6 parameters. Parameters: vertexBuffer' componentDatatype' numberOfComponents' normalize' offsetInBytes' strideInBytes
Long Parameter List,OpenGlobe.Renderer,Context,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Context.cs,Draw,The method has 5 parameters. Parameters: primitiveType' offset' count' drawState' sceneState
Long Parameter List,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateTexture2DSampler,The method has 5 parameters. Parameters: minificationFilter' magnificationFilter' wrapS' wrapT' maximumAnistropy
Long Parameter List,OpenGlobe.Renderer,UniformBlockArrayMember,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Shaders\UniformBlockArrayMember.cs,UniformBlockArrayMember,The method has 5 parameters. Parameters: name' type' offsetInBytes' length' elementStrideInBytes
Long Parameter List,OpenGlobe.Renderer,UniformBlockMatrixMember,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Shaders\UniformBlockMatrixMember.cs,UniformBlockMatrixMember,The method has 5 parameters. Parameters: name' type' offsetInBytes' strideInBytes' rowMajor
Long Parameter List,OpenGlobe.Renderer,UniformBlockMatrixArrayMember,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Shaders\UniformBlockMatrixArrayMember.cs,UniformBlockMatrixArrayMember,The method has 7 parameters. Parameters: name' type' offsetInBytes' length' elementStrideInBytes' matrixStrideInBytes' rowMajor
Long Parameter List,OpenGlobe.Renderer,Texture2D,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2D.cs,CopyFromBuffer,The method has 8 parameters. Parameters: pixelBuffer' xOffset' yOffset' width' height' format' dataType' rowAlignment
Long Parameter List,OpenGlobe.Renderer,TextureSampler,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureSampler.cs,TextureSampler,The method has 5 parameters. Parameters: minificationFilter' magnificationFilter' wrapS' wrapT' maximumAnistropy
Long Parameter List,OpenGlobe.Renderer.GL3x,TextureSamplerGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Textures\TextureSamplerGL3x.cs,TextureSamplerGL3x,The method has 5 parameters. Parameters: minificationFilter' magnificationFilter' wrapS' wrapT' maximumAnistropy
Long Parameter List,OpenGlobe.Renderer.GL3x,ContextGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\ContextGL3x.cs,Draw,The method has 5 parameters. Parameters: primitiveType' offset' count' drawState' sceneState
Long Parameter List,OpenGlobe.Renderer.GL3x,ShaderProgramGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Shaders\ShaderProgramGL3x.cs,CreateUniformBlockMember,The method has 7 parameters. Parameters: name' type' offsetInBytes' length' arrayStrideInBytes' matrixStrideInBytes' rowMajor
Long Parameter List,OpenGlobe.Renderer.GL3x,Texture2DGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Textures\Texture2DGL3x.cs,CopyFromBuffer,The method has 8 parameters. Parameters: pixelBuffer' xOffset' yOffset' width' height' format' dataType' rowAlignment
Long Identifier,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,,The length of the parameter s_maximumNumberOfVertexAttributes is 33.
Long Identifier,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,,The length of the parameter s_maximumNumberOfColorAttachments is 33.
Long Identifier,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,,The length of the parameter s_drawAutomaticUniformFactories is 31.
Long Statement,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateMeshBuffers,The length of the statement  "                        throw new ArgumentException("An emulated double vec3 mesh attribute requires both " + emulated.Name + "High and " + emulated.Name + "Low vertex attributes' but the shader only contains one matching attribute."); " is 211.
Long Statement,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateMeshBuffers,The length of the statement  "                    throw new ArgumentException("Shader requires vertex attribute \"" + shaderAttribute.Name + "\"' which is not present in mesh."); " is 128.
Long Statement,OpenGlobe.Renderer.GL3x,ContextGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\ContextGL3x.cs,VerifyDraw,The length of the statement  "                    throw new ArgumentException("The depth test is enabled (drawState.RenderState.DepthTest.Enabled) but the context's Framebuffer property doesn't have a depth or depth/stencil attachment (DepthAttachment or DepthStencilAttachment)."' "drawState"); " is 245.
Long Statement,OpenGlobe.Renderer.GL3x,ShaderProgramGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Shaders\ShaderProgramGL3x.cs,FindUniformBlocks,The length of the statement  "                GL.GetActiveUniformBlock(programHandle' i' ActiveUniformBlockParameter.UniformBlockDataSize' out uniformBlockSizeInBytes); " is 122.
Long Statement,OpenGlobe.Renderer.GL3x,ShaderProgramGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Shaders\ShaderProgramGL3x.cs,FindUniformBlocks,The length of the statement  "                GL.GetActiveUniformBlock(programHandle' i' ActiveUniformBlockParameter.UniformBlockActiveUniforms' out numberOfUniformsInBlock); " is 128.
Long Statement,OpenGlobe.Renderer.GL3x,ShaderProgramGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Shaders\ShaderProgramGL3x.cs,FindUniformBlocks,The length of the statement  "                GL.GetActiveUniformBlock(programHandle' i' ActiveUniformBlockParameter.UniformBlockActiveUniformIndices' uniformIndicesInBlock); " is 128.
Long Statement,OpenGlobe.Renderer.GL3x,ShaderProgramGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Shaders\ShaderProgramGL3x.cs,FindUniformBlocks,The length of the statement  "                GL.GetActiveUniforms(programHandle' numberOfUniformsInBlock' uniformIndicesInBlock' ActiveUniformParameter.UniformType' uniformTypes); " is 134.
Long Statement,OpenGlobe.Renderer.GL3x,ShaderProgramGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Shaders\ShaderProgramGL3x.cs,FindUniformBlocks,The length of the statement  "                GL.GetActiveUniforms(programHandle' numberOfUniformsInBlock' uniformIndicesInBlock' ActiveUniformParameter.UniformOffset' uniformOffsetsInBytes); " is 145.
Long Statement,OpenGlobe.Renderer.GL3x,ShaderProgramGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Shaders\ShaderProgramGL3x.cs,FindUniformBlocks,The length of the statement  "                GL.GetActiveUniforms(programHandle' numberOfUniformsInBlock' uniformIndicesInBlock' ActiveUniformParameter.UniformSize' uniformLengths); " is 136.
Long Statement,OpenGlobe.Renderer.GL3x,ShaderProgramGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Shaders\ShaderProgramGL3x.cs,FindUniformBlocks,The length of the statement  "                GL.GetActiveUniforms(programHandle' numberOfUniformsInBlock' uniformIndicesInBlock' ActiveUniformParameter.UniformArrayStride' uniformArrayStridesInBytes); " is 155.
Long Statement,OpenGlobe.Renderer.GL3x,ShaderProgramGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Shaders\ShaderProgramGL3x.cs,FindUniformBlocks,The length of the statement  "                GL.GetActiveUniforms(programHandle' numberOfUniformsInBlock' uniformIndicesInBlock' ActiveUniformParameter.UniformMatrixStride' uniformmatrixStrideInBytess); " is 157.
Long Statement,OpenGlobe.Renderer.GL3x,ShaderProgramGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Shaders\ShaderProgramGL3x.cs,FindUniformBlocks,The length of the statement  "                GL.GetActiveUniforms(programHandle' numberOfUniformsInBlock' uniformIndicesInBlock' ActiveUniformParameter.UniformIsRowMajor' uniformRowMajors); " is 144.
Long Statement,OpenGlobe.Renderer.GL3x,TextureUnitGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Textures\TextureUnitGL3x.cs,Validate,The length of the statement  "                    throw new InvalidOperationException("A texture sampler must be assigned to a texture unit with one or more bound textures."); " is 125.
Long Statement,OpenGlobe.Renderer.GL3x,TextureUnitGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Textures\TextureUnitGL3x.cs,Validate,The length of the statement  "                        throw new InvalidOperationException("The texture sampler is incompatible with the rectangle texture bound to the same texture unit.  Rectangle textures only support linear and nearest minification filters."); " is 208.
Long Statement,OpenGlobe.Renderer.GL3x,TextureUnitGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Textures\TextureUnitGL3x.cs,Validate,The length of the statement  "                        throw new InvalidOperationException("The texture sampler is incompatible with the rectangle texture bound to the same texture unit.  Rectangle textures do not support repeat or mirrored repeat wrap modes."); " is 207.
Complex Conditional,OpenGlobe.Renderer.GL3x,ContextGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\ContextGL3x.cs,ApplyBlending,The conditional expression  "(_renderState.Blending.SourceRGBFactor != blending.SourceRGBFactor) ||                      (_renderState.Blending.DestinationRGBFactor != blending.DestinationRGBFactor) ||                      (_renderState.Blending.SourceAlphaFactor != blending.SourceAlphaFactor) ||                      (_renderState.Blending.DestinationAlphaFactor != blending.DestinationAlphaFactor)"  is complex.
Complex Conditional,OpenGlobe.Renderer.GL3x,Texture2DGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Textures\Texture2DGL3x.cs,VerifyRowAlignment,The conditional expression  "(rowAlignment != 1) &&                   (rowAlignment != 2) &&                   (rowAlignment != 4) &&                   (rowAlignment != 8)"  is complex.
Complex Conditional,OpenGlobe.Renderer.GL3x,TextureUnitGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Textures\TextureUnitGL3x.cs,Validate,The conditional expression  "_textureSampler.WrapS == TextureWrap.Repeat ||                          _textureSampler.WrapS == TextureWrap.MirroredRepeat ||                          _textureSampler.WrapT == TextureWrap.Repeat ||                          _textureSampler.WrapT == TextureWrap.MirroredRepeat"  is complex.
Virtual Method Call from Constructor,OpenGlobe.Renderer,HighResolutionSnapFramebuffer,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Framebuffer\HighResolutionSnapFramebuffer.cs,HighResolutionSnapFramebuffer,The constructor "HighResolutionSnapFramebuffer" calls a virtual method "CreateFramebuffer".
Empty Catch Block,OpenGlobe.Renderer.GL3x,FinalizerThreadContextGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Names\FinalizerThreadContextGL3x.cs,RunFinalizer,The method has an empty catch block.
Magic Number,OpenGlobe.Renderer,Camera,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Scene\Camera.cs,Camera,The following statement contains a magic number: FieldOfViewY = Math.PI / 6.0;
Magic Number,OpenGlobe.Renderer,Camera,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Scene\Camera.cs,Camera,The following statement contains a magic number: PerspectiveNearPlaneDistance = 0.01;
Magic Number,OpenGlobe.Renderer,Camera,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Scene\Camera.cs,Camera,The following statement contains a magic number: PerspectiveFarPlaneDistance = 64;
Magic Number,OpenGlobe.Renderer,Camera,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Scene\Camera.cs,ZoomToTarget,The following statement contains a magic number: double sin = Math.Sin(Math.Min(FieldOfViewX' FieldOfViewY) * 0.5);
Magic Number,OpenGlobe.Renderer,Camera,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Scene\Camera.cs,LoadView,The following statement contains a magic number: Eye = new Vector3D(                  Convert.ToDouble(eye[0]' CultureInfo.InvariantCulture)'                   Convert.ToDouble(eye[1]' CultureInfo.InvariantCulture)'                   Convert.ToDouble(eye[2]' CultureInfo.InvariantCulture));
Magic Number,OpenGlobe.Renderer,Camera,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Scene\Camera.cs,LoadView,The following statement contains a magic number: Target = new Vector3D(                  Convert.ToDouble(target[0]' CultureInfo.InvariantCulture)'                  Convert.ToDouble(target[1]' CultureInfo.InvariantCulture)'                  Convert.ToDouble(target[2]' CultureInfo.InvariantCulture));
Magic Number,OpenGlobe.Renderer,Camera,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Scene\Camera.cs,LoadView,The following statement contains a magic number: string[] up = nodeList[0].ChildNodes[2].InnerText.Split(new[] { ' ' });
Magic Number,OpenGlobe.Renderer,Camera,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Scene\Camera.cs,LoadView,The following statement contains a magic number: Up = new Vector3D(                  Convert.ToDouble(up[0]' CultureInfo.InvariantCulture)'                  Convert.ToDouble(up[1]' CultureInfo.InvariantCulture)'                  Convert.ToDouble(up[2]' CultureInfo.InvariantCulture));
Magic Number,OpenGlobe.Renderer,SceneState,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Scene\SceneState.cs,SceneState,The following statement contains a magic number: Shininess = 12;
Magic Number,OpenGlobe.Renderer,SceneState,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Scene\SceneState.cs,SceneState,The following statement contains a magic number: SunPosition = new Vector3D(200000' 0' 0);
Magic Number,OpenGlobe.Renderer,SceneState,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Scene\SceneState.cs,ComputeViewportTransformationMatrix,The following statement contains a magic number: double halfWidth = viewport.Width * 0.5;
Magic Number,OpenGlobe.Renderer,SceneState,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Scene\SceneState.cs,ComputeViewportTransformationMatrix,The following statement contains a magic number: double halfHeight = viewport.Height * 0.5;
Magic Number,OpenGlobe.Renderer,SceneState,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Scene\SceneState.cs,ComputeViewportTransformationMatrix,The following statement contains a magic number: double halfDepth = (farDepthRange - nearDepthRange) * 0.5;
Magic Number,OpenGlobe.Renderer,PixelSizePerDistanceUniform,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Shaders\DrawAutomaticUniforms\PixelSizePerDistanceUniform.cs,Set,The following statement contains a magic number: _uniform.Value = (float)(Math.Tan(0.5 * sceneState.Camera.FieldOfViewY) * 2.0 / context.Viewport.Height);
Magic Number,OpenGlobe.Renderer,PixelSizePerDistanceUniform,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Shaders\DrawAutomaticUniforms\PixelSizePerDistanceUniform.cs,Set,The following statement contains a magic number: _uniform.Value = (float)(Math.Tan(0.5 * sceneState.Camera.FieldOfViewY) * 2.0 / context.Viewport.Height);
Magic Number,OpenGlobe.Renderer,WindowToWorldNearPlaneUniform,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Shaders\DrawAutomaticUniforms\WindowToWorldNearPlaneUniform.cs,Set,The following statement contains a magic number: double theta = camera.FieldOfViewX * 0.5;
Magic Number,OpenGlobe.Renderer,WindowToWorldNearPlaneUniform,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Shaders\DrawAutomaticUniforms\WindowToWorldNearPlaneUniform.cs,Set,The following statement contains a magic number: double phi = camera.FieldOfViewY * 0.5;
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,NumberOfChannels,The following statement contains a magic number: switch (format)              {                  case ImageFormat.StencilIndex:                      return 1;                  case ImageFormat.DepthComponent:                      return 1;                  case ImageFormat.Red:                      return 1;                  case ImageFormat.Green:                      return 1;                  case ImageFormat.Blue:                      return 1;                  case ImageFormat.RedGreenBlue:                      return 3;                  case ImageFormat.RedGreenBlueAlpha:                      return 4;                  case ImageFormat.BlueGreenRed:                      return 3;                  case ImageFormat.BlueGreenRedAlpha:                      return 4;                  case ImageFormat.RedGreen:                      return 2;                  case ImageFormat.RedGreenInteger:                      return 2;                  case ImageFormat.DepthStencil:                      return 2;                  case ImageFormat.RedInteger:                      return 1;                  case ImageFormat.GreenInteger:                      return 1;                  case ImageFormat.BlueInteger:                      return 1;                  case ImageFormat.RedGreenBlueInteger:                      return 3;                  case ImageFormat.RedGreenBlueAlphaInteger:                      return 4;                  case ImageFormat.BlueGreenRedInteger:                      return 3;                  case ImageFormat.BlueGreenRedAlphaInteger:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,NumberOfChannels,The following statement contains a magic number: switch (format)              {                  case ImageFormat.StencilIndex:                      return 1;                  case ImageFormat.DepthComponent:                      return 1;                  case ImageFormat.Red:                      return 1;                  case ImageFormat.Green:                      return 1;                  case ImageFormat.Blue:                      return 1;                  case ImageFormat.RedGreenBlue:                      return 3;                  case ImageFormat.RedGreenBlueAlpha:                      return 4;                  case ImageFormat.BlueGreenRed:                      return 3;                  case ImageFormat.BlueGreenRedAlpha:                      return 4;                  case ImageFormat.RedGreen:                      return 2;                  case ImageFormat.RedGreenInteger:                      return 2;                  case ImageFormat.DepthStencil:                      return 2;                  case ImageFormat.RedInteger:                      return 1;                  case ImageFormat.GreenInteger:                      return 1;                  case ImageFormat.BlueInteger:                      return 1;                  case ImageFormat.RedGreenBlueInteger:                      return 3;                  case ImageFormat.RedGreenBlueAlphaInteger:                      return 4;                  case ImageFormat.BlueGreenRedInteger:                      return 3;                  case ImageFormat.BlueGreenRedAlphaInteger:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,NumberOfChannels,The following statement contains a magic number: switch (format)              {                  case ImageFormat.StencilIndex:                      return 1;                  case ImageFormat.DepthComponent:                      return 1;                  case ImageFormat.Red:                      return 1;                  case ImageFormat.Green:                      return 1;                  case ImageFormat.Blue:                      return 1;                  case ImageFormat.RedGreenBlue:                      return 3;                  case ImageFormat.RedGreenBlueAlpha:                      return 4;                  case ImageFormat.BlueGreenRed:                      return 3;                  case ImageFormat.BlueGreenRedAlpha:                      return 4;                  case ImageFormat.RedGreen:                      return 2;                  case ImageFormat.RedGreenInteger:                      return 2;                  case ImageFormat.DepthStencil:                      return 2;                  case ImageFormat.RedInteger:                      return 1;                  case ImageFormat.GreenInteger:                      return 1;                  case ImageFormat.BlueInteger:                      return 1;                  case ImageFormat.RedGreenBlueInteger:                      return 3;                  case ImageFormat.RedGreenBlueAlphaInteger:                      return 4;                  case ImageFormat.BlueGreenRedInteger:                      return 3;                  case ImageFormat.BlueGreenRedAlphaInteger:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,NumberOfChannels,The following statement contains a magic number: switch (format)              {                  case ImageFormat.StencilIndex:                      return 1;                  case ImageFormat.DepthComponent:                      return 1;                  case ImageFormat.Red:                      return 1;                  case ImageFormat.Green:                      return 1;                  case ImageFormat.Blue:                      return 1;                  case ImageFormat.RedGreenBlue:                      return 3;                  case ImageFormat.RedGreenBlueAlpha:                      return 4;                  case ImageFormat.BlueGreenRed:                      return 3;                  case ImageFormat.BlueGreenRedAlpha:                      return 4;                  case ImageFormat.RedGreen:                      return 2;                  case ImageFormat.RedGreenInteger:                      return 2;                  case ImageFormat.DepthStencil:                      return 2;                  case ImageFormat.RedInteger:                      return 1;                  case ImageFormat.GreenInteger:                      return 1;                  case ImageFormat.BlueInteger:                      return 1;                  case ImageFormat.RedGreenBlueInteger:                      return 3;                  case ImageFormat.RedGreenBlueAlphaInteger:                      return 4;                  case ImageFormat.BlueGreenRedInteger:                      return 3;                  case ImageFormat.BlueGreenRedAlphaInteger:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,NumberOfChannels,The following statement contains a magic number: switch (format)              {                  case ImageFormat.StencilIndex:                      return 1;                  case ImageFormat.DepthComponent:                      return 1;                  case ImageFormat.Red:                      return 1;                  case ImageFormat.Green:                      return 1;                  case ImageFormat.Blue:                      return 1;                  case ImageFormat.RedGreenBlue:                      return 3;                  case ImageFormat.RedGreenBlueAlpha:                      return 4;                  case ImageFormat.BlueGreenRed:                      return 3;                  case ImageFormat.BlueGreenRedAlpha:                      return 4;                  case ImageFormat.RedGreen:                      return 2;                  case ImageFormat.RedGreenInteger:                      return 2;                  case ImageFormat.DepthStencil:                      return 2;                  case ImageFormat.RedInteger:                      return 1;                  case ImageFormat.GreenInteger:                      return 1;                  case ImageFormat.BlueInteger:                      return 1;                  case ImageFormat.RedGreenBlueInteger:                      return 3;                  case ImageFormat.RedGreenBlueAlphaInteger:                      return 4;                  case ImageFormat.BlueGreenRedInteger:                      return 3;                  case ImageFormat.BlueGreenRedAlphaInteger:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,NumberOfChannels,The following statement contains a magic number: switch (format)              {                  case ImageFormat.StencilIndex:                      return 1;                  case ImageFormat.DepthComponent:                      return 1;                  case ImageFormat.Red:                      return 1;                  case ImageFormat.Green:                      return 1;                  case ImageFormat.Blue:                      return 1;                  case ImageFormat.RedGreenBlue:                      return 3;                  case ImageFormat.RedGreenBlueAlpha:                      return 4;                  case ImageFormat.BlueGreenRed:                      return 3;                  case ImageFormat.BlueGreenRedAlpha:                      return 4;                  case ImageFormat.RedGreen:                      return 2;                  case ImageFormat.RedGreenInteger:                      return 2;                  case ImageFormat.DepthStencil:                      return 2;                  case ImageFormat.RedInteger:                      return 1;                  case ImageFormat.GreenInteger:                      return 1;                  case ImageFormat.BlueInteger:                      return 1;                  case ImageFormat.RedGreenBlueInteger:                      return 3;                  case ImageFormat.RedGreenBlueAlphaInteger:                      return 4;                  case ImageFormat.BlueGreenRedInteger:                      return 3;                  case ImageFormat.BlueGreenRedAlphaInteger:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,NumberOfChannels,The following statement contains a magic number: switch (format)              {                  case ImageFormat.StencilIndex:                      return 1;                  case ImageFormat.DepthComponent:                      return 1;                  case ImageFormat.Red:                      return 1;                  case ImageFormat.Green:                      return 1;                  case ImageFormat.Blue:                      return 1;                  case ImageFormat.RedGreenBlue:                      return 3;                  case ImageFormat.RedGreenBlueAlpha:                      return 4;                  case ImageFormat.BlueGreenRed:                      return 3;                  case ImageFormat.BlueGreenRedAlpha:                      return 4;                  case ImageFormat.RedGreen:                      return 2;                  case ImageFormat.RedGreenInteger:                      return 2;                  case ImageFormat.DepthStencil:                      return 2;                  case ImageFormat.RedInteger:                      return 1;                  case ImageFormat.GreenInteger:                      return 1;                  case ImageFormat.BlueInteger:                      return 1;                  case ImageFormat.RedGreenBlueInteger:                      return 3;                  case ImageFormat.RedGreenBlueAlphaInteger:                      return 4;                  case ImageFormat.BlueGreenRedInteger:                      return 3;                  case ImageFormat.BlueGreenRedAlphaInteger:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,NumberOfChannels,The following statement contains a magic number: switch (format)              {                  case ImageFormat.StencilIndex:                      return 1;                  case ImageFormat.DepthComponent:                      return 1;                  case ImageFormat.Red:                      return 1;                  case ImageFormat.Green:                      return 1;                  case ImageFormat.Blue:                      return 1;                  case ImageFormat.RedGreenBlue:                      return 3;                  case ImageFormat.RedGreenBlueAlpha:                      return 4;                  case ImageFormat.BlueGreenRed:                      return 3;                  case ImageFormat.BlueGreenRedAlpha:                      return 4;                  case ImageFormat.RedGreen:                      return 2;                  case ImageFormat.RedGreenInteger:                      return 2;                  case ImageFormat.DepthStencil:                      return 2;                  case ImageFormat.RedInteger:                      return 1;                  case ImageFormat.GreenInteger:                      return 1;                  case ImageFormat.BlueInteger:                      return 1;                  case ImageFormat.RedGreenBlueInteger:                      return 3;                  case ImageFormat.RedGreenBlueAlphaInteger:                      return 4;                  case ImageFormat.BlueGreenRedInteger:                      return 3;                  case ImageFormat.BlueGreenRedAlphaInteger:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,NumberOfChannels,The following statement contains a magic number: switch (format)              {                  case ImageFormat.StencilIndex:                      return 1;                  case ImageFormat.DepthComponent:                      return 1;                  case ImageFormat.Red:                      return 1;                  case ImageFormat.Green:                      return 1;                  case ImageFormat.Blue:                      return 1;                  case ImageFormat.RedGreenBlue:                      return 3;                  case ImageFormat.RedGreenBlueAlpha:                      return 4;                  case ImageFormat.BlueGreenRed:                      return 3;                  case ImageFormat.BlueGreenRedAlpha:                      return 4;                  case ImageFormat.RedGreen:                      return 2;                  case ImageFormat.RedGreenInteger:                      return 2;                  case ImageFormat.DepthStencil:                      return 2;                  case ImageFormat.RedInteger:                      return 1;                  case ImageFormat.GreenInteger:                      return 1;                  case ImageFormat.BlueInteger:                      return 1;                  case ImageFormat.RedGreenBlueInteger:                      return 3;                  case ImageFormat.RedGreenBlueAlphaInteger:                      return 4;                  case ImageFormat.BlueGreenRedInteger:                      return 3;                  case ImageFormat.BlueGreenRedAlphaInteger:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,NumberOfChannels,The following statement contains a magic number: switch (format)              {                  case ImageFormat.StencilIndex:                      return 1;                  case ImageFormat.DepthComponent:                      return 1;                  case ImageFormat.Red:                      return 1;                  case ImageFormat.Green:                      return 1;                  case ImageFormat.Blue:                      return 1;                  case ImageFormat.RedGreenBlue:                      return 3;                  case ImageFormat.RedGreenBlueAlpha:                      return 4;                  case ImageFormat.BlueGreenRed:                      return 3;                  case ImageFormat.BlueGreenRedAlpha:                      return 4;                  case ImageFormat.RedGreen:                      return 2;                  case ImageFormat.RedGreenInteger:                      return 2;                  case ImageFormat.DepthStencil:                      return 2;                  case ImageFormat.RedInteger:                      return 1;                  case ImageFormat.GreenInteger:                      return 1;                  case ImageFormat.BlueInteger:                      return 1;                  case ImageFormat.RedGreenBlueInteger:                      return 3;                  case ImageFormat.RedGreenBlueAlphaInteger:                      return 4;                  case ImageFormat.BlueGreenRedInteger:                      return 3;                  case ImageFormat.BlueGreenRedAlphaInteger:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,NumberOfChannels,The following statement contains a magic number: switch (format)              {                  case ImageFormat.StencilIndex:                      return 1;                  case ImageFormat.DepthComponent:                      return 1;                  case ImageFormat.Red:                      return 1;                  case ImageFormat.Green:                      return 1;                  case ImageFormat.Blue:                      return 1;                  case ImageFormat.RedGreenBlue:                      return 3;                  case ImageFormat.RedGreenBlueAlpha:                      return 4;                  case ImageFormat.BlueGreenRed:                      return 3;                  case ImageFormat.BlueGreenRedAlpha:                      return 4;                  case ImageFormat.RedGreen:                      return 2;                  case ImageFormat.RedGreenInteger:                      return 2;                  case ImageFormat.DepthStencil:                      return 2;                  case ImageFormat.RedInteger:                      return 1;                  case ImageFormat.GreenInteger:                      return 1;                  case ImageFormat.BlueInteger:                      return 1;                  case ImageFormat.RedGreenBlueInteger:                      return 3;                  case ImageFormat.RedGreenBlueAlphaInteger:                      return 4;                  case ImageFormat.BlueGreenRedInteger:                      return 3;                  case ImageFormat.BlueGreenRedAlphaInteger:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following statement contains a magic number: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Magic Number,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateMeshBuffers,The following statement contains a magic number: foreach (VertexAttribute attribute in mesh.Attributes)              {                  if (attribute is VertexAttributeDoubleVector3)                  {                      VertexAttributeDoubleVector3 emulated = (VertexAttributeDoubleVector3)attribute;                        int highLocation = -1;                      int lowLocation = -1;                        foreach (ShaderVertexAttribute shaderAttribute in shaderAttributes)                      {                          if (shaderAttribute.Name == emulated.Name + "High")                          {                              highLocation = shaderAttribute.Location;                          }                          else if (shaderAttribute.Name == emulated.Name + "Low")                          {                              lowLocation = shaderAttribute.Location;                          }                            if ((highLocation != -1) && (lowLocation != -1))                          {                              break;                          }                      }                        if ((highLocation == -1) && (lowLocation == -1))                      {                          //                          // The shader did not have either attribute.  No problem.                          //                          continue;                      }                      else if ((highLocation == -1) || (lowLocation == -1))                      {                          throw new ArgumentException("An emulated double vec3 mesh attribute requires both " + emulated.Name + "High and " + emulated.Name + "Low vertex attributes' but the shader only contains one matching attribute.");                      }                        //                      // Copy both high and low parts into a single vertex buffer.                      //                      IList<Vector3D> values = ((VertexAttribute<Vector3D>)attribute).Values;                        Vector3F[] vertices = new Vector3F[2 * values.Count];                        int j = 0;                      for (int i = 0; i < values.Count; ++i)                      {                          EmulatedVector3D v = new EmulatedVector3D(values[i]);                          vertices[j++] = v.High;                          vertices[j++] = v.Low;                      }                        VertexBuffer vertexBuffer = Device.CreateVertexBuffer(usageHint' ArraySizeInBytes.Size(vertices));                      vertexBuffer.CopyFromSystemMemory(vertices);                        int stride = 2 * SizeInBytes<Vector3F>.Value;                      meshBuffers.Attributes[highLocation] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3' false' 0' stride);                      meshBuffers.Attributes[lowLocation] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3' false' SizeInBytes<Vector3F>.Value' stride);                        ignoreAttributes.Add(emulated.Name + "High");                      ignoreAttributes.Add(emulated.Name + "Low");                  }              }
Magic Number,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateMeshBuffers,The following statement contains a magic number: foreach (VertexAttribute attribute in mesh.Attributes)              {                  if (attribute is VertexAttributeDoubleVector3)                  {                      VertexAttributeDoubleVector3 emulated = (VertexAttributeDoubleVector3)attribute;                        int highLocation = -1;                      int lowLocation = -1;                        foreach (ShaderVertexAttribute shaderAttribute in shaderAttributes)                      {                          if (shaderAttribute.Name == emulated.Name + "High")                          {                              highLocation = shaderAttribute.Location;                          }                          else if (shaderAttribute.Name == emulated.Name + "Low")                          {                              lowLocation = shaderAttribute.Location;                          }                            if ((highLocation != -1) && (lowLocation != -1))                          {                              break;                          }                      }                        if ((highLocation == -1) && (lowLocation == -1))                      {                          //                          // The shader did not have either attribute.  No problem.                          //                          continue;                      }                      else if ((highLocation == -1) || (lowLocation == -1))                      {                          throw new ArgumentException("An emulated double vec3 mesh attribute requires both " + emulated.Name + "High and " + emulated.Name + "Low vertex attributes' but the shader only contains one matching attribute.");                      }                        //                      // Copy both high and low parts into a single vertex buffer.                      //                      IList<Vector3D> values = ((VertexAttribute<Vector3D>)attribute).Values;                        Vector3F[] vertices = new Vector3F[2 * values.Count];                        int j = 0;                      for (int i = 0; i < values.Count; ++i)                      {                          EmulatedVector3D v = new EmulatedVector3D(values[i]);                          vertices[j++] = v.High;                          vertices[j++] = v.Low;                      }                        VertexBuffer vertexBuffer = Device.CreateVertexBuffer(usageHint' ArraySizeInBytes.Size(vertices));                      vertexBuffer.CopyFromSystemMemory(vertices);                        int stride = 2 * SizeInBytes<Vector3F>.Value;                      meshBuffers.Attributes[highLocation] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3' false' 0' stride);                      meshBuffers.Attributes[lowLocation] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3' false' SizeInBytes<Vector3F>.Value' stride);                        ignoreAttributes.Add(emulated.Name + "High");                      ignoreAttributes.Add(emulated.Name + "Low");                  }              }
Magic Number,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateMeshBuffers,The following statement contains a magic number: foreach (VertexAttribute attribute in mesh.Attributes)              {                  if (attribute is VertexAttributeDoubleVector3)                  {                      VertexAttributeDoubleVector3 emulated = (VertexAttributeDoubleVector3)attribute;                        int highLocation = -1;                      int lowLocation = -1;                        foreach (ShaderVertexAttribute shaderAttribute in shaderAttributes)                      {                          if (shaderAttribute.Name == emulated.Name + "High")                          {                              highLocation = shaderAttribute.Location;                          }                          else if (shaderAttribute.Name == emulated.Name + "Low")                          {                              lowLocation = shaderAttribute.Location;                          }                            if ((highLocation != -1) && (lowLocation != -1))                          {                              break;                          }                      }                        if ((highLocation == -1) && (lowLocation == -1))                      {                          //                          // The shader did not have either attribute.  No problem.                          //                          continue;                      }                      else if ((highLocation == -1) || (lowLocation == -1))                      {                          throw new ArgumentException("An emulated double vec3 mesh attribute requires both " + emulated.Name + "High and " + emulated.Name + "Low vertex attributes' but the shader only contains one matching attribute.");                      }                        //                      // Copy both high and low parts into a single vertex buffer.                      //                      IList<Vector3D> values = ((VertexAttribute<Vector3D>)attribute).Values;                        Vector3F[] vertices = new Vector3F[2 * values.Count];                        int j = 0;                      for (int i = 0; i < values.Count; ++i)                      {                          EmulatedVector3D v = new EmulatedVector3D(values[i]);                          vertices[j++] = v.High;                          vertices[j++] = v.Low;                      }                        VertexBuffer vertexBuffer = Device.CreateVertexBuffer(usageHint' ArraySizeInBytes.Size(vertices));                      vertexBuffer.CopyFromSystemMemory(vertices);                        int stride = 2 * SizeInBytes<Vector3F>.Value;                      meshBuffers.Attributes[highLocation] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3' false' 0' stride);                      meshBuffers.Attributes[lowLocation] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3' false' SizeInBytes<Vector3F>.Value' stride);                        ignoreAttributes.Add(emulated.Name + "High");                      ignoreAttributes.Add(emulated.Name + "Low");                  }              }
Magic Number,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateMeshBuffers,The following statement contains a magic number: foreach (VertexAttribute attribute in mesh.Attributes)              {                  if (attribute is VertexAttributeDoubleVector3)                  {                      VertexAttributeDoubleVector3 emulated = (VertexAttributeDoubleVector3)attribute;                        int highLocation = -1;                      int lowLocation = -1;                        foreach (ShaderVertexAttribute shaderAttribute in shaderAttributes)                      {                          if (shaderAttribute.Name == emulated.Name + "High")                          {                              highLocation = shaderAttribute.Location;                          }                          else if (shaderAttribute.Name == emulated.Name + "Low")                          {                              lowLocation = shaderAttribute.Location;                          }                            if ((highLocation != -1) && (lowLocation != -1))                          {                              break;                          }                      }                        if ((highLocation == -1) && (lowLocation == -1))                      {                          //                          // The shader did not have either attribute.  No problem.                          //                          continue;                      }                      else if ((highLocation == -1) || (lowLocation == -1))                      {                          throw new ArgumentException("An emulated double vec3 mesh attribute requires both " + emulated.Name + "High and " + emulated.Name + "Low vertex attributes' but the shader only contains one matching attribute.");                      }                        //                      // Copy both high and low parts into a single vertex buffer.                      //                      IList<Vector3D> values = ((VertexAttribute<Vector3D>)attribute).Values;                        Vector3F[] vertices = new Vector3F[2 * values.Count];                        int j = 0;                      for (int i = 0; i < values.Count; ++i)                      {                          EmulatedVector3D v = new EmulatedVector3D(values[i]);                          vertices[j++] = v.High;                          vertices[j++] = v.Low;                      }                        VertexBuffer vertexBuffer = Device.CreateVertexBuffer(usageHint' ArraySizeInBytes.Size(vertices));                      vertexBuffer.CopyFromSystemMemory(vertices);                        int stride = 2 * SizeInBytes<Vector3F>.Value;                      meshBuffers.Attributes[highLocation] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3' false' 0' stride);                      meshBuffers.Attributes[lowLocation] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3' false' SizeInBytes<Vector3F>.Value' stride);                        ignoreAttributes.Add(emulated.Name + "High");                      ignoreAttributes.Add(emulated.Name + "Low");                  }              }
Magic Number,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateMeshBuffers,The following statement contains a magic number: foreach (ShaderVertexAttribute shaderAttribute in shaderAttributes)              {                  if (ignoreAttributes.Contains(shaderAttribute.Name))                  {                      continue;                  }                    if (!mesh.Attributes.Contains(shaderAttribute.Name))                  {                      throw new ArgumentException("Shader requires vertex attribute \"" + shaderAttribute.Name + "\"' which is not present in mesh.");                  }                    VertexAttribute attribute = mesh.Attributes[shaderAttribute.Name];                      if (attribute.Datatype == VertexAttributeType.EmulatedDoubleVector3)                  {                      IList<Vector3D> values = ((VertexAttribute<Vector3D>)attribute).Values;                        Vector3F[] valuesArray = new Vector3F[values.Count];                      for (int i = 0; i < values.Count; ++i)                      {                          valuesArray[i] = values[i].ToVector3F();                      }                        VertexBuffer vertexBuffer = Device.CreateVertexBuffer(usageHint' ArraySizeInBytes.Size(valuesArray));                      vertexBuffer.CopyFromSystemMemory(valuesArray);                      meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloat)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Half>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 1);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector2)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector2H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 2);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector3)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector3H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector4)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector4H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 4);                  }                  else if (attribute.Datatype == VertexAttributeType.Float)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<float>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 1);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector2)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector2F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 2);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector3)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector3F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector4)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector4F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 4);                  }                  else if (attribute.Datatype == VertexAttributeType.UnsignedByte)                  {                      if (attribute is VertexAttributeRGBA)                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 4' true' 0' 0);                      }                        else if (attribute is VertexAttributeRGB)                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 3' true' 0' 0);                      }                      else                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 1);                      }                  }                  else                  {                      Debug.Fail("attribute.Datatype");                  }              }
Magic Number,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateMeshBuffers,The following statement contains a magic number: foreach (ShaderVertexAttribute shaderAttribute in shaderAttributes)              {                  if (ignoreAttributes.Contains(shaderAttribute.Name))                  {                      continue;                  }                    if (!mesh.Attributes.Contains(shaderAttribute.Name))                  {                      throw new ArgumentException("Shader requires vertex attribute \"" + shaderAttribute.Name + "\"' which is not present in mesh.");                  }                    VertexAttribute attribute = mesh.Attributes[shaderAttribute.Name];                      if (attribute.Datatype == VertexAttributeType.EmulatedDoubleVector3)                  {                      IList<Vector3D> values = ((VertexAttribute<Vector3D>)attribute).Values;                        Vector3F[] valuesArray = new Vector3F[values.Count];                      for (int i = 0; i < values.Count; ++i)                      {                          valuesArray[i] = values[i].ToVector3F();                      }                        VertexBuffer vertexBuffer = Device.CreateVertexBuffer(usageHint' ArraySizeInBytes.Size(valuesArray));                      vertexBuffer.CopyFromSystemMemory(valuesArray);                      meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloat)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Half>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 1);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector2)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector2H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 2);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector3)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector3H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector4)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector4H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 4);                  }                  else if (attribute.Datatype == VertexAttributeType.Float)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<float>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 1);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector2)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector2F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 2);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector3)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector3F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector4)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector4F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 4);                  }                  else if (attribute.Datatype == VertexAttributeType.UnsignedByte)                  {                      if (attribute is VertexAttributeRGBA)                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 4' true' 0' 0);                      }                        else if (attribute is VertexAttributeRGB)                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 3' true' 0' 0);                      }                      else                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 1);                      }                  }                  else                  {                      Debug.Fail("attribute.Datatype");                  }              }
Magic Number,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateMeshBuffers,The following statement contains a magic number: foreach (ShaderVertexAttribute shaderAttribute in shaderAttributes)              {                  if (ignoreAttributes.Contains(shaderAttribute.Name))                  {                      continue;                  }                    if (!mesh.Attributes.Contains(shaderAttribute.Name))                  {                      throw new ArgumentException("Shader requires vertex attribute \"" + shaderAttribute.Name + "\"' which is not present in mesh.");                  }                    VertexAttribute attribute = mesh.Attributes[shaderAttribute.Name];                      if (attribute.Datatype == VertexAttributeType.EmulatedDoubleVector3)                  {                      IList<Vector3D> values = ((VertexAttribute<Vector3D>)attribute).Values;                        Vector3F[] valuesArray = new Vector3F[values.Count];                      for (int i = 0; i < values.Count; ++i)                      {                          valuesArray[i] = values[i].ToVector3F();                      }                        VertexBuffer vertexBuffer = Device.CreateVertexBuffer(usageHint' ArraySizeInBytes.Size(valuesArray));                      vertexBuffer.CopyFromSystemMemory(valuesArray);                      meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloat)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Half>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 1);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector2)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector2H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 2);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector3)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector3H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector4)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector4H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 4);                  }                  else if (attribute.Datatype == VertexAttributeType.Float)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<float>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 1);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector2)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector2F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 2);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector3)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector3F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector4)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector4F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 4);                  }                  else if (attribute.Datatype == VertexAttributeType.UnsignedByte)                  {                      if (attribute is VertexAttributeRGBA)                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 4' true' 0' 0);                      }                        else if (attribute is VertexAttributeRGB)                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 3' true' 0' 0);                      }                      else                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 1);                      }                  }                  else                  {                      Debug.Fail("attribute.Datatype");                  }              }
Magic Number,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateMeshBuffers,The following statement contains a magic number: foreach (ShaderVertexAttribute shaderAttribute in shaderAttributes)              {                  if (ignoreAttributes.Contains(shaderAttribute.Name))                  {                      continue;                  }                    if (!mesh.Attributes.Contains(shaderAttribute.Name))                  {                      throw new ArgumentException("Shader requires vertex attribute \"" + shaderAttribute.Name + "\"' which is not present in mesh.");                  }                    VertexAttribute attribute = mesh.Attributes[shaderAttribute.Name];                      if (attribute.Datatype == VertexAttributeType.EmulatedDoubleVector3)                  {                      IList<Vector3D> values = ((VertexAttribute<Vector3D>)attribute).Values;                        Vector3F[] valuesArray = new Vector3F[values.Count];                      for (int i = 0; i < values.Count; ++i)                      {                          valuesArray[i] = values[i].ToVector3F();                      }                        VertexBuffer vertexBuffer = Device.CreateVertexBuffer(usageHint' ArraySizeInBytes.Size(valuesArray));                      vertexBuffer.CopyFromSystemMemory(valuesArray);                      meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloat)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Half>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 1);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector2)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector2H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 2);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector3)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector3H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector4)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector4H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 4);                  }                  else if (attribute.Datatype == VertexAttributeType.Float)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<float>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 1);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector2)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector2F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 2);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector3)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector3F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector4)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector4F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 4);                  }                  else if (attribute.Datatype == VertexAttributeType.UnsignedByte)                  {                      if (attribute is VertexAttributeRGBA)                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 4' true' 0' 0);                      }                        else if (attribute is VertexAttributeRGB)                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 3' true' 0' 0);                      }                      else                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 1);                      }                  }                  else                  {                      Debug.Fail("attribute.Datatype");                  }              }
Magic Number,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateMeshBuffers,The following statement contains a magic number: foreach (ShaderVertexAttribute shaderAttribute in shaderAttributes)              {                  if (ignoreAttributes.Contains(shaderAttribute.Name))                  {                      continue;                  }                    if (!mesh.Attributes.Contains(shaderAttribute.Name))                  {                      throw new ArgumentException("Shader requires vertex attribute \"" + shaderAttribute.Name + "\"' which is not present in mesh.");                  }                    VertexAttribute attribute = mesh.Attributes[shaderAttribute.Name];                      if (attribute.Datatype == VertexAttributeType.EmulatedDoubleVector3)                  {                      IList<Vector3D> values = ((VertexAttribute<Vector3D>)attribute).Values;                        Vector3F[] valuesArray = new Vector3F[values.Count];                      for (int i = 0; i < values.Count; ++i)                      {                          valuesArray[i] = values[i].ToVector3F();                      }                        VertexBuffer vertexBuffer = Device.CreateVertexBuffer(usageHint' ArraySizeInBytes.Size(valuesArray));                      vertexBuffer.CopyFromSystemMemory(valuesArray);                      meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloat)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Half>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 1);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector2)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector2H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 2);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector3)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector3H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector4)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector4H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 4);                  }                  else if (attribute.Datatype == VertexAttributeType.Float)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<float>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 1);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector2)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector2F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 2);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector3)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector3F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector4)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector4F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 4);                  }                  else if (attribute.Datatype == VertexAttributeType.UnsignedByte)                  {                      if (attribute is VertexAttributeRGBA)                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 4' true' 0' 0);                      }                        else if (attribute is VertexAttributeRGB)                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 3' true' 0' 0);                      }                      else                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 1);                      }                  }                  else                  {                      Debug.Fail("attribute.Datatype");                  }              }
Magic Number,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateMeshBuffers,The following statement contains a magic number: foreach (ShaderVertexAttribute shaderAttribute in shaderAttributes)              {                  if (ignoreAttributes.Contains(shaderAttribute.Name))                  {                      continue;                  }                    if (!mesh.Attributes.Contains(shaderAttribute.Name))                  {                      throw new ArgumentException("Shader requires vertex attribute \"" + shaderAttribute.Name + "\"' which is not present in mesh.");                  }                    VertexAttribute attribute = mesh.Attributes[shaderAttribute.Name];                      if (attribute.Datatype == VertexAttributeType.EmulatedDoubleVector3)                  {                      IList<Vector3D> values = ((VertexAttribute<Vector3D>)attribute).Values;                        Vector3F[] valuesArray = new Vector3F[values.Count];                      for (int i = 0; i < values.Count; ++i)                      {                          valuesArray[i] = values[i].ToVector3F();                      }                        VertexBuffer vertexBuffer = Device.CreateVertexBuffer(usageHint' ArraySizeInBytes.Size(valuesArray));                      vertexBuffer.CopyFromSystemMemory(valuesArray);                      meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloat)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Half>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 1);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector2)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector2H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 2);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector3)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector3H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector4)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector4H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 4);                  }                  else if (attribute.Datatype == VertexAttributeType.Float)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<float>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 1);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector2)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector2F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 2);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector3)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector3F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector4)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector4F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 4);                  }                  else if (attribute.Datatype == VertexAttributeType.UnsignedByte)                  {                      if (attribute is VertexAttributeRGBA)                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 4' true' 0' 0);                      }                        else if (attribute is VertexAttributeRGB)                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 3' true' 0' 0);                      }                      else                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 1);                      }                  }                  else                  {                      Debug.Fail("attribute.Datatype");                  }              }
Magic Number,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateMeshBuffers,The following statement contains a magic number: foreach (ShaderVertexAttribute shaderAttribute in shaderAttributes)              {                  if (ignoreAttributes.Contains(shaderAttribute.Name))                  {                      continue;                  }                    if (!mesh.Attributes.Contains(shaderAttribute.Name))                  {                      throw new ArgumentException("Shader requires vertex attribute \"" + shaderAttribute.Name + "\"' which is not present in mesh.");                  }                    VertexAttribute attribute = mesh.Attributes[shaderAttribute.Name];                      if (attribute.Datatype == VertexAttributeType.EmulatedDoubleVector3)                  {                      IList<Vector3D> values = ((VertexAttribute<Vector3D>)attribute).Values;                        Vector3F[] valuesArray = new Vector3F[values.Count];                      for (int i = 0; i < values.Count; ++i)                      {                          valuesArray[i] = values[i].ToVector3F();                      }                        VertexBuffer vertexBuffer = Device.CreateVertexBuffer(usageHint' ArraySizeInBytes.Size(valuesArray));                      vertexBuffer.CopyFromSystemMemory(valuesArray);                      meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloat)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Half>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 1);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector2)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector2H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 2);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector3)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector3H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector4)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector4H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 4);                  }                  else if (attribute.Datatype == VertexAttributeType.Float)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<float>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 1);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector2)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector2F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 2);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector3)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector3F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector4)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector4F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 4);                  }                  else if (attribute.Datatype == VertexAttributeType.UnsignedByte)                  {                      if (attribute is VertexAttributeRGBA)                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 4' true' 0' 0);                      }                        else if (attribute is VertexAttributeRGB)                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 3' true' 0' 0);                      }                      else                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 1);                      }                  }                  else                  {                      Debug.Fail("attribute.Datatype");                  }              }
Magic Number,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateMeshBuffers,The following statement contains a magic number: foreach (ShaderVertexAttribute shaderAttribute in shaderAttributes)              {                  if (ignoreAttributes.Contains(shaderAttribute.Name))                  {                      continue;                  }                    if (!mesh.Attributes.Contains(shaderAttribute.Name))                  {                      throw new ArgumentException("Shader requires vertex attribute \"" + shaderAttribute.Name + "\"' which is not present in mesh.");                  }                    VertexAttribute attribute = mesh.Attributes[shaderAttribute.Name];                      if (attribute.Datatype == VertexAttributeType.EmulatedDoubleVector3)                  {                      IList<Vector3D> values = ((VertexAttribute<Vector3D>)attribute).Values;                        Vector3F[] valuesArray = new Vector3F[values.Count];                      for (int i = 0; i < values.Count; ++i)                      {                          valuesArray[i] = values[i].ToVector3F();                      }                        VertexBuffer vertexBuffer = Device.CreateVertexBuffer(usageHint' ArraySizeInBytes.Size(valuesArray));                      vertexBuffer.CopyFromSystemMemory(valuesArray);                      meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloat)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Half>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 1);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector2)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector2H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 2);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector3)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector3H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector4)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector4H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 4);                  }                  else if (attribute.Datatype == VertexAttributeType.Float)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<float>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 1);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector2)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector2F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 2);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector3)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector3F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector4)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector4F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 4);                  }                  else if (attribute.Datatype == VertexAttributeType.UnsignedByte)                  {                      if (attribute is VertexAttributeRGBA)                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 4' true' 0' 0);                      }                        else if (attribute is VertexAttributeRGB)                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 3' true' 0' 0);                      }                      else                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 1);                      }                  }                  else                  {                      Debug.Fail("attribute.Datatype");                  }              }
Magic Number,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateMeshBuffers,The following statement contains a magic number: foreach (ShaderVertexAttribute shaderAttribute in shaderAttributes)              {                  if (ignoreAttributes.Contains(shaderAttribute.Name))                  {                      continue;                  }                    if (!mesh.Attributes.Contains(shaderAttribute.Name))                  {                      throw new ArgumentException("Shader requires vertex attribute \"" + shaderAttribute.Name + "\"' which is not present in mesh.");                  }                    VertexAttribute attribute = mesh.Attributes[shaderAttribute.Name];                      if (attribute.Datatype == VertexAttributeType.EmulatedDoubleVector3)                  {                      IList<Vector3D> values = ((VertexAttribute<Vector3D>)attribute).Values;                        Vector3F[] valuesArray = new Vector3F[values.Count];                      for (int i = 0; i < values.Count; ++i)                      {                          valuesArray[i] = values[i].ToVector3F();                      }                        VertexBuffer vertexBuffer = Device.CreateVertexBuffer(usageHint' ArraySizeInBytes.Size(valuesArray));                      vertexBuffer.CopyFromSystemMemory(valuesArray);                      meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloat)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Half>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 1);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector2)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector2H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 2);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector3)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector3H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.HalfFloatVector4)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector4H>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.HalfFloat' 4);                  }                  else if (attribute.Datatype == VertexAttributeType.Float)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<float>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 1);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector2)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector2F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 2);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector3)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector3F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 3);                  }                  else if (attribute.Datatype == VertexAttributeType.FloatVector4)                  {                      VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<Vector4F>)attribute).Values' usageHint);                        meshBuffers.Attributes[shaderAttribute.Location] =                          new VertexBufferAttribute(vertexBuffer' ComponentDatatype.Float' 4);                  }                  else if (attribute.Datatype == VertexAttributeType.UnsignedByte)                  {                      if (attribute is VertexAttributeRGBA)                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 4' true' 0' 0);                      }                        else if (attribute is VertexAttributeRGB)                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 3' true' 0' 0);                      }                      else                      {                          VertexBuffer vertexBuffer = CreateVertexBuffer(((VertexAttribute<byte>)attribute).Values' usageHint);                            meshBuffers.Attributes[shaderAttribute.Location] =                              new VertexBufferAttribute(vertexBuffer' ComponentDatatype.UnsignedByte' 1);                      }                  }                  else                  {                      Debug.Fail("attribute.Datatype");                  }              }
Magic Number,OpenGlobe.Renderer,Device,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Device.cs,CreateBitmapFromPoint,The following statement contains a magic number: int diameter = radiusInPixels * 2;
Magic Number,OpenGlobe.Renderer,Texture2D,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2D.cs,CopyFromBuffer,The following statement contains a magic number: CopyFromBuffer(pixelBuffer' 0' 0' Description.Width' Description.Height' format' dataType' 4);
Magic Number,OpenGlobe.Renderer,Texture2D,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2D.cs,CopyToBuffer,The following statement contains a magic number: return CopyToBuffer(format' dataType' 4);
Magic Number,OpenGlobe.Renderer,Texture2D,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2D.cs,SaveColor,The following statement contains a magic number: using (ReadPixelBuffer pixelBuffer = CopyToBuffer(ImageFormat.BlueGreenRed' ImageDatatype.UnsignedByte' 4))              {                  Bitmap bitmap = pixelBuffer.CopyToBitmap(Description.Width' Description.Height' PixelFormat.Format24bppRgb);                  bitmap.Save(filename);              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following statement contains a magic number: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Magic Number,OpenGlobe.Renderer.GL3x,FinalizerThreadContextGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Names\FinalizerThreadContextGL3x.cs,FinalizerThreadContextGL3x,The following statement contains a magic number: _context = new GraphicsContext(new GraphicsMode(32' 24' 8)' _window.WindowInfo' 3' 2' GraphicsContextFlags.ForwardCompatible | GraphicsContextFlags.Debug);
Magic Number,OpenGlobe.Renderer.GL3x,FinalizerThreadContextGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Names\FinalizerThreadContextGL3x.cs,FinalizerThreadContextGL3x,The following statement contains a magic number: _context = new GraphicsContext(new GraphicsMode(32' 24' 8)' _window.WindowInfo' 3' 2' GraphicsContextFlags.ForwardCompatible | GraphicsContextFlags.Debug);
Magic Number,OpenGlobe.Renderer.GL3x,FinalizerThreadContextGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Names\FinalizerThreadContextGL3x.cs,FinalizerThreadContextGL3x,The following statement contains a magic number: _context = new GraphicsContext(new GraphicsMode(32' 24' 8)' _window.WindowInfo' 3' 2' GraphicsContextFlags.ForwardCompatible | GraphicsContextFlags.Debug);
Magic Number,OpenGlobe.Renderer.GL3x,FinalizerThreadContextGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Names\FinalizerThreadContextGL3x.cs,FinalizerThreadContextGL3x,The following statement contains a magic number: _context = new GraphicsContext(new GraphicsMode(32' 24' 8)' _window.WindowInfo' 3' 2' GraphicsContextFlags.ForwardCompatible | GraphicsContextFlags.Debug);
Magic Number,OpenGlobe.Renderer.GL3x,FinalizerThreadContextGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Names\FinalizerThreadContextGL3x.cs,FinalizerThreadContextGL3x,The following statement contains a magic number: _context = new GraphicsContext(new GraphicsMode(32' 24' 8)' _window.WindowInfo' 3' 2' GraphicsContextFlags.ForwardCompatible | GraphicsContextFlags.Debug);
Magic Number,OpenGlobe.Renderer.GL3x,ContextGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\ContextGL3x.cs,ContextGL3x,The following statement contains a magic number: _clearColor = Color.FromArgb(                  Convert.ToInt32(clearColor.W * 255.0)'                   Convert.ToInt32(clearColor.X * 255.0)'                   Convert.ToInt32(clearColor.Y * 255.0)'                  Convert.ToInt32(clearColor.Z * 255.0));
Magic Number,OpenGlobe.Renderer.GL3x,ContextGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\ContextGL3x.cs,ContextGL3x,The following statement contains a magic number: _clearColor = Color.FromArgb(                  Convert.ToInt32(clearColor.W * 255.0)'                   Convert.ToInt32(clearColor.X * 255.0)'                   Convert.ToInt32(clearColor.Y * 255.0)'                  Convert.ToInt32(clearColor.Z * 255.0));
Magic Number,OpenGlobe.Renderer.GL3x,ContextGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\ContextGL3x.cs,ContextGL3x,The following statement contains a magic number: _clearColor = Color.FromArgb(                  Convert.ToInt32(clearColor.W * 255.0)'                   Convert.ToInt32(clearColor.X * 255.0)'                   Convert.ToInt32(clearColor.Y * 255.0)'                  Convert.ToInt32(clearColor.Z * 255.0));
Magic Number,OpenGlobe.Renderer.GL3x,ContextGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\ContextGL3x.cs,ContextGL3x,The following statement contains a magic number: _clearColor = Color.FromArgb(                  Convert.ToInt32(clearColor.W * 255.0)'                   Convert.ToInt32(clearColor.X * 255.0)'                   Convert.ToInt32(clearColor.Y * 255.0)'                  Convert.ToInt32(clearColor.Z * 255.0));
Magic Number,OpenGlobe.Renderer.GL3x,GraphicsWindowGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\GraphicsWindowGL3x.cs,GraphicsWindowGL3x,The following statement contains a magic number: _gameWindow = new GameWindow(width' height' new GraphicsMode(24' 24' 8)' title' gameWindowFlags'                  DisplayDevice.Default' 3' 3' GraphicsContextFlags.ForwardCompatible | GraphicsContextFlags.Debug);
Magic Number,OpenGlobe.Renderer.GL3x,GraphicsWindowGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\GraphicsWindowGL3x.cs,GraphicsWindowGL3x,The following statement contains a magic number: _gameWindow = new GameWindow(width' height' new GraphicsMode(24' 24' 8)' title' gameWindowFlags'                  DisplayDevice.Default' 3' 3' GraphicsContextFlags.ForwardCompatible | GraphicsContextFlags.Debug);
Magic Number,OpenGlobe.Renderer.GL3x,GraphicsWindowGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\GraphicsWindowGL3x.cs,GraphicsWindowGL3x,The following statement contains a magic number: _gameWindow = new GameWindow(width' height' new GraphicsMode(24' 24' 8)' title' gameWindowFlags'                  DisplayDevice.Default' 3' 3' GraphicsContextFlags.ForwardCompatible | GraphicsContextFlags.Debug);
Magic Number,OpenGlobe.Renderer.GL3x,GraphicsWindowGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\GraphicsWindowGL3x.cs,GraphicsWindowGL3x,The following statement contains a magic number: _gameWindow = new GameWindow(width' height' new GraphicsMode(24' 24' 8)' title' gameWindowFlags'                  DisplayDevice.Default' 3' 3' GraphicsContextFlags.ForwardCompatible | GraphicsContextFlags.Debug);
Magic Number,OpenGlobe.Renderer.GL3x,GraphicsWindowGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\GraphicsWindowGL3x.cs,GraphicsWindowGL3x,The following statement contains a magic number: _gameWindow = new GameWindow(width' height' new GraphicsMode(24' 24' 8)' title' gameWindowFlags'                  DisplayDevice.Default' 3' 3' GraphicsContextFlags.ForwardCompatible | GraphicsContextFlags.Debug);
Magic Number,OpenGlobe.Renderer.GL3x,ShaderProgramGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Shaders\ShaderProgramGL3x.cs,CorrectUniformName,The following statement contains a magic number: if (name.EndsWith("[0]"' StringComparison.InvariantCulture))              {                  return name.Remove(name.Length - 3);              }
Magic Number,OpenGlobe.Renderer.GL3x,Texture2DGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Textures\Texture2DGL3x.cs,VerifyRowAlignment,The following statement contains a magic number: if ((rowAlignment != 1) &&                   (rowAlignment != 2) &&                   (rowAlignment != 4) &&                   (rowAlignment != 8))              {                  throw new ArgumentException("rowAlignment");              }
Magic Number,OpenGlobe.Renderer.GL3x,Texture2DGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Textures\Texture2DGL3x.cs,VerifyRowAlignment,The following statement contains a magic number: if ((rowAlignment != 1) &&                   (rowAlignment != 2) &&                   (rowAlignment != 4) &&                   (rowAlignment != 8))              {                  throw new ArgumentException("rowAlignment");              }
Magic Number,OpenGlobe.Renderer.GL3x,Texture2DGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Textures\Texture2DGL3x.cs,VerifyRowAlignment,The following statement contains a magic number: if ((rowAlignment != 1) &&                   (rowAlignment != 2) &&                   (rowAlignment != 4) &&                   (rowAlignment != 8))              {                  throw new ArgumentException("rowAlignment");              }
Missing Default,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,ImagingPixelFormatToDatatype,The following switch statement is missing a default case: switch (pixelFormat)              {                  case ImagingPixelFormat.Format16bppRgb555:                      return ImageDatatype.UnsignedShort5551;                  case ImagingPixelFormat.Format16bppRgb565:                      return ImageDatatype.UnsignedShort565;                  case ImagingPixelFormat.Format24bppRgb:                  case ImagingPixelFormat.Format32bppRgb:                  case ImagingPixelFormat.Format32bppArgb:                      return ImageDatatype.UnsignedByte;                  case ImagingPixelFormat.Format48bppRgb:                  case ImagingPixelFormat.Format64bppArgb:                      return ImageDatatype.UnsignedShort;                  case ImagingPixelFormat.Format16bppArgb1555:                      return ImageDatatype.UnsignedShort1555Reversed;              }
Missing Default,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,ImagingPixelFormatToImageFormat,The following switch statement is missing a default case: switch (pixelFormat)              {                  case ImagingPixelFormat.Format16bppRgb555:                  case ImagingPixelFormat.Format16bppRgb565:                  case ImagingPixelFormat.Format24bppRgb:                  case ImagingPixelFormat.Format32bppRgb:                  case ImagingPixelFormat.Format48bppRgb:                      return ImageFormat.BlueGreenRed;                  case ImagingPixelFormat.Format16bppArgb1555:                  case ImagingPixelFormat.Format32bppArgb:                  case ImagingPixelFormat.Format64bppArgb:                      return ImageFormat.BlueGreenRedAlpha;              }
Missing Default,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,NumberOfChannels,The following switch statement is missing a default case: switch (format)              {                  case ImageFormat.StencilIndex:                      return 1;                  case ImageFormat.DepthComponent:                      return 1;                  case ImageFormat.Red:                      return 1;                  case ImageFormat.Green:                      return 1;                  case ImageFormat.Blue:                      return 1;                  case ImageFormat.RedGreenBlue:                      return 3;                  case ImageFormat.RedGreenBlueAlpha:                      return 4;                  case ImageFormat.BlueGreenRed:                      return 3;                  case ImageFormat.BlueGreenRedAlpha:                      return 4;                  case ImageFormat.RedGreen:                      return 2;                  case ImageFormat.RedGreenInteger:                      return 2;                  case ImageFormat.DepthStencil:                      return 2;                  case ImageFormat.RedInteger:                      return 1;                  case ImageFormat.GreenInteger:                      return 1;                  case ImageFormat.BlueInteger:                      return 1;                  case ImageFormat.RedGreenBlueInteger:                      return 3;                  case ImageFormat.RedGreenBlueAlphaInteger:                      return 4;                  case ImageFormat.BlueGreenRedInteger:                      return 3;                  case ImageFormat.BlueGreenRedAlphaInteger:                      return 4;              }
Missing Default,OpenGlobe.Renderer,TextureUtility,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\TextureUtility.cs,SizeInBytes,The following switch statement is missing a default case: switch (dataType)              {                  case ImageDatatype.Byte:                      return 1;                  case ImageDatatype.UnsignedByte:                      return 1;                  case ImageDatatype.Short:                      return 2;                  case ImageDatatype.UnsignedShort:                      return 2;                  case ImageDatatype.Int:                      return 4;                  case ImageDatatype.UnsignedInt:                      return 4;                  case ImageDatatype.Float:                      return 4;                  case ImageDatatype.HalfFloat:                      return 2;                  case ImageDatatype.UnsignedByte332:                      return 1;                  case ImageDatatype.UnsignedShort4444:                      return 2;                  case ImageDatatype.UnsignedShort5551:                      return 2;                  case ImageDatatype.UnsignedInt8888:                      return 4;                  case ImageDatatype.UnsignedInt1010102:                      return 4;                  case ImageDatatype.UnsignedByte233Reversed:                      return 1;                  case ImageDatatype.UnsignedShort565:                      return 2;                  case ImageDatatype.UnsignedShort565Reversed:                      return 2;                  case ImageDatatype.UnsignedShort4444Reversed:                      return 2;                  case ImageDatatype.UnsignedShort1555Reversed:                      return 2;                  case ImageDatatype.UnsignedInt8888Reversed:                      return 4;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return 4;                  case ImageDatatype.UnsignedInt248:                      return 4;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return 4;                  case ImageDatatype.UnsignedInt5999Reversed:                      return 4;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return 4;              }
Missing Default,OpenGlobe.Renderer,Texture2DDescription,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\Textures\Texture2DDescription.cs,SizeInBytes,The following switch statement is missing a default case: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return 3;                  case TextureFormat.RedGreenBlue16:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8:                      return 4;                  case TextureFormat.RedGreenBlue10A2:                      return 4;                  case TextureFormat.RedGreenBlueAlpha16:                      return 8;                  case TextureFormat.Depth16:                      return 2;                  case TextureFormat.Depth24:                      return 3;                  case TextureFormat.Red8:                      return 1;                  case TextureFormat.Red16:                      return 2;                  case TextureFormat.RedGreen8:                      return 2;                  case TextureFormat.RedGreen16:                      return 4;                  case TextureFormat.Red16f:                      return 2;                  case TextureFormat.Red32f:                      return 4;                  case TextureFormat.RedGreen16f:                      return 4;                  case TextureFormat.RedGreen32f:                      return 8;                  case TextureFormat.Red8i:                      return 1;                  case TextureFormat.Red8ui:                      return 1;                  case TextureFormat.Red16i:                      return 2;                  case TextureFormat.Red16ui:                      return 2;                  case TextureFormat.Red32i:                      return 4;                  case TextureFormat.Red32ui:                      return 4;                  case TextureFormat.RedGreen8i:                      return 2;                  case TextureFormat.RedGreen8ui:                      return 2;                  case TextureFormat.RedGreen16i:                      return 4;                  case TextureFormat.RedGreen16ui:                      return 4;                  case TextureFormat.RedGreen32i:                      return 8;                  case TextureFormat.RedGreen32ui:                      return 8;                  case TextureFormat.RedGreenBlueAlpha32f:                      return 16;                  case TextureFormat.RedGreenBlue32f:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16f:                      return 8;                  case TextureFormat.RedGreenBlue16f:                      return 6;                  case TextureFormat.Depth24Stencil8:                      return 4;                  case TextureFormat.Red11fGreen11fBlue10f:                      return 4;                  case TextureFormat.RedGreenBlue9E5:                      return 4;                  case TextureFormat.SRedGreenBlue8:                      return 3;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return 4;                  case TextureFormat.Depth32f:                      return 4;                  case TextureFormat.Depth32fStencil8:                      return 5;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return 16;                  case TextureFormat.RedGreenBlue32ui:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return 8;                  case TextureFormat.RedGreenBlue16ui:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return 4;                  case TextureFormat.RedGreenBlue8ui:                      return 3;                  case TextureFormat.RedGreenBlueAlpha32i:                      return 16;                  case TextureFormat.RedGreenBlue32i:                      return 12;                  case TextureFormat.RedGreenBlueAlpha16i:                      return 8;                  case TextureFormat.RedGreenBlue16i:                      return 6;                  case TextureFormat.RedGreenBlueAlpha8i:                      return 4;                  case TextureFormat.RedGreenBlue8i:                      return 3;              }
Missing Default,OpenGlobe.Renderer,VertexArraySizes,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\VertexArray\VertexArraySizes.cs,SizeOf,The following switch statement is missing a default case: switch (type)              {                  case IndexBufferDatatype.UnsignedShort:                      return sizeof(ushort);                  case IndexBufferDatatype.UnsignedInt:                      return sizeof(uint);              }
Missing Default,OpenGlobe.Renderer,VertexArraySizes,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\VertexArray\VertexArraySizes.cs,SizeOf,The following switch statement is missing a default case: switch (type)              {                  case ComponentDatatype.Byte:                  case ComponentDatatype.UnsignedByte:                      return sizeof(byte);                  case ComponentDatatype.Short:                      return sizeof(short);                  case ComponentDatatype.UnsignedShort:                      return sizeof(ushort);                  case ComponentDatatype.Int:                      return sizeof(int);                  case ComponentDatatype.UnsignedInt:                      return sizeof(uint);                  case ComponentDatatype.Float:                      return sizeof(float);                  case ComponentDatatype.HalfFloat:                      return SizeInBytes<Half>.Value;              }
Missing Default,OpenGlobe.Renderer.GL3x,FenceGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Synchronization\FenceGL3x.cs,ClientWait,The following switch statement is missing a default case: switch (result)              {                  case ArbSync.AlreadySignaled:                      return ClientWaitResult.AlreadySignaled;                  case ArbSync.ConditionSatisfied:                      return ClientWaitResult.Signaled;                  case ArbSync.TimeoutExpired:                      return ClientWaitResult.TimeoutExpired;              }
Missing Default,OpenGlobe.Renderer.GL3x,ShaderProgramGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\Shaders\ShaderProgramGL3x.cs,CreateUniform,The following switch statement is missing a default case: switch (type)              {                  case ActiveUniformType.Float:                      return new UniformFloatGL3x(name' location' this);                  case ActiveUniformType.FloatVec2:                      return new UniformFloatVector2GL3x(name' location' this);                  case ActiveUniformType.FloatVec3:                      return new UniformFloatVector3GL3x(name' location' this);                  case ActiveUniformType.FloatVec4:                      return new UniformFloatVector4GL3x(name' location' this);                  case ActiveUniformType.Int:                      return new UniformIntGL3x(name' location' UniformType.Int' this);                  case ActiveUniformType.IntVec2:                      return new UniformIntVector2GL3x(name' location' this);                  case ActiveUniformType.IntVec3:                      return new UniformIntVector3GL3x(name' location' this);                  case ActiveUniformType.IntVec4:                      return new UniformIntVector4GL3x(name' location' this);                  case ActiveUniformType.Bool:                      return new UniformBoolGL3x(name' location' this);                  case ActiveUniformType.BoolVec2:                      return new UniformBoolVector2GL3x(name' location' this);                  case ActiveUniformType.BoolVec3:                      return new UniformBoolVector3GL3x(name' location' this);                  case ActiveUniformType.BoolVec4:                      return new UniformBoolVector4GL3x(name' location' this);                  case ActiveUniformType.FloatMat2:                      return new UniformFloatMatrix22GL3x(name' location' this);                  case ActiveUniformType.FloatMat3:                      return new UniformFloatMatrix33GL3x(name' location' this);                  case ActiveUniformType.FloatMat4:                      return new UniformFloatMatrix44GL3x(name' location' this);                  case ActiveUniformType.FloatMat2x3:                      return new UniformFloatMatrix23GL3x(name' location' this);                  case ActiveUniformType.FloatMat2x4:                      return new UniformFloatMatrix24GL3x(name' location' this);                  case ActiveUniformType.FloatMat3x2:                      return new UniformFloatMatrix32GL3x(name' location' this);                  case ActiveUniformType.FloatMat3x4:                      return new UniformFloatMatrix34GL3x(name' location' this);                  case ActiveUniformType.FloatMat4x2:                      return new UniformFloatMatrix42GL3x(name' location' this);                  case ActiveUniformType.FloatMat4x3:                      return new UniformFloatMatrix43GL3x(name' location' this);                  case ActiveUniformType.Sampler1D:                  case ActiveUniformType.Sampler2D:                  case ActiveUniformType.Sampler2DRect:                  case ActiveUniformType.Sampler2DRectShadow:                  case ActiveUniformType.Sampler3D:                  case ActiveUniformType.SamplerCube:                  case ActiveUniformType.Sampler1DShadow:                  case ActiveUniformType.Sampler2DShadow:                  case ActiveUniformType.Sampler1DArray:                  case ActiveUniformType.Sampler2DArray:                  case ActiveUniformType.Sampler1DArrayShadow:                  case ActiveUniformType.Sampler2DArrayShadow:                  case ActiveUniformType.SamplerCubeShadow:                  case ActiveUniformType.IntSampler1D:                  case ActiveUniformType.IntSampler2D:                  case ActiveUniformType.IntSampler2DRect:                  case ActiveUniformType.IntSampler3D:                  case ActiveUniformType.IntSamplerCube:                  case ActiveUniformType.IntSampler1DArray:                  case ActiveUniformType.IntSampler2DArray:                  case ActiveUniformType.UnsignedIntSampler1D:                  case ActiveUniformType.UnsignedIntSampler2D:                  case ActiveUniformType.UnsignedIntSampler2DRect:                  case ActiveUniformType.UnsignedIntSampler3D:                  case ActiveUniformType.UnsignedIntSamplerCube:                  case ActiveUniformType.UnsignedIntSampler1DArray:                  case ActiveUniformType.UnsignedIntSampler2DArray:                      return new UniformIntGL3x(name' location' TypeConverterGL3x.To(type)' this);              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (type)              {                  case ActiveAttribType.Float:                      return ShaderVertexAttributeType.Float;                  case ActiveAttribType.FloatVec2:                      return ShaderVertexAttributeType.FloatVector2;                  case ActiveAttribType.FloatVec3:                      return ShaderVertexAttributeType.FloatVector3;                  case ActiveAttribType.FloatVec4:                      return ShaderVertexAttributeType.FloatVector4;                  case ActiveAttribType.FloatMat2:                      return ShaderVertexAttributeType.FloatMatrix22;                  case ActiveAttribType.FloatMat3:                      return ShaderVertexAttributeType.FloatMatrix33;                  case ActiveAttribType.FloatMat4:                      return ShaderVertexAttributeType.FloatMatrix44;                  case (ActiveAttribType)All.Int:                      return ShaderVertexAttributeType.Int;                  case (ActiveAttribType)All.IntVec2:                      return ShaderVertexAttributeType.IntVector2;                  case (ActiveAttribType)All.IntVec3:                      return ShaderVertexAttributeType.IntVector3;                  case (ActiveAttribType)All.IntVec4:                      return ShaderVertexAttributeType.IntVector4;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (type)              {                  case ActiveUniformType.Int:                      return UniformType.Int;                  case ActiveUniformType.Float:                      return UniformType.Float;                  case ActiveUniformType.FloatVec2:                      return UniformType.FloatVector2;                  case ActiveUniformType.FloatVec3:                      return UniformType.FloatVector3;                  case ActiveUniformType.FloatVec4:                      return UniformType.FloatVector4;                  case ActiveUniformType.IntVec2:                      return UniformType.IntVector2;                  case ActiveUniformType.IntVec3:                      return UniformType.IntVector3;                  case ActiveUniformType.IntVec4:                      return UniformType.IntVector4;                  case ActiveUniformType.Bool:                      return UniformType.Bool;                  case ActiveUniformType.BoolVec2:                      return UniformType.BoolVector2;                  case ActiveUniformType.BoolVec3:                      return UniformType.BoolVector3;                  case ActiveUniformType.BoolVec4:                      return UniformType.BoolVector4;                  case ActiveUniformType.FloatMat2:                      return UniformType.FloatMatrix22;                  case ActiveUniformType.FloatMat3:                      return UniformType.FloatMatrix33;                  case ActiveUniformType.FloatMat4:                      return UniformType.FloatMatrix44;                  case ActiveUniformType.Sampler1D:                      return UniformType.Sampler1D;                  case ActiveUniformType.Sampler2D:                      return UniformType.Sampler2D;                  case ActiveUniformType.Sampler2DRect:                      return UniformType.Sampler2DRectangle;                  case ActiveUniformType.Sampler2DRectShadow:                      return UniformType.Sampler2DRectangleShadow;                  case ActiveUniformType.Sampler3D:                      return UniformType.Sampler3D;                  case ActiveUniformType.SamplerCube:                      return UniformType.SamplerCube;                  case ActiveUniformType.Sampler1DShadow:                      return UniformType.Sampler1DShadow;                  case ActiveUniformType.Sampler2DShadow:                      return UniformType.Sampler2DShadow;                  case ActiveUniformType.FloatMat2x3:                      return UniformType.FloatMatrix23;                  case ActiveUniformType.FloatMat2x4:                      return UniformType.FloatMatrix24;                  case ActiveUniformType.FloatMat3x2:                      return UniformType.FloatMatrix32;                  case ActiveUniformType.FloatMat3x4:                      return UniformType.FloatMatrix34;                  case ActiveUniformType.FloatMat4x2:                      return UniformType.FloatMatrix42;                  case ActiveUniformType.FloatMat4x3:                      return UniformType.FloatMatrix43;                  case ActiveUniformType.Sampler1DArray:                      return UniformType.Sampler1DArray;                  case ActiveUniformType.Sampler2DArray:                      return UniformType.Sampler2DArray;                  case ActiveUniformType.Sampler1DArrayShadow:                      return UniformType.Sampler1DArrayShadow;                  case ActiveUniformType.Sampler2DArrayShadow:                      return UniformType.Sampler2DArrayShadow;                  case ActiveUniformType.SamplerCubeShadow:                      return UniformType.SamplerCubeShadow;                  case ActiveUniformType.IntSampler1D:                      return UniformType.IntSampler1D;                  case ActiveUniformType.IntSampler2D:                      return UniformType.IntSampler2D;                  case ActiveUniformType.IntSampler2DRect:                      return UniformType.IntSampler2DRectangle;                  case ActiveUniformType.IntSampler3D:                      return UniformType.IntSampler3D;                  case ActiveUniformType.IntSamplerCube:                      return UniformType.IntSamplerCube;                  case ActiveUniformType.IntSampler1DArray:                      return UniformType.IntSampler1DArray;                  case ActiveUniformType.IntSampler2DArray:                      return UniformType.IntSampler2DArray;                  case ActiveUniformType.UnsignedIntSampler1D:                      return UniformType.UnsignedIntSampler1D;                  case ActiveUniformType.UnsignedIntSampler2D:                      return UniformType.UnsignedIntSampler2D;                  case ActiveUniformType.UnsignedIntSampler2DRect:                      return UniformType.UnsignedIntSampler2DRectangle;                  case ActiveUniformType.UnsignedIntSampler3D:                      return UniformType.UnsignedIntSampler3D;                  case ActiveUniformType.UnsignedIntSamplerCube:                      return UniformType.UnsignedIntSamplerCube;                  case ActiveUniformType.UnsignedIntSampler1DArray:                      return UniformType.UnsignedIntSampler1DArray;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (hint)              {                  case BufferUsageHint.StreamDraw:                      return BufferHint.StreamDraw;                  case BufferUsageHint.StreamRead:                      return BufferHint.StreamRead;                  case BufferUsageHint.StreamCopy:                      return BufferHint.StreamCopy;                  case BufferUsageHint.StaticDraw:                      return BufferHint.StaticDraw;                  case BufferUsageHint.StaticRead:                      return BufferHint.StaticRead;                  case BufferUsageHint.StaticCopy:                      return BufferHint.StaticCopy;                  case BufferUsageHint.DynamicDraw:                      return BufferHint.DynamicDraw;                  case BufferUsageHint.DynamicRead:                      return BufferHint.DynamicRead;                  case BufferUsageHint.DynamicCopy:                      return BufferHint.DynamicCopy;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (hint)              {                  case BufferHint.StreamDraw:                      return BufferUsageHint.StreamDraw;                  case BufferHint.StreamRead:                      return BufferUsageHint.StreamRead;                  case BufferHint.StreamCopy:                      return BufferUsageHint.StreamCopy;                  case BufferHint.StaticDraw:                      return BufferUsageHint.StaticDraw;                  case BufferHint.StaticRead:                      return BufferUsageHint.StaticRead;                  case BufferHint.StaticCopy:                      return BufferUsageHint.StaticCopy;                  case BufferHint.DynamicDraw:                      return BufferUsageHint.DynamicDraw;                  case BufferHint.DynamicRead:                      return BufferUsageHint.DynamicRead;                  case BufferHint.DynamicCopy:                      return BufferUsageHint.DynamicCopy;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (type)              {                  case ComponentDatatype.Byte:                      return VertexAttribPointerType.Byte;                  case ComponentDatatype.UnsignedByte:                      return VertexAttribPointerType.UnsignedByte;                  case ComponentDatatype.Short:                      return VertexAttribPointerType.Short;                  case ComponentDatatype.UnsignedShort:                      return VertexAttribPointerType.UnsignedShort;                  case ComponentDatatype.Int:                      return VertexAttribPointerType.Int;                  case ComponentDatatype.UnsignedInt:                      return VertexAttribPointerType.UnsignedInt;                  case ComponentDatatype.Float:                      return VertexAttribPointerType.Float;                  case ComponentDatatype.HalfFloat:                      return VertexAttribPointerType.HalfFloat;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (type)              {                  case PrimitiveType.Points:                      return BeginMode.Points;                  case PrimitiveType.Lines:                      return BeginMode.Lines;                  case PrimitiveType.LineLoop:                      return BeginMode.LineLoop;                  case PrimitiveType.LineStrip:                      return BeginMode.LineStrip;                  case PrimitiveType.Triangles:                      return BeginMode.Triangles;                  case PrimitiveType.TriangleStrip:                      return BeginMode.TriangleStrip;                  case PrimitiveType.LinesAdjacency:                      return BeginMode.LinesAdjacency;;                  case PrimitiveType.LineStripAdjacency:                      return BeginMode.LineStripAdjacency;                  case PrimitiveType.TrianglesAdjacency:                      return BeginMode.TrianglesAdjacency;                  case PrimitiveType.TriangleStripAdjacency:                      return BeginMode.TriangleStripAdjacency;                  case PrimitiveType.TriangleFan:                      return BeginMode.TriangleFan;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (type)              {                  case IndexBufferDatatype.UnsignedShort:                      return DrawElementsType.UnsignedShort;                  case IndexBufferDatatype.UnsignedInt:                      return DrawElementsType.UnsignedInt;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (function)              {                  case DepthTestFunction.Never:                      return DepthFunction.Never;                  case DepthTestFunction.Less:                      return DepthFunction.Less;                  case DepthTestFunction.Equal:                      return DepthFunction.Equal;                  case DepthTestFunction.LessThanOrEqual:                      return DepthFunction.Lequal;                  case DepthTestFunction.Greater:                      return DepthFunction.Greater;                  case DepthTestFunction.NotEqual:                      return DepthFunction.Notequal;                  case DepthTestFunction.GreaterThanOrEqual:                      return DepthFunction.Gequal;                  case DepthTestFunction.Always:                      return DepthFunction.Always;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (face)              {                  case CullFace.Front:                      return CullFaceMode.Front;                  case CullFace.Back:                      return CullFaceMode.Back;                  case CullFace.FrontAndBack:                      return CullFaceMode.FrontAndBack;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (windingOrder)              {                  case WindingOrder.Clockwise:                      return FrontFaceDirection.Cw;                  case WindingOrder.Counterclockwise:                      return FrontFaceDirection.Ccw;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (mode)              {                  case RasterizationMode.Point:                      return PolygonMode.Point;                  case RasterizationMode.Line:                      return PolygonMode.Line;                  case RasterizationMode.Fill:                      return PolygonMode.Fill;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (operation)              {                  case StencilOperation.Zero:                      return StencilOp.Zero;                  case StencilOperation.Invert:                      return StencilOp.Invert;                  case StencilOperation.Keep:                      return StencilOp.Keep;                  case StencilOperation.Replace:                      return StencilOp.Replace;                  case StencilOperation.Increment:                      return StencilOp.Incr;                  case StencilOperation.Decrement:                      return StencilOp.Decr;                  case StencilOperation.IncrementWrap:                      return StencilOp.IncrWrap;                  case StencilOperation.DecrementWrap:                      return StencilOp.DecrWrap;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (function)              {                  case StencilTestFunction.Never:                      return StencilFunction.Never;                  case StencilTestFunction.Less:                      return StencilFunction.Less;                  case StencilTestFunction.Equal:                      return StencilFunction.Equal;                  case StencilTestFunction.LessThanOrEqual:                      return StencilFunction.Lequal;                  case StencilTestFunction.Greater:                      return StencilFunction.Greater;                  case StencilTestFunction.NotEqual:                      return StencilFunction.Notequal;                  case StencilTestFunction.GreaterThanOrEqual:                      return StencilFunction.Gequal;                  case StencilTestFunction.Always:                      return StencilFunction.Always;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (equation)              {                  case BlendEquation.Add:                      return BlendEquationMode.FuncAdd;                  case BlendEquation.Minimum:                      return BlendEquationMode.Min;                  case BlendEquation.Maximum:                      return BlendEquationMode.Max;                  case BlendEquation.Subtract:                      return BlendEquationMode.FuncSubtract;                  case BlendEquation.ReverseSubtract:                      return BlendEquationMode.FuncReverseSubtract;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (factor)              {                  case SourceBlendingFactor.Zero:                      return BlendingFactorSrc.Zero;                  case SourceBlendingFactor.One:                      return BlendingFactorSrc.One;                  case SourceBlendingFactor.SourceAlpha:                      return BlendingFactorSrc.SrcAlpha;                  case SourceBlendingFactor.OneMinusSourceAlpha:                      return BlendingFactorSrc.OneMinusSrcAlpha;                  case SourceBlendingFactor.DestinationAlpha:                      return BlendingFactorSrc.DstAlpha;                  case SourceBlendingFactor.OneMinusDestinationAlpha:                      return BlendingFactorSrc.OneMinusDstAlpha;                  case SourceBlendingFactor.DestinationColor:                      return BlendingFactorSrc.DstColor;                  case SourceBlendingFactor.OneMinusDestinationColor:                      return BlendingFactorSrc.OneMinusDstColor;                  case SourceBlendingFactor.SourceAlphaSaturate:                      return BlendingFactorSrc.SrcAlphaSaturate;                  case SourceBlendingFactor.ConstantColor:                      return BlendingFactorSrc.ConstantColor;                  case SourceBlendingFactor.OneMinusConstantColor:                      return BlendingFactorSrc.OneMinusConstantColor;                  case SourceBlendingFactor.ConstantAlpha:                      return BlendingFactorSrc.ConstantAlpha;                  case SourceBlendingFactor.OneMinusConstantAlpha:                      return BlendingFactorSrc.OneMinusConstantAlpha;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (factor)              {                  case DestinationBlendingFactor.Zero:                      return BlendingFactorDest.Zero;                  case DestinationBlendingFactor.One:                      return BlendingFactorDest.One;                  case DestinationBlendingFactor.SourceColor:                      return BlendingFactorDest.SrcColor;                  case DestinationBlendingFactor.OneMinusSourceColor:                      return BlendingFactorDest.OneMinusSrcColor;                  case DestinationBlendingFactor.SourceAlpha:                      return BlendingFactorDest.SrcAlpha;                  case DestinationBlendingFactor.OneMinusSourceAlpha:                      return BlendingFactorDest.OneMinusSrcAlpha;                  case DestinationBlendingFactor.DestinationAlpha:                      return BlendingFactorDest.DstAlpha;                  case DestinationBlendingFactor.OneMinusDestinationAlpha:                      return BlendingFactorDest.OneMinusDstAlpha;                  case DestinationBlendingFactor.DestinationColor:                      return BlendingFactorDest.DstColor;                  case DestinationBlendingFactor.OneMinusDestinationColor:                      return BlendingFactorDest.OneMinusDstColor;                  case DestinationBlendingFactor.ConstantColor:                      return BlendingFactorDest.ConstantColor;                  case DestinationBlendingFactor.OneMinusConstantColor:                      return BlendingFactorDest.OneMinusConstantColor;                  case DestinationBlendingFactor.ConstantAlpha:                      return BlendingFactorDest.ConstantAlpha;                  case DestinationBlendingFactor.OneMinusConstantAlpha:                      return BlendingFactorDest.OneMinusConstantAlpha;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (format)              {                  case TextureFormat.RedGreenBlue8:                      return PixelInternalFormat.Rgb8;                  case TextureFormat.RedGreenBlue16:                      return PixelInternalFormat.Rgb16;                  case TextureFormat.RedGreenBlueAlpha8:                      return PixelInternalFormat.Rgba8;                  case TextureFormat.RedGreenBlue10A2:                      return PixelInternalFormat.Rgb10A2;                  case TextureFormat.RedGreenBlueAlpha16:                      return PixelInternalFormat.Rgba16;                  case TextureFormat.Depth16:                      return PixelInternalFormat.DepthComponent16;                  case TextureFormat.Depth24:                      return PixelInternalFormat.DepthComponent24;                  case TextureFormat.Red8:                      return PixelInternalFormat.R8;                  case TextureFormat.Red16:                      return PixelInternalFormat.R16;                  case TextureFormat.RedGreen8:                      return PixelInternalFormat.Rg8;                  case TextureFormat.RedGreen16:                      return PixelInternalFormat.Rg16;                  case TextureFormat.Red16f:                      return PixelInternalFormat.R16f;                  case TextureFormat.Red32f:                      return PixelInternalFormat.R32f;                  case TextureFormat.RedGreen16f:                      return PixelInternalFormat.Rg16f;                  case TextureFormat.RedGreen32f:                      return PixelInternalFormat.Rg32f;                  case TextureFormat.Red8i:                      return PixelInternalFormat.R8i;                  case TextureFormat.Red8ui:                      return PixelInternalFormat.R8ui;                  case TextureFormat.Red16i:                      return PixelInternalFormat.R16i;                  case TextureFormat.Red16ui:                      return PixelInternalFormat.R16ui;                  case TextureFormat.Red32i:                      return PixelInternalFormat.R32i;                  case TextureFormat.Red32ui:                      return PixelInternalFormat.R32ui;                  case TextureFormat.RedGreen8i:                      return PixelInternalFormat.Rg8i;                  case TextureFormat.RedGreen8ui:                      return PixelInternalFormat.Rg8ui;                  case TextureFormat.RedGreen16i:                      return PixelInternalFormat.Rg16i;                  case TextureFormat.RedGreen16ui:                      return PixelInternalFormat.Rg16ui;                  case TextureFormat.RedGreen32i:                      return PixelInternalFormat.Rg32i;                  case TextureFormat.RedGreen32ui:                      return PixelInternalFormat.Rg32ui;                  case TextureFormat.RedGreenBlueAlpha32f:                      return PixelInternalFormat.Rgba32f;                  case TextureFormat.RedGreenBlue32f:                      return PixelInternalFormat.Rgb32f;                  case TextureFormat.RedGreenBlueAlpha16f:                      return PixelInternalFormat.Rgba16f;                  case TextureFormat.RedGreenBlue16f:                      return PixelInternalFormat.Rgb16f;                  case TextureFormat.Depth24Stencil8:                      return PixelInternalFormat.Depth24Stencil8;                  case TextureFormat.Red11fGreen11fBlue10f:                      return PixelInternalFormat.R11fG11fB10f;                  case TextureFormat.RedGreenBlue9E5:                      return PixelInternalFormat.Rgb9E5;                  case TextureFormat.SRedGreenBlue8:                      return PixelInternalFormat.Srgb8;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return PixelInternalFormat.Srgb8Alpha8;                  case TextureFormat.Depth32f:                      return PixelInternalFormat.DepthComponent32f;                  case TextureFormat.Depth32fStencil8:                      return PixelInternalFormat.Depth32fStencil8;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return PixelInternalFormat.Rgba32ui;                  case TextureFormat.RedGreenBlue32ui:                      return PixelInternalFormat.Rgb32ui;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return PixelInternalFormat.Rgba16ui;                  case TextureFormat.RedGreenBlue16ui:                      return PixelInternalFormat.Rgb16ui;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return PixelInternalFormat.Rgba8ui;                  case TextureFormat.RedGreenBlue8ui:                      return PixelInternalFormat.Rgb8ui;                  case TextureFormat.RedGreenBlueAlpha32i:                      return PixelInternalFormat.Rgba32i;                  case TextureFormat.RedGreenBlue32i:                      return PixelInternalFormat.Rgb32i;                  case TextureFormat.RedGreenBlueAlpha16i:                      return PixelInternalFormat.Rgba16i;                  case TextureFormat.RedGreenBlue16i:                      return PixelInternalFormat.Rgb16i;                  case TextureFormat.RedGreenBlueAlpha8i:                      return PixelInternalFormat.Rgba8i;                  case TextureFormat.RedGreenBlue8i:                      return PixelInternalFormat.Rgb8i;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (format)              {                  case ImageFormat.StencilIndex:                      return PixelFormat.StencilIndex;                  case ImageFormat.DepthComponent:                      return PixelFormat.DepthComponent;                  case ImageFormat.Red:                      return PixelFormat.Red;                  case ImageFormat.Green:                      return PixelFormat.Green;                  case ImageFormat.Blue:                      return PixelFormat.Blue;                  case ImageFormat.RedGreenBlue:                      return PixelFormat.Rgb;                  case ImageFormat.RedGreenBlueAlpha:                      return PixelFormat.Rgba;                  case ImageFormat.BlueGreenRed:                      return PixelFormat.Bgr;                  case ImageFormat.BlueGreenRedAlpha:                      return PixelFormat.Bgra;                  case ImageFormat.RedGreen:                      return PixelFormat.Rg;                  case ImageFormat.RedGreenInteger:                      return PixelFormat.RgInteger;                  case ImageFormat.DepthStencil:                      return PixelFormat.DepthStencil;                  case ImageFormat.RedInteger:                      return PixelFormat.RedInteger;                  case ImageFormat.GreenInteger:                      return PixelFormat.GreenInteger;                  case ImageFormat.BlueInteger:                      return PixelFormat.BlueInteger;                  case ImageFormat.RedGreenBlueInteger:                      return PixelFormat.RgbInteger;                  case ImageFormat.RedGreenBlueAlphaInteger:                      return PixelFormat.RgbaInteger;                  case ImageFormat.BlueGreenRedInteger:                      return PixelFormat.BgrInteger;                  case ImageFormat.BlueGreenRedAlphaInteger:                      return PixelFormat.BgraInteger;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (type)              {                  case ImageDatatype.Byte:                      return PixelType.Byte;                  case ImageDatatype.UnsignedByte:                      return PixelType.UnsignedByte;                  case ImageDatatype.Short:                      return PixelType.Short;                  case ImageDatatype.UnsignedShort:                      return PixelType.UnsignedShort;                  case ImageDatatype.Int:                      return PixelType.Int;                  case ImageDatatype.UnsignedInt:                      return PixelType.UnsignedInt;                  case ImageDatatype.Float:                      return PixelType.Float;                  case ImageDatatype.HalfFloat:                      return PixelType.HalfFloat;                  case ImageDatatype.UnsignedByte332:                      return PixelType.UnsignedByte332;                  case ImageDatatype.UnsignedShort4444:                      return PixelType.UnsignedShort4444;                  case ImageDatatype.UnsignedShort5551:                      return PixelType.UnsignedShort5551;                  case ImageDatatype.UnsignedInt8888:                      return PixelType.UnsignedInt8888;                  case ImageDatatype.UnsignedInt1010102:                      return PixelType.UnsignedInt1010102;                  case ImageDatatype.UnsignedByte233Reversed:                      return PixelType.UnsignedByte233Reversed;                  case ImageDatatype.UnsignedShort565:                      return PixelType.UnsignedShort565;                  case ImageDatatype.UnsignedShort565Reversed:                      return PixelType.UnsignedShort565Reversed;                  case ImageDatatype.UnsignedShort4444Reversed:                      return PixelType.UnsignedShort4444Reversed;                  case ImageDatatype.UnsignedShort1555Reversed:                      return PixelType.UnsignedShort1555Reversed;                  case ImageDatatype.UnsignedInt8888Reversed:                      return PixelType.UnsignedInt8888Reversed;                  case ImageDatatype.UnsignedInt2101010Reversed:                      return PixelType.UnsignedInt2101010Reversed;                  case ImageDatatype.UnsignedInt248:                      return PixelType.UnsignedInt248;                  case ImageDatatype.UnsignedInt10F11F11FReversed:                      return PixelType.UnsignedInt10F11F11FRev;                  case ImageDatatype.UnsignedInt5999Reversed:                      return PixelType.UnsignedInt5999Rev;                  case ImageDatatype.Float32UnsignedInt248Reversed:                      return PixelType.Float32UnsignedInt248Rev;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,TextureToPixelFormat,The following switch statement is missing a default case: switch (textureFormat)              {                  case TextureFormat.RedGreenBlue8:                  case TextureFormat.RedGreenBlue16:                      return PixelFormat.Rgb;                  case TextureFormat.RedGreenBlueAlpha8:                  case TextureFormat.RedGreenBlue10A2:                  case TextureFormat.RedGreenBlueAlpha16:                      return PixelFormat.Rgba;                  case TextureFormat.Depth16:                  case TextureFormat.Depth24:                      return PixelFormat.DepthComponent;                  case TextureFormat.Red8:                  case TextureFormat.Red16:                      return PixelFormat.Red;                  case TextureFormat.RedGreen8:                  case TextureFormat.RedGreen16:                      return PixelFormat.Rg;                  case TextureFormat.Red16f:                  case TextureFormat.Red32f:                      return PixelFormat.Red;                  case TextureFormat.RedGreen16f:                  case TextureFormat.RedGreen32f:                      return PixelFormat.Rg;                  case TextureFormat.Red8i:                  case TextureFormat.Red8ui:                  case TextureFormat.Red16i:                  case TextureFormat.Red16ui:                  case TextureFormat.Red32i:                  case TextureFormat.Red32ui:                      return PixelFormat.RedInteger;                  case TextureFormat.RedGreen8i:                  case TextureFormat.RedGreen8ui:                  case TextureFormat.RedGreen16i:                  case TextureFormat.RedGreen16ui:                  case TextureFormat.RedGreen32i:                  case TextureFormat.RedGreen32ui:                      return PixelFormat.RgInteger;                  case TextureFormat.RedGreenBlueAlpha32f:                      return PixelFormat.Rgba;                  case TextureFormat.RedGreenBlue32f:                      return PixelFormat.Rgb;                  case TextureFormat.RedGreenBlueAlpha16f:                      return PixelFormat.Rgba;                  case TextureFormat.RedGreenBlue16f:                      return PixelFormat.Rgb;                  case TextureFormat.Depth24Stencil8:                      return PixelFormat.DepthStencil;                  case TextureFormat.Red11fGreen11fBlue10f:                  case TextureFormat.RedGreenBlue9E5:                      return PixelFormat.Rgb;                  case TextureFormat.SRedGreenBlue8:                      return PixelFormat.RgbInteger;                  case TextureFormat.SRedGreenBlue8Alpha8:                      return PixelFormat.RgbaInteger;                  case TextureFormat.Depth32f:                      return PixelFormat.DepthComponent;                  case TextureFormat.Depth32fStencil8:                      return PixelFormat.DepthStencil;                  case TextureFormat.RedGreenBlueAlpha32ui:                      return PixelFormat.RgbaInteger;                  case TextureFormat.RedGreenBlue32ui:                      return PixelFormat.RgbInteger;                  case TextureFormat.RedGreenBlueAlpha16ui:                      return PixelFormat.RgbaInteger;                  case TextureFormat.RedGreenBlue16ui:                      return PixelFormat.RgbInteger;                  case TextureFormat.RedGreenBlueAlpha8ui:                      return PixelFormat.RgbaInteger;                  case TextureFormat.RedGreenBlue8ui:                      return PixelFormat.RgbInteger;                  case TextureFormat.RedGreenBlueAlpha32i:                      return PixelFormat.RgbaInteger;                  case TextureFormat.RedGreenBlue32i:                      return PixelFormat.RgbInteger;                  case TextureFormat.RedGreenBlueAlpha16i:                      return PixelFormat.RgbaInteger;                  case TextureFormat.RedGreenBlue16i:                      return PixelFormat.RgbInteger;                  case TextureFormat.RedGreenBlueAlpha8i:                      return PixelFormat.RgbaInteger;                  case TextureFormat.RedGreenBlue8i:                      return PixelFormat.RgbInteger;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,TextureToPixelType,The following switch statement is missing a default case: switch (textureFormat)              {                  case TextureFormat.RedGreenBlue8:                      return PixelType.UnsignedByte;                  case TextureFormat.RedGreenBlue16:                      return PixelType.UnsignedShort;                  case TextureFormat.RedGreenBlueAlpha8:                      return PixelType.UnsignedByte;                  case TextureFormat.RedGreenBlue10A2:                      return PixelType.UnsignedInt1010102;                  case TextureFormat.RedGreenBlueAlpha16:                      return PixelType.UnsignedShort;                  case TextureFormat.Depth16:                      return PixelType.HalfFloat;                  case TextureFormat.Depth24:                      return PixelType.Float;                  case TextureFormat.Red8:                      return PixelType.UnsignedByte;                  case TextureFormat.Red16:                      return PixelType.UnsignedShort;                  case TextureFormat.RedGreen8:                      return PixelType.UnsignedByte;                  case TextureFormat.RedGreen16:                      return PixelType.UnsignedShort;                  case TextureFormat.Red16f:                      return PixelType.HalfFloat;                  case TextureFormat.Red32f:                      return PixelType.Float;                  case TextureFormat.RedGreen16f:                      return PixelType.HalfFloat;                  case TextureFormat.RedGreen32f:                      return PixelType.Float;                  case TextureFormat.Red8i:                      return PixelType.Byte;                  case TextureFormat.Red8ui:                      return PixelType.UnsignedByte;                  case TextureFormat.Red16i:                      return PixelType.Short;                  case TextureFormat.Red16ui:                      return PixelType.UnsignedShort;                  case TextureFormat.Red32i:                      return PixelType.Int;                  case TextureFormat.Red32ui:                      return PixelType.UnsignedInt;                  case TextureFormat.RedGreen8i:                      return PixelType.Byte;                  case TextureFormat.RedGreen8ui:                      return PixelType.UnsignedByte;                  case TextureFormat.RedGreen16i:                      return PixelType.Short;                  case TextureFormat.RedGreen16ui:                      return PixelType.UnsignedShort;                  case TextureFormat.RedGreen32i:                      return PixelType.Int;                  case TextureFormat.RedGreen32ui:                      return PixelType.UnsignedInt;                  case TextureFormat.RedGreenBlueAlpha32f:                      return PixelType.Float;                  case TextureFormat.RedGreenBlue32f:                      return PixelType.Float;                  case TextureFormat.RedGreenBlueAlpha16f:                      return PixelType.HalfFloat;                  case TextureFormat.RedGreenBlue16f:                      return PixelType.HalfFloat;                  case TextureFormat.Depth24Stencil8:                      return PixelType.UnsignedInt248;                  case TextureFormat.Red11fGreen11fBlue10f:                      return PixelType.Float;                  case TextureFormat.RedGreenBlue9E5:                      return PixelType.Float;                  case TextureFormat.SRedGreenBlue8:                  case TextureFormat.SRedGreenBlue8Alpha8:                      return PixelType.Byte;                  case TextureFormat.Depth32f:                  case TextureFormat.Depth32fStencil8:                      return PixelType.Float;                  case TextureFormat.RedGreenBlueAlpha32ui:                  case TextureFormat.RedGreenBlue32ui:                      return PixelType.UnsignedInt;                  case TextureFormat.RedGreenBlueAlpha16ui:                  case TextureFormat.RedGreenBlue16ui:                      return PixelType.UnsignedShort;                  case TextureFormat.RedGreenBlueAlpha8ui:                  case TextureFormat.RedGreenBlue8ui:                      return PixelType.UnsignedByte;                  case TextureFormat.RedGreenBlueAlpha32i:                  case TextureFormat.RedGreenBlue32i:                      return PixelType.UnsignedInt;                  case TextureFormat.RedGreenBlueAlpha16i:                  case TextureFormat.RedGreenBlue16i:                      return PixelType.UnsignedShort;                  case TextureFormat.RedGreenBlueAlpha8i:                  case TextureFormat.RedGreenBlue8i:                      return PixelType.UnsignedByte;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (filter)              {                  case TextureMinificationFilter.Nearest:                      return TextureMinFilter.Nearest;                  case TextureMinificationFilter.Linear:                      return TextureMinFilter.Linear;                  case TextureMinificationFilter.NearestMipmapNearest:                      return TextureMinFilter.NearestMipmapNearest;                  case TextureMinificationFilter.LinearMipmapNearest:                      return TextureMinFilter.LinearMipmapNearest;                  case TextureMinificationFilter.NearestMipmapLinear:                      return TextureMinFilter.NearestMipmapLinear;                  case TextureMinificationFilter.LinearMipmapLinear:                      return TextureMinFilter.LinearMipmapLinear;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (filter)              {                  case TextureMagnificationFilter.Nearest:                      return TextureMagFilter.Nearest;                  case TextureMagnificationFilter.Linear:                      return TextureMagFilter.Linear;              }
Missing Default,OpenGlobe.Renderer.GL3x,TypeConverterGL3x,C:\repos\virtualglobebook_OpenGlobe\Source\Renderer\GL3x\TypeConverterGL3x.cs,To,The following switch statement is missing a default case: switch (wrap)              {                  case TextureWrap.Clamp:                      return TextureWrapMode.ClampToEdge;                  case TextureWrap.Repeat:                      return TextureWrapMode.Repeat;                  case TextureWrap.MirroredRepeat:                      return TextureWrapMode.MirroredRepeat;              }
