Implementation smell,Namespace,Class,File,Method,Description
Long Method,Bind,MainClass,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Main.cs,Main,The method has 146 lines of code.
Long Method,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,ReadEnums,The method has 107 lines of code.
Long Method,Bind.Structures,Type,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Type.cs,Translate,The method has 101 lines of code.
Long Method,Bind.Structures,Function,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Function.cs,CreateBody,The method has 179 lines of code.
Long Method,Bind.Structures,EnumCollection,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Enum.cs,Translate,The method has 117 lines of code.
Complex Method,Bind,Utilities,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Utilities.cs,GetGL2Extension,Cyclomatic complexity of the method is 24
Complex Method,Bind.Structures,Function,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Function.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Bind.Structures,Function,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Function.cs,WrapParameters,Cyclomatic complexity of the method is 8
Complex Method,Bind.Structures,Function,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Function.cs,CreateBody,Cyclomatic complexity of the method is 23
Complex Method,Bind.Structures,EnumCollection,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Enum.cs,Translate,Cyclomatic complexity of the method is 26
Complex Method,Bind.Structures,Delegate,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Delegate.cs,TranslateReturnType,Cyclomatic complexity of the method is 8
Long Statement,Bind,MainClass,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Main.cs,Main,The length of the statement  "                                Settings.Compatibility |= b[1].ToLower() == "simple_enums" ? Settings.Legacy.NoAdvancedEnumProcessing : Settings.Legacy.None; " is 125.
Long Statement,Bind,MainClass,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Main.cs,Main,The length of the statement  "                                //Settings.Compatibility |= b[1].ToLower().Contains("novoid") ? Settings.Legacy.TurnVoidPointersToIntPtr : Settings.Legacy.None; " is 128.
Long Statement,Bind,MainClass,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Main.cs,Main,The length of the statement  "                                Settings.Compatibility |= b[1].ToLower() == "permutations" ? Settings.Legacy.GenerateAllPermutations : Settings.Legacy.None; " is 124.
Long Statement,Bind,MainClass,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Main.cs,Main,The length of the statement  "                                Settings.Compatibility |= b[1].ToLower() == "keep_untyped_enums" ? Settings.Legacy.KeepUntypedEnums : Settings.Legacy.None; " is 123.
Long Statement,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,Process,The length of the statement  "            //    new Regex(@"(Coord1|Attrib(I?)1(u?)|Stream1|Uniform2(u?)|(Point|Convolution|Transform|Sprite|List|Combiner|Tex)Parameter|Fog(Coord)?.*|VertexWeight|(Fragment)?Light(Model)?|Material|ReplacementCodeu?b?|Tex(Gen|Env)|Indexu?|TextureParameter.v)"' " is 250.
Long Statement,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,WriteDelegates,The length of the statement  "            Trace.WriteLine(String.Format("Writing delegates to:\t{0}.{1}.{2}"' Settings.OutputNamespace' Settings.OutputClass' Settings.DelegatesClass)); " is 142.
Long Statement,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,WriteImports,The length of the statement  "            Trace.WriteLine(String.Format("Writing imports to:\t{0}.{1}.{2}"' Settings.OutputNamespace' Settings.OutputClass' Settings.ImportsClass)); " is 138.
Long Statement,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,WriteEnums,The length of the statement  "                Trace.WriteLine(String.Format("Writing enums to:\t{0}.{1}.{2}"' Settings.OutputNamespace' Settings.OutputClass' Settings.NestedEnumsClass)); " is 140.
Long Statement,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,WriteEnums,The length of the statement  "                            Char.IsDigit(c.Value[0]) ? c.Value : c.Value.StartsWith(Settings.ConstantPrefix) ? c.Value : Settings.ConstantPrefix + c.Value' " is 127.
Long Statement,Bind.Structures,Type,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Type.cs,Translate,The length of the statement  "            XPathNavigator enum_override = overrides.SelectSingleNode(String.Format("/overrides/replace/enum[@name='{0}']/name"' CurrentType)); " is 131.
Long Statement,Bind.Structures,FunctionCollection,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Function.cs,AddChecked,The length of the statement  "                    if ((existing.Parameters.HasUnsignedParameters && !unsignedFunctions.IsMatch(existing.Name) && unsignedFunctions.IsMatch(f.Name)) || " is 132.
Long Statement,Bind.Structures,FunctionCollection,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Function.cs,AddChecked,The length of the statement  "                        (!existing.Parameters.HasUnsignedParameters && unsignedFunctions.IsMatch(existing.Name) && !unsignedFunctions.IsMatch(f.Name))) " is 127.
Long Statement,Bind.Structures,EnumCollection,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Enum.cs,Translate,The length of the statement  "                        XPathNavigator constant_override = enum_override.SelectSingleNode(String.Format("token[@name='{0}']"' c.PreviousName)) ?? " is 121.
Long Statement,Bind.Structures,Delegate,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Delegate.cs,TranslateParameters,The length of the statement  "                    XPathNavigator param_override = function_override.SelectSingleNode(String.Format("param[@name='{0}']"' Parameters[i].Name)); " is 124.
Long Statement,Bind.Structures,Parameter,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Parameter.cs,ToString,The length of the statement  "                if (!override_unsafe_setting && ((Settings.Compatibility & Settings.Legacy.NoPublicUnsafeFunctions) != Settings.Legacy.None)) " is 125.
Long Statement,Bind.Structures,Parameter,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Parameter.cs,Translate,The length of the statement  "                    (!String.IsNullOrEmpty(PreviousType) && PreviousType.ToLower().Contains("void"))) /*|| CurrentType.Contains("IntPtr"))*/ " is 120.
Long Statement,Bind.ES,ESGenerator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\ES\ESGenerator.cs,ReadEnums,The length of the statement  "                            catch (ArgumentException ex) { Console.WriteLine("[Warning] Failed to add constant {0} to enum {1}: {2}"' c.Name' e.Name' ex.Message); } " is 136.
Complex Conditional,Bind,BindStreamWriter,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\BindStreamWriter.cs,WriteLine,The conditional expression  "Environment.OSVersion.Platform == PlatformID.Win32Windows ||                  Environment.OSVersion.Platform == PlatformID.Win32NT ||                  Environment.OSVersion.Platform == PlatformID.Win32S ||                  Environment.OSVersion.Platform == PlatformID.WinCE"  is complex.
Complex Conditional,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,NextValidLine,The conditional expression  "String.IsNullOrEmpty(line) ||                      line.StartsWith("#") ||                 // Disregard comments.                      line.StartsWith("passthru") ||          // Disregard passthru statements.                      line.StartsWith("required-props:") ||                      line.StartsWith("param:") ||                      line.StartsWith("dlflags:") ||                      line.StartsWith("glxflags:") ||                      line.StartsWith("vectorequiv:") ||                      //line.StartsWith("category:") ||                      line.StartsWith("version:") ||                      line.StartsWith("glxsingle:") ||                      line.StartsWith("glxropcode:") ||                      line.StartsWith("glxvendorpriv:") ||                      line.StartsWith("glsflags:") ||                      line.StartsWith("glsopcode:") ||                      line.StartsWith("glsalias:") ||                      line.StartsWith("wglflags:") ||                      line.StartsWith("extension:") ||                      line.StartsWith("alias:") ||                      line.StartsWith("offset:")"  is complex.
Complex Conditional,Bind.Structures,Type,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Type.cs,Translate,The conditional expression  "(normal || aux) && @enum.Name != "GLenum" && @enum.Name != "Boolean""  is complex.
Complex Conditional,Bind.Structures,FunctionCollection,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Function.cs,AddChecked,The conditional expression  "(existing.Parameters.HasUnsignedParameters && !unsignedFunctions.IsMatch(existing.Name) && unsignedFunctions.IsMatch(f.Name)) ||                          (!existing.Parameters.HasUnsignedParameters && unsignedFunctions.IsMatch(existing.Name) && !unsignedFunctions.IsMatch(f.Name))"  is complex.
Complex Conditional,Bind.Structures,Delegate,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Delegate.cs,TrimName,The conditional expression  "m.Value[m.Length - 1] == 'v' && endingsAddV.IsMatch(name) &&                          !name.StartsWith("Get") && !name.StartsWith("MatrixIndex")"  is complex.
Empty Catch Block,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,WriteDocumentation,The method has an empty catch block.
Magic Number,Bind,MainClass,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Main.cs,Main,The following statement contains a magic number: try              {                  foreach (string a in arguments)                  {                      if (a.StartsWith("--") || a.StartsWith("-") || a.StartsWith("/"))                      {                          string[] b = a.Split(new char[] { '-'' '/'' ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                          switch (b[0])                          {                              case "?":                              case "help":                                  ShowHelp();                                  return;                              case "in":                              case "input":                                  Settings.InputPath = string.Join(Path.DirectorySeparatorChar.ToString()' b.Skip(1).ToArray());                                  break;                              case "out":                              case "output":                                  Settings.OutputPath = string.Join(Path.DirectorySeparatorChar.ToString()' b.Skip(1).ToArray());                                  break;                              case "mode":                                  string arg = b[1].ToLower();                                  if (arg == "gl" || arg == "gl2")                                      mode = GeneratorMode.GL2;                                  else if (arg == "es10")                                      mode = GeneratorMode.ES10;                                  else if (arg == "es11")                                      mode = GeneratorMode.ES11;                                  else if (arg == "es20")                                      mode = GeneratorMode.ES20;                                  else if (arg=="cl" || arg == "cl10")                                      mode = GeneratorMode.CL10;                                  else                                      throw new NotImplementedException();                                  if (b.Length > 2)                                      dirName = b[2];                                  break;                              case "namespace":                              case "ns":                                  Settings.OutputNamespace = b[1];                                  break;                              case "class":                                  Settings.OutputClass = b[1];                                  break;                              case "gl":                                  Settings.GLClass = b[1];                                  break;                              case "legacy":                              case "o":                              case "option":                                  Settings.Compatibility |= b[1].ToLower() == "tao" ? Settings.Legacy.Tao : Settings.Legacy.None;                                  Settings.Compatibility |= b[1].ToLower() == "simple_enums" ? Settings.Legacy.NoAdvancedEnumProcessing : Settings.Legacy.None;                                  Settings.Compatibility |= b[1].ToLower() == "safe" ? Settings.Legacy.NoPublicUnsafeFunctions : Settings.Legacy.None;                                  //Settings.Compatibility |= b[1].ToLower().Contains("novoid") ? Settings.Legacy.TurnVoidPointersToIntPtr : Settings.Legacy.None;                                  Settings.Compatibility |= b[1].ToLower() == "permutations" ? Settings.Legacy.GenerateAllPermutations : Settings.Legacy.None;                                  Settings.Compatibility |= b[1].ToLower() == "enums_in_class" ? Settings.Legacy.NestedEnums : Settings.Legacy.None;                                  Settings.Compatibility |= b[1].ToLower() == "nodocs" ? Settings.Legacy.NoDocumentation : Settings.Legacy.None;                                  Settings.Compatibility |= b[1].ToLower() == "keep_untyped_enums" ? Settings.Legacy.KeepUntypedEnums : Settings.Legacy.None;                                  break;                              default:                                  throw new ArgumentException(                                      String.Format("Argument {0} not recognized. Use the '/?' switch for help."' a)                                  );                          }                      }                  }              }              catch (NullReferenceException e)              {                  Console.WriteLine("Argument error ({0}). Please use the '-?' switch for help."' e.ToString());                  return;              }              catch (ArgumentException e)              {                  Console.WriteLine("Argument error ({0}). Please use the '-?' switch for help."' e.ToString());                  return;              }
Magic Number,Bind,MainClass,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Main.cs,Main,The following statement contains a magic number: try              {                  foreach (string a in arguments)                  {                      if (a.StartsWith("--") || a.StartsWith("-") || a.StartsWith("/"))                      {                          string[] b = a.Split(new char[] { '-'' '/'' ':'' '=' }' StringSplitOptions.RemoveEmptyEntries);                          switch (b[0])                          {                              case "?":                              case "help":                                  ShowHelp();                                  return;                              case "in":                              case "input":                                  Settings.InputPath = string.Join(Path.DirectorySeparatorChar.ToString()' b.Skip(1).ToArray());                                  break;                              case "out":                              case "output":                                  Settings.OutputPath = string.Join(Path.DirectorySeparatorChar.ToString()' b.Skip(1).ToArray());                                  break;                              case "mode":                                  string arg = b[1].ToLower();                                  if (arg == "gl" || arg == "gl2")                                      mode = GeneratorMode.GL2;                                  else if (arg == "es10")                                      mode = GeneratorMode.ES10;                                  else if (arg == "es11")                                      mode = GeneratorMode.ES11;                                  else if (arg == "es20")                                      mode = GeneratorMode.ES20;                                  else if (arg=="cl" || arg == "cl10")                                      mode = GeneratorMode.CL10;                                  else                                      throw new NotImplementedException();                                  if (b.Length > 2)                                      dirName = b[2];                                  break;                              case "namespace":                              case "ns":                                  Settings.OutputNamespace = b[1];                                  break;                              case "class":                                  Settings.OutputClass = b[1];                                  break;                              case "gl":                                  Settings.GLClass = b[1];                                  break;                              case "legacy":                              case "o":                              case "option":                                  Settings.Compatibility |= b[1].ToLower() == "tao" ? Settings.Legacy.Tao : Settings.Legacy.None;                                  Settings.Compatibility |= b[1].ToLower() == "simple_enums" ? Settings.Legacy.NoAdvancedEnumProcessing : Settings.Legacy.None;                                  Settings.Compatibility |= b[1].ToLower() == "safe" ? Settings.Legacy.NoPublicUnsafeFunctions : Settings.Legacy.None;                                  //Settings.Compatibility |= b[1].ToLower().Contains("novoid") ? Settings.Legacy.TurnVoidPointersToIntPtr : Settings.Legacy.None;                                  Settings.Compatibility |= b[1].ToLower() == "permutations" ? Settings.Legacy.GenerateAllPermutations : Settings.Legacy.None;                                  Settings.Compatibility |= b[1].ToLower() == "enums_in_class" ? Settings.Legacy.NestedEnums : Settings.Legacy.None;                                  Settings.Compatibility |= b[1].ToLower() == "nodocs" ? Settings.Legacy.NoDocumentation : Settings.Legacy.None;                                  Settings.Compatibility |= b[1].ToLower() == "keep_untyped_enums" ? Settings.Legacy.KeepUntypedEnums : Settings.Legacy.None;                                  break;                              default:                                  throw new ArgumentException(                                      String.Format("Argument {0} not recognized. Use the '/?' switch for help."' a)                                  );                          }                      }                  }              }              catch (NullReferenceException e)              {                  Console.WriteLine("Argument error ({0}). Please use the '-?' switch for help."' e.ToString());                  return;              }              catch (ArgumentException e)              {                  Console.WriteLine("Argument error ({0}). Please use the '-?' switch for help."' e.ToString());                  return;              }
Magic Number,Bind,MainClass,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Main.cs,Main,The following statement contains a magic number: try              {                  long ticks = DateTime.Now.Ticks;                    switch (mode)                  {                      case GeneratorMode.GL2:                          Generator = new Generator();                          break;                        case GeneratorMode.ES10:                          Generator = new ESGenerator("ES10"' dirName);                          break;                                            case GeneratorMode.ES11:                          Generator = new ESGenerator("ES11"' dirName);                          break;                                            case GeneratorMode.ES20:                          Generator = new ESGenerator("ES20"' dirName);                          break;                        case GeneratorMode.CL10:                          Generator = new CLGenerator("CL10"' dirName);                          break;                                            case GeneratorMode.Wgl:                          Generator = new Wgl.Generator();                          break;                        case GeneratorMode.Glu:                          Generator = new Glu.Generator();                          break;                        case GeneratorMode.Glx:                          Generator = new Glx.Generator();                          break;                        case GeneratorMode.GL3:                          throw new NotImplementedException(String.Format("Mode {0} not implemented."' mode));                        case GeneratorMode.Unknown:                      default:                          Console.WriteLine("Please specify a generator mode (use '-mode:gl2/gl3/glu/wgl/glx])'");                          return;                    }                    Generator.Process();                    ticks = DateTime.Now.Ticks - ticks;                    Console.WriteLine();                  Console.WriteLine("Bindings generated in {0} seconds."' ticks / (double)10000000.0);                  Console.WriteLine();              }              catch (SecurityException e)              {                  Console.WriteLine("Security violation \"{0}\" in method \"{1}\"."' e.Message' e.Method);                  Console.WriteLine("This application does not have permission to take the requested actions.");              }              catch (NotImplementedException e)              {                  Console.WriteLine(e.Message);                  Console.WriteLine("The requested functionality is not implemented yet.");              }
Magic Number,Bind,DocProcessor,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\DocProcessor.cs,ProcessFile,The following statement contains a magic number: while (m.Length > 0)              {                  string removed = text.Substring(m.Index' m.Length);                  text = text.Remove(m.Index' m.Length);                  int equation = removed.IndexOf("eqn");                  if (equation > 0)                  {                      text = text.Insert(m.Index'                          "<![CDATA[" +                          removed.Substring(equation + 4' removed.IndexOf(":-->") - equation - 4) +                          "]]>");                  }                  m = remove_mathml.Match(text);              }
Magic Number,Bind,DocProcessor,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\DocProcessor.cs,ProcessFile,The following statement contains a magic number: while (m.Length > 0)              {                  string removed = text.Substring(m.Index' m.Length);                  text = text.Remove(m.Index' m.Length);                  int equation = removed.IndexOf("eqn");                  if (equation > 0)                  {                      text = text.Insert(m.Index'                          "<![CDATA[" +                          removed.Substring(equation + 4' removed.IndexOf(":-->") - equation - 4) +                          "]]>");                  }                  m = remove_mathml.Match(text);              }
Magic Number,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,ReadDelegates,The following statement contains a magic number: do              {                  string line = NextValidLine(specFile);                  if (String.IsNullOrEmpty(line))                      break;                    while (line.Contains("(") && !specFile.EndOfStream)                  {                      // Get next OpenGL function                        Delegate d = new Delegate();                        // Get function name:                      d.Name = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries)[0];                        do                      {                          // Get function parameters and return value                            line = specFile.ReadLine();                          List<string> words = new List<string>(                              line.Replace('\t'' ' ').Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries)                          );                            if (words.Count == 0)                              break;                            // Identify line:                          switch (words[0])                          {                              case "return":  // Line denotes return value                                  d.ReturnType.CurrentType = words[1];                                  break;                                case "param":   // Line denotes parameter                                  Parameter p = new Parameter();                                    p.Name = Utilities.Keywords.Contains(words[1]) ? "@" + words[1] : words[1];                                  p.CurrentType = words[2];                                  p.Pointer += words[4].Contains("array") ? 1 : 0;                                  p.Pointer += words[4].Contains("reference") ? 1 : 0;                                  if (p.Pointer != 0 && words.Count > 5 && words[5].Contains("[1]"))                                      p.ElementCount = 1;                                  p.Flow = words[3] == "in" ? FlowDirection.In : FlowDirection.Out;                                    d.Parameters.Add(p);                                  break;                                // GetTexParameterIivEXT and GetTexParameterIuivEXT define two(!) versions (why?)                              case "version": // Line denotes function version (i.e. 1.0' 1.2' 1.5)                                  d.Version = words[1];                                  break;                                case "category":                                  d.Category = words[1];                                  break;                          }                      }                      while (!specFile.EndOfStream);                        d.Translate(function_overrides);                        delegates.Add(d);                  }              }              while (!specFile.EndOfStream);
Magic Number,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,ReadDelegates,The following statement contains a magic number: do              {                  string line = NextValidLine(specFile);                  if (String.IsNullOrEmpty(line))                      break;                    while (line.Contains("(") && !specFile.EndOfStream)                  {                      // Get next OpenGL function                        Delegate d = new Delegate();                        // Get function name:                      d.Name = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries)[0];                        do                      {                          // Get function parameters and return value                            line = specFile.ReadLine();                          List<string> words = new List<string>(                              line.Replace('\t'' ' ').Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries)                          );                            if (words.Count == 0)                              break;                            // Identify line:                          switch (words[0])                          {                              case "return":  // Line denotes return value                                  d.ReturnType.CurrentType = words[1];                                  break;                                case "param":   // Line denotes parameter                                  Parameter p = new Parameter();                                    p.Name = Utilities.Keywords.Contains(words[1]) ? "@" + words[1] : words[1];                                  p.CurrentType = words[2];                                  p.Pointer += words[4].Contains("array") ? 1 : 0;                                  p.Pointer += words[4].Contains("reference") ? 1 : 0;                                  if (p.Pointer != 0 && words.Count > 5 && words[5].Contains("[1]"))                                      p.ElementCount = 1;                                  p.Flow = words[3] == "in" ? FlowDirection.In : FlowDirection.Out;                                    d.Parameters.Add(p);                                  break;                                // GetTexParameterIivEXT and GetTexParameterIuivEXT define two(!) versions (why?)                              case "version": // Line denotes function version (i.e. 1.0' 1.2' 1.5)                                  d.Version = words[1];                                  break;                                case "category":                                  d.Category = words[1];                                  break;                          }                      }                      while (!specFile.EndOfStream);                        d.Translate(function_overrides);                        delegates.Add(d);                  }              }              while (!specFile.EndOfStream);
Magic Number,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,ReadDelegates,The following statement contains a magic number: do              {                  string line = NextValidLine(specFile);                  if (String.IsNullOrEmpty(line))                      break;                    while (line.Contains("(") && !specFile.EndOfStream)                  {                      // Get next OpenGL function                        Delegate d = new Delegate();                        // Get function name:                      d.Name = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries)[0];                        do                      {                          // Get function parameters and return value                            line = specFile.ReadLine();                          List<string> words = new List<string>(                              line.Replace('\t'' ' ').Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries)                          );                            if (words.Count == 0)                              break;                            // Identify line:                          switch (words[0])                          {                              case "return":  // Line denotes return value                                  d.ReturnType.CurrentType = words[1];                                  break;                                case "param":   // Line denotes parameter                                  Parameter p = new Parameter();                                    p.Name = Utilities.Keywords.Contains(words[1]) ? "@" + words[1] : words[1];                                  p.CurrentType = words[2];                                  p.Pointer += words[4].Contains("array") ? 1 : 0;                                  p.Pointer += words[4].Contains("reference") ? 1 : 0;                                  if (p.Pointer != 0 && words.Count > 5 && words[5].Contains("[1]"))                                      p.ElementCount = 1;                                  p.Flow = words[3] == "in" ? FlowDirection.In : FlowDirection.Out;                                    d.Parameters.Add(p);                                  break;                                // GetTexParameterIivEXT and GetTexParameterIuivEXT define two(!) versions (why?)                              case "version": // Line denotes function version (i.e. 1.0' 1.2' 1.5)                                  d.Version = words[1];                                  break;                                case "category":                                  d.Category = words[1];                                  break;                          }                      }                      while (!specFile.EndOfStream);                        d.Translate(function_overrides);                        delegates.Add(d);                  }              }              while (!specFile.EndOfStream);
Magic Number,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,ReadDelegates,The following statement contains a magic number: do              {                  string line = NextValidLine(specFile);                  if (String.IsNullOrEmpty(line))                      break;                    while (line.Contains("(") && !specFile.EndOfStream)                  {                      // Get next OpenGL function                        Delegate d = new Delegate();                        // Get function name:                      d.Name = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries)[0];                        do                      {                          // Get function parameters and return value                            line = specFile.ReadLine();                          List<string> words = new List<string>(                              line.Replace('\t'' ' ').Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries)                          );                            if (words.Count == 0)                              break;                            // Identify line:                          switch (words[0])                          {                              case "return":  // Line denotes return value                                  d.ReturnType.CurrentType = words[1];                                  break;                                case "param":   // Line denotes parameter                                  Parameter p = new Parameter();                                    p.Name = Utilities.Keywords.Contains(words[1]) ? "@" + words[1] : words[1];                                  p.CurrentType = words[2];                                  p.Pointer += words[4].Contains("array") ? 1 : 0;                                  p.Pointer += words[4].Contains("reference") ? 1 : 0;                                  if (p.Pointer != 0 && words.Count > 5 && words[5].Contains("[1]"))                                      p.ElementCount = 1;                                  p.Flow = words[3] == "in" ? FlowDirection.In : FlowDirection.Out;                                    d.Parameters.Add(p);                                  break;                                // GetTexParameterIivEXT and GetTexParameterIuivEXT define two(!) versions (why?)                              case "version": // Line denotes function version (i.e. 1.0' 1.2' 1.5)                                  d.Version = words[1];                                  break;                                case "category":                                  d.Category = words[1];                                  break;                          }                      }                      while (!specFile.EndOfStream);                        d.Translate(function_overrides);                        delegates.Add(d);                  }              }              while (!specFile.EndOfStream);
Magic Number,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,ReadDelegates,The following statement contains a magic number: do              {                  string line = NextValidLine(specFile);                  if (String.IsNullOrEmpty(line))                      break;                    while (line.Contains("(") && !specFile.EndOfStream)                  {                      // Get next OpenGL function                        Delegate d = new Delegate();                        // Get function name:                      d.Name = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries)[0];                        do                      {                          // Get function parameters and return value                            line = specFile.ReadLine();                          List<string> words = new List<string>(                              line.Replace('\t'' ' ').Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries)                          );                            if (words.Count == 0)                              break;                            // Identify line:                          switch (words[0])                          {                              case "return":  // Line denotes return value                                  d.ReturnType.CurrentType = words[1];                                  break;                                case "param":   // Line denotes parameter                                  Parameter p = new Parameter();                                    p.Name = Utilities.Keywords.Contains(words[1]) ? "@" + words[1] : words[1];                                  p.CurrentType = words[2];                                  p.Pointer += words[4].Contains("array") ? 1 : 0;                                  p.Pointer += words[4].Contains("reference") ? 1 : 0;                                  if (p.Pointer != 0 && words.Count > 5 && words[5].Contains("[1]"))                                      p.ElementCount = 1;                                  p.Flow = words[3] == "in" ? FlowDirection.In : FlowDirection.Out;                                    d.Parameters.Add(p);                                  break;                                // GetTexParameterIivEXT and GetTexParameterIuivEXT define two(!) versions (why?)                              case "version": // Line denotes function version (i.e. 1.0' 1.2' 1.5)                                  d.Version = words[1];                                  break;                                case "category":                                  d.Category = words[1];                                  break;                          }                      }                      while (!specFile.EndOfStream);                        d.Translate(function_overrides);                        delegates.Add(d);                  }              }              while (!specFile.EndOfStream);
Magic Number,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,ReadDelegates,The following statement contains a magic number: do              {                  string line = NextValidLine(specFile);                  if (String.IsNullOrEmpty(line))                      break;                    while (line.Contains("(") && !specFile.EndOfStream)                  {                      // Get next OpenGL function                        Delegate d = new Delegate();                        // Get function name:                      d.Name = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries)[0];                        do                      {                          // Get function parameters and return value                            line = specFile.ReadLine();                          List<string> words = new List<string>(                              line.Replace('\t'' ' ').Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries)                          );                            if (words.Count == 0)                              break;                            // Identify line:                          switch (words[0])                          {                              case "return":  // Line denotes return value                                  d.ReturnType.CurrentType = words[1];                                  break;                                case "param":   // Line denotes parameter                                  Parameter p = new Parameter();                                    p.Name = Utilities.Keywords.Contains(words[1]) ? "@" + words[1] : words[1];                                  p.CurrentType = words[2];                                  p.Pointer += words[4].Contains("array") ? 1 : 0;                                  p.Pointer += words[4].Contains("reference") ? 1 : 0;                                  if (p.Pointer != 0 && words.Count > 5 && words[5].Contains("[1]"))                                      p.ElementCount = 1;                                  p.Flow = words[3] == "in" ? FlowDirection.In : FlowDirection.Out;                                    d.Parameters.Add(p);                                  break;                                // GetTexParameterIivEXT and GetTexParameterIuivEXT define two(!) versions (why?)                              case "version": // Line denotes function version (i.e. 1.0' 1.2' 1.5)                                  d.Version = words[1];                                  break;                                case "category":                                  d.Category = words[1];                                  break;                          }                      }                      while (!specFile.EndOfStream);                        d.Translate(function_overrides);                        delegates.Add(d);                  }              }              while (!specFile.EndOfStream);
Magic Number,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,ReadEnums,The following statement contains a magic number: do              {                  string line = NextValidLine(specFile);                  if (String.IsNullOrEmpty(line))                      break;                    line = line.Replace('\t'' ' ');                    // We just encountered the start of a new enumerant:                  while (!String.IsNullOrEmpty(line) && line.Contains("enum"))                  {                      string[] words = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries);                      if (words.Length == 0)                          continue;                        // Declare a new enumerant                      Enum e = new Enum();                      e.Name = Char.IsDigit(words[0][0]) ? Settings.ConstantPrefix + words[0] : words[0];                        // And fill in the values for this enumerant                      do                      {                          line = NextValidLine(specFile);                            if (String.IsNullOrEmpty(line) || line.StartsWith("#"))                              continue;                            if (line.Contains("enum:") || specFile.EndOfStream)                              break;                            line = line.Replace('\t'' ' ');                          words = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries);                            if (words.Length == 0)                              continue;                            // If we reach this point' we have found a new value for the current enumerant                          Constant c = new Constant();                          if (line.Contains("="))                          {                              // Trim the name's prefix' but only if not in Tao compat mode.                              if (Settings.Compatibility == Settings.Legacy.Tao)                              {                              }                              else                              {                                  if (words[0].StartsWith(Settings.ConstantPrefix))                                      words[0] = words[0].Substring(Settings.ConstantPrefix.Length);                                    if (Char.IsDigit(words[0][0]))                                      words[0] = Settings.ConstantPrefix + words[0];                              }                                c.Name = words[0];                              c.Value = words[2];                          }                          else if (words[0] == "use")                          {                              // Trim the prefix.                              if (words[2].StartsWith(Settings.ConstantPrefix))                                  words[2] = words[2].Substring(Settings.ConstantPrefix.Length);                                // If the remaining string starts with a digit' we were wrong above.                              // Re-add the "GL_"                              if (Char.IsDigit(words[2][0]))                                  words[2] = Settings.ConstantPrefix + words[2];                                c.Name = words[2];                              c.Reference = words[1];                              c.Value = words[2];                          }                          else                          {                              // Typical cause is hand-editing the specs and forgetting to add an '=' sign.                              throw new InvalidOperationException(String.Format(                                  "[Error] Invalid constant definition: \"{0}\""' line));                          }                            //if (!String.IsNullOrEmpty(c.Name) && !e.Members.Contains.Contains(c))                          //SpecTranslator.Merge(e.Members' c);                          if (!e.ConstantCollection.ContainsKey(c.Name))                              e.ConstantCollection.Add(c.Name' c);                          else                              Trace.WriteLine(String.Format(                                  "Spec error: Constant {0} defined twice in enum {1}' discarding last definition."'                                  c.Name' e.Name));                            // Insert the current constant in the list of all constants.                          //SpecTranslator.Merge(complete_enum.Members' c);                          complete_enum = Utilities.Merge(complete_enum' c);                      }                      while (!specFile.EndOfStream);                        // At this point' the complete value list for the current enumerant has been read' so add this                      // enumerant to the list.                      //e.StartDirectives.Add(new CodeRegionDirective(CodeRegionMode.Start' "public enum " + e.Name));                      //e.EndDirectives.Add(new CodeRegionDirective(CodeRegionMode.End' "public enum " + e.Name));                        // (disabled) Hack - discard Boolean enum' it fsucks up the fragile translation code ahead.                      //if (!e.Name.Contains("Bool"))                      //Utilities.Merge(enums' e);                        //e.Translate();                        if (!enums.ContainsKey(e.Name))                          enums.Add(e.Name' e);                      else                      {                          // The enum already exists' merge constants.                          foreach (Constant t in e.ConstantCollection.Values)                              Utilities.Merge(enums[e.Name]' t);                      }                  }              }              while (!specFile.EndOfStream);
Magic Number,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,ReadEnums,The following statement contains a magic number: do              {                  string line = NextValidLine(specFile);                  if (String.IsNullOrEmpty(line))                      break;                    line = line.Replace('\t'' ' ');                    // We just encountered the start of a new enumerant:                  while (!String.IsNullOrEmpty(line) && line.Contains("enum"))                  {                      string[] words = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries);                      if (words.Length == 0)                          continue;                        // Declare a new enumerant                      Enum e = new Enum();                      e.Name = Char.IsDigit(words[0][0]) ? Settings.ConstantPrefix + words[0] : words[0];                        // And fill in the values for this enumerant                      do                      {                          line = NextValidLine(specFile);                            if (String.IsNullOrEmpty(line) || line.StartsWith("#"))                              continue;                            if (line.Contains("enum:") || specFile.EndOfStream)                              break;                            line = line.Replace('\t'' ' ');                          words = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries);                            if (words.Length == 0)                              continue;                            // If we reach this point' we have found a new value for the current enumerant                          Constant c = new Constant();                          if (line.Contains("="))                          {                              // Trim the name's prefix' but only if not in Tao compat mode.                              if (Settings.Compatibility == Settings.Legacy.Tao)                              {                              }                              else                              {                                  if (words[0].StartsWith(Settings.ConstantPrefix))                                      words[0] = words[0].Substring(Settings.ConstantPrefix.Length);                                    if (Char.IsDigit(words[0][0]))                                      words[0] = Settings.ConstantPrefix + words[0];                              }                                c.Name = words[0];                              c.Value = words[2];                          }                          else if (words[0] == "use")                          {                              // Trim the prefix.                              if (words[2].StartsWith(Settings.ConstantPrefix))                                  words[2] = words[2].Substring(Settings.ConstantPrefix.Length);                                // If the remaining string starts with a digit' we were wrong above.                              // Re-add the "GL_"                              if (Char.IsDigit(words[2][0]))                                  words[2] = Settings.ConstantPrefix + words[2];                                c.Name = words[2];                              c.Reference = words[1];                              c.Value = words[2];                          }                          else                          {                              // Typical cause is hand-editing the specs and forgetting to add an '=' sign.                              throw new InvalidOperationException(String.Format(                                  "[Error] Invalid constant definition: \"{0}\""' line));                          }                            //if (!String.IsNullOrEmpty(c.Name) && !e.Members.Contains.Contains(c))                          //SpecTranslator.Merge(e.Members' c);                          if (!e.ConstantCollection.ContainsKey(c.Name))                              e.ConstantCollection.Add(c.Name' c);                          else                              Trace.WriteLine(String.Format(                                  "Spec error: Constant {0} defined twice in enum {1}' discarding last definition."'                                  c.Name' e.Name));                            // Insert the current constant in the list of all constants.                          //SpecTranslator.Merge(complete_enum.Members' c);                          complete_enum = Utilities.Merge(complete_enum' c);                      }                      while (!specFile.EndOfStream);                        // At this point' the complete value list for the current enumerant has been read' so add this                      // enumerant to the list.                      //e.StartDirectives.Add(new CodeRegionDirective(CodeRegionMode.Start' "public enum " + e.Name));                      //e.EndDirectives.Add(new CodeRegionDirective(CodeRegionMode.End' "public enum " + e.Name));                        // (disabled) Hack - discard Boolean enum' it fsucks up the fragile translation code ahead.                      //if (!e.Name.Contains("Bool"))                      //Utilities.Merge(enums' e);                        //e.Translate();                        if (!enums.ContainsKey(e.Name))                          enums.Add(e.Name' e);                      else                      {                          // The enum already exists' merge constants.                          foreach (Constant t in e.ConstantCollection.Values)                              Utilities.Merge(enums[e.Name]' t);                      }                  }              }              while (!specFile.EndOfStream);
Magic Number,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,ReadEnums,The following statement contains a magic number: do              {                  string line = NextValidLine(specFile);                  if (String.IsNullOrEmpty(line))                      break;                    line = line.Replace('\t'' ' ');                    // We just encountered the start of a new enumerant:                  while (!String.IsNullOrEmpty(line) && line.Contains("enum"))                  {                      string[] words = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries);                      if (words.Length == 0)                          continue;                        // Declare a new enumerant                      Enum e = new Enum();                      e.Name = Char.IsDigit(words[0][0]) ? Settings.ConstantPrefix + words[0] : words[0];                        // And fill in the values for this enumerant                      do                      {                          line = NextValidLine(specFile);                            if (String.IsNullOrEmpty(line) || line.StartsWith("#"))                              continue;                            if (line.Contains("enum:") || specFile.EndOfStream)                              break;                            line = line.Replace('\t'' ' ');                          words = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries);                            if (words.Length == 0)                              continue;                            // If we reach this point' we have found a new value for the current enumerant                          Constant c = new Constant();                          if (line.Contains("="))                          {                              // Trim the name's prefix' but only if not in Tao compat mode.                              if (Settings.Compatibility == Settings.Legacy.Tao)                              {                              }                              else                              {                                  if (words[0].StartsWith(Settings.ConstantPrefix))                                      words[0] = words[0].Substring(Settings.ConstantPrefix.Length);                                    if (Char.IsDigit(words[0][0]))                                      words[0] = Settings.ConstantPrefix + words[0];                              }                                c.Name = words[0];                              c.Value = words[2];                          }                          else if (words[0] == "use")                          {                              // Trim the prefix.                              if (words[2].StartsWith(Settings.ConstantPrefix))                                  words[2] = words[2].Substring(Settings.ConstantPrefix.Length);                                // If the remaining string starts with a digit' we were wrong above.                              // Re-add the "GL_"                              if (Char.IsDigit(words[2][0]))                                  words[2] = Settings.ConstantPrefix + words[2];                                c.Name = words[2];                              c.Reference = words[1];                              c.Value = words[2];                          }                          else                          {                              // Typical cause is hand-editing the specs and forgetting to add an '=' sign.                              throw new InvalidOperationException(String.Format(                                  "[Error] Invalid constant definition: \"{0}\""' line));                          }                            //if (!String.IsNullOrEmpty(c.Name) && !e.Members.Contains.Contains(c))                          //SpecTranslator.Merge(e.Members' c);                          if (!e.ConstantCollection.ContainsKey(c.Name))                              e.ConstantCollection.Add(c.Name' c);                          else                              Trace.WriteLine(String.Format(                                  "Spec error: Constant {0} defined twice in enum {1}' discarding last definition."'                                  c.Name' e.Name));                            // Insert the current constant in the list of all constants.                          //SpecTranslator.Merge(complete_enum.Members' c);                          complete_enum = Utilities.Merge(complete_enum' c);                      }                      while (!specFile.EndOfStream);                        // At this point' the complete value list for the current enumerant has been read' so add this                      // enumerant to the list.                      //e.StartDirectives.Add(new CodeRegionDirective(CodeRegionMode.Start' "public enum " + e.Name));                      //e.EndDirectives.Add(new CodeRegionDirective(CodeRegionMode.End' "public enum " + e.Name));                        // (disabled) Hack - discard Boolean enum' it fsucks up the fragile translation code ahead.                      //if (!e.Name.Contains("Bool"))                      //Utilities.Merge(enums' e);                        //e.Translate();                        if (!enums.ContainsKey(e.Name))                          enums.Add(e.Name' e);                      else                      {                          // The enum already exists' merge constants.                          foreach (Constant t in e.ConstantCollection.Values)                              Utilities.Merge(enums[e.Name]' t);                      }                  }              }              while (!specFile.EndOfStream);
Magic Number,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,ReadEnums,The following statement contains a magic number: do              {                  string line = NextValidLine(specFile);                  if (String.IsNullOrEmpty(line))                      break;                    line = line.Replace('\t'' ' ');                    // We just encountered the start of a new enumerant:                  while (!String.IsNullOrEmpty(line) && line.Contains("enum"))                  {                      string[] words = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries);                      if (words.Length == 0)                          continue;                        // Declare a new enumerant                      Enum e = new Enum();                      e.Name = Char.IsDigit(words[0][0]) ? Settings.ConstantPrefix + words[0] : words[0];                        // And fill in the values for this enumerant                      do                      {                          line = NextValidLine(specFile);                            if (String.IsNullOrEmpty(line) || line.StartsWith("#"))                              continue;                            if (line.Contains("enum:") || specFile.EndOfStream)                              break;                            line = line.Replace('\t'' ' ');                          words = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries);                            if (words.Length == 0)                              continue;                            // If we reach this point' we have found a new value for the current enumerant                          Constant c = new Constant();                          if (line.Contains("="))                          {                              // Trim the name's prefix' but only if not in Tao compat mode.                              if (Settings.Compatibility == Settings.Legacy.Tao)                              {                              }                              else                              {                                  if (words[0].StartsWith(Settings.ConstantPrefix))                                      words[0] = words[0].Substring(Settings.ConstantPrefix.Length);                                    if (Char.IsDigit(words[0][0]))                                      words[0] = Settings.ConstantPrefix + words[0];                              }                                c.Name = words[0];                              c.Value = words[2];                          }                          else if (words[0] == "use")                          {                              // Trim the prefix.                              if (words[2].StartsWith(Settings.ConstantPrefix))                                  words[2] = words[2].Substring(Settings.ConstantPrefix.Length);                                // If the remaining string starts with a digit' we were wrong above.                              // Re-add the "GL_"                              if (Char.IsDigit(words[2][0]))                                  words[2] = Settings.ConstantPrefix + words[2];                                c.Name = words[2];                              c.Reference = words[1];                              c.Value = words[2];                          }                          else                          {                              // Typical cause is hand-editing the specs and forgetting to add an '=' sign.                              throw new InvalidOperationException(String.Format(                                  "[Error] Invalid constant definition: \"{0}\""' line));                          }                            //if (!String.IsNullOrEmpty(c.Name) && !e.Members.Contains.Contains(c))                          //SpecTranslator.Merge(e.Members' c);                          if (!e.ConstantCollection.ContainsKey(c.Name))                              e.ConstantCollection.Add(c.Name' c);                          else                              Trace.WriteLine(String.Format(                                  "Spec error: Constant {0} defined twice in enum {1}' discarding last definition."'                                  c.Name' e.Name));                            // Insert the current constant in the list of all constants.                          //SpecTranslator.Merge(complete_enum.Members' c);                          complete_enum = Utilities.Merge(complete_enum' c);                      }                      while (!specFile.EndOfStream);                        // At this point' the complete value list for the current enumerant has been read' so add this                      // enumerant to the list.                      //e.StartDirectives.Add(new CodeRegionDirective(CodeRegionMode.Start' "public enum " + e.Name));                      //e.EndDirectives.Add(new CodeRegionDirective(CodeRegionMode.End' "public enum " + e.Name));                        // (disabled) Hack - discard Boolean enum' it fsucks up the fragile translation code ahead.                      //if (!e.Name.Contains("Bool"))                      //Utilities.Merge(enums' e);                        //e.Translate();                        if (!enums.ContainsKey(e.Name))                          enums.Add(e.Name' e);                      else                      {                          // The enum already exists' merge constants.                          foreach (Constant t in e.ConstantCollection.Values)                              Utilities.Merge(enums[e.Name]' t);                      }                  }              }              while (!specFile.EndOfStream);
Magic Number,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,ReadEnums,The following statement contains a magic number: do              {                  string line = NextValidLine(specFile);                  if (String.IsNullOrEmpty(line))                      break;                    line = line.Replace('\t'' ' ');                    // We just encountered the start of a new enumerant:                  while (!String.IsNullOrEmpty(line) && line.Contains("enum"))                  {                      string[] words = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries);                      if (words.Length == 0)                          continue;                        // Declare a new enumerant                      Enum e = new Enum();                      e.Name = Char.IsDigit(words[0][0]) ? Settings.ConstantPrefix + words[0] : words[0];                        // And fill in the values for this enumerant                      do                      {                          line = NextValidLine(specFile);                            if (String.IsNullOrEmpty(line) || line.StartsWith("#"))                              continue;                            if (line.Contains("enum:") || specFile.EndOfStream)                              break;                            line = line.Replace('\t'' ' ');                          words = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries);                            if (words.Length == 0)                              continue;                            // If we reach this point' we have found a new value for the current enumerant                          Constant c = new Constant();                          if (line.Contains("="))                          {                              // Trim the name's prefix' but only if not in Tao compat mode.                              if (Settings.Compatibility == Settings.Legacy.Tao)                              {                              }                              else                              {                                  if (words[0].StartsWith(Settings.ConstantPrefix))                                      words[0] = words[0].Substring(Settings.ConstantPrefix.Length);                                    if (Char.IsDigit(words[0][0]))                                      words[0] = Settings.ConstantPrefix + words[0];                              }                                c.Name = words[0];                              c.Value = words[2];                          }                          else if (words[0] == "use")                          {                              // Trim the prefix.                              if (words[2].StartsWith(Settings.ConstantPrefix))                                  words[2] = words[2].Substring(Settings.ConstantPrefix.Length);                                // If the remaining string starts with a digit' we were wrong above.                              // Re-add the "GL_"                              if (Char.IsDigit(words[2][0]))                                  words[2] = Settings.ConstantPrefix + words[2];                                c.Name = words[2];                              c.Reference = words[1];                              c.Value = words[2];                          }                          else                          {                              // Typical cause is hand-editing the specs and forgetting to add an '=' sign.                              throw new InvalidOperationException(String.Format(                                  "[Error] Invalid constant definition: \"{0}\""' line));                          }                            //if (!String.IsNullOrEmpty(c.Name) && !e.Members.Contains.Contains(c))                          //SpecTranslator.Merge(e.Members' c);                          if (!e.ConstantCollection.ContainsKey(c.Name))                              e.ConstantCollection.Add(c.Name' c);                          else                              Trace.WriteLine(String.Format(                                  "Spec error: Constant {0} defined twice in enum {1}' discarding last definition."'                                  c.Name' e.Name));                            // Insert the current constant in the list of all constants.                          //SpecTranslator.Merge(complete_enum.Members' c);                          complete_enum = Utilities.Merge(complete_enum' c);                      }                      while (!specFile.EndOfStream);                        // At this point' the complete value list for the current enumerant has been read' so add this                      // enumerant to the list.                      //e.StartDirectives.Add(new CodeRegionDirective(CodeRegionMode.Start' "public enum " + e.Name));                      //e.EndDirectives.Add(new CodeRegionDirective(CodeRegionMode.End' "public enum " + e.Name));                        // (disabled) Hack - discard Boolean enum' it fsucks up the fragile translation code ahead.                      //if (!e.Name.Contains("Bool"))                      //Utilities.Merge(enums' e);                        //e.Translate();                        if (!enums.ContainsKey(e.Name))                          enums.Add(e.Name' e);                      else                      {                          // The enum already exists' merge constants.                          foreach (Constant t in e.ConstantCollection.Values)                              Utilities.Merge(enums[e.Name]' t);                      }                  }              }              while (!specFile.EndOfStream);
Magic Number,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,ReadEnums,The following statement contains a magic number: do              {                  string line = NextValidLine(specFile);                  if (String.IsNullOrEmpty(line))                      break;                    line = line.Replace('\t'' ' ');                    // We just encountered the start of a new enumerant:                  while (!String.IsNullOrEmpty(line) && line.Contains("enum"))                  {                      string[] words = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries);                      if (words.Length == 0)                          continue;                        // Declare a new enumerant                      Enum e = new Enum();                      e.Name = Char.IsDigit(words[0][0]) ? Settings.ConstantPrefix + words[0] : words[0];                        // And fill in the values for this enumerant                      do                      {                          line = NextValidLine(specFile);                            if (String.IsNullOrEmpty(line) || line.StartsWith("#"))                              continue;                            if (line.Contains("enum:") || specFile.EndOfStream)                              break;                            line = line.Replace('\t'' ' ');                          words = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries);                            if (words.Length == 0)                              continue;                            // If we reach this point' we have found a new value for the current enumerant                          Constant c = new Constant();                          if (line.Contains("="))                          {                              // Trim the name's prefix' but only if not in Tao compat mode.                              if (Settings.Compatibility == Settings.Legacy.Tao)                              {                              }                              else                              {                                  if (words[0].StartsWith(Settings.ConstantPrefix))                                      words[0] = words[0].Substring(Settings.ConstantPrefix.Length);                                    if (Char.IsDigit(words[0][0]))                                      words[0] = Settings.ConstantPrefix + words[0];                              }                                c.Name = words[0];                              c.Value = words[2];                          }                          else if (words[0] == "use")                          {                              // Trim the prefix.                              if (words[2].StartsWith(Settings.ConstantPrefix))                                  words[2] = words[2].Substring(Settings.ConstantPrefix.Length);                                // If the remaining string starts with a digit' we were wrong above.                              // Re-add the "GL_"                              if (Char.IsDigit(words[2][0]))                                  words[2] = Settings.ConstantPrefix + words[2];                                c.Name = words[2];                              c.Reference = words[1];                              c.Value = words[2];                          }                          else                          {                              // Typical cause is hand-editing the specs and forgetting to add an '=' sign.                              throw new InvalidOperationException(String.Format(                                  "[Error] Invalid constant definition: \"{0}\""' line));                          }                            //if (!String.IsNullOrEmpty(c.Name) && !e.Members.Contains.Contains(c))                          //SpecTranslator.Merge(e.Members' c);                          if (!e.ConstantCollection.ContainsKey(c.Name))                              e.ConstantCollection.Add(c.Name' c);                          else                              Trace.WriteLine(String.Format(                                  "Spec error: Constant {0} defined twice in enum {1}' discarding last definition."'                                  c.Name' e.Name));                            // Insert the current constant in the list of all constants.                          //SpecTranslator.Merge(complete_enum.Members' c);                          complete_enum = Utilities.Merge(complete_enum' c);                      }                      while (!specFile.EndOfStream);                        // At this point' the complete value list for the current enumerant has been read' so add this                      // enumerant to the list.                      //e.StartDirectives.Add(new CodeRegionDirective(CodeRegionMode.Start' "public enum " + e.Name));                      //e.EndDirectives.Add(new CodeRegionDirective(CodeRegionMode.End' "public enum " + e.Name));                        // (disabled) Hack - discard Boolean enum' it fsucks up the fragile translation code ahead.                      //if (!e.Name.Contains("Bool"))                      //Utilities.Merge(enums' e);                        //e.Translate();                        if (!enums.ContainsKey(e.Name))                          enums.Add(e.Name' e);                      else                      {                          // The enum already exists' merge constants.                          foreach (Constant t in e.ConstantCollection.Values)                              Utilities.Merge(enums[e.Name]' t);                      }                  }              }              while (!specFile.EndOfStream);
Magic Number,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,ReadEnums,The following statement contains a magic number: do              {                  string line = NextValidLine(specFile);                  if (String.IsNullOrEmpty(line))                      break;                    line = line.Replace('\t'' ' ');                    // We just encountered the start of a new enumerant:                  while (!String.IsNullOrEmpty(line) && line.Contains("enum"))                  {                      string[] words = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries);                      if (words.Length == 0)                          continue;                        // Declare a new enumerant                      Enum e = new Enum();                      e.Name = Char.IsDigit(words[0][0]) ? Settings.ConstantPrefix + words[0] : words[0];                        // And fill in the values for this enumerant                      do                      {                          line = NextValidLine(specFile);                            if (String.IsNullOrEmpty(line) || line.StartsWith("#"))                              continue;                            if (line.Contains("enum:") || specFile.EndOfStream)                              break;                            line = line.Replace('\t'' ' ');                          words = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries);                            if (words.Length == 0)                              continue;                            // If we reach this point' we have found a new value for the current enumerant                          Constant c = new Constant();                          if (line.Contains("="))                          {                              // Trim the name's prefix' but only if not in Tao compat mode.                              if (Settings.Compatibility == Settings.Legacy.Tao)                              {                              }                              else                              {                                  if (words[0].StartsWith(Settings.ConstantPrefix))                                      words[0] = words[0].Substring(Settings.ConstantPrefix.Length);                                    if (Char.IsDigit(words[0][0]))                                      words[0] = Settings.ConstantPrefix + words[0];                              }                                c.Name = words[0];                              c.Value = words[2];                          }                          else if (words[0] == "use")                          {                              // Trim the prefix.                              if (words[2].StartsWith(Settings.ConstantPrefix))                                  words[2] = words[2].Substring(Settings.ConstantPrefix.Length);                                // If the remaining string starts with a digit' we were wrong above.                              // Re-add the "GL_"                              if (Char.IsDigit(words[2][0]))                                  words[2] = Settings.ConstantPrefix + words[2];                                c.Name = words[2];                              c.Reference = words[1];                              c.Value = words[2];                          }                          else                          {                              // Typical cause is hand-editing the specs and forgetting to add an '=' sign.                              throw new InvalidOperationException(String.Format(                                  "[Error] Invalid constant definition: \"{0}\""' line));                          }                            //if (!String.IsNullOrEmpty(c.Name) && !e.Members.Contains.Contains(c))                          //SpecTranslator.Merge(e.Members' c);                          if (!e.ConstantCollection.ContainsKey(c.Name))                              e.ConstantCollection.Add(c.Name' c);                          else                              Trace.WriteLine(String.Format(                                  "Spec error: Constant {0} defined twice in enum {1}' discarding last definition."'                                  c.Name' e.Name));                            // Insert the current constant in the list of all constants.                          //SpecTranslator.Merge(complete_enum.Members' c);                          complete_enum = Utilities.Merge(complete_enum' c);                      }                      while (!specFile.EndOfStream);                        // At this point' the complete value list for the current enumerant has been read' so add this                      // enumerant to the list.                      //e.StartDirectives.Add(new CodeRegionDirective(CodeRegionMode.Start' "public enum " + e.Name));                      //e.EndDirectives.Add(new CodeRegionDirective(CodeRegionMode.End' "public enum " + e.Name));                        // (disabled) Hack - discard Boolean enum' it fsucks up the fragile translation code ahead.                      //if (!e.Name.Contains("Bool"))                      //Utilities.Merge(enums' e);                        //e.Translate();                        if (!enums.ContainsKey(e.Name))                          enums.Add(e.Name' e);                      else                      {                          // The enum already exists' merge constants.                          foreach (Constant t in e.ConstantCollection.Values)                              Utilities.Merge(enums[e.Name]' t);                      }                  }              }              while (!specFile.EndOfStream);
Magic Number,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,ReadEnums,The following statement contains a magic number: do              {                  string line = NextValidLine(specFile);                  if (String.IsNullOrEmpty(line))                      break;                    line = line.Replace('\t'' ' ');                    // We just encountered the start of a new enumerant:                  while (!String.IsNullOrEmpty(line) && line.Contains("enum"))                  {                      string[] words = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries);                      if (words.Length == 0)                          continue;                        // Declare a new enumerant                      Enum e = new Enum();                      e.Name = Char.IsDigit(words[0][0]) ? Settings.ConstantPrefix + words[0] : words[0];                        // And fill in the values for this enumerant                      do                      {                          line = NextValidLine(specFile);                            if (String.IsNullOrEmpty(line) || line.StartsWith("#"))                              continue;                            if (line.Contains("enum:") || specFile.EndOfStream)                              break;                            line = line.Replace('\t'' ' ');                          words = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries);                            if (words.Length == 0)                              continue;                            // If we reach this point' we have found a new value for the current enumerant                          Constant c = new Constant();                          if (line.Contains("="))                          {                              // Trim the name's prefix' but only if not in Tao compat mode.                              if (Settings.Compatibility == Settings.Legacy.Tao)                              {                              }                              else                              {                                  if (words[0].StartsWith(Settings.ConstantPrefix))                                      words[0] = words[0].Substring(Settings.ConstantPrefix.Length);                                    if (Char.IsDigit(words[0][0]))                                      words[0] = Settings.ConstantPrefix + words[0];                              }                                c.Name = words[0];                              c.Value = words[2];                          }                          else if (words[0] == "use")                          {                              // Trim the prefix.                              if (words[2].StartsWith(Settings.ConstantPrefix))                                  words[2] = words[2].Substring(Settings.ConstantPrefix.Length);                                // If the remaining string starts with a digit' we were wrong above.                              // Re-add the "GL_"                              if (Char.IsDigit(words[2][0]))                                  words[2] = Settings.ConstantPrefix + words[2];                                c.Name = words[2];                              c.Reference = words[1];                              c.Value = words[2];                          }                          else                          {                              // Typical cause is hand-editing the specs and forgetting to add an '=' sign.                              throw new InvalidOperationException(String.Format(                                  "[Error] Invalid constant definition: \"{0}\""' line));                          }                            //if (!String.IsNullOrEmpty(c.Name) && !e.Members.Contains.Contains(c))                          //SpecTranslator.Merge(e.Members' c);                          if (!e.ConstantCollection.ContainsKey(c.Name))                              e.ConstantCollection.Add(c.Name' c);                          else                              Trace.WriteLine(String.Format(                                  "Spec error: Constant {0} defined twice in enum {1}' discarding last definition."'                                  c.Name' e.Name));                            // Insert the current constant in the list of all constants.                          //SpecTranslator.Merge(complete_enum.Members' c);                          complete_enum = Utilities.Merge(complete_enum' c);                      }                      while (!specFile.EndOfStream);                        // At this point' the complete value list for the current enumerant has been read' so add this                      // enumerant to the list.                      //e.StartDirectives.Add(new CodeRegionDirective(CodeRegionMode.Start' "public enum " + e.Name));                      //e.EndDirectives.Add(new CodeRegionDirective(CodeRegionMode.End' "public enum " + e.Name));                        // (disabled) Hack - discard Boolean enum' it fsucks up the fragile translation code ahead.                      //if (!e.Name.Contains("Bool"))                      //Utilities.Merge(enums' e);                        //e.Translate();                        if (!enums.ContainsKey(e.Name))                          enums.Add(e.Name' e);                      else                      {                          // The enum already exists' merge constants.                          foreach (Constant t in e.ConstantCollection.Values)                              Utilities.Merge(enums[e.Name]' t);                      }                  }              }              while (!specFile.EndOfStream);
Magic Number,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,ReadEnums,The following statement contains a magic number: do              {                  string line = NextValidLine(specFile);                  if (String.IsNullOrEmpty(line))                      break;                    line = line.Replace('\t'' ' ');                    // We just encountered the start of a new enumerant:                  while (!String.IsNullOrEmpty(line) && line.Contains("enum"))                  {                      string[] words = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries);                      if (words.Length == 0)                          continue;                        // Declare a new enumerant                      Enum e = new Enum();                      e.Name = Char.IsDigit(words[0][0]) ? Settings.ConstantPrefix + words[0] : words[0];                        // And fill in the values for this enumerant                      do                      {                          line = NextValidLine(specFile);                            if (String.IsNullOrEmpty(line) || line.StartsWith("#"))                              continue;                            if (line.Contains("enum:") || specFile.EndOfStream)                              break;                            line = line.Replace('\t'' ' ');                          words = line.Split(Utilities.Separators' StringSplitOptions.RemoveEmptyEntries);                            if (words.Length == 0)                              continue;                            // If we reach this point' we have found a new value for the current enumerant                          Constant c = new Constant();                          if (line.Contains("="))                          {                              // Trim the name's prefix' but only if not in Tao compat mode.                              if (Settings.Compatibility == Settings.Legacy.Tao)                              {                              }                              else                              {                                  if (words[0].StartsWith(Settings.ConstantPrefix))                                      words[0] = words[0].Substring(Settings.ConstantPrefix.Length);                                    if (Char.IsDigit(words[0][0]))                                      words[0] = Settings.ConstantPrefix + words[0];                              }                                c.Name = words[0];                              c.Value = words[2];                          }                          else if (words[0] == "use")                          {                              // Trim the prefix.                              if (words[2].StartsWith(Settings.ConstantPrefix))                                  words[2] = words[2].Substring(Settings.ConstantPrefix.Length);                                // If the remaining string starts with a digit' we were wrong above.                              // Re-add the "GL_"                              if (Char.IsDigit(words[2][0]))                                  words[2] = Settings.ConstantPrefix + words[2];                                c.Name = words[2];                              c.Reference = words[1];                              c.Value = words[2];                          }                          else                          {                              // Typical cause is hand-editing the specs and forgetting to add an '=' sign.                              throw new InvalidOperationException(String.Format(                                  "[Error] Invalid constant definition: \"{0}\""' line));                          }                            //if (!String.IsNullOrEmpty(c.Name) && !e.Members.Contains.Contains(c))                          //SpecTranslator.Merge(e.Members' c);                          if (!e.ConstantCollection.ContainsKey(c.Name))                              e.ConstantCollection.Add(c.Name' c);                          else                              Trace.WriteLine(String.Format(                                  "Spec error: Constant {0} defined twice in enum {1}' discarding last definition."'                                  c.Name' e.Name));                            // Insert the current constant in the list of all constants.                          //SpecTranslator.Merge(complete_enum.Members' c);                          complete_enum = Utilities.Merge(complete_enum' c);                      }                      while (!specFile.EndOfStream);                        // At this point' the complete value list for the current enumerant has been read' so add this                      // enumerant to the list.                      //e.StartDirectives.Add(new CodeRegionDirective(CodeRegionMode.Start' "public enum " + e.Name));                      //e.EndDirectives.Add(new CodeRegionDirective(CodeRegionMode.End' "public enum " + e.Name));                        // (disabled) Hack - discard Boolean enum' it fsucks up the fragile translation code ahead.                      //if (!e.Name.Contains("Bool"))                      //Utilities.Merge(enums' e);                        //e.Translate();                        if (!enums.ContainsKey(e.Name))                          enums.Add(e.Name' e);                      else                      {                          // The enum already exists' merge constants.                          foreach (Constant t in e.ConstantCollection.Values)                              Utilities.Merge(enums[e.Name]' t);                      }                  }              }              while (!specFile.EndOfStream);
Magic Number,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,ReadCSTypeMap,The following statement contains a magic number: while (!specFile.EndOfStream)              {                  string line = specFile.ReadLine();                  if (String.IsNullOrEmpty(line) || line.StartsWith("#"))                      continue;                    string[] words = line.Split(" '\t".ToCharArray()' StringSplitOptions.RemoveEmptyEntries);                  if (words.Length < 2)                      continue;                    if (((Settings.Compatibility & Settings.Legacy.NoBoolParameters) != Settings.Legacy.None) && words[1] == "bool")                      words[1] = "Int32";                    CSTypes.Add(words[0]' words[1]);              }
Magic Number,Bind.Structures,Function,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Function.cs,WrapVoidPointers,The following statement contains a magic number: if (index >= 0 && index < Parameters.Count)              {                  if (Parameters[index].WrapperType == WrapperTypes.GenericParameter)                  {                      // Recurse to the last parameter                      ++index;                      WrapVoidPointers(wrappers);                      --index;                        // On stack rewind' create generic wrappers                      Parameters[index].Reference = true;                      Parameters[index].Array = 0;                      Parameters[index].Pointer = 0;                      Parameters[index].Generic = true;                      Parameters[index].CurrentType = "T" + index.ToString();                      Parameters[index].Flow = FlowDirection.Undefined;                      Parameters.Rebuild = true;                      CreateBody(false);                      wrappers.Add(new Function(this));                        Parameters[index].Reference = false;                      Parameters[index].Array = 1;                      Parameters[index].Pointer = 0;                      Parameters[index].Generic = true;                      Parameters[index].CurrentType = "T" + index.ToString();                      Parameters[index].Flow = FlowDirection.Undefined;                      Parameters.Rebuild = true;                      CreateBody(false);                      wrappers.Add(new Function(this));                        Parameters[index].Reference = false;                      Parameters[index].Array = 2;                      Parameters[index].Pointer = 0;                      Parameters[index].Generic = true;                      Parameters[index].CurrentType = "T" + index.ToString();                      Parameters[index].Flow = FlowDirection.Undefined;                      Parameters.Rebuild = true;                      CreateBody(false);                      wrappers.Add(new Function(this));                        Parameters[index].Reference = false;                      Parameters[index].Array = 3;                      Parameters[index].Pointer = 0;                      Parameters[index].Generic = true;                      Parameters[index].CurrentType = "T" + index.ToString();                      Parameters[index].Flow = FlowDirection.Undefined;                      Parameters.Rebuild = true;                      CreateBody(false);                      wrappers.Add(new Function(this));                  }                  else                  {                      // Recurse to the last parameter                      ++index;                      WrapVoidPointers(wrappers);                      --index;                  }              }
Magic Number,Bind.Structures,Function,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Function.cs,WrapVoidPointers,The following statement contains a magic number: if (index >= 0 && index < Parameters.Count)              {                  if (Parameters[index].WrapperType == WrapperTypes.GenericParameter)                  {                      // Recurse to the last parameter                      ++index;                      WrapVoidPointers(wrappers);                      --index;                        // On stack rewind' create generic wrappers                      Parameters[index].Reference = true;                      Parameters[index].Array = 0;                      Parameters[index].Pointer = 0;                      Parameters[index].Generic = true;                      Parameters[index].CurrentType = "T" + index.ToString();                      Parameters[index].Flow = FlowDirection.Undefined;                      Parameters.Rebuild = true;                      CreateBody(false);                      wrappers.Add(new Function(this));                        Parameters[index].Reference = false;                      Parameters[index].Array = 1;                      Parameters[index].Pointer = 0;                      Parameters[index].Generic = true;                      Parameters[index].CurrentType = "T" + index.ToString();                      Parameters[index].Flow = FlowDirection.Undefined;                      Parameters.Rebuild = true;                      CreateBody(false);                      wrappers.Add(new Function(this));                        Parameters[index].Reference = false;                      Parameters[index].Array = 2;                      Parameters[index].Pointer = 0;                      Parameters[index].Generic = true;                      Parameters[index].CurrentType = "T" + index.ToString();                      Parameters[index].Flow = FlowDirection.Undefined;                      Parameters.Rebuild = true;                      CreateBody(false);                      wrappers.Add(new Function(this));                        Parameters[index].Reference = false;                      Parameters[index].Array = 3;                      Parameters[index].Pointer = 0;                      Parameters[index].Generic = true;                      Parameters[index].CurrentType = "T" + index.ToString();                      Parameters[index].Flow = FlowDirection.Undefined;                      Parameters.Rebuild = true;                      CreateBody(false);                      wrappers.Add(new Function(this));                  }                  else                  {                      // Recurse to the last parameter                      ++index;                      WrapVoidPointers(wrappers);                      --index;                  }              }
Magic Number,Bind.Structures,FunctionBody,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Function.cs,Unindent,The following statement contains a magic number: if (indent.Length >= 4)                  indent = indent.Substring(4);
Magic Number,Bind.Structures,FunctionBody,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Function.cs,Unindent,The following statement contains a magic number: if (indent.Length >= 4)                  indent = indent.Substring(4);
Magic Number,Bind.Structures,ParameterCollection,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Parameter.cs,BuildToStringCache,The following statement contains a magic number: if (Count > 0)              {                  foreach (Parameter p in this)                  {                      sb.Append(p.ToString(override_unsafe_setting));                      sb.Append("' ");                  }                  sb.Replace("' "' ")"' sb.Length - 2' 2);              }              else                  sb.Append(")");
Magic Number,Bind.Structures,ParameterCollection,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Parameter.cs,BuildToStringCache,The following statement contains a magic number: if (Count > 0)              {                  foreach (Parameter p in this)                  {                      sb.Append(p.ToString(override_unsafe_setting));                      sb.Append("' ");                  }                  sb.Replace("' "' ")"' sb.Length - 2' 2);              }              else                  sb.Append(")");
Magic Number,Bind.Structures,ParameterCollection,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Parameter.cs,BuildCallStringCache,The following statement contains a magic number: if (Count > 0)              {                  foreach (Parameter p in this)                  {                      if (p.Unchecked)                          sb.Append("unchecked((" + p.QualifiedType + ")");                        if (!p.Generic && p.CurrentType != "object")                      {                          if (p.CurrentType.ToLower().Contains("string"))                          {                              sb.Append(String.Format("({0}{1})"'                                  p.QualifiedType' (p.Array > 0) ? "[]" : ""));                          }                          else if (p.IndirectionLevel != 0)                          {                              if (((Settings.Compatibility & Settings.Legacy.TurnVoidPointersToIntPtr) != Settings.Legacy.None) &&                                  p.Pointer != 0 && p.CurrentType.Contains("void"))                                  sb.Append("(System.IntPtr)");                              else                              {                                  sb.Append("(");                                  sb.Append(p.QualifiedType);                                  for (int i = 0; i < p.IndirectionLevel; i++)                                      sb.Append("*");                                  sb.Append(")");                              }                          }                          else                          {                              sb.Append(String.Format("({0})"' p.QualifiedType));                          }                      }                        sb.Append(Utilities.Keywords.Contains(p.Name) ? "@" + p.Name : p.Name);                        if (p.Unchecked)                          sb.Append(")");                        sb.Append("' ");                  }                  sb.Replace("' "' ")"' sb.Length - 2' 2);              }              else              {                  sb.Append(")");              }
Magic Number,Bind.Structures,ParameterCollection,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Parameter.cs,BuildCallStringCache,The following statement contains a magic number: if (Count > 0)              {                  foreach (Parameter p in this)                  {                      if (p.Unchecked)                          sb.Append("unchecked((" + p.QualifiedType + ")");                        if (!p.Generic && p.CurrentType != "object")                      {                          if (p.CurrentType.ToLower().Contains("string"))                          {                              sb.Append(String.Format("({0}{1})"'                                  p.QualifiedType' (p.Array > 0) ? "[]" : ""));                          }                          else if (p.IndirectionLevel != 0)                          {                              if (((Settings.Compatibility & Settings.Legacy.TurnVoidPointersToIntPtr) != Settings.Legacy.None) &&                                  p.Pointer != 0 && p.CurrentType.Contains("void"))                                  sb.Append("(System.IntPtr)");                              else                              {                                  sb.Append("(");                                  sb.Append(p.QualifiedType);                                  for (int i = 0; i < p.IndirectionLevel; i++)                                      sb.Append("*");                                  sb.Append(")");                              }                          }                          else                          {                              sb.Append(String.Format("({0})"' p.QualifiedType));                          }                      }                        sb.Append(Utilities.Keywords.Contains(p.Name) ? "@" + p.Name : p.Name);                        if (p.Unchecked)                          sb.Append(")");                        sb.Append("' ");                  }                  sb.Replace("' "' ")"' sb.Length - 2' 2);              }              else              {                  sb.Append(")");              }
Missing Default,Bind.GL2,Generator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\GL2\Generator.cs,ReadDelegates,The following switch statement is missing a default case: switch (words[0])                          {                              case "return":  // Line denotes return value                                  d.ReturnType.CurrentType = words[1];                                  break;                                case "param":   // Line denotes parameter                                  Parameter p = new Parameter();                                    p.Name = Utilities.Keywords.Contains(words[1]) ? "@" + words[1] : words[1];                                  p.CurrentType = words[2];                                  p.Pointer += words[4].Contains("array") ? 1 : 0;                                  p.Pointer += words[4].Contains("reference") ? 1 : 0;                                  if (p.Pointer != 0 && words.Count > 5 && words[5].Contains("[1]"))                                      p.ElementCount = 1;                                  p.Flow = words[3] == "in" ? FlowDirection.In : FlowDirection.Out;                                    d.Parameters.Add(p);                                  break;                                // GetTexParameterIivEXT and GetTexParameterIuivEXT define two(!) versions (why?)                              case "version": // Line denotes function version (i.e. 1.0' 1.2' 1.5)                                  d.Version = words[1];                                  break;                                case "category":                                  d.Category = words[1];                                  break;                          }
Missing Default,Bind.Structures,Type,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Type.cs,GetCLSCompliantType,The following switch statement is missing a default case: switch (CurrentType)                  {                      case "UInt16":                      case "ushort":                          return "Int16";                      case "UInt32":                      case "uint":                          return "Int32";                      case "UInt64":                      case "ulong":                          return "Int64";                      case "SByte":                      case "sbyte":                          return "Byte";                      case "UIntPtr":                          return "IntPtr";                  }
Missing Default,Bind.Structures,Type,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Type.cs,Translate,The following switch statement is missing a default case: switch (CurrentType.ToLower())                      {                          case "string": QualifiedType = "String"; break;                      }
Missing Default,Bind.Structures,Function,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Function.cs,WrapReturnType,The following switch statement is missing a default case: switch (ReturnType.WrapperType)              {                  case WrapperTypes.StringReturnType:                      ReturnType.QualifiedType = "String";                      break;              }
Missing Default,Bind.Structures,EnumCollection,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Enum.cs,Translate,The following switch statement is missing a default case: switch (node.Name)                                  {                                      case "name": c.Name = (string)node.TypedValue; break;                                      case "value": c.Value = (string)node.TypedValue; break;                                  }
Missing Default,Bind.Structures,Delegate,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\Structures\Delegate.cs,TranslateParameters,The following switch statement is missing a default case: switch (node.Name)                              {                                  case "type": Parameters[i].CurrentType = (string)node.TypedValue; break;                                  case "name": Parameters[i].Name = (string)node.TypedValue; break;                                  case "flow":  Parameters[i].Flow = Parameter.GetFlowDirection((string)node.TypedValue); break;                              }
Missing Default,Bind.ES,ESGenerator,C:\repos\virtualglobebook_OpenGlobe\ThirdParty\OpenTK.1.0\Source\Bind\ES\ESGenerator.cs,ReadDelegates,The following switch statement is missing a default case: switch (param.Name)                              {                                  case "returns":                                      d.ReturnType.CurrentType = param.GetAttribute("type"' String.Empty);                                      break;                                    case "param":                                      Parameter p = new Parameter();                                      p.CurrentType = param.GetAttribute("type"' String.Empty);                                      p.Name = param.GetAttribute("name"' String.Empty);                                        string element_count = param.GetAttribute("elementcount"' String.Empty);                                      if (!String.IsNullOrEmpty(element_count))                                          p.ElementCount = Int32.Parse(element_count);                                        p.Flow = Parameter.GetFlowDirection(param.GetAttribute("flow"' String.Empty));                                        d.Parameters.Add(p);                                      break;                              }
