Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Log4Net.Async,ParallelForwardingAppender,C:\repos\cjbhaines_Log4Net.Async\src\Log4Net.Async\ParallelForwardingAppender.cs,,The length of the parameter _loggingCancelationTokenSource is 30.
Long Statement,Log4Net.Async,AsyncForwardingAppender,C:\repos\cjbhaines_Log4Net.Async\src\Log4Net.Async\AsyncForwardingAppender.cs,StopForwarding,The length of the statement  "                ForwardInternalError("Unable to flush the AsyncForwardingAppender buffer in the allotted time' forcing a shutdown"' null' ThisType); " is 132.
Long Statement,Log4Net.Async,AsyncForwardingAppender,C:\repos\cjbhaines_Log4Net.Async\src\Log4Net.Async\AsyncForwardingAppender.cs,ForwardBufferOverflowError,The length of the statement  "            ForwardInternalError(String.Format("Buffer overflow. {0} logging events have been lost in the last 30 seconds. [BufferSize: {1}]"' bufferOverflowCounter' bufferSize)' null' ThisType); " is 183.
Magic Number,Log4Net.Async,AsyncForwardingAppender,C:\repos\cjbhaines_Log4Net.Async\src\Log4Net.Async\AsyncForwardingAppender.cs,ForwardLoggingEventsFromBuffer,The following statement contains a magic number: while (!shutDownRequested)              {                  if (logBufferOverflow)                  {                      ForwardBufferOverflowError();                      logBufferOverflow = false;                  }                    while (!buffer.TryDequeue(out loggingEventContext))                  {                      Thread.Sleep(10);                      if (shutDownRequested)                      {                          break;                      }                  }                    if (loggingEventContext != null)                  {                      HttpContext = loggingEventContext.HttpContext;                      ForwardLoggingEvent(loggingEventContext.LoggingEvent' ThisType);                  }              }
Magic Number,Log4Net.Async,AsyncForwardingAppender,C:\repos\cjbhaines_Log4Net.Async\src\Log4Net.Async\AsyncForwardingAppender.cs,OnBufferOverflow,The following statement contains a magic number: if (lastLoggedBufferOverflow < DateTime.UtcNow.AddSeconds(-30))              {                  logBufferOverflow = true;              }
Magic Number,Log4Net.Async,ParallelForwardingAppender,C:\repos\cjbhaines_Log4Net.Async\src\Log4Net.Async\ParallelForwardingAppender.cs,CompleteSubscriberTask,The following statement contains a magic number: var sleepInterval = TimeSpan.FromMilliseconds(100);
