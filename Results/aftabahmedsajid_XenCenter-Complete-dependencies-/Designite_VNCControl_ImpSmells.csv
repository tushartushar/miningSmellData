Implementation smell,Namespace,Class,File,Method,Description
Complex Method,XenAdmin,VNCControl,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\VNCControl.cs,ConnectConsole,Cyclomatic complexity of the method is 12
Complex Method,XenAdmin,VNCControl,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\VNCControl.cs,PollPort,Cyclomatic complexity of the method is 10
Complex Method,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,OnMouseDown,Cyclomatic complexity of the method is 9
Complex Method,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,OnMouseUp,Cyclomatic complexity of the method is 9
Complex Method,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,Cyclomatic complexity of the method is 8
Complex Method,XenAdmin.ConsoleView,ConsoleKeyHandler,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\ConsoleKeyHandler.cs,AddKeyHandler,Cyclomatic complexity of the method is 75
Complex Method,XenAdmin.ConsoleView,ConsoleKeyHandler,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\ConsoleKeyHandler.cs,RemoveKeyHandler,Cyclomatic complexity of the method is 75
Long Parameter List,XenAdmin,IVMConsole,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\VNCControl.cs,Connect,The method has 8 parameters.
Long Parameter List,XenAdmin,VNCControl,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\VNCControl.cs,Connect,The method has 8 parameters.
Long Parameter List,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,ClientDrawImage,The method has 5 parameters.
Long Parameter List,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,ClientSetCursor,The method has 5 parameters.
Long Parameter List,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,ClientCopyRectangle,The method has 6 parameters.
Long Parameter List,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,ClientFillRectangle,The method has 5 parameters.
Long Parameter List,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,MyPaintBackground,The method has 5 parameters.
Long Parameter List,XenAdmin.ConsoleView,ConsoleKeyHandler,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\ConsoleKeyHandler.cs,handleExtras,The method has 6 parameters.
Long Statement,XenAdmin,Util,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenModel\Utils\Util.cs,TimeRangeString,The length of the statement  "	return t1 > 60 && t2 > 60 ? string.Format (Messages.TIME_RANGE_MINUTES' t1 / 60' t2 / 60) : string.Format (Messages.TIME_RANGE_SECONDS' t1' t2); " is 144.
Long Statement,XenAdmin,Program,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\Program.cs,FatalError,The length of the statement  "	string msg = String.Format (Messages.MESSAGEBOX_PROGRAM_UNEXPECTED' DateTime.Now.ToString ("yyyy-MM-dd HH:mm:ss")' GetLogFile_ ()); " is 131.
Long Statement,XenAdmin,VNCControl,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\VNCControl.cs,Connect,The length of the statement  "			//ThreadPool.QueueUserWorkItem(new WaitCallback(ConnectToConsole)' new KeyValuePair<VNCGraphicsClient' XenAPI.Console>(m_vncClient' console)); " is 142.
Long Statement,XenAdmin,VNCControl,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\VNCControl.cs,ConnectConsole,The length of the statement  "			this.ConnectionErrorHandler (this' new System.ApplicationException ("Error: The session ID has been incorrectly parsed.")); " is 123.
Long Statement,XenAdmin,VNCControl,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\VNCControl.cs,ConnectConsole,The length of the statement  "				this.ConnectionErrorHandler (this' new System.ApplicationException ("Error: The console reference has been incorrectly parsed.")); " is 130.
Long Statement,XenAdmin.Core,Clip,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\Core\Clip.cs,ForwardClipboardMessage,The length of the statement  "		log.ErrorFormat ("SendMessage({0}) failed with code {1}: {2}"' Win32.GetWindowsMessageName (e.Msg)' err' Win32.GetMessageString ((uint)err)); " is 141.
Long Statement,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,OnPaint,The length of the statement  "		//Math.Max(displayBorder ? BORDER_PADDING : 0'(int)Math.Ceiling((this.Size.Width - (this.DesktopSize.Width * this.scale)) / 2)); " is 128.
Long Statement,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,OnMouseWheel,The length of the statement  "			this.vncStream.pointerWheelEvent ((int)((e.X - dx) / this.scale)' (int)((e.Y - dy) / this.scale)' e.Delta * -SystemInformation.MouseWheelScrollLines / 120); " is 156.
Long Statement,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,HandleAltGrKeysym,The length of the statement  "			bool isAltGrPressed = pressedKeys.Where (extKey => ConsoleKeyHandler.GetSimpleKey (extKey) == Keys.ControlKey || ConsoleKeyHandler.GetSimpleKey (extKey) == Keys.Menu).ToList ().Count == 2; " is 188.
Long Statement,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,Keysym,The length of the statement  "	if (KeyHandler.handleExtras<Keys> (pressed' pressedKeys' KeyHandler.ExtraKeys' extendedKey' KeyHandler.ModifierKeys' ref modifierKeyPressedAlone)) { " is 148.
Long Statement,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,keyScan,The length of the statement  "	if (KeyHandler.handleExtras<int> (pressed' pressedScans' KeyHandler.ExtraScans' scanCode' KeyHandler.ModifierScans' ref modifierKeyPressedAlone)) { " is 147.
Long Statement,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The length of the statement  "		float xScale = this.Size.Width / (float)(displayBorder ? this.DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : this.DesktopSize.Width); " is 140.
Long Statement,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The length of the statement  "		float yScale = this.Size.Height / (float)(displayBorder ? this.DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : this.DesktopSize.Height); " is 143.
Long Statement,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The length of the statement  "			this.AutoScrollMinSize = new Size (displayBorder ? DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : DesktopSize.Width' displayBorder ? DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : DesktopSize.Height); " is 215.
Long Statement,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The length of the statement  "		if (this.Size.Height >= (displayBorder ? this.DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : DesktopSize.Height)) { " is 123.
Long Statement,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The length of the statement  "		if (this.Size.Width >= (displayBorder ? this.DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : DesktopSize.Width)) { " is 120.
Complex Conditional,XenAdmin,VNCControl,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\VNCControl.cs,ConnectConsole,The conditional expression  "(y == -1 && z == -1) || (y == count && z == count)"  is complex.
Complex Conditional,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,OnMouseMove,The conditional expression  "e.X > left && e.X < right && e.Y > top && e.Y < bottom"  is complex.
Complex Conditional,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,HandleAltGrKeysym,The conditional expression  "isAltGrPressed && (KeyMap.IsMapped (key) && altGrReleaseSent || !KeyMap.IsMapped (key) && !altGrReleaseSent)"  is complex.
Empty Catch Block,XenAdmin,VNCControl,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\VNCControl.cs,PollPort,The method has an empty catch block.
Empty Catch Block,XenAdmin,VNCControl,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\VNCControl.cs,PollPort,The method has an empty catch block.
Empty Catch Block,XenAdmin.Core,Clip,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\Core\Clip.cs,GetClipboard,The method has an empty catch block.
Empty Catch Block,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,ClipboardChanged,The method has an empty catch block.
Empty Catch Block,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,ClientDrawImage,The method has an empty catch block.
Empty Catch Block,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,ClientFrameBufferUpdate,The method has an empty catch block.
Empty Catch Block,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,DoIfConnected,The method has an empty catch block.
Magic Number,XenAdmin,Util,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenModel\Utils\Util.cs,SuperiorSizeString,The following statement contains a magic number: if (bytes >= 10 * BINARY_GIGA) {  	return string.Format (Messages.VAL_GB' Math.Round (bytes / BINARY_GIGA' dp));  }  else if (bytes >= 10 * BINARY_MEGA) {  	return string.Format (Messages.VAL_MB' Math.Round (bytes / BINARY_MEGA' dp));  }  else if (bytes >= 10 * BINARY_KILO) {  	return string.Format (Messages.VAL_KB' Math.Round (bytes / BINARY_KILO' dp));  }  else {  	return string.Format (Messages.VAL_B' bytes);  }  
Magic Number,XenAdmin,Util,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenModel\Utils\Util.cs,SuperiorSizeString,The following statement contains a magic number: if (bytes >= 10 * BINARY_GIGA) {  	return string.Format (Messages.VAL_GB' Math.Round (bytes / BINARY_GIGA' dp));  }  else if (bytes >= 10 * BINARY_MEGA) {  	return string.Format (Messages.VAL_MB' Math.Round (bytes / BINARY_MEGA' dp));  }  else if (bytes >= 10 * BINARY_KILO) {  	return string.Format (Messages.VAL_KB' Math.Round (bytes / BINARY_KILO' dp));  }  else {  	return string.Format (Messages.VAL_B' bytes);  }  
Magic Number,XenAdmin,Util,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenModel\Utils\Util.cs,SuperiorSizeString,The following statement contains a magic number: if (bytes >= 10 * BINARY_GIGA) {  	return string.Format (Messages.VAL_GB' Math.Round (bytes / BINARY_GIGA' dp));  }  else if (bytes >= 10 * BINARY_MEGA) {  	return string.Format (Messages.VAL_MB' Math.Round (bytes / BINARY_MEGA' dp));  }  else if (bytes >= 10 * BINARY_KILO) {  	return string.Format (Messages.VAL_KB' Math.Round (bytes / BINARY_KILO' dp));  }  else {  	return string.Format (Messages.VAL_B' bytes);  }  
Magic Number,XenAdmin,Util,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenModel\Utils\Util.cs,SuperiorSizeString,The following statement contains a magic number: if (bytes >= 10 * BINARY_MEGA) {  	return string.Format (Messages.VAL_MB' Math.Round (bytes / BINARY_MEGA' dp));  }  else if (bytes >= 10 * BINARY_KILO) {  	return string.Format (Messages.VAL_KB' Math.Round (bytes / BINARY_KILO' dp));  }  else {  	return string.Format (Messages.VAL_B' bytes);  }  
Magic Number,XenAdmin,Util,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenModel\Utils\Util.cs,SuperiorSizeString,The following statement contains a magic number: if (bytes >= 10 * BINARY_MEGA) {  	return string.Format (Messages.VAL_MB' Math.Round (bytes / BINARY_MEGA' dp));  }  else if (bytes >= 10 * BINARY_KILO) {  	return string.Format (Messages.VAL_KB' Math.Round (bytes / BINARY_KILO' dp));  }  else {  	return string.Format (Messages.VAL_B' bytes);  }  
Magic Number,XenAdmin,Util,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenModel\Utils\Util.cs,SuperiorSizeString,The following statement contains a magic number: if (bytes >= 10 * BINARY_KILO) {  	return string.Format (Messages.VAL_KB' Math.Round (bytes / BINARY_KILO' dp));  }  else {  	return string.Format (Messages.VAL_B' bytes);  }  
Magic Number,XenAdmin,Util,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenModel\Utils\Util.cs,TimeString,The following statement contains a magic number: if (t >= 120)  	return string.Format (Messages.TIME_MINUTES' t / 60);  
Magic Number,XenAdmin,Util,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenModel\Utils\Util.cs,TimeString,The following statement contains a magic number: if (t >= 120)  	return string.Format (Messages.TIME_MINUTES' t / 60);  
Magic Number,XenAdmin,Util,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenModel\Utils\Util.cs,TimeString,The following statement contains a magic number: return string.Format (Messages.TIME_MINUTES' t / 60);  
Magic Number,XenAdmin,Util,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenModel\Utils\Util.cs,TimeRangeString,The following statement contains a magic number: return t1 > 60 && t2 > 60 ? string.Format (Messages.TIME_RANGE_MINUTES' t1 / 60' t2 / 60) : string.Format (Messages.TIME_RANGE_SECONDS' t1' t2);  
Magic Number,XenAdmin,Util,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenModel\Utils\Util.cs,TimeRangeString,The following statement contains a magic number: return t1 > 60 && t2 > 60 ? string.Format (Messages.TIME_RANGE_MINUTES' t1 / 60' t2 / 60) : string.Format (Messages.TIME_RANGE_SECONDS' t1' t2);  
Magic Number,XenAdmin,Util,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenModel\Utils\Util.cs,TimeRangeString,The following statement contains a magic number: return t1 > 60 && t2 > 60 ? string.Format (Messages.TIME_RANGE_MINUTES' t1 / 60' t2 / 60) : string.Format (Messages.TIME_RANGE_SECONDS' t1' t2);  
Magic Number,XenAdmin,Util,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenModel\Utils\Util.cs,TimeRangeString,The following statement contains a magic number: return t1 > 60 && t2 > 60 ? string.Format (Messages.TIME_RANGE_MINUTES' t1 / 60' t2 / 60) : string.Format (Messages.TIME_RANGE_SECONDS' t1' t2);  
Magic Number,XenAdmin,Util,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenModel\Utils\Util.cs,IsValidPort,The following statement contains a magic number: return 0 < port && port <= 65535;  
Magic Number,XenAdmin,VNCControl,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\VNCControl.cs,initSubControl,The following statement contains a magic number: if (width == 0 || height == 0)  	newSize = new Size (1024' 768);  else  	newSize = new Size (width' height);  
Magic Number,XenAdmin,VNCControl,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\VNCControl.cs,initSubControl,The following statement contains a magic number: if (width == 0 || height == 0)  	newSize = new Size (1024' 768);  else  	newSize = new Size (width' height);  
Magic Number,XenAdmin,VNCControl,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\VNCControl.cs,initSubControl,The following statement contains a magic number: newSize = new Size (1024' 768);  
Magic Number,XenAdmin,VNCControl,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\VNCControl.cs,initSubControl,The following statement contains a magic number: newSize = new Size (1024' 768);  
Magic Number,XenAdmin.Core,Clip,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\Core\Clip.cs,ProcessWMDrawClipboard,The following statement contains a magic number: if (!processingDrawClipboard) {  	processingDrawClipboard = true;  	try {  		// Windows XP Remote Desktop server is broken wrt the clipboard.  		// If we receive 10 clipboard events in 500 msec then we move   		// ourselves back to the front of the chain.  		// Without this' we receive endless WM_DRAWCLIPBOARD events  		// after disconnecting and reconnecting the RDP session.  		long now = DateTime.Now.Ticks;  		if (now - lastDrawClipboard > 5000000) {  			drawClipboardCount = 0;  			lastDrawClipboard = now;  		}  		else {  			drawClipboardCount++;  			if (drawClipboardCount > 10) {  				drawClipboardCount = 0;  				lastDrawClipboard = now;  				RegisterClipboardViewer ();  			}  		}  		StartGetClipboard ();  		ForwardClipboardMessage (e);  	}  	finally {  		processingDrawClipboard = false;  	}  }  
Magic Number,XenAdmin.Core,Clip,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\Core\Clip.cs,ProcessWMDrawClipboard,The following statement contains a magic number: if (!processingDrawClipboard) {  	processingDrawClipboard = true;  	try {  		// Windows XP Remote Desktop server is broken wrt the clipboard.  		// If we receive 10 clipboard events in 500 msec then we move   		// ourselves back to the front of the chain.  		// Without this' we receive endless WM_DRAWCLIPBOARD events  		// after disconnecting and reconnecting the RDP session.  		long now = DateTime.Now.Ticks;  		if (now - lastDrawClipboard > 5000000) {  			drawClipboardCount = 0;  			lastDrawClipboard = now;  		}  		else {  			drawClipboardCount++;  			if (drawClipboardCount > 10) {  				drawClipboardCount = 0;  				lastDrawClipboard = now;  				RegisterClipboardViewer ();  			}  		}  		StartGetClipboard ();  		ForwardClipboardMessage (e);  	}  	finally {  		processingDrawClipboard = false;  	}  }  
Magic Number,XenAdmin.Core,Clip,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\Core\Clip.cs,ProcessWMDrawClipboard,The following statement contains a magic number: try {  	// Windows XP Remote Desktop server is broken wrt the clipboard.  	// If we receive 10 clipboard events in 500 msec then we move   	// ourselves back to the front of the chain.  	// Without this' we receive endless WM_DRAWCLIPBOARD events  	// after disconnecting and reconnecting the RDP session.  	long now = DateTime.Now.Ticks;  	if (now - lastDrawClipboard > 5000000) {  		drawClipboardCount = 0;  		lastDrawClipboard = now;  	}  	else {  		drawClipboardCount++;  		if (drawClipboardCount > 10) {  			drawClipboardCount = 0;  			lastDrawClipboard = now;  			RegisterClipboardViewer ();  		}  	}  	StartGetClipboard ();  	ForwardClipboardMessage (e);  }  finally {  	processingDrawClipboard = false;  }  
Magic Number,XenAdmin.Core,Clip,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\Core\Clip.cs,ProcessWMDrawClipboard,The following statement contains a magic number: try {  	// Windows XP Remote Desktop server is broken wrt the clipboard.  	// If we receive 10 clipboard events in 500 msec then we move   	// ourselves back to the front of the chain.  	// Without this' we receive endless WM_DRAWCLIPBOARD events  	// after disconnecting and reconnecting the RDP session.  	long now = DateTime.Now.Ticks;  	if (now - lastDrawClipboard > 5000000) {  		drawClipboardCount = 0;  		lastDrawClipboard = now;  	}  	else {  		drawClipboardCount++;  		if (drawClipboardCount > 10) {  			drawClipboardCount = 0;  			lastDrawClipboard = now;  			RegisterClipboardViewer ();  		}  	}  	StartGetClipboard ();  	ForwardClipboardMessage (e);  }  finally {  	processingDrawClipboard = false;  }  
Magic Number,XenAdmin.Core,Clip,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\Core\Clip.cs,ProcessWMDrawClipboard,The following statement contains a magic number: if (now - lastDrawClipboard > 5000000) {  	drawClipboardCount = 0;  	lastDrawClipboard = now;  }  else {  	drawClipboardCount++;  	if (drawClipboardCount > 10) {  		drawClipboardCount = 0;  		lastDrawClipboard = now;  		RegisterClipboardViewer ();  	}  }  
Magic Number,XenAdmin.Core,Clip,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\Core\Clip.cs,ProcessWMDrawClipboard,The following statement contains a magic number: if (now - lastDrawClipboard > 5000000) {  	drawClipboardCount = 0;  	lastDrawClipboard = now;  }  else {  	drawClipboardCount++;  	if (drawClipboardCount > 10) {  		drawClipboardCount = 0;  		lastDrawClipboard = now;  		RegisterClipboardViewer ();  	}  }  
Magic Number,XenAdmin.Core,Clip,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\Core\Clip.cs,ProcessWMDrawClipboard,The following statement contains a magic number: if (drawClipboardCount > 10) {  	drawClipboardCount = 0;  	lastDrawClipboard = now;  	RegisterClipboardViewer ();  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,VNCGraphicsClient,The following statement contains a magic number: backBuffer = new Bitmap (640' 480' frontGraphics);  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,VNCGraphicsClient,The following statement contains a magic number: backBuffer = new Bitmap (640' 480' frontGraphics);  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,VNCGraphicsClient,The following statement contains a magic number: using (SolidBrush backBrush = new SolidBrush (BackColor)) {  	backGraphics.FillRectangle (backBrush' 0' 0' 640' 480);  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,VNCGraphicsClient,The following statement contains a magic number: using (SolidBrush backBrush = new SolidBrush (BackColor)) {  	backGraphics.FillRectangle (backBrush' 0' 0' 640' 480);  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,VNCGraphicsClient,The following statement contains a magic number: backGraphics.FillRectangle (backBrush' 0' 0' 640' 480);  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,VNCGraphicsClient,The following statement contains a magic number: backGraphics.FillRectangle (backBrush' 0' 0' 640' 480);  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,VNCGraphicsClient,The following statement contains a magic number: DesktopSize = new Size (640' 480);  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,VNCGraphicsClient,The following statement contains a magic number: DesktopSize = new Size (640' 480);  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,mouseEvent,The following statement contains a magic number: DoIfConnected (delegate () {  	if (talkingToVNCTerm && last_state == 4 && state == 0) {  		ShowPopupMenu (x' y);  	}  	else if (this.scaling) {  		this.vncStream.pointerEvent (state' (int)((x - dx) / this.scale)' (int)((y - dy) / this.scale));  	}  	else {  		this.vncStream.pointerEvent (state' x - (int)dx' y - (int)dy);  	}  	last_state = state;  });  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,mouseEvent,The following statement contains a magic number: if (talkingToVNCTerm && last_state == 4 && state == 0) {  	ShowPopupMenu (x' y);  }  else if (this.scaling) {  	this.vncStream.pointerEvent (state' (int)((x - dx) / this.scale)' (int)((y - dy) / this.scale));  }  else {  	this.vncStream.pointerEvent (state' x - (int)dx' y - (int)dy);  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,pasteItem_Click,The following statement contains a magic number: if (Clipboard.ContainsText ()) {  	vncStream.clientCutText (Clipboard.GetText ().Replace ("\r\n"' "\n"));  	mouseEvent (2' 0' 0);  	mouseEvent (0' 0' 0);  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,pasteItem_Click,The following statement contains a magic number: mouseEvent (2' 0' 0);  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,OnMouseDown,The following statement contains a magic number: switch (e.Button) {  case MouseButtons.Left:  	currentMouseState |= 1;  	break;  case MouseButtons.Right:  	currentMouseState |= 4;  	break;  case MouseButtons.Middle:  	currentMouseState |= 2;  	break;  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,OnMouseDown,The following statement contains a magic number: switch (e.Button) {  case MouseButtons.Left:  	currentMouseState |= 1;  	break;  case MouseButtons.Right:  	currentMouseState |= 4;  	break;  case MouseButtons.Middle:  	currentMouseState |= 2;  	break;  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,OnMouseDown,The following statement contains a magic number: currentMouseState |= 4;  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,OnMouseDown,The following statement contains a magic number: currentMouseState |= 2;  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,OnMouseUp,The following statement contains a magic number: switch (e.Button) {  case MouseButtons.Left:  	currentMouseState &= ~1;  	break;  case MouseButtons.Right:  	currentMouseState &= ~4;  	break;  case MouseButtons.Middle:  	currentMouseState &= ~2;  	break;  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,OnMouseUp,The following statement contains a magic number: switch (e.Button) {  case MouseButtons.Left:  	currentMouseState &= ~1;  	break;  case MouseButtons.Right:  	currentMouseState &= ~4;  	break;  case MouseButtons.Middle:  	currentMouseState &= ~2;  	break;  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,OnMouseUp,The following statement contains a magic number: currentMouseState &= ~4;  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,OnMouseUp,The following statement contains a magic number: currentMouseState &= ~2;  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,OnMouseWheel,The following statement contains a magic number: if (Focused) {  	DoIfConnected (delegate () {  		this.vncStream.pointerWheelEvent ((int)((e.X - dx) / this.scale)' (int)((e.Y - dy) / this.scale)' e.Delta * -SystemInformation.MouseWheelScrollLines / 120);  	});  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,OnMouseWheel,The following statement contains a magic number: DoIfConnected (delegate () {  	this.vncStream.pointerWheelEvent ((int)((e.X - dx) / this.scale)' (int)((e.Y - dy) / this.scale)' e.Delta * -SystemInformation.MouseWheelScrollLines / 120);  });  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,OnMouseWheel,The following statement contains a magic number: this.vncStream.pointerWheelEvent ((int)((e.X - dx) / this.scale)' (int)((e.Y - dy) / this.scale)' e.Delta * -SystemInformation.MouseWheelScrollLines / 120);  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,HandleAltGrKeysym,The following statement contains a magic number: if (pressed) {  	if (pressedKeys.Count > 2 && key != Keys.ControlKey && key != Keys.Menu) {  		bool isAltGrPressed = pressedKeys.Where (extKey => ConsoleKeyHandler.GetSimpleKey (extKey) == Keys.ControlKey || ConsoleKeyHandler.GetSimpleKey (extKey) == Keys.Menu).ToList ().Count == 2;  		if (isAltGrPressed && (KeyMap.IsMapped (key) && altGrReleaseSent || !KeyMap.IsMapped (key) && !altGrReleaseSent)) {  			SendAltGrKeysym (altGrReleaseSent);  			altGrReleaseSent = !altGrReleaseSent;  		}  	}  }  else {  	if (key == Keys.ControlKey || key == Keys.Menu)  		altGrReleaseSent = false;  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,HandleAltGrKeysym,The following statement contains a magic number: if (pressed) {  	if (pressedKeys.Count > 2 && key != Keys.ControlKey && key != Keys.Menu) {  		bool isAltGrPressed = pressedKeys.Where (extKey => ConsoleKeyHandler.GetSimpleKey (extKey) == Keys.ControlKey || ConsoleKeyHandler.GetSimpleKey (extKey) == Keys.Menu).ToList ().Count == 2;  		if (isAltGrPressed && (KeyMap.IsMapped (key) && altGrReleaseSent || !KeyMap.IsMapped (key) && !altGrReleaseSent)) {  			SendAltGrKeysym (altGrReleaseSent);  			altGrReleaseSent = !altGrReleaseSent;  		}  	}  }  else {  	if (key == Keys.ControlKey || key == Keys.Menu)  		altGrReleaseSent = false;  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,HandleAltGrKeysym,The following statement contains a magic number: if (pressedKeys.Count > 2 && key != Keys.ControlKey && key != Keys.Menu) {  	bool isAltGrPressed = pressedKeys.Where (extKey => ConsoleKeyHandler.GetSimpleKey (extKey) == Keys.ControlKey || ConsoleKeyHandler.GetSimpleKey (extKey) == Keys.Menu).ToList ().Count == 2;  	if (isAltGrPressed && (KeyMap.IsMapped (key) && altGrReleaseSent || !KeyMap.IsMapped (key) && !altGrReleaseSent)) {  		SendAltGrKeysym (altGrReleaseSent);  		altGrReleaseSent = !altGrReleaseSent;  	}  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,HandleAltGrKeysym,The following statement contains a magic number: if (pressedKeys.Count > 2 && key != Keys.ControlKey && key != Keys.Menu) {  	bool isAltGrPressed = pressedKeys.Where (extKey => ConsoleKeyHandler.GetSimpleKey (extKey) == Keys.ControlKey || ConsoleKeyHandler.GetSimpleKey (extKey) == Keys.Menu).ToList ().Count == 2;  	if (isAltGrPressed && (KeyMap.IsMapped (key) && altGrReleaseSent || !KeyMap.IsMapped (key) && !altGrReleaseSent)) {  		SendAltGrKeysym (altGrReleaseSent);  		altGrReleaseSent = !altGrReleaseSent;  	}  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,Snapshot,The following statement contains a magic number: while (vncStream == null)  	Thread.Sleep (100);  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,Snapshot,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,Snapshot,The following statement contains a magic number: lock (vncStream.updateMonitor) {  	Monitor.Wait (vncStream.updateMonitor' 1000);  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,Snapshot,The following statement contains a magic number: Monitor.Wait (vncStream.updateMonitor' 1000);  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The following statement contains a magic number: if (this.scaling) {  	this.AutoScroll = false;  	float xScale = this.Size.Width / (float)(displayBorder ? this.DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : this.DesktopSize.Width);  	float yScale = this.Size.Height / (float)(displayBorder ? this.DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : this.DesktopSize.Height);  	scale = (xScale > yScale) ? yScale : xScale;  	scale = (scale > 0.01) ? scale : (float)0.01;  	Bump = (int)Math.Ceiling (1 / scale);  	// Now do the offset  	dx = (this.Size.Width - (this.DesktopSize.Width * scale)) / 2;  	dy = (this.Size.Height - (this.DesktopSize.Height * scale)) / 2;  	Matrix transform = new Matrix ();  	transform.Translate (dx' dy);  	transform.Scale (scale' scale);  	this.frontGraphics.Transform = transform;  }  else {  	this.scale = 1;  	this.Bump = 0;  	if (this.connected) {  		this.AutoScrollMinSize = new Size (displayBorder ? DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : DesktopSize.Width' displayBorder ? DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : DesktopSize.Height);  	}  	else {  		this.AutoScrollMinSize = new Size (0' 0);  	}  	// The change of AutoScrollMinSize can trigger a resize event' which in turn can trigger  	// scaling to be turned off.  If this happens' restart this calculation altogether.  	if (scaling) {  		SetupScaling ();  		return;  	}  	this.AutoScroll = true;  	if (this.Size.Height >= (displayBorder ? this.DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : DesktopSize.Height)) {  		this.dy = (this.Size.Height - this.DesktopSize.Height) / 2;  	}  	else {  		if (displayBorder) {  			this.dy = BORDER_PADDING;  			this.AutoScrollPosition = new Point (BORDER_PADDING' (int)this.oldDy);  		}  		else {  			this.dy = 0;  			this.AutoScrollPosition = new Point (0' (int)this.oldDy);  		}  	}  	if (this.Size.Width >= (displayBorder ? this.DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : DesktopSize.Width)) {  		this.dx = (this.Size.Width - this.DesktopSize.Width) / 2;  	}  	else {  		if (displayBorder) {  			this.dx = BORDER_PADDING;  			this.AutoScrollPosition = new Point ((int)this.oldDx' BORDER_PADDING);  		}  		else {  			this.dx = 0;  			this.AutoScrollPosition = new Point ((int)this.oldDx' 0);  		}  	}  	Matrix transform = new Matrix ();  	transform.Translate (dx' dy);  	this.frontGraphics.Transform = transform;  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The following statement contains a magic number: if (this.scaling) {  	this.AutoScroll = false;  	float xScale = this.Size.Width / (float)(displayBorder ? this.DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : this.DesktopSize.Width);  	float yScale = this.Size.Height / (float)(displayBorder ? this.DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : this.DesktopSize.Height);  	scale = (xScale > yScale) ? yScale : xScale;  	scale = (scale > 0.01) ? scale : (float)0.01;  	Bump = (int)Math.Ceiling (1 / scale);  	// Now do the offset  	dx = (this.Size.Width - (this.DesktopSize.Width * scale)) / 2;  	dy = (this.Size.Height - (this.DesktopSize.Height * scale)) / 2;  	Matrix transform = new Matrix ();  	transform.Translate (dx' dy);  	transform.Scale (scale' scale);  	this.frontGraphics.Transform = transform;  }  else {  	this.scale = 1;  	this.Bump = 0;  	if (this.connected) {  		this.AutoScrollMinSize = new Size (displayBorder ? DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : DesktopSize.Width' displayBorder ? DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : DesktopSize.Height);  	}  	else {  		this.AutoScrollMinSize = new Size (0' 0);  	}  	// The change of AutoScrollMinSize can trigger a resize event' which in turn can trigger  	// scaling to be turned off.  If this happens' restart this calculation altogether.  	if (scaling) {  		SetupScaling ();  		return;  	}  	this.AutoScroll = true;  	if (this.Size.Height >= (displayBorder ? this.DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : DesktopSize.Height)) {  		this.dy = (this.Size.Height - this.DesktopSize.Height) / 2;  	}  	else {  		if (displayBorder) {  			this.dy = BORDER_PADDING;  			this.AutoScrollPosition = new Point (BORDER_PADDING' (int)this.oldDy);  		}  		else {  			this.dy = 0;  			this.AutoScrollPosition = new Point (0' (int)this.oldDy);  		}  	}  	if (this.Size.Width >= (displayBorder ? this.DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : DesktopSize.Width)) {  		this.dx = (this.Size.Width - this.DesktopSize.Width) / 2;  	}  	else {  		if (displayBorder) {  			this.dx = BORDER_PADDING;  			this.AutoScrollPosition = new Point ((int)this.oldDx' BORDER_PADDING);  		}  		else {  			this.dx = 0;  			this.AutoScrollPosition = new Point ((int)this.oldDx' 0);  		}  	}  	Matrix transform = new Matrix ();  	transform.Translate (dx' dy);  	this.frontGraphics.Transform = transform;  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The following statement contains a magic number: if (this.scaling) {  	this.AutoScroll = false;  	float xScale = this.Size.Width / (float)(displayBorder ? this.DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : this.DesktopSize.Width);  	float yScale = this.Size.Height / (float)(displayBorder ? this.DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : this.DesktopSize.Height);  	scale = (xScale > yScale) ? yScale : xScale;  	scale = (scale > 0.01) ? scale : (float)0.01;  	Bump = (int)Math.Ceiling (1 / scale);  	// Now do the offset  	dx = (this.Size.Width - (this.DesktopSize.Width * scale)) / 2;  	dy = (this.Size.Height - (this.DesktopSize.Height * scale)) / 2;  	Matrix transform = new Matrix ();  	transform.Translate (dx' dy);  	transform.Scale (scale' scale);  	this.frontGraphics.Transform = transform;  }  else {  	this.scale = 1;  	this.Bump = 0;  	if (this.connected) {  		this.AutoScrollMinSize = new Size (displayBorder ? DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : DesktopSize.Width' displayBorder ? DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : DesktopSize.Height);  	}  	else {  		this.AutoScrollMinSize = new Size (0' 0);  	}  	// The change of AutoScrollMinSize can trigger a resize event' which in turn can trigger  	// scaling to be turned off.  If this happens' restart this calculation altogether.  	if (scaling) {  		SetupScaling ();  		return;  	}  	this.AutoScroll = true;  	if (this.Size.Height >= (displayBorder ? this.DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : DesktopSize.Height)) {  		this.dy = (this.Size.Height - this.DesktopSize.Height) / 2;  	}  	else {  		if (displayBorder) {  			this.dy = BORDER_PADDING;  			this.AutoScrollPosition = new Point (BORDER_PADDING' (int)this.oldDy);  		}  		else {  			this.dy = 0;  			this.AutoScrollPosition = new Point (0' (int)this.oldDy);  		}  	}  	if (this.Size.Width >= (displayBorder ? this.DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : DesktopSize.Width)) {  		this.dx = (this.Size.Width - this.DesktopSize.Width) / 2;  	}  	else {  		if (displayBorder) {  			this.dx = BORDER_PADDING;  			this.AutoScrollPosition = new Point ((int)this.oldDx' BORDER_PADDING);  		}  		else {  			this.dx = 0;  			this.AutoScrollPosition = new Point ((int)this.oldDx' 0);  		}  	}  	Matrix transform = new Matrix ();  	transform.Translate (dx' dy);  	this.frontGraphics.Transform = transform;  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The following statement contains a magic number: if (this.scaling) {  	this.AutoScroll = false;  	float xScale = this.Size.Width / (float)(displayBorder ? this.DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : this.DesktopSize.Width);  	float yScale = this.Size.Height / (float)(displayBorder ? this.DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : this.DesktopSize.Height);  	scale = (xScale > yScale) ? yScale : xScale;  	scale = (scale > 0.01) ? scale : (float)0.01;  	Bump = (int)Math.Ceiling (1 / scale);  	// Now do the offset  	dx = (this.Size.Width - (this.DesktopSize.Width * scale)) / 2;  	dy = (this.Size.Height - (this.DesktopSize.Height * scale)) / 2;  	Matrix transform = new Matrix ();  	transform.Translate (dx' dy);  	transform.Scale (scale' scale);  	this.frontGraphics.Transform = transform;  }  else {  	this.scale = 1;  	this.Bump = 0;  	if (this.connected) {  		this.AutoScrollMinSize = new Size (displayBorder ? DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : DesktopSize.Width' displayBorder ? DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : DesktopSize.Height);  	}  	else {  		this.AutoScrollMinSize = new Size (0' 0);  	}  	// The change of AutoScrollMinSize can trigger a resize event' which in turn can trigger  	// scaling to be turned off.  If this happens' restart this calculation altogether.  	if (scaling) {  		SetupScaling ();  		return;  	}  	this.AutoScroll = true;  	if (this.Size.Height >= (displayBorder ? this.DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : DesktopSize.Height)) {  		this.dy = (this.Size.Height - this.DesktopSize.Height) / 2;  	}  	else {  		if (displayBorder) {  			this.dy = BORDER_PADDING;  			this.AutoScrollPosition = new Point (BORDER_PADDING' (int)this.oldDy);  		}  		else {  			this.dy = 0;  			this.AutoScrollPosition = new Point (0' (int)this.oldDy);  		}  	}  	if (this.Size.Width >= (displayBorder ? this.DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : DesktopSize.Width)) {  		this.dx = (this.Size.Width - this.DesktopSize.Width) / 2;  	}  	else {  		if (displayBorder) {  			this.dx = BORDER_PADDING;  			this.AutoScrollPosition = new Point ((int)this.oldDx' BORDER_PADDING);  		}  		else {  			this.dx = 0;  			this.AutoScrollPosition = new Point ((int)this.oldDx' 0);  		}  	}  	Matrix transform = new Matrix ();  	transform.Translate (dx' dy);  	this.frontGraphics.Transform = transform;  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The following statement contains a magic number: if (this.scaling) {  	this.AutoScroll = false;  	float xScale = this.Size.Width / (float)(displayBorder ? this.DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : this.DesktopSize.Width);  	float yScale = this.Size.Height / (float)(displayBorder ? this.DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : this.DesktopSize.Height);  	scale = (xScale > yScale) ? yScale : xScale;  	scale = (scale > 0.01) ? scale : (float)0.01;  	Bump = (int)Math.Ceiling (1 / scale);  	// Now do the offset  	dx = (this.Size.Width - (this.DesktopSize.Width * scale)) / 2;  	dy = (this.Size.Height - (this.DesktopSize.Height * scale)) / 2;  	Matrix transform = new Matrix ();  	transform.Translate (dx' dy);  	transform.Scale (scale' scale);  	this.frontGraphics.Transform = transform;  }  else {  	this.scale = 1;  	this.Bump = 0;  	if (this.connected) {  		this.AutoScrollMinSize = new Size (displayBorder ? DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : DesktopSize.Width' displayBorder ? DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : DesktopSize.Height);  	}  	else {  		this.AutoScrollMinSize = new Size (0' 0);  	}  	// The change of AutoScrollMinSize can trigger a resize event' which in turn can trigger  	// scaling to be turned off.  If this happens' restart this calculation altogether.  	if (scaling) {  		SetupScaling ();  		return;  	}  	this.AutoScroll = true;  	if (this.Size.Height >= (displayBorder ? this.DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : DesktopSize.Height)) {  		this.dy = (this.Size.Height - this.DesktopSize.Height) / 2;  	}  	else {  		if (displayBorder) {  			this.dy = BORDER_PADDING;  			this.AutoScrollPosition = new Point (BORDER_PADDING' (int)this.oldDy);  		}  		else {  			this.dy = 0;  			this.AutoScrollPosition = new Point (0' (int)this.oldDy);  		}  	}  	if (this.Size.Width >= (displayBorder ? this.DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : DesktopSize.Width)) {  		this.dx = (this.Size.Width - this.DesktopSize.Width) / 2;  	}  	else {  		if (displayBorder) {  			this.dx = BORDER_PADDING;  			this.AutoScrollPosition = new Point ((int)this.oldDx' BORDER_PADDING);  		}  		else {  			this.dx = 0;  			this.AutoScrollPosition = new Point ((int)this.oldDx' 0);  		}  	}  	Matrix transform = new Matrix ();  	transform.Translate (dx' dy);  	this.frontGraphics.Transform = transform;  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The following statement contains a magic number: if (this.scaling) {  	this.AutoScroll = false;  	float xScale = this.Size.Width / (float)(displayBorder ? this.DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : this.DesktopSize.Width);  	float yScale = this.Size.Height / (float)(displayBorder ? this.DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : this.DesktopSize.Height);  	scale = (xScale > yScale) ? yScale : xScale;  	scale = (scale > 0.01) ? scale : (float)0.01;  	Bump = (int)Math.Ceiling (1 / scale);  	// Now do the offset  	dx = (this.Size.Width - (this.DesktopSize.Width * scale)) / 2;  	dy = (this.Size.Height - (this.DesktopSize.Height * scale)) / 2;  	Matrix transform = new Matrix ();  	transform.Translate (dx' dy);  	transform.Scale (scale' scale);  	this.frontGraphics.Transform = transform;  }  else {  	this.scale = 1;  	this.Bump = 0;  	if (this.connected) {  		this.AutoScrollMinSize = new Size (displayBorder ? DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : DesktopSize.Width' displayBorder ? DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : DesktopSize.Height);  	}  	else {  		this.AutoScrollMinSize = new Size (0' 0);  	}  	// The change of AutoScrollMinSize can trigger a resize event' which in turn can trigger  	// scaling to be turned off.  If this happens' restart this calculation altogether.  	if (scaling) {  		SetupScaling ();  		return;  	}  	this.AutoScroll = true;  	if (this.Size.Height >= (displayBorder ? this.DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : DesktopSize.Height)) {  		this.dy = (this.Size.Height - this.DesktopSize.Height) / 2;  	}  	else {  		if (displayBorder) {  			this.dy = BORDER_PADDING;  			this.AutoScrollPosition = new Point (BORDER_PADDING' (int)this.oldDy);  		}  		else {  			this.dy = 0;  			this.AutoScrollPosition = new Point (0' (int)this.oldDy);  		}  	}  	if (this.Size.Width >= (displayBorder ? this.DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : DesktopSize.Width)) {  		this.dx = (this.Size.Width - this.DesktopSize.Width) / 2;  	}  	else {  		if (displayBorder) {  			this.dx = BORDER_PADDING;  			this.AutoScrollPosition = new Point ((int)this.oldDx' BORDER_PADDING);  		}  		else {  			this.dx = 0;  			this.AutoScrollPosition = new Point ((int)this.oldDx' 0);  		}  	}  	Matrix transform = new Matrix ();  	transform.Translate (dx' dy);  	this.frontGraphics.Transform = transform;  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The following statement contains a magic number: scale = (scale > 0.01) ? scale : (float)0.01;  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The following statement contains a magic number: scale = (scale > 0.01) ? scale : (float)0.01;  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The following statement contains a magic number: dx = (this.Size.Width - (this.DesktopSize.Width * scale)) / 2;  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The following statement contains a magic number: dy = (this.Size.Height - (this.DesktopSize.Height * scale)) / 2;  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The following statement contains a magic number: if (this.Size.Height >= (displayBorder ? this.DesktopSize.Height + BORDER_PADDING + BORDER_PADDING : DesktopSize.Height)) {  	this.dy = (this.Size.Height - this.DesktopSize.Height) / 2;  }  else {  	if (displayBorder) {  		this.dy = BORDER_PADDING;  		this.AutoScrollPosition = new Point (BORDER_PADDING' (int)this.oldDy);  	}  	else {  		this.dy = 0;  		this.AutoScrollPosition = new Point (0' (int)this.oldDy);  	}  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The following statement contains a magic number: this.dy = (this.Size.Height - this.DesktopSize.Height) / 2;  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The following statement contains a magic number: if (this.Size.Width >= (displayBorder ? this.DesktopSize.Width + BORDER_PADDING + BORDER_PADDING : DesktopSize.Width)) {  	this.dx = (this.Size.Width - this.DesktopSize.Width) / 2;  }  else {  	if (displayBorder) {  		this.dx = BORDER_PADDING;  		this.AutoScrollPosition = new Point ((int)this.oldDx' BORDER_PADDING);  	}  	else {  		this.dx = 0;  		this.AutoScrollPosition = new Point ((int)this.oldDx' 0);  	}  }  
Magic Number,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,SetupScaling,The following statement contains a magic number: this.dx = (this.Size.Width - this.DesktopSize.Width) / 2;  
Magic Number,XenAdmin.ConsoleView,ConsoleKeyHandler,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\ConsoleKeyHandler.cs,TranslateKeyMessage,The following statement contains a magic number: if (virtualKeyCode == 18)  	return extended ? Keys.RMenu : Keys.LMenu;  
Magic Number,XenAdmin.ConsoleView,ConsoleKeyHandler,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\ConsoleKeyHandler.cs,TranslateKeyMessage,The following statement contains a magic number: if (virtualKeyCode == 17)  	return extended ? Keys.RControlKey : Keys.LControlKey;  
Magic Number,XenAdmin.ConsoleView,ConsoleKeyHandler,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\ConsoleKeyHandler.cs,TranslateKeyMessage,The following statement contains a magic number: if (virtualKeyCode == 16)  	return extended ? Keys.RShiftKey : Keys.LShiftKey;  
Missing Default,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,OnMouseDown,The following switch statement is missing a default case: switch (e.Button) {  case MouseButtons.Left:  	currentMouseState |= 1;  	break;  case MouseButtons.Right:  	currentMouseState |= 4;  	break;  case MouseButtons.Middle:  	currentMouseState |= 2;  	break;  }  
Missing Default,XenAdmin.ConsoleView,VNCGraphicsClient,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\VNCGraphicsClient.cs,OnMouseUp,The following switch statement is missing a default case: switch (e.Button) {  case MouseButtons.Left:  	currentMouseState &= ~1;  	break;  case MouseButtons.Right:  	currentMouseState &= ~4;  	break;  case MouseButtons.Middle:  	currentMouseState &= ~2;  	break;  }  
Missing Default,XenAdmin.ConsoleView,ConsoleKeyHandler,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\ConsoleKeyHandler.cs,AddKeyHandler,The following switch statement is missing a default case: switch (shortcutKey) {  case ConsoleShortcutKey.CTRL_ALT:  	AddKeyHandler (new Set<Keys> (Keys.ControlKey' Keys.Menu)' methodInvoker);  	AddKeyHandler (new Set<Keys> (Keys.LControlKey' Keys.LMenu)' methodInvoker);  	AddKeyHandler (new Set<Keys> (Keys.LControlKey' Keys.RMenu)' methodInvoker);  	AddKeyHandler (new Set<Keys> (Keys.RControlKey' Keys.LMenu)' methodInvoker);  	AddKeyHandler (new Set<Keys> (Keys.RControlKey' Keys.RMenu)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL_SCAN' ALT_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL2_SCAN' ALT2_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL2_SCAN' ALT2_SCAN' GR_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL2_SCAN' ALT_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL_SCAN' ALT2_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL_SCAN' ALT2_SCAN' GR_SCAN)' methodInvoker);  	break;  case ConsoleShortcutKey.CTRL_ALT_F:  	AddKeyHandler (new Set<Keys> (Keys.ControlKey' Keys.Menu' Keys.F)' methodInvoker);  	AddKeyHandler (new Set<Keys> (Keys.LControlKey' Keys.LMenu' Keys.F)' methodInvoker);  	AddKeyHandler (new Set<Keys> (Keys.LControlKey' Keys.RMenu' Keys.F)' methodInvoker);  	AddKeyHandler (new Set<Keys> (Keys.RControlKey' Keys.LMenu' Keys.F)' methodInvoker);  	AddKeyHandler (new Set<Keys> (Keys.RControlKey' Keys.RMenu' Keys.F)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL_SCAN' ALT_SCAN' F_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL2_SCAN' ALT2_SCAN' F_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL2_SCAN' ALT2_SCAN' GR_SCAN' F_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL2_SCAN' ALT_SCAN' F_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL_SCAN' ALT2_SCAN' F_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL_SCAN' ALT2_SCAN' GR_SCAN' F_SCAN)' methodInvoker);  	break;  case ConsoleShortcutKey.F12:  	AddKeyHandler (new Set<Keys> (Keys.F12)' methodInvoker);  	AddKeyHandler (new Set<int> (F12_SCAN)' methodInvoker);  	break;  case ConsoleShortcutKey.CTRL_ENTER:  	AddKeyHandler (new Set<Keys> (Keys.ControlKey' Keys.Enter)' methodInvoker);  	AddKeyHandler (new Set<Keys> (Keys.LControlKey' Keys.Enter)' methodInvoker);  	AddKeyHandler (new Set<Keys> (Keys.RControlKey' Keys.Enter)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL_SCAN' ENTER_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL2_SCAN' ENTER_SCAN)' methodInvoker);  	break;  case ConsoleShortcutKey.ALT_SHIFT_U:  	AddKeyHandler (new Set<Keys> (Keys.Menu' Keys.ShiftKey' Keys.U)' methodInvoker);  	AddKeyHandler (new Set<Keys> (Keys.LMenu' Keys.LShiftKey' Keys.U)' methodInvoker);  	AddKeyHandler (new Set<Keys> (Keys.LMenu' Keys.RShiftKey' Keys.U)' methodInvoker);  	AddKeyHandler (new Set<Keys> (Keys.RMenu' Keys.LShiftKey' Keys.U)' methodInvoker);  	AddKeyHandler (new Set<Keys> (Keys.RMenu' Keys.RShiftKey' Keys.U)' methodInvoker);  	AddKeyHandler (new Set<int> (ALT_SCAN' L_SHIFT_SCAN' U_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (ALT2_SCAN' L_SHIFT_SCAN' U_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (ALT_SCAN' R_SHIFT_SCAN' U_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (ALT2_SCAN' R_SHIFT_SCAN' U_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (ALT2_SCAN' R_SHIFT_SCAN' GR_SCAN' U_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (ALT2_SCAN' L_SHIFT_SCAN' GR_SCAN' U_SCAN)' methodInvoker);  	break;  case ConsoleShortcutKey.F11:  	AddKeyHandler (new Set<Keys> (Keys.F11)' methodInvoker);  	AddKeyHandler (new Set<int> (F11_SCAN)' methodInvoker);  	break;  case ConsoleShortcutKey.RIGHT_CTRL:  	AddKeyHandler (new Set<Keys> (Keys.RControlKey)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL2_SCAN)' methodInvoker);  	break;  case ConsoleShortcutKey.LEFT_ALT:  	AddKeyHandler (new Set<Keys> (Keys.LMenu)' methodInvoker);  	AddKeyHandler (new Set<int> (ALT_SCAN)' methodInvoker);  	break;  case ConsoleShortcutKey.CTRL_ALT_INS:  	AddKeyHandler (new Set<Keys> (Keys.ControlKey' Keys.Menu' Keys.Insert)' methodInvoker);  	AddKeyHandler (new Set<Keys> (Keys.LControlKey' Keys.LMenu' Keys.Insert)' methodInvoker);  	AddKeyHandler (new Set<Keys> (Keys.LControlKey' Keys.RMenu' Keys.Insert)' methodInvoker);  	AddKeyHandler (new Set<Keys> (Keys.RControlKey' Keys.LMenu' Keys.Insert)' methodInvoker);  	AddKeyHandler (new Set<Keys> (Keys.RControlKey' Keys.RMenu' Keys.Insert)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL_SCAN' ALT_SCAN' INS_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL2_SCAN' ALT2_SCAN' INS_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL2_SCAN' ALT2_SCAN' GR_SCAN' INS_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL_SCAN' ALT2_SCAN' INS_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL2_SCAN' ALT_SCAN' INS_SCAN)' methodInvoker);  	AddKeyHandler (new Set<int> (CTRL_SCAN' ALT2_SCAN' GR_SCAN' INS_SCAN)' methodInvoker);  	break;  }  
Missing Default,XenAdmin.ConsoleView,ConsoleKeyHandler,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\VNCControl\..\XenAdmin\ConsoleView\ConsoleKeyHandler.cs,RemoveKeyHandler,The following switch statement is missing a default case: switch (shortcutKey) {  case ConsoleShortcutKey.CTRL_ALT:  	RemoveKeyHandler (new Set<Keys> (Keys.ControlKey' Keys.Menu));  	RemoveKeyHandler (new Set<Keys> (Keys.LControlKey' Keys.LMenu));  	RemoveKeyHandler (new Set<Keys> (Keys.LControlKey' Keys.RMenu));  	RemoveKeyHandler (new Set<Keys> (Keys.RControlKey' Keys.LMenu));  	RemoveKeyHandler (new Set<Keys> (Keys.RControlKey' Keys.RMenu));  	RemoveKeyHandler (new Set<int> (CTRL_SCAN' ALT_SCAN));  	RemoveKeyHandler (new Set<int> (CTRL2_SCAN' ALT2_SCAN));  	RemoveKeyHandler (new Set<int> (CTRL2_SCAN' ALT2_SCAN' GR_SCAN));  	RemoveKeyHandler (new Set<int> (CTRL2_SCAN' ALT_SCAN));  	RemoveKeyHandler (new Set<int> (CTRL_SCAN' ALT2_SCAN));  	RemoveKeyHandler (new Set<int> (CTRL_SCAN' ALT2_SCAN' GR_SCAN));  	break;  case ConsoleShortcutKey.CTRL_ALT_F:  	RemoveKeyHandler (new Set<Keys> (Keys.ControlKey' Keys.Menu' Keys.F));  	RemoveKeyHandler (new Set<Keys> (Keys.LControlKey' Keys.LMenu' Keys.F));  	RemoveKeyHandler (new Set<Keys> (Keys.LControlKey' Keys.RMenu' Keys.F));  	RemoveKeyHandler (new Set<Keys> (Keys.RControlKey' Keys.LMenu' Keys.F));  	RemoveKeyHandler (new Set<Keys> (Keys.RControlKey' Keys.RMenu' Keys.F));  	RemoveKeyHandler (new Set<int> (CTRL_SCAN' ALT_SCAN' F_SCAN));  	RemoveKeyHandler (new Set<int> (CTRL2_SCAN' ALT2_SCAN' F_SCAN));  	RemoveKeyHandler (new Set<int> (CTRL2_SCAN' ALT2_SCAN' GR_SCAN' F_SCAN));  	RemoveKeyHandler (new Set<int> (CTRL2_SCAN' ALT_SCAN' F_SCAN));  	RemoveKeyHandler (new Set<int> (CTRL_SCAN' ALT2_SCAN' F_SCAN));  	RemoveKeyHandler (new Set<int> (CTRL_SCAN' ALT2_SCAN' GR_SCAN' F_SCAN));  	break;  case ConsoleShortcutKey.F12:  	RemoveKeyHandler (new Set<Keys> (Keys.F12));  	RemoveKeyHandler (new Set<int> (F12_SCAN));  	break;  case ConsoleShortcutKey.CTRL_ENTER:  	RemoveKeyHandler (new Set<Keys> (Keys.ControlKey' Keys.Enter));  	RemoveKeyHandler (new Set<Keys> (Keys.LControlKey' Keys.Enter));  	RemoveKeyHandler (new Set<Keys> (Keys.RControlKey' Keys.Enter));  	RemoveKeyHandler (new Set<int> (CTRL_SCAN' ENTER_SCAN));  	RemoveKeyHandler (new Set<int> (CTRL2_SCAN' ENTER_SCAN));  	break;  case ConsoleShortcutKey.ALT_SHIFT_U:  	RemoveKeyHandler (new Set<Keys> (Keys.Menu' Keys.ShiftKey' Keys.U));  	RemoveKeyHandler (new Set<Keys> (Keys.LMenu' Keys.LShiftKey' Keys.U));  	RemoveKeyHandler (new Set<Keys> (Keys.LMenu' Keys.RShiftKey' Keys.U));  	RemoveKeyHandler (new Set<Keys> (Keys.RMenu' Keys.LShiftKey' Keys.U));  	RemoveKeyHandler (new Set<Keys> (Keys.RMenu' Keys.RShiftKey' Keys.U));  	RemoveKeyHandler (new Set<int> (ALT_SCAN' L_SHIFT_SCAN' U_SCAN));  	RemoveKeyHandler (new Set<int> (ALT2_SCAN' L_SHIFT_SCAN' U_SCAN));  	RemoveKeyHandler (new Set<int> (ALT_SCAN' R_SHIFT_SCAN' U_SCAN));  	RemoveKeyHandler (new Set<int> (ALT2_SCAN' R_SHIFT_SCAN' U_SCAN));  	RemoveKeyHandler (new Set<int> (ALT2_SCAN' R_SHIFT_SCAN' GR_SCAN' U_SCAN));  	RemoveKeyHandler (new Set<int> (ALT2_SCAN' L_SHIFT_SCAN' GR_SCAN' U_SCAN));  	break;  case ConsoleShortcutKey.F11:  	RemoveKeyHandler (new Set<Keys> (Keys.F11));  	RemoveKeyHandler (new Set<int> (F11_SCAN));  	break;  case ConsoleShortcutKey.RIGHT_CTRL:  	RemoveKeyHandler (new Set<Keys> (Keys.RControlKey));  	RemoveKeyHandler (new Set<int> (CTRL2_SCAN));  	break;  case ConsoleShortcutKey.LEFT_ALT:  	RemoveKeyHandler (new Set<Keys> (Keys.LMenu));  	RemoveKeyHandler (new Set<int> (ALT_SCAN));  	break;  case ConsoleShortcutKey.CTRL_ALT_INS:  	RemoveKeyHandler (new Set<Keys> (Keys.ControlKey' Keys.Menu' Keys.Insert));  	RemoveKeyHandler (new Set<Keys> (Keys.LControlKey' Keys.LMenu' Keys.Insert));  	RemoveKeyHandler (new Set<Keys> (Keys.LControlKey' Keys.RMenu' Keys.Insert));  	RemoveKeyHandler (new Set<Keys> (Keys.RControlKey' Keys.LMenu' Keys.Insert));  	RemoveKeyHandler (new Set<Keys> (Keys.RControlKey' Keys.RMenu' Keys.Insert));  	RemoveKeyHandler (new Set<int> (CTRL_SCAN' ALT_SCAN' INS_SCAN));  	RemoveKeyHandler (new Set<int> (CTRL2_SCAN' ALT2_SCAN' INS_SCAN));  	RemoveKeyHandler (new Set<int> (CTRL2_SCAN' ALT2_SCAN' GR_SCAN' INS_SCAN));  	RemoveKeyHandler (new Set<int> (CTRL_SCAN' ALT2_SCAN' INS_SCAN));  	RemoveKeyHandler (new Set<int> (CTRL2_SCAN' ALT_SCAN' INS_SCAN));  	RemoveKeyHandler (new Set<int> (CTRL_SCAN' ALT2_SCAN' GR_SCAN' INS_SCAN));  	break;  }  
