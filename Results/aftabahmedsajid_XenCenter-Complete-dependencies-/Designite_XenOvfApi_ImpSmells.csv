Implementation smell,Namespace,Class,File,Method,Description
Long Method,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertOVFtoOVA,The method has 103 lines of code.
Long Method,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The method has 109 lines of code.
Long Method,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The method has 178 lines of code.
Long Method,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The method has 140 lines of code.
Long Method,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CollectInformation,The method has 170 lines of code.
Long Method,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The method has 341 lines of code.
Complex Method,XenOvf,OvfCompressor,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Compression.cs,ProcessCompression,Cyclomatic complexity of the method is 15
Complex Method,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertOVFtoOVA,Cyclomatic complexity of the method is 19
Complex Method,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVA,Cyclomatic complexity of the method is 25
Complex Method,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,Cyclomatic complexity of the method is 8
Complex Method,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,Cyclomatic complexity of the method is 65
Complex Method,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVPCXml,Cyclomatic complexity of the method is 12
Complex Method,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,Cyclomatic complexity of the method is 27
Complex Method,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,Cyclomatic complexity of the method is 27
Complex Method,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,Cyclomatic complexity of the method is 16
Complex Method,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VIF,Cyclomatic complexity of the method is 8
Complex Method,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CollectInformation,Cyclomatic complexity of the method is 19
Complex Method,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,Cyclomatic complexity of the method is 17
Complex Method,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,Cyclomatic complexity of the method is 75
Complex Method,XenOvf,TarPackage,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Package.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,XenOvf,TarPackage,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Package.cs,VerifyManifest,Cyclomatic complexity of the method is 8
Complex Method,XenOvf.Utilities,Tools,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\Utilities.cs,ValidateXmlToSchema,Cyclomatic complexity of the method is 9
Complex Method,XenOvf.Utilities,Tools,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\Utilities.cs,ValidateProperty,Cyclomatic complexity of the method is 13
Complex Method,XenOvf.Utilities,Tools,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\Utilities.cs,DeserializeContent,Cyclomatic complexity of the method is 11
Complex Method,XenOvf.Utilities,ValueMaps,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\ValueMaps.cs,LoadMap,Cyclomatic complexity of the method is 8
Long Parameter List,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertXVAtoOVF,The method has 5 parameters.
Long Parameter List,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The method has 5 parameters.
Long Parameter List,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_Network,The method has 5 parameters.
Long Parameter List,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VDI,The method has 6 parameters.
Long Parameter List,XenOvf,OvfEventArgs,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\OvfEventArgs.cs,OvfEventArgs,The method has 5 parameters.
Long Parameter List,XenOvf.Definitions.VMC,Ms_ParameterValue_Type,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Definitions\Microsoft.cs,Ms_ParameterValue_Type,The method has 5 parameters.
Long Parameter List,XenOvf.Definitions.VMC,Ms_QualifierInfo_Type,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Definitions\Microsoft.cs,Ms_QualifierInfo_Type,The method has 5 parameters.
Long Statement,XenOvf,OvfCompressor,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Compression.cs,ProcessCompression,The length of the statement  "					log.ErrorFormat ("Invalid compression method File: {0} Method: {1}' must be Gzip or BZip2"' file.href' file.compression); " is 121.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertOVFtoOVA,The length of the statement  "	string ovafilename = Path.Combine (pathToOvf' string.Format ("{0}.ova"' Path.GetFileNameWithoutExtension (ovfFileName))); " is 121.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertHyperVtoOVF,The length of the statement  "	if (hvobj != null && hvobj.declgroups != null && hvobj.declgroups.Count > 0 && hvobj.declgroups [0].values != null && hvobj.declgroups [0].values.Count > 0) { " is 158.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The length of the statement  "						if (xmm.xenname.ToLower ().Equals ("class") && xmm.xenvalue != null && xmm.xenvalue is string && ((string)xmm.xenvalue).Length > 0 && ((string)xmm.xenvalue).ToLower ().Equals ("vm")) { " is 184.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The length of the statement  "						else if (xmm.xenname.ToLower ().Equals ("class") && xmm.xenvalue != null && xmm.xenvalue is string && ((string)xmm.xenvalue).Length > 0 && ((string)xmm.xenvalue).ToLower ().Equals ("vbd")) { " is 190.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The length of the statement  "						else if (xmm.xenname.ToLower ().Equals ("class") && xmm.xenvalue != null && xmm.xenvalue is string && ((string)xmm.xenvalue).Length > 0 && ((string)xmm.xenvalue).ToLower ().Equals ("vif")) { " is 190.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The length of the statement  "						else if (xmm.xenname.ToLower ().Equals ("class") && xmm.xenvalue != null && xmm.xenvalue is string && ((string)xmm.xenvalue).Length > 0 && ((string)xmm.xenvalue).ToLower ().Equals ("network")) { " is 194.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The length of the statement  "						else if (xmm.xenname.ToLower ().Equals ("class") && xmm.xenvalue != null && xmm.xenvalue is string && ((string)xmm.xenvalue).Length > 0 && ((string)xmm.xenvalue).ToLower ().Equals ("vdi")) { " is 190.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The length of the statement  "						else if (xmm.xenname.ToLower ().Equals ("class") && xmm.xenvalue != null && xmm.xenvalue is string && ((string)xmm.xenvalue).Length > 0 && ((string)xmm.xenvalue).ToLower ().Equals ("sr")) { " is 189.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "	if (ovfname == null || xenxva == null || xenxva.vm == null || xenxva.vm.config == null || xenxva.vm.hacks == null || xenxva.vm.vbd == null || xenxva.vm.label == null || xenxva.vm.label.Length <= 0 || vhdExports == null || vhdExports.Length <= 0) " is 245.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "		AddVirtualSystemSettingData (env' vsId' vhsId' xenxva.vm.label.Trim ()' xenxva.vm.label.Trim ()' _ovfrm.GetString ("CONVERT_XVA_VSSD_CAPTION")' Guid.NewGuid ().ToString ()' Properties.Settings.Default.xenDefaultVirtualSystemType); " is 230.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "		AddOtherSystemSettingData (env' vsId' lang' "HVM_boot_policy"' Properties.Settings.Default.xenBootOptions' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION")); " is 160.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "		AddOtherSystemSettingData (env' vsId' lang' "HVM_boot_params"' Properties.Settings.Default.xenBootOrder' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION")); " is 158.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "		AddOtherSystemSettingData (env' vsId' lang' "platform"' Properties.Settings.Default.xenPlatformSetting' _ovfrm.GetString ("XENSERVER_PLATFORM_DESCRIPTION")); " is 157.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "		AddVirtualSystemSettingData (env' vsId' vhsId' xenxva.vm.label.Trim ()' xenxva.vm.label.Trim ()' _ovfrm.GetString ("CONVERT_XVA_VSSD_CAPTION")' Guid.NewGuid ().ToString ()' Properties.Settings.Default.xenDefaultPVVirtualSystemType); " is 232.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "		AddOtherSystemSettingData (env' vsId' lang' "PV_bootloader"' Properties.Settings.Default.xenPVBootloader' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION")); " is 159.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "		AddOtherSystemSettingData (env' vsId' lang' "PV_kernel"' Properties.Settings.Default.xenKernelOptions' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION")); " is 156.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "		AddOtherSystemSettingData (env' vsId' lang' "platform"' Properties.Settings.Default.xenPVPlatformSetting' _ovfrm.GetString ("XENSERVER_PLATFORM_DESCRIPTION")); " is 159.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The length of the statement  "		AddDisk (env' vsId' di.DriveId' lang' di.VhdFileName' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' Convert.ToUInt64 (di.PhysicalSize)' Convert.ToUInt64 (di.CapacitySize)); " is 212.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The length of the statement  "			AddVirtualSystemSettingData (env' systemId' vhsid' ElementName' ElementName' ElementName' InstanceId' VirtualSystemType); " is 121.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The length of the statement  "					if (rasd.ResourceType.Value == 21 && rasd.Caption.Value.ToLower ().StartsWith (_ovfrm.GetString ("RASD_19_CAPTION").ToLower ())) { " is 130.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The length of the statement  "	AddVirtualSystemSettingData (env' vsId' vhsId' vpcName' vpcName' _ovfrm.GetString ("CONVERT_VPC_VSSD_CAPTION")' Guid.NewGuid ().ToString ()' Properties.Settings.Default.xenDefaultVirtualSystemType); " is 198.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The length of the statement  "	AddOtherSystemSettingData (env' vsId' lang' "HVM_boot_policy"' Properties.Settings.Default.xenBootOptions' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION")); " is 160.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The length of the statement  "	AddOtherSystemSettingData (env' vsId' lang' "HVM_boot_params"' Properties.Settings.Default.xenBootOrder' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION")); " is 158.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The length of the statement  "	AddOtherSystemSettingData (env' vsId' lang' "platform"' Properties.Settings.Default.xenPlatformSetting' _ovfrm.GetString ("XENSERVER_PLATFORM_DESCRIPTION")); " is 157.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The length of the statement  "	if (vmcobj.hardware.pci_bus.ethernet_adapter != null && vmcobj.hardware.pci_bus.ethernet_adapter.ethernet_controller != null && vmcobj.hardware.pci_bus.ethernet_adapter.ethernet_controller.Length > 0) { " is 202.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The length of the statement  "			AddNetwork (env' vsId' lang' ec.virtual_network.id.value' ec.virtual_network.name.value' ec.ethernet_card_address.value); " is 121.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The length of the statement  "				AddDisk (env' vsId' lang' diskId' Path.GetFileName (loc.pathname.absolute.value)' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0); " is 174.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The length of the statement  "					AddFileReference (env' lang' Path.GetFileName (loc.pathname.absolute.value)' diskId' 0' Properties.Settings.Default.isoFileFormatURI); " is 134.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The length of the statement  "					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId)); " is 138.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "							AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI); " is 123.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "							UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId)); " is 138.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "							AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0); " is 163.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "						AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0); " is 163.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "							AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI); " is 123.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "							UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId)); " is 138.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "							AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0); " is 163.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "						AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0); " is 163.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "	AddVirtualSystemSettingData (env' vsId' vhsId' vmxName' vmxName' _ovfrm.GetString ("CONVERT_VMX_VSSD_CAPTION")' Guid.NewGuid ().ToString ()' Properties.Settings.Default.xenDefaultVirtualSystemType); " is 198.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "	AddOtherSystemSettingData (env' vsId' lang' "HVM_boot_policy"' Properties.Settings.Default.xenBootOptions' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION")); " is 160.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "	AddOtherSystemSettingData (env' vsId' lang' "HVM_boot_params"' Properties.Settings.Default.xenBootOrder' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION")); " is 158.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The length of the statement  "	AddOtherSystemSettingData (env' vsId' lang' "platform"' Properties.Settings.Default.xenPlatformSetting' _ovfrm.GetString ("XENSERVER_PLATFORM_DESCRIPTION")); " is 157.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The length of the statement  "		else if (n.xenname.ToLower ().Equals ("pv_bootloader") || n.xenname.ToLower ().Equals ("pv_kernel") || n.xenname.ToLower ().Equals ("pv_ramdisk") || n.xenname.ToLower ().Equals ("pv_args") || n.xenname.ToLower ().Equals ("pv_bootloader_args") || n.xenname.ToLower ().Equals ("pv_legacy_args") || n.xenname.ToLower ().Equals ("hvm_boot_policy") || n.xenname.ToLower ().Equals ("hvm_shadow_multiplier")) { " is 403.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The length of the statement  "				AddOtherSystemSettingData (env' vsId' lang' n.xenname' (string)n.xenvalue' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION")); " is 128.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The length of the statement  "				AddOtherSystemSettingData (env' vsId' lang' n.xenname' p.ToString ().Trim ()' _ovfrm.GetString ("XENSERVER_PLATFORM_DESCRIPTION")); " is 131.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The length of the statement  "		if (n.xenname.ToLower ().Equals ("uuid") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) { " is 124.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The length of the statement  "		else if (n.xenname.ToLower ().Equals ("vdi") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) { " is 128.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The length of the statement  "		else if (n.xenname.ToLower ().Equals ("userdevice") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) { " is 135.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The length of the statement  "		else if (n.xenname.ToLower ().Equals ("bootable") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) { " is 133.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The length of the statement  "		else if (n.xenname.ToLower ().Equals ("mode") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) { " is 129.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The length of the statement  "		else if (n.xenname.ToLower ().Equals ("type") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) { " is 129.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VIF,The length of the statement  "		if (n.xenname.ToLower ().Equals ("uuid") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) { " is 124.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VIF,The length of the statement  "		else if (n.xenname.ToLower ().Equals ("network") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) { " is 132.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VIF,The length of the statement  "		else if (n.xenname.ToLower ().Equals ("mac") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) { " is 128.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_Network,The length of the statement  "		if (n.xenname.ToLower ().Equals ("name_label") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) { " is 130.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CollectInformation,The length of the statement  "		log.WarnFormat ("OVF.CollectionInformation: call for Win32_DiskDriveToDiskPartition failed' Exception: {0}"' ex.Message); " is 121.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The length of the statement  "		log.Warn ("No networks defined' If a network interface is required' the administrator will need to add it after import of OVF/OVA Package."); " is 141.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The length of the statement  "										AddDisk (ovfEnv' vsId' diskInstanceId' lang' di.VhdFileName' bootable' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' Convert.ToUInt64 (di.PhysicalSize)' Convert.ToUInt64 (di.CapacitySize)); " is 223.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The length of the statement  "								AddCDROM (ovfEnv' vsId' diskInstanceId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME")); " is 120.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The length of the statement  "								log.WarnFormat ("OVF.CreateConnectedDevices: CDROM [{0}] controller connection could not be identified' skipped."' _pnpdeviceid); " is 129.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The length of the statement  "									string _description = string.Format (_ovfrm.GetString ("RASD_CONTROLLER_SCSI_DESCRIPTION")' __scsibus' __scsilogicalunit' __scsiport' __scsitargetid); " is 150.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The length of the statement  "									AddDisk (ovfEnv' vsId' diskInstanceId' lang' di.VhdFileName' bootable' _ovfrm.GetString ("RASD_19_CAPTION")' _description' Convert.ToUInt64 (di.PhysicalSize)' Convert.ToUInt64 (di.CapacitySize)); " is 195.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The length of the statement  "							string caption = string.Format (_ovfrm.GetString ("RASD_CONTROLLER_SCSI_DESCRIPTION")' __scsibus' __scsilogicalunit' __scsiport' __scsitargetid); " is 145.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The length of the statement  "			AddDisk (ovfEnv' vsId' diskInstanceId' lang' di.VhdFileName' bootable' _ovfrm.GetString ("RASD_19_CAPTION")' _mediatype' Convert.ToUInt64 (di.PhysicalSize)' Convert.ToUInt64 (di.CapacitySize)); " is 193.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The length of the statement  "			AddDisk (ovfEnv' vsId' Guid.NewGuid ().ToString ()' lang' di.VhdFileName' false' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' Convert.ToUInt64 (di.PhysicalSize)' Convert.ToUInt64 (di.CapacitySize)); " is 233.
Long Statement,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The length of the statement  "			log.WarnFormat ("CreateConnectedDevices: {0} ({1}) NOT FOUND' added as Unknown with 0 Size"' di.DriveId' di.VhdFileName); " is 121.
Long Statement,XenOvf,TarFileStream,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Package.cs,FindNextFile,The length of the statement  "		if (System.Text.RegularExpressions.Regex.IsMatch (Current' regexPatternAsString' System.Text.RegularExpressions.RegexOptions.IgnoreCase)) " is 137.
Long Statement,XenOvf,TarPackage,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Package.cs,Load,The length of the statement  "			if ((_DescriptorFileName == null) && (String.Compare (extension' Properties.Settings.Default.ovfFileExtension' true) == 0)) { " is 125.
Long Statement,XenOvf.Utilities,Tools,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\Utilities.cs,LoadOvfXml,The length of the statement  "	if ((String.Compare (extension' ".gz"' true) == 0) || (String.Compare (extension' ".bz2"' true) == 0) || (String.Compare (extension' ".ova"' true) == 0) || (String.Compare (extension' ".tar"' true) == 0)) { " is 206.
Long Statement,XenOvf.Utilities,Tools,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\Utilities.cs,DeserializeOvfXml,The length of the statement  "			if (xa.Prefix.ToLower ().Equals (Properties.Settings.Default.vmwNamespacePrefix) || xa.NamespaceURI.Equals (Properties.Settings.Default.vmwNameSpace) || xa.Prefix.ToLower () == Properties.Settings.Default.VMwareNamespacePrefix || xa.NamespaceURI == Properties.Settings.Default.VMwareNamespace) { " is 295.
Long Statement,XenOvf.Utilities,Tools,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\Utilities.cs,ValidateXmlToSchema,The length of the statement  "		//Upgrading to .Net 4.0: ProhibitDtd=false is obsolete' this line is the replacement according to: http://msdn.microsoft.com/en-us/library/system.xml.xmlreadersettings.prohibitdtd%28v=vs.100%29.aspx " is 198.
Long Statement,XenOvf.Utilities,Tools,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\Utilities.cs,ValidateXmlToSchema,The length of the statement  "			settings.Schemas.Add ("http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_VirtualSystemSettingData"' cimVSSDSchemaFilename); " is 127.
Long Statement,XenOvf.Utilities,Tools,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\Utilities.cs,ValidateXmlToSchema,The length of the statement  "			settings.Schemas.Add ("http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData"' cimRASDSchemaFilename); " is 132.
Long Statement,XenOvf.Utilities,Tools,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\Utilities.cs,ValidateXmlToSchema,The length of the statement  "			settings.Schemas.Add ("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"' wsseSchemaFilename); " is 127.
Long Statement,XenOvf.Utilities,Tools,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\Utilities.cs,ValidateXmlToSchema,The length of the statement  "			settings.Schemas.Add ("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd"' wsuSchemaFilename); " is 127.
Long Statement,XenOvf.Utilities,Tools,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\Utilities.cs,ValidateProperty,The length of the statement  "						// The outertype is likely a standard .Net type like String and not an alias for a type like XenOvf.Definitions.CimString. " is 122.
Long Statement,XenOvf.Utilities,Tools,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\Utilities.cs,LoadVmw40OvfXml,The length of the statement  "	ovfxml = ovfxml.Replace ("<References"' "<ovf:References").Replace ("</References"' "</ovf:References").Replace ("<Section"' "<ovf:Section").Replace ("</Section"' "</ovf:Section").Replace ("<Content"' "<ovf:Content").Replace ("</Content"' "</ovf:Content").Replace ("<File"' "<ovf:File").Replace ("</File"' "</ovf:File").Replace ("<Disk"' "<ovf:Disk").Replace ("</Disk"' "</ovf:Disk").Replace ("<Info"' "<ovf:Info").Replace ("</Info"' "</ovf:Info").Replace ("<Network"' "<ovf:Network").Replace ("</Network"' "</ovf:Network").Replace ("<Description"' "<ovf:Description").Replace ("</Description"' "</ovf:Description").Replace ("<License"' "<ovf:License").Replace ("</License"' "</ovf:License").Replace ("<System"' "<ovf:System").Replace ("</System"' "</ovf:System").Replace ("<rasd:InstanceId"' "<rasd:InstanceID").Replace ("</rasd:InstanceId"' "</rasd:InstanceID").Replace ("<Item"' "<ovf:Item").Replace ("</Item"' "</ovf:Item"); " is 928.
Long Statement,XenOvf.Utilities,Tools,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\Utilities.cs,LoadVmw35OvfXml,The length of the statement  "	ovfxml = ovfxml.Replace (Properties.Settings.Default.vmwEnvelopeNamespace' Properties.Settings.Default.cimEnvelopeURI).Replace ("<References"' "<ovf:References").Replace ("</References"' "</ovf:References").Replace ("<Section"' "<ovf:Section").Replace ("</Section"' "</ovf:Section").Replace ("<Content"' "<ovf:Content").Replace ("</Content"' "</ovf:Content").Replace ("<File"' "<ovf:File").Replace ("</File"' "</ovf:File").Replace ("<Disk"' "<ovf:Disk").Replace ("</Disk"' "</ovf:Disk").Replace ("<Info"' "<ovf:Info").Replace ("</Info"' "</ovf:Info").Replace ("<Network"' "<ovf:Network").Replace ("</Network"' "</ovf:Network").Replace ("<Description"' "<ovf:Description").Replace ("</Description"' "</ovf:Description").Replace ("<License"' "<ovf:License").Replace ("</License"' "</ovf:License").Replace ("<System"' "<ovf:System").Replace ("</System"' "</ovf:System").Replace ("<rasd:InstanceId"' "<rasd:InstanceID").Replace ("</rasd:InstanceId"' "</rasd:InstanceID").Replace ("<Item"' "<ovf:Item").Replace ("</Item"' "</ovf:Item"); " is 1031.
Long Statement,XenOvf.Utilities,ValueMaps,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\ValueMaps.cs,LoadMap,The length of the statement  "					if (xn1.Name.ToUpper ().Equals ("QUALIFIER") && xn1.Attributes.GetNamedItem ("NAME").Value.ToUpper ().Equals ("VALUEMAP")) { " is 124.
Long Statement,XenOvf.Utilities,ValueMaps,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\ValueMaps.cs,LoadMap,The length of the statement  "					if (xn1.Name.ToUpper ().Equals ("QUALIFIER") && xn1.Attributes.GetNamedItem ("NAME").Value.ToUpper ().Equals ("VALUES")) { " is 122.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertHyperVtoOVF,The conditional expression  "hvobj != null && hvobj.declgroups != null && hvobj.declgroups.Count > 0 && hvobj.declgroups [0].values != null && hvobj.declgroups [0].values.Count > 0"  is complex.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The conditional expression  "xmm.xenname.ToLower ().Equals ("class") && xmm.xenvalue != null && xmm.xenvalue is string && ((string)xmm.xenvalue).Length > 0 && ((string)xmm.xenvalue).ToLower ().Equals ("vm")"  is complex.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The conditional expression  "xmm.xenname.ToLower ().Equals ("class") && xmm.xenvalue != null && xmm.xenvalue is string && ((string)xmm.xenvalue).Length > 0 && ((string)xmm.xenvalue).ToLower ().Equals ("vbd")"  is complex.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The conditional expression  "xmm.xenname.ToLower ().Equals ("class") && xmm.xenvalue != null && xmm.xenvalue is string && ((string)xmm.xenvalue).Length > 0 && ((string)xmm.xenvalue).ToLower ().Equals ("vif")"  is complex.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The conditional expression  "xmm.xenname.ToLower ().Equals ("class") && xmm.xenvalue != null && xmm.xenvalue is string && ((string)xmm.xenvalue).Length > 0 && ((string)xmm.xenvalue).ToLower ().Equals ("network")"  is complex.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The conditional expression  "xmm.xenname.ToLower ().Equals ("class") && xmm.xenvalue != null && xmm.xenvalue is string && ((string)xmm.xenvalue).Length > 0 && ((string)xmm.xenvalue).ToLower ().Equals ("vdi")"  is complex.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVA,The conditional expression  "xmm.xenname.ToLower ().Equals ("class") && xmm.xenvalue != null && xmm.xenvalue is string && ((string)xmm.xenvalue).Length > 0 && ((string)xmm.xenvalue).ToLower ().Equals ("sr")"  is complex.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromXenOVAv1,The conditional expression  "ovfname == null || xenxva == null || xenxva.vm == null || xenxva.vm.config == null || xenxva.vm.hacks == null || xenxva.vm.vbd == null || xenxva.vm.label == null || xenxva.vm.label.Length <= 0 || vhdExports == null || vhdExports.Length <= 0"  is complex.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The conditional expression  "n.xenname.ToLower ().Equals ("pv_bootloader") || n.xenname.ToLower ().Equals ("pv_kernel") || n.xenname.ToLower ().Equals ("pv_ramdisk") || n.xenname.ToLower ().Equals ("pv_args") || n.xenname.ToLower ().Equals ("pv_bootloader_args") || n.xenname.ToLower ().Equals ("pv_legacy_args") || n.xenname.ToLower ().Equals ("hvm_boot_policy") || n.xenname.ToLower ().Equals ("hvm_shadow_multiplier")"  is complex.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The conditional expression  "n.xenname.ToLower ().Equals ("uuid") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The conditional expression  "n.xenname.ToLower ().Equals ("vdi") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The conditional expression  "n.xenname.ToLower ().Equals ("userdevice") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The conditional expression  "n.xenname.ToLower ().Equals ("bootable") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The conditional expression  "n.xenname.ToLower ().Equals ("mode") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The conditional expression  "n.xenname.ToLower ().Equals ("type") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VIF,The conditional expression  "n.xenname.ToLower ().Equals ("uuid") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VIF,The conditional expression  "n.xenname.ToLower ().Equals ("network") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VIF,The conditional expression  "n.xenname.ToLower ().Equals ("mac") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_Network,The conditional expression  "n.xenname.ToLower ().Equals ("name_label") && n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0"  is complex.
Complex Conditional,XenOvf.Utilities,Tools,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\Utilities.cs,LoadOvfXml,The conditional expression  "(String.Compare (extension' ".gz"' true) == 0) || (String.Compare (extension' ".bz2"' true) == 0) || (String.Compare (extension' ".ova"' true) == 0) || (String.Compare (extension' ".tar"' true) == 0)"  is complex.
Complex Conditional,XenOvf.Utilities,Tools,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\Utilities.cs,DeserializeOvfXml,The conditional expression  "xa.Prefix.ToLower ().Equals (Properties.Settings.Default.vmwNamespacePrefix) || xa.NamespaceURI.Equals (Properties.Settings.Default.vmwNameSpace) || xa.Prefix.ToLower () == Properties.Settings.Default.VMwareNamespacePrefix || xa.NamespaceURI == Properties.Settings.Default.VMwareNamespace"  is complex.
Complex Conditional,XenOvf.Utilities,Tools,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\Utilities.cs,ValidateProperty,The conditional expression  "!(strvalue != null && strvalue.Length > 0 && strvalue [0] != null && !string.IsNullOrEmpty (strvalue [0].Value))"  is complex.
Complex Conditional,XenOvf.Utilities,Tools,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Utilities\Utilities.cs,ValidateProperty,The conditional expression  "!(msgtype != null && msgtype.Length > 0 && msgtype [0] != null && !string.IsNullOrEmpty (msgtype [0].Value))"  is complex.
Empty Catch Block,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertOVAtoOVF,The method has an empty catch block.
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following statement contains a magic number: foreach (Ms_WrapperInstance_Type wrap in hvobj.declgroups [0].values) {  	RASD_Type rasd = new RASD_Type ();  	switch (wrap.instance.className) {  	#region CASE: Msvm_VirtualSystemSettingData  	case "Msvm_VirtualSystemSettingData": {  		string ElementName = null;  		string InstanceId = null;  		string SystemName = null;  		string VirtualSystemType = null;  		foreach (Ms_Property_Base_Type prop in wrap.instance.Properties) {  			switch (prop.Name) {  			case "ElementName": {  				ElementName = ((Ms_ParameterValue_Type)prop).Value;  				break;  			}  			case "InstanceID": {  				InstanceId = ((Ms_ParameterValue_Type)prop).Value;  				break;  			}  			case "SystemName": {  				SystemName = ((Ms_ParameterValue_Type)prop).Value;  				break;  			}  			case "VirtualSystemType": {  				VirtualSystemType = ((Ms_ParameterValue_Type)prop).Value;  				break;  			}  			}  		}  		AddVirtualSystemSettingData (env' systemId' vhsid' ElementName' ElementName' ElementName' InstanceId' VirtualSystemType);  		UpdateVirtualSystemName (env' systemId' lang' ElementName);  		break;  	}  	#endregion  	#region CASE: ResourceAllocationSettingData  	case "Msvm_ProcessorSettingData":  	case "Msvm_MemorySettingData":  	case "Msvm_SyntheticEthernetPortSettingData":  	case "Msvm_ResourceAllocationSettingData": {  		foreach (Ms_Property_Base_Type prop in wrap.instance.Properties) {  			if (prop is Ms_ParameterValue_Type) {  				if (((Ms_ParameterValue_Type)prop).Value == null || ((Ms_ParameterValue_Type)prop).Value.Length <= 0) {  					continue;  				}  			}  			else if (prop is Ms_ParameterValueArray_Type) {  				if (((Ms_ParameterValueArray_Type)prop).Values == null || ((Ms_ParameterValueArray_Type)prop).Values.Length <= 0) {  					continue;  				}  			}  			PropertyInfo[] properties = rasd.GetType ().GetProperties ();  			foreach (PropertyInfo pi in properties) {  				if (pi.Name.ToLower ().Equals (prop.Name.ToLower ())) {  					object newvalue = null;  					if (prop is Ms_ParameterValue_Type) {  						switch (prop.Type.ToLower ()) {  						case "string": {  							newvalue = new cimString ((string)((Ms_ParameterValue_Type)prop).Value);  							break;  						}  						case "boolean": {  							newvalue = new cimBoolean ();  							((cimBoolean)newvalue).Value = Convert.ToBoolean (((Ms_ParameterValue_Type)prop).Value);  							break;  						}  						case "uint16": {  							newvalue = new cimUnsignedShort ();  							((cimUnsignedShort)newvalue).Value = Convert.ToUInt16 (((Ms_ParameterValue_Type)prop).Value);  							break;  						}  						case "uint32": {  							newvalue = new cimUnsignedInt ();  							((cimUnsignedInt)newvalue).Value = Convert.ToUInt32 (((Ms_ParameterValue_Type)prop).Value);  							break;  						}  						case "uint64": {  							newvalue = new cimUnsignedLong ();  							((cimUnsignedLong)newvalue).Value = Convert.ToUInt64 (((Ms_ParameterValue_Type)prop).Value);  							break;  						}  						}  					}  					else if (prop is Ms_ParameterValueArray_Type) {  						switch (prop.Type.ToLower ()) {  						case "string": {  							List<cimString> sarray = new List<cimString> ();  							foreach (Ms_ParameterValue_Type svalue in ((Ms_ParameterValueArray_Type)prop).Values) {  								sarray.Add (new cimString (svalue.Value));  							}  							newvalue = sarray.ToArray ();  							break;  						}  						}  					}  					object tmpobject = null;  					switch (pi.Name.ToLower ()) {  					case "caption": {  						newvalue = new Caption (((cimString)newvalue).Value);  						break;  					}  					case "changeabletype": {  						tmpobject = newvalue;  						newvalue = new ChangeableType ();  						((ChangeableType)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;  						break;  					}  					case "consumervisibility": {  						tmpobject = newvalue;  						newvalue = new ConsumerVisibility ();  						((ConsumerVisibility)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;  						break;  					}  					case "mappingbehavior": {  						tmpobject = newvalue;  						newvalue = new MappingBehavior ();  						((MappingBehavior)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;  						break;  					}  					case "resourcetype": {  						tmpobject = newvalue;  						newvalue = new ResourceType ();  						((ResourceType)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;  						break;  					}  					case "connection":  					case "hostresource":  					default: {  						break;  					}  					}  					pi.SetValue (rasd' newvalue' null);  				}  			}  		}  		if (rasd != null) {  			if (FillEmptyRequiredFields (rasd)) {  				if (rasd.ResourceType.Value == 21 && rasd.Caption.Value.ToLower ().StartsWith (_ovfrm.GetString ("RASD_19_CAPTION").ToLower ())) {  					string filename = Path.GetFileName (rasd.Connection [0].Value);  					AddFileReference (env' lang' filename' rasd.InstanceID.Value' 0' Properties.Settings.Default.winFileFormatURI);  					AddRasd (env' systemId' rasd);  				}  				else if (rasd.ResourceType.Value == 10) {  					AddNetwork (env' systemId' lang' rasd.InstanceID.Value' rasd.Caption.Value' rasd.Address.Value);  				}  				else {  					AddRasd (env' systemId' rasd);  				}  			}  		}  		break;  	}  	#endregion  	#region CASE: Msvm_VLANEndpointSettingData  	case "Msvm_VLANEndpointSettingData":  	#endregion  	#region CASE: SKIPPED / DEFAULT  	case "Msvm_VirtualSystemExportSettingData":  	case "Msvm_VirtualSystemGlobalSettingData":  	case "Msvm_HeartbeatComponentSettingData":  	case "Msvm_KvpExchangeComponentSettingData":  	case "Msvm_ShutdownComponentSettingData":  	case "Msvm_TimeSyncComponentSettingData":  	case "Msvm_VssComponentSettingData":  	case "Msvm_SwitchPort":  	case "Msvm_VirtualSwitch":  	default: {  		break;  	}  	#endregion  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following statement contains a magic number: foreach (Ms_WrapperInstance_Type wrap in hvobj.declgroups [0].values) {  	RASD_Type rasd = new RASD_Type ();  	switch (wrap.instance.className) {  	#region CASE: Msvm_VirtualSystemSettingData  	case "Msvm_VirtualSystemSettingData": {  		string ElementName = null;  		string InstanceId = null;  		string SystemName = null;  		string VirtualSystemType = null;  		foreach (Ms_Property_Base_Type prop in wrap.instance.Properties) {  			switch (prop.Name) {  			case "ElementName": {  				ElementName = ((Ms_ParameterValue_Type)prop).Value;  				break;  			}  			case "InstanceID": {  				InstanceId = ((Ms_ParameterValue_Type)prop).Value;  				break;  			}  			case "SystemName": {  				SystemName = ((Ms_ParameterValue_Type)prop).Value;  				break;  			}  			case "VirtualSystemType": {  				VirtualSystemType = ((Ms_ParameterValue_Type)prop).Value;  				break;  			}  			}  		}  		AddVirtualSystemSettingData (env' systemId' vhsid' ElementName' ElementName' ElementName' InstanceId' VirtualSystemType);  		UpdateVirtualSystemName (env' systemId' lang' ElementName);  		break;  	}  	#endregion  	#region CASE: ResourceAllocationSettingData  	case "Msvm_ProcessorSettingData":  	case "Msvm_MemorySettingData":  	case "Msvm_SyntheticEthernetPortSettingData":  	case "Msvm_ResourceAllocationSettingData": {  		foreach (Ms_Property_Base_Type prop in wrap.instance.Properties) {  			if (prop is Ms_ParameterValue_Type) {  				if (((Ms_ParameterValue_Type)prop).Value == null || ((Ms_ParameterValue_Type)prop).Value.Length <= 0) {  					continue;  				}  			}  			else if (prop is Ms_ParameterValueArray_Type) {  				if (((Ms_ParameterValueArray_Type)prop).Values == null || ((Ms_ParameterValueArray_Type)prop).Values.Length <= 0) {  					continue;  				}  			}  			PropertyInfo[] properties = rasd.GetType ().GetProperties ();  			foreach (PropertyInfo pi in properties) {  				if (pi.Name.ToLower ().Equals (prop.Name.ToLower ())) {  					object newvalue = null;  					if (prop is Ms_ParameterValue_Type) {  						switch (prop.Type.ToLower ()) {  						case "string": {  							newvalue = new cimString ((string)((Ms_ParameterValue_Type)prop).Value);  							break;  						}  						case "boolean": {  							newvalue = new cimBoolean ();  							((cimBoolean)newvalue).Value = Convert.ToBoolean (((Ms_ParameterValue_Type)prop).Value);  							break;  						}  						case "uint16": {  							newvalue = new cimUnsignedShort ();  							((cimUnsignedShort)newvalue).Value = Convert.ToUInt16 (((Ms_ParameterValue_Type)prop).Value);  							break;  						}  						case "uint32": {  							newvalue = new cimUnsignedInt ();  							((cimUnsignedInt)newvalue).Value = Convert.ToUInt32 (((Ms_ParameterValue_Type)prop).Value);  							break;  						}  						case "uint64": {  							newvalue = new cimUnsignedLong ();  							((cimUnsignedLong)newvalue).Value = Convert.ToUInt64 (((Ms_ParameterValue_Type)prop).Value);  							break;  						}  						}  					}  					else if (prop is Ms_ParameterValueArray_Type) {  						switch (prop.Type.ToLower ()) {  						case "string": {  							List<cimString> sarray = new List<cimString> ();  							foreach (Ms_ParameterValue_Type svalue in ((Ms_ParameterValueArray_Type)prop).Values) {  								sarray.Add (new cimString (svalue.Value));  							}  							newvalue = sarray.ToArray ();  							break;  						}  						}  					}  					object tmpobject = null;  					switch (pi.Name.ToLower ()) {  					case "caption": {  						newvalue = new Caption (((cimString)newvalue).Value);  						break;  					}  					case "changeabletype": {  						tmpobject = newvalue;  						newvalue = new ChangeableType ();  						((ChangeableType)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;  						break;  					}  					case "consumervisibility": {  						tmpobject = newvalue;  						newvalue = new ConsumerVisibility ();  						((ConsumerVisibility)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;  						break;  					}  					case "mappingbehavior": {  						tmpobject = newvalue;  						newvalue = new MappingBehavior ();  						((MappingBehavior)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;  						break;  					}  					case "resourcetype": {  						tmpobject = newvalue;  						newvalue = new ResourceType ();  						((ResourceType)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;  						break;  					}  					case "connection":  					case "hostresource":  					default: {  						break;  					}  					}  					pi.SetValue (rasd' newvalue' null);  				}  			}  		}  		if (rasd != null) {  			if (FillEmptyRequiredFields (rasd)) {  				if (rasd.ResourceType.Value == 21 && rasd.Caption.Value.ToLower ().StartsWith (_ovfrm.GetString ("RASD_19_CAPTION").ToLower ())) {  					string filename = Path.GetFileName (rasd.Connection [0].Value);  					AddFileReference (env' lang' filename' rasd.InstanceID.Value' 0' Properties.Settings.Default.winFileFormatURI);  					AddRasd (env' systemId' rasd);  				}  				else if (rasd.ResourceType.Value == 10) {  					AddNetwork (env' systemId' lang' rasd.InstanceID.Value' rasd.Caption.Value' rasd.Address.Value);  				}  				else {  					AddRasd (env' systemId' rasd);  				}  			}  		}  		break;  	}  	#endregion  	#region CASE: Msvm_VLANEndpointSettingData  	case "Msvm_VLANEndpointSettingData":  	#endregion  	#region CASE: SKIPPED / DEFAULT  	case "Msvm_VirtualSystemExportSettingData":  	case "Msvm_VirtualSystemGlobalSettingData":  	case "Msvm_HeartbeatComponentSettingData":  	case "Msvm_KvpExchangeComponentSettingData":  	case "Msvm_ShutdownComponentSettingData":  	case "Msvm_TimeSyncComponentSettingData":  	case "Msvm_VssComponentSettingData":  	case "Msvm_SwitchPort":  	case "Msvm_VirtualSwitch":  	default: {  		break;  	}  	#endregion  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following statement contains a magic number: switch (wrap.instance.className) {  #region CASE: Msvm_VirtualSystemSettingData  case "Msvm_VirtualSystemSettingData": {  	string ElementName = null;  	string InstanceId = null;  	string SystemName = null;  	string VirtualSystemType = null;  	foreach (Ms_Property_Base_Type prop in wrap.instance.Properties) {  		switch (prop.Name) {  		case "ElementName": {  			ElementName = ((Ms_ParameterValue_Type)prop).Value;  			break;  		}  		case "InstanceID": {  			InstanceId = ((Ms_ParameterValue_Type)prop).Value;  			break;  		}  		case "SystemName": {  			SystemName = ((Ms_ParameterValue_Type)prop).Value;  			break;  		}  		case "VirtualSystemType": {  			VirtualSystemType = ((Ms_ParameterValue_Type)prop).Value;  			break;  		}  		}  	}  	AddVirtualSystemSettingData (env' systemId' vhsid' ElementName' ElementName' ElementName' InstanceId' VirtualSystemType);  	UpdateVirtualSystemName (env' systemId' lang' ElementName);  	break;  }  #endregion  #region CASE: ResourceAllocationSettingData  case "Msvm_ProcessorSettingData":  case "Msvm_MemorySettingData":  case "Msvm_SyntheticEthernetPortSettingData":  case "Msvm_ResourceAllocationSettingData": {  	foreach (Ms_Property_Base_Type prop in wrap.instance.Properties) {  		if (prop is Ms_ParameterValue_Type) {  			if (((Ms_ParameterValue_Type)prop).Value == null || ((Ms_ParameterValue_Type)prop).Value.Length <= 0) {  				continue;  			}  		}  		else if (prop is Ms_ParameterValueArray_Type) {  			if (((Ms_ParameterValueArray_Type)prop).Values == null || ((Ms_ParameterValueArray_Type)prop).Values.Length <= 0) {  				continue;  			}  		}  		PropertyInfo[] properties = rasd.GetType ().GetProperties ();  		foreach (PropertyInfo pi in properties) {  			if (pi.Name.ToLower ().Equals (prop.Name.ToLower ())) {  				object newvalue = null;  				if (prop is Ms_ParameterValue_Type) {  					switch (prop.Type.ToLower ()) {  					case "string": {  						newvalue = new cimString ((string)((Ms_ParameterValue_Type)prop).Value);  						break;  					}  					case "boolean": {  						newvalue = new cimBoolean ();  						((cimBoolean)newvalue).Value = Convert.ToBoolean (((Ms_ParameterValue_Type)prop).Value);  						break;  					}  					case "uint16": {  						newvalue = new cimUnsignedShort ();  						((cimUnsignedShort)newvalue).Value = Convert.ToUInt16 (((Ms_ParameterValue_Type)prop).Value);  						break;  					}  					case "uint32": {  						newvalue = new cimUnsignedInt ();  						((cimUnsignedInt)newvalue).Value = Convert.ToUInt32 (((Ms_ParameterValue_Type)prop).Value);  						break;  					}  					case "uint64": {  						newvalue = new cimUnsignedLong ();  						((cimUnsignedLong)newvalue).Value = Convert.ToUInt64 (((Ms_ParameterValue_Type)prop).Value);  						break;  					}  					}  				}  				else if (prop is Ms_ParameterValueArray_Type) {  					switch (prop.Type.ToLower ()) {  					case "string": {  						List<cimString> sarray = new List<cimString> ();  						foreach (Ms_ParameterValue_Type svalue in ((Ms_ParameterValueArray_Type)prop).Values) {  							sarray.Add (new cimString (svalue.Value));  						}  						newvalue = sarray.ToArray ();  						break;  					}  					}  				}  				object tmpobject = null;  				switch (pi.Name.ToLower ()) {  				case "caption": {  					newvalue = new Caption (((cimString)newvalue).Value);  					break;  				}  				case "changeabletype": {  					tmpobject = newvalue;  					newvalue = new ChangeableType ();  					((ChangeableType)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;  					break;  				}  				case "consumervisibility": {  					tmpobject = newvalue;  					newvalue = new ConsumerVisibility ();  					((ConsumerVisibility)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;  					break;  				}  				case "mappingbehavior": {  					tmpobject = newvalue;  					newvalue = new MappingBehavior ();  					((MappingBehavior)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;  					break;  				}  				case "resourcetype": {  					tmpobject = newvalue;  					newvalue = new ResourceType ();  					((ResourceType)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;  					break;  				}  				case "connection":  				case "hostresource":  				default: {  					break;  				}  				}  				pi.SetValue (rasd' newvalue' null);  			}  		}  	}  	if (rasd != null) {  		if (FillEmptyRequiredFields (rasd)) {  			if (rasd.ResourceType.Value == 21 && rasd.Caption.Value.ToLower ().StartsWith (_ovfrm.GetString ("RASD_19_CAPTION").ToLower ())) {  				string filename = Path.GetFileName (rasd.Connection [0].Value);  				AddFileReference (env' lang' filename' rasd.InstanceID.Value' 0' Properties.Settings.Default.winFileFormatURI);  				AddRasd (env' systemId' rasd);  			}  			else if (rasd.ResourceType.Value == 10) {  				AddNetwork (env' systemId' lang' rasd.InstanceID.Value' rasd.Caption.Value' rasd.Address.Value);  			}  			else {  				AddRasd (env' systemId' rasd);  			}  		}  	}  	break;  }  #endregion  #region CASE: Msvm_VLANEndpointSettingData  case "Msvm_VLANEndpointSettingData":  #endregion  #region CASE: SKIPPED / DEFAULT  case "Msvm_VirtualSystemExportSettingData":  case "Msvm_VirtualSystemGlobalSettingData":  case "Msvm_HeartbeatComponentSettingData":  case "Msvm_KvpExchangeComponentSettingData":  case "Msvm_ShutdownComponentSettingData":  case "Msvm_TimeSyncComponentSettingData":  case "Msvm_VssComponentSettingData":  case "Msvm_SwitchPort":  case "Msvm_VirtualSwitch":  default: {  	break;  }  #endregion  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following statement contains a magic number: switch (wrap.instance.className) {  #region CASE: Msvm_VirtualSystemSettingData  case "Msvm_VirtualSystemSettingData": {  	string ElementName = null;  	string InstanceId = null;  	string SystemName = null;  	string VirtualSystemType = null;  	foreach (Ms_Property_Base_Type prop in wrap.instance.Properties) {  		switch (prop.Name) {  		case "ElementName": {  			ElementName = ((Ms_ParameterValue_Type)prop).Value;  			break;  		}  		case "InstanceID": {  			InstanceId = ((Ms_ParameterValue_Type)prop).Value;  			break;  		}  		case "SystemName": {  			SystemName = ((Ms_ParameterValue_Type)prop).Value;  			break;  		}  		case "VirtualSystemType": {  			VirtualSystemType = ((Ms_ParameterValue_Type)prop).Value;  			break;  		}  		}  	}  	AddVirtualSystemSettingData (env' systemId' vhsid' ElementName' ElementName' ElementName' InstanceId' VirtualSystemType);  	UpdateVirtualSystemName (env' systemId' lang' ElementName);  	break;  }  #endregion  #region CASE: ResourceAllocationSettingData  case "Msvm_ProcessorSettingData":  case "Msvm_MemorySettingData":  case "Msvm_SyntheticEthernetPortSettingData":  case "Msvm_ResourceAllocationSettingData": {  	foreach (Ms_Property_Base_Type prop in wrap.instance.Properties) {  		if (prop is Ms_ParameterValue_Type) {  			if (((Ms_ParameterValue_Type)prop).Value == null || ((Ms_ParameterValue_Type)prop).Value.Length <= 0) {  				continue;  			}  		}  		else if (prop is Ms_ParameterValueArray_Type) {  			if (((Ms_ParameterValueArray_Type)prop).Values == null || ((Ms_ParameterValueArray_Type)prop).Values.Length <= 0) {  				continue;  			}  		}  		PropertyInfo[] properties = rasd.GetType ().GetProperties ();  		foreach (PropertyInfo pi in properties) {  			if (pi.Name.ToLower ().Equals (prop.Name.ToLower ())) {  				object newvalue = null;  				if (prop is Ms_ParameterValue_Type) {  					switch (prop.Type.ToLower ()) {  					case "string": {  						newvalue = new cimString ((string)((Ms_ParameterValue_Type)prop).Value);  						break;  					}  					case "boolean": {  						newvalue = new cimBoolean ();  						((cimBoolean)newvalue).Value = Convert.ToBoolean (((Ms_ParameterValue_Type)prop).Value);  						break;  					}  					case "uint16": {  						newvalue = new cimUnsignedShort ();  						((cimUnsignedShort)newvalue).Value = Convert.ToUInt16 (((Ms_ParameterValue_Type)prop).Value);  						break;  					}  					case "uint32": {  						newvalue = new cimUnsignedInt ();  						((cimUnsignedInt)newvalue).Value = Convert.ToUInt32 (((Ms_ParameterValue_Type)prop).Value);  						break;  					}  					case "uint64": {  						newvalue = new cimUnsignedLong ();  						((cimUnsignedLong)newvalue).Value = Convert.ToUInt64 (((Ms_ParameterValue_Type)prop).Value);  						break;  					}  					}  				}  				else if (prop is Ms_ParameterValueArray_Type) {  					switch (prop.Type.ToLower ()) {  					case "string": {  						List<cimString> sarray = new List<cimString> ();  						foreach (Ms_ParameterValue_Type svalue in ((Ms_ParameterValueArray_Type)prop).Values) {  							sarray.Add (new cimString (svalue.Value));  						}  						newvalue = sarray.ToArray ();  						break;  					}  					}  				}  				object tmpobject = null;  				switch (pi.Name.ToLower ()) {  				case "caption": {  					newvalue = new Caption (((cimString)newvalue).Value);  					break;  				}  				case "changeabletype": {  					tmpobject = newvalue;  					newvalue = new ChangeableType ();  					((ChangeableType)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;  					break;  				}  				case "consumervisibility": {  					tmpobject = newvalue;  					newvalue = new ConsumerVisibility ();  					((ConsumerVisibility)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;  					break;  				}  				case "mappingbehavior": {  					tmpobject = newvalue;  					newvalue = new MappingBehavior ();  					((MappingBehavior)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;  					break;  				}  				case "resourcetype": {  					tmpobject = newvalue;  					newvalue = new ResourceType ();  					((ResourceType)newvalue).Value = ((cimUnsignedShort)tmpobject).Value;  					break;  				}  				case "connection":  				case "hostresource":  				default: {  					break;  				}  				}  				pi.SetValue (rasd' newvalue' null);  			}  		}  	}  	if (rasd != null) {  		if (FillEmptyRequiredFields (rasd)) {  			if (rasd.ResourceType.Value == 21 && rasd.Caption.Value.ToLower ().StartsWith (_ovfrm.GetString ("RASD_19_CAPTION").ToLower ())) {  				string filename = Path.GetFileName (rasd.Connection [0].Value);  				AddFileReference (env' lang' filename' rasd.InstanceID.Value' 0' Properties.Settings.Default.winFileFormatURI);  				AddRasd (env' systemId' rasd);  			}  			else if (rasd.ResourceType.Value == 10) {  				AddNetwork (env' systemId' lang' rasd.InstanceID.Value' rasd.Caption.Value' rasd.Address.Value);  			}  			else {  				AddRasd (env' systemId' rasd);  			}  		}  	}  	break;  }  #endregion  #region CASE: Msvm_VLANEndpointSettingData  case "Msvm_VLANEndpointSettingData":  #endregion  #region CASE: SKIPPED / DEFAULT  case "Msvm_VirtualSystemExportSettingData":  case "Msvm_VirtualSystemGlobalSettingData":  case "Msvm_HeartbeatComponentSettingData":  case "Msvm_KvpExchangeComponentSettingData":  case "Msvm_ShutdownComponentSettingData":  case "Msvm_TimeSyncComponentSettingData":  case "Msvm_VssComponentSettingData":  case "Msvm_SwitchPort":  case "Msvm_VirtualSwitch":  default: {  	break;  }  #endregion  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following statement contains a magic number: if (rasd != null) {  	if (FillEmptyRequiredFields (rasd)) {  		if (rasd.ResourceType.Value == 21 && rasd.Caption.Value.ToLower ().StartsWith (_ovfrm.GetString ("RASD_19_CAPTION").ToLower ())) {  			string filename = Path.GetFileName (rasd.Connection [0].Value);  			AddFileReference (env' lang' filename' rasd.InstanceID.Value' 0' Properties.Settings.Default.winFileFormatURI);  			AddRasd (env' systemId' rasd);  		}  		else if (rasd.ResourceType.Value == 10) {  			AddNetwork (env' systemId' lang' rasd.InstanceID.Value' rasd.Caption.Value' rasd.Address.Value);  		}  		else {  			AddRasd (env' systemId' rasd);  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following statement contains a magic number: if (rasd != null) {  	if (FillEmptyRequiredFields (rasd)) {  		if (rasd.ResourceType.Value == 21 && rasd.Caption.Value.ToLower ().StartsWith (_ovfrm.GetString ("RASD_19_CAPTION").ToLower ())) {  			string filename = Path.GetFileName (rasd.Connection [0].Value);  			AddFileReference (env' lang' filename' rasd.InstanceID.Value' 0' Properties.Settings.Default.winFileFormatURI);  			AddRasd (env' systemId' rasd);  		}  		else if (rasd.ResourceType.Value == 10) {  			AddNetwork (env' systemId' lang' rasd.InstanceID.Value' rasd.Caption.Value' rasd.Address.Value);  		}  		else {  			AddRasd (env' systemId' rasd);  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following statement contains a magic number: if (FillEmptyRequiredFields (rasd)) {  	if (rasd.ResourceType.Value == 21 && rasd.Caption.Value.ToLower ().StartsWith (_ovfrm.GetString ("RASD_19_CAPTION").ToLower ())) {  		string filename = Path.GetFileName (rasd.Connection [0].Value);  		AddFileReference (env' lang' filename' rasd.InstanceID.Value' 0' Properties.Settings.Default.winFileFormatURI);  		AddRasd (env' systemId' rasd);  	}  	else if (rasd.ResourceType.Value == 10) {  		AddNetwork (env' systemId' lang' rasd.InstanceID.Value' rasd.Caption.Value' rasd.Address.Value);  	}  	else {  		AddRasd (env' systemId' rasd);  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following statement contains a magic number: if (FillEmptyRequiredFields (rasd)) {  	if (rasd.ResourceType.Value == 21 && rasd.Caption.Value.ToLower ().StartsWith (_ovfrm.GetString ("RASD_19_CAPTION").ToLower ())) {  		string filename = Path.GetFileName (rasd.Connection [0].Value);  		AddFileReference (env' lang' filename' rasd.InstanceID.Value' 0' Properties.Settings.Default.winFileFormatURI);  		AddRasd (env' systemId' rasd);  	}  	else if (rasd.ResourceType.Value == 10) {  		AddNetwork (env' systemId' lang' rasd.InstanceID.Value' rasd.Caption.Value' rasd.Address.Value);  	}  	else {  		AddRasd (env' systemId' rasd);  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following statement contains a magic number: if (rasd.ResourceType.Value == 21 && rasd.Caption.Value.ToLower ().StartsWith (_ovfrm.GetString ("RASD_19_CAPTION").ToLower ())) {  	string filename = Path.GetFileName (rasd.Connection [0].Value);  	AddFileReference (env' lang' filename' rasd.InstanceID.Value' 0' Properties.Settings.Default.winFileFormatURI);  	AddRasd (env' systemId' rasd);  }  else if (rasd.ResourceType.Value == 10) {  	AddNetwork (env' systemId' lang' rasd.InstanceID.Value' rasd.Caption.Value' rasd.Address.Value);  }  else {  	AddRasd (env' systemId' rasd);  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following statement contains a magic number: if (rasd.ResourceType.Value == 21 && rasd.Caption.Value.ToLower ().StartsWith (_ovfrm.GetString ("RASD_19_CAPTION").ToLower ())) {  	string filename = Path.GetFileName (rasd.Connection [0].Value);  	AddFileReference (env' lang' filename' rasd.InstanceID.Value' 0' Properties.Settings.Default.winFileFormatURI);  	AddRasd (env' systemId' rasd);  }  else if (rasd.ResourceType.Value == 10) {  	AddNetwork (env' systemId' lang' rasd.InstanceID.Value' rasd.Caption.Value' rasd.Address.Value);  }  else {  	AddRasd (env' systemId' rasd);  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following statement contains a magic number: if (rasd.ResourceType.Value == 10) {  	AddNetwork (env' systemId' lang' rasd.InstanceID.Value' rasd.Caption.Value' rasd.Address.Value);  }  else {  	AddRasd (env' systemId' rasd);  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (!vmxcfg.ContainsKey ("memsize")) {  	SetMemory (env' vsId' 512' "MB");  }  else {  	SetMemory (env' vsId' Convert.ToUInt64 (vmxcfg ["memsize"])' "MB");  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: SetMemory (env' vsId' 512' "MB");  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: foreach (string key in vmxcfg.Keys) {  	if (key.ToLower ().StartsWith ("ethernet")) {  		char i = key [8];  		int networkIdx = (int)i - 48;  		if (networkIdx == addedNetwork) {  			string mac = null;  			string cap = "Network";  			string datakey = string.Format ("ethernet{0}.generatedAddress"' networkIdx);  			string vdev = string.Format ("ethernet{0}.virtualDev"' networkIdx);  			if (vmxcfg.ContainsKey (datakey))  				mac = vmxcfg [datakey];  			if (vmxcfg.ContainsKey (vdev))  				cap = vmxcfg [vdev];  			AddNetwork (env' vsId' lang' Guid.NewGuid ().ToString ()' cap' mac);  			addedNetwork++;  		}  	}  	else if (key.ToLower ().StartsWith ("displayname")) {  		vmxName = vmxcfg [key];  	}  	else if (key.ToLower ().StartsWith ("ide")) {  		char i = key [3];  		int ideIdx = (int)i - 48;  		if (ideIdx == addedIDE) {  			string[] parts = key.Split (new char[] {  				':''  				'.'  			});  			int port = 0;  			if (parts.Length == 3) {  				port = Convert.ToInt32 (parts [1]);  			}  			string devId = Guid.NewGuid ().ToString ();  			string diskId = Guid.NewGuid ().ToString ();  			AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  			string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  			string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  			bool addDiskImage = false;  			if (vmxcfg.ContainsKey (filekey))  				addDiskImage = true;  			if (vmxcfg.ContainsKey (devicekey)) {  				if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  					AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  					if (addDiskImage) {  						AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  						UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  					}  				}  				else {  					if (addDiskImage) {  						AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  					}  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  			AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  			addedIDE++;  		}  	}  	else if (key.ToLower ().StartsWith ("scsi")) {  		char i = key [4];  		int scsiIdx = (int)i - 48;  		if (scsiIdx == addedSCSI) {  			string[] parts = key.Split (new char[] {  				':''  				'.'  			});  			int port = 0;  			if (parts.Length == 3) {  				port = Convert.ToInt32 (parts [1]);  			}  			else {  				continue;  			}  			string devId = Guid.NewGuid ().ToString ();  			string diskId = Guid.NewGuid ().ToString ();  			AddController (env' vsId' DeviceType.SCSI' devId' port);  			string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  			string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  			bool addDiskImage = false;  			if (vmxcfg.ContainsKey (filekey))  				addDiskImage = true;  			if (vmxcfg.ContainsKey (devicekey)) {  				if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  					AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  					if (addDiskImage) {  						AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  						UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  					}  				}  				else {  					if (addDiskImage) {  						AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  					}  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  			AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  			addedSCSI++;  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: foreach (string key in vmxcfg.Keys) {  	if (key.ToLower ().StartsWith ("ethernet")) {  		char i = key [8];  		int networkIdx = (int)i - 48;  		if (networkIdx == addedNetwork) {  			string mac = null;  			string cap = "Network";  			string datakey = string.Format ("ethernet{0}.generatedAddress"' networkIdx);  			string vdev = string.Format ("ethernet{0}.virtualDev"' networkIdx);  			if (vmxcfg.ContainsKey (datakey))  				mac = vmxcfg [datakey];  			if (vmxcfg.ContainsKey (vdev))  				cap = vmxcfg [vdev];  			AddNetwork (env' vsId' lang' Guid.NewGuid ().ToString ()' cap' mac);  			addedNetwork++;  		}  	}  	else if (key.ToLower ().StartsWith ("displayname")) {  		vmxName = vmxcfg [key];  	}  	else if (key.ToLower ().StartsWith ("ide")) {  		char i = key [3];  		int ideIdx = (int)i - 48;  		if (ideIdx == addedIDE) {  			string[] parts = key.Split (new char[] {  				':''  				'.'  			});  			int port = 0;  			if (parts.Length == 3) {  				port = Convert.ToInt32 (parts [1]);  			}  			string devId = Guid.NewGuid ().ToString ();  			string diskId = Guid.NewGuid ().ToString ();  			AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  			string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  			string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  			bool addDiskImage = false;  			if (vmxcfg.ContainsKey (filekey))  				addDiskImage = true;  			if (vmxcfg.ContainsKey (devicekey)) {  				if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  					AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  					if (addDiskImage) {  						AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  						UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  					}  				}  				else {  					if (addDiskImage) {  						AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  					}  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  			AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  			addedIDE++;  		}  	}  	else if (key.ToLower ().StartsWith ("scsi")) {  		char i = key [4];  		int scsiIdx = (int)i - 48;  		if (scsiIdx == addedSCSI) {  			string[] parts = key.Split (new char[] {  				':''  				'.'  			});  			int port = 0;  			if (parts.Length == 3) {  				port = Convert.ToInt32 (parts [1]);  			}  			else {  				continue;  			}  			string devId = Guid.NewGuid ().ToString ();  			string diskId = Guid.NewGuid ().ToString ();  			AddController (env' vsId' DeviceType.SCSI' devId' port);  			string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  			string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  			bool addDiskImage = false;  			if (vmxcfg.ContainsKey (filekey))  				addDiskImage = true;  			if (vmxcfg.ContainsKey (devicekey)) {  				if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  					AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  					if (addDiskImage) {  						AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  						UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  					}  				}  				else {  					if (addDiskImage) {  						AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  					}  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  			AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  			addedSCSI++;  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: foreach (string key in vmxcfg.Keys) {  	if (key.ToLower ().StartsWith ("ethernet")) {  		char i = key [8];  		int networkIdx = (int)i - 48;  		if (networkIdx == addedNetwork) {  			string mac = null;  			string cap = "Network";  			string datakey = string.Format ("ethernet{0}.generatedAddress"' networkIdx);  			string vdev = string.Format ("ethernet{0}.virtualDev"' networkIdx);  			if (vmxcfg.ContainsKey (datakey))  				mac = vmxcfg [datakey];  			if (vmxcfg.ContainsKey (vdev))  				cap = vmxcfg [vdev];  			AddNetwork (env' vsId' lang' Guid.NewGuid ().ToString ()' cap' mac);  			addedNetwork++;  		}  	}  	else if (key.ToLower ().StartsWith ("displayname")) {  		vmxName = vmxcfg [key];  	}  	else if (key.ToLower ().StartsWith ("ide")) {  		char i = key [3];  		int ideIdx = (int)i - 48;  		if (ideIdx == addedIDE) {  			string[] parts = key.Split (new char[] {  				':''  				'.'  			});  			int port = 0;  			if (parts.Length == 3) {  				port = Convert.ToInt32 (parts [1]);  			}  			string devId = Guid.NewGuid ().ToString ();  			string diskId = Guid.NewGuid ().ToString ();  			AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  			string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  			string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  			bool addDiskImage = false;  			if (vmxcfg.ContainsKey (filekey))  				addDiskImage = true;  			if (vmxcfg.ContainsKey (devicekey)) {  				if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  					AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  					if (addDiskImage) {  						AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  						UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  					}  				}  				else {  					if (addDiskImage) {  						AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  					}  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  			AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  			addedIDE++;  		}  	}  	else if (key.ToLower ().StartsWith ("scsi")) {  		char i = key [4];  		int scsiIdx = (int)i - 48;  		if (scsiIdx == addedSCSI) {  			string[] parts = key.Split (new char[] {  				':''  				'.'  			});  			int port = 0;  			if (parts.Length == 3) {  				port = Convert.ToInt32 (parts [1]);  			}  			else {  				continue;  			}  			string devId = Guid.NewGuid ().ToString ();  			string diskId = Guid.NewGuid ().ToString ();  			AddController (env' vsId' DeviceType.SCSI' devId' port);  			string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  			string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  			bool addDiskImage = false;  			if (vmxcfg.ContainsKey (filekey))  				addDiskImage = true;  			if (vmxcfg.ContainsKey (devicekey)) {  				if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  					AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  					if (addDiskImage) {  						AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  						UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  					}  				}  				else {  					if (addDiskImage) {  						AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  					}  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  			AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  			addedSCSI++;  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: foreach (string key in vmxcfg.Keys) {  	if (key.ToLower ().StartsWith ("ethernet")) {  		char i = key [8];  		int networkIdx = (int)i - 48;  		if (networkIdx == addedNetwork) {  			string mac = null;  			string cap = "Network";  			string datakey = string.Format ("ethernet{0}.generatedAddress"' networkIdx);  			string vdev = string.Format ("ethernet{0}.virtualDev"' networkIdx);  			if (vmxcfg.ContainsKey (datakey))  				mac = vmxcfg [datakey];  			if (vmxcfg.ContainsKey (vdev))  				cap = vmxcfg [vdev];  			AddNetwork (env' vsId' lang' Guid.NewGuid ().ToString ()' cap' mac);  			addedNetwork++;  		}  	}  	else if (key.ToLower ().StartsWith ("displayname")) {  		vmxName = vmxcfg [key];  	}  	else if (key.ToLower ().StartsWith ("ide")) {  		char i = key [3];  		int ideIdx = (int)i - 48;  		if (ideIdx == addedIDE) {  			string[] parts = key.Split (new char[] {  				':''  				'.'  			});  			int port = 0;  			if (parts.Length == 3) {  				port = Convert.ToInt32 (parts [1]);  			}  			string devId = Guid.NewGuid ().ToString ();  			string diskId = Guid.NewGuid ().ToString ();  			AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  			string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  			string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  			bool addDiskImage = false;  			if (vmxcfg.ContainsKey (filekey))  				addDiskImage = true;  			if (vmxcfg.ContainsKey (devicekey)) {  				if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  					AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  					if (addDiskImage) {  						AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  						UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  					}  				}  				else {  					if (addDiskImage) {  						AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  					}  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  			AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  			addedIDE++;  		}  	}  	else if (key.ToLower ().StartsWith ("scsi")) {  		char i = key [4];  		int scsiIdx = (int)i - 48;  		if (scsiIdx == addedSCSI) {  			string[] parts = key.Split (new char[] {  				':''  				'.'  			});  			int port = 0;  			if (parts.Length == 3) {  				port = Convert.ToInt32 (parts [1]);  			}  			else {  				continue;  			}  			string devId = Guid.NewGuid ().ToString ();  			string diskId = Guid.NewGuid ().ToString ();  			AddController (env' vsId' DeviceType.SCSI' devId' port);  			string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  			string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  			bool addDiskImage = false;  			if (vmxcfg.ContainsKey (filekey))  				addDiskImage = true;  			if (vmxcfg.ContainsKey (devicekey)) {  				if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  					AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  					if (addDiskImage) {  						AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  						UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  					}  				}  				else {  					if (addDiskImage) {  						AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  					}  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  			AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  			addedSCSI++;  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: foreach (string key in vmxcfg.Keys) {  	if (key.ToLower ().StartsWith ("ethernet")) {  		char i = key [8];  		int networkIdx = (int)i - 48;  		if (networkIdx == addedNetwork) {  			string mac = null;  			string cap = "Network";  			string datakey = string.Format ("ethernet{0}.generatedAddress"' networkIdx);  			string vdev = string.Format ("ethernet{0}.virtualDev"' networkIdx);  			if (vmxcfg.ContainsKey (datakey))  				mac = vmxcfg [datakey];  			if (vmxcfg.ContainsKey (vdev))  				cap = vmxcfg [vdev];  			AddNetwork (env' vsId' lang' Guid.NewGuid ().ToString ()' cap' mac);  			addedNetwork++;  		}  	}  	else if (key.ToLower ().StartsWith ("displayname")) {  		vmxName = vmxcfg [key];  	}  	else if (key.ToLower ().StartsWith ("ide")) {  		char i = key [3];  		int ideIdx = (int)i - 48;  		if (ideIdx == addedIDE) {  			string[] parts = key.Split (new char[] {  				':''  				'.'  			});  			int port = 0;  			if (parts.Length == 3) {  				port = Convert.ToInt32 (parts [1]);  			}  			string devId = Guid.NewGuid ().ToString ();  			string diskId = Guid.NewGuid ().ToString ();  			AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  			string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  			string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  			bool addDiskImage = false;  			if (vmxcfg.ContainsKey (filekey))  				addDiskImage = true;  			if (vmxcfg.ContainsKey (devicekey)) {  				if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  					AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  					if (addDiskImage) {  						AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  						UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  					}  				}  				else {  					if (addDiskImage) {  						AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  					}  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  			AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  			addedIDE++;  		}  	}  	else if (key.ToLower ().StartsWith ("scsi")) {  		char i = key [4];  		int scsiIdx = (int)i - 48;  		if (scsiIdx == addedSCSI) {  			string[] parts = key.Split (new char[] {  				':''  				'.'  			});  			int port = 0;  			if (parts.Length == 3) {  				port = Convert.ToInt32 (parts [1]);  			}  			else {  				continue;  			}  			string devId = Guid.NewGuid ().ToString ();  			string diskId = Guid.NewGuid ().ToString ();  			AddController (env' vsId' DeviceType.SCSI' devId' port);  			string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  			string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  			bool addDiskImage = false;  			if (vmxcfg.ContainsKey (filekey))  				addDiskImage = true;  			if (vmxcfg.ContainsKey (devicekey)) {  				if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  					AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  					if (addDiskImage) {  						AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  						UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  					}  				}  				else {  					if (addDiskImage) {  						AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  					}  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  			AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  			addedSCSI++;  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: foreach (string key in vmxcfg.Keys) {  	if (key.ToLower ().StartsWith ("ethernet")) {  		char i = key [8];  		int networkIdx = (int)i - 48;  		if (networkIdx == addedNetwork) {  			string mac = null;  			string cap = "Network";  			string datakey = string.Format ("ethernet{0}.generatedAddress"' networkIdx);  			string vdev = string.Format ("ethernet{0}.virtualDev"' networkIdx);  			if (vmxcfg.ContainsKey (datakey))  				mac = vmxcfg [datakey];  			if (vmxcfg.ContainsKey (vdev))  				cap = vmxcfg [vdev];  			AddNetwork (env' vsId' lang' Guid.NewGuid ().ToString ()' cap' mac);  			addedNetwork++;  		}  	}  	else if (key.ToLower ().StartsWith ("displayname")) {  		vmxName = vmxcfg [key];  	}  	else if (key.ToLower ().StartsWith ("ide")) {  		char i = key [3];  		int ideIdx = (int)i - 48;  		if (ideIdx == addedIDE) {  			string[] parts = key.Split (new char[] {  				':''  				'.'  			});  			int port = 0;  			if (parts.Length == 3) {  				port = Convert.ToInt32 (parts [1]);  			}  			string devId = Guid.NewGuid ().ToString ();  			string diskId = Guid.NewGuid ().ToString ();  			AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  			string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  			string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  			bool addDiskImage = false;  			if (vmxcfg.ContainsKey (filekey))  				addDiskImage = true;  			if (vmxcfg.ContainsKey (devicekey)) {  				if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  					AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  					if (addDiskImage) {  						AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  						UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  					}  				}  				else {  					if (addDiskImage) {  						AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  					}  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  			AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  			addedIDE++;  		}  	}  	else if (key.ToLower ().StartsWith ("scsi")) {  		char i = key [4];  		int scsiIdx = (int)i - 48;  		if (scsiIdx == addedSCSI) {  			string[] parts = key.Split (new char[] {  				':''  				'.'  			});  			int port = 0;  			if (parts.Length == 3) {  				port = Convert.ToInt32 (parts [1]);  			}  			else {  				continue;  			}  			string devId = Guid.NewGuid ().ToString ();  			string diskId = Guid.NewGuid ().ToString ();  			AddController (env' vsId' DeviceType.SCSI' devId' port);  			string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  			string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  			bool addDiskImage = false;  			if (vmxcfg.ContainsKey (filekey))  				addDiskImage = true;  			if (vmxcfg.ContainsKey (devicekey)) {  				if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  					AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  					if (addDiskImage) {  						AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  						UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  					}  				}  				else {  					if (addDiskImage) {  						AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  					}  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  			AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  			addedSCSI++;  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: foreach (string key in vmxcfg.Keys) {  	if (key.ToLower ().StartsWith ("ethernet")) {  		char i = key [8];  		int networkIdx = (int)i - 48;  		if (networkIdx == addedNetwork) {  			string mac = null;  			string cap = "Network";  			string datakey = string.Format ("ethernet{0}.generatedAddress"' networkIdx);  			string vdev = string.Format ("ethernet{0}.virtualDev"' networkIdx);  			if (vmxcfg.ContainsKey (datakey))  				mac = vmxcfg [datakey];  			if (vmxcfg.ContainsKey (vdev))  				cap = vmxcfg [vdev];  			AddNetwork (env' vsId' lang' Guid.NewGuid ().ToString ()' cap' mac);  			addedNetwork++;  		}  	}  	else if (key.ToLower ().StartsWith ("displayname")) {  		vmxName = vmxcfg [key];  	}  	else if (key.ToLower ().StartsWith ("ide")) {  		char i = key [3];  		int ideIdx = (int)i - 48;  		if (ideIdx == addedIDE) {  			string[] parts = key.Split (new char[] {  				':''  				'.'  			});  			int port = 0;  			if (parts.Length == 3) {  				port = Convert.ToInt32 (parts [1]);  			}  			string devId = Guid.NewGuid ().ToString ();  			string diskId = Guid.NewGuid ().ToString ();  			AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  			string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  			string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  			bool addDiskImage = false;  			if (vmxcfg.ContainsKey (filekey))  				addDiskImage = true;  			if (vmxcfg.ContainsKey (devicekey)) {  				if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  					AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  					if (addDiskImage) {  						AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  						UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  					}  				}  				else {  					if (addDiskImage) {  						AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  					}  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  			AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  			addedIDE++;  		}  	}  	else if (key.ToLower ().StartsWith ("scsi")) {  		char i = key [4];  		int scsiIdx = (int)i - 48;  		if (scsiIdx == addedSCSI) {  			string[] parts = key.Split (new char[] {  				':''  				'.'  			});  			int port = 0;  			if (parts.Length == 3) {  				port = Convert.ToInt32 (parts [1]);  			}  			else {  				continue;  			}  			string devId = Guid.NewGuid ().ToString ();  			string diskId = Guid.NewGuid ().ToString ();  			AddController (env' vsId' DeviceType.SCSI' devId' port);  			string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  			string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  			bool addDiskImage = false;  			if (vmxcfg.ContainsKey (filekey))  				addDiskImage = true;  			if (vmxcfg.ContainsKey (devicekey)) {  				if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  					AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  					if (addDiskImage) {  						AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  						UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  					}  				}  				else {  					if (addDiskImage) {  						AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  					}  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  			AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  			addedSCSI++;  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: foreach (string key in vmxcfg.Keys) {  	if (key.ToLower ().StartsWith ("ethernet")) {  		char i = key [8];  		int networkIdx = (int)i - 48;  		if (networkIdx == addedNetwork) {  			string mac = null;  			string cap = "Network";  			string datakey = string.Format ("ethernet{0}.generatedAddress"' networkIdx);  			string vdev = string.Format ("ethernet{0}.virtualDev"' networkIdx);  			if (vmxcfg.ContainsKey (datakey))  				mac = vmxcfg [datakey];  			if (vmxcfg.ContainsKey (vdev))  				cap = vmxcfg [vdev];  			AddNetwork (env' vsId' lang' Guid.NewGuid ().ToString ()' cap' mac);  			addedNetwork++;  		}  	}  	else if (key.ToLower ().StartsWith ("displayname")) {  		vmxName = vmxcfg [key];  	}  	else if (key.ToLower ().StartsWith ("ide")) {  		char i = key [3];  		int ideIdx = (int)i - 48;  		if (ideIdx == addedIDE) {  			string[] parts = key.Split (new char[] {  				':''  				'.'  			});  			int port = 0;  			if (parts.Length == 3) {  				port = Convert.ToInt32 (parts [1]);  			}  			string devId = Guid.NewGuid ().ToString ();  			string diskId = Guid.NewGuid ().ToString ();  			AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  			string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  			string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  			bool addDiskImage = false;  			if (vmxcfg.ContainsKey (filekey))  				addDiskImage = true;  			if (vmxcfg.ContainsKey (devicekey)) {  				if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  					AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  					if (addDiskImage) {  						AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  						UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  					}  				}  				else {  					if (addDiskImage) {  						AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  					}  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  			AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  			addedIDE++;  		}  	}  	else if (key.ToLower ().StartsWith ("scsi")) {  		char i = key [4];  		int scsiIdx = (int)i - 48;  		if (scsiIdx == addedSCSI) {  			string[] parts = key.Split (new char[] {  				':''  				'.'  			});  			int port = 0;  			if (parts.Length == 3) {  				port = Convert.ToInt32 (parts [1]);  			}  			else {  				continue;  			}  			string devId = Guid.NewGuid ().ToString ();  			string diskId = Guid.NewGuid ().ToString ();  			AddController (env' vsId' DeviceType.SCSI' devId' port);  			string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  			string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  			bool addDiskImage = false;  			if (vmxcfg.ContainsKey (filekey))  				addDiskImage = true;  			if (vmxcfg.ContainsKey (devicekey)) {  				if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  					AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  					if (addDiskImage) {  						AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  						UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  					}  				}  				else {  					if (addDiskImage) {  						AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  					}  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  			AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  			addedSCSI++;  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("ethernet")) {  	char i = key [8];  	int networkIdx = (int)i - 48;  	if (networkIdx == addedNetwork) {  		string mac = null;  		string cap = "Network";  		string datakey = string.Format ("ethernet{0}.generatedAddress"' networkIdx);  		string vdev = string.Format ("ethernet{0}.virtualDev"' networkIdx);  		if (vmxcfg.ContainsKey (datakey))  			mac = vmxcfg [datakey];  		if (vmxcfg.ContainsKey (vdev))  			cap = vmxcfg [vdev];  		AddNetwork (env' vsId' lang' Guid.NewGuid ().ToString ()' cap' mac);  		addedNetwork++;  	}  }  else if (key.ToLower ().StartsWith ("displayname")) {  	vmxName = vmxcfg [key];  }  else if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("ethernet")) {  	char i = key [8];  	int networkIdx = (int)i - 48;  	if (networkIdx == addedNetwork) {  		string mac = null;  		string cap = "Network";  		string datakey = string.Format ("ethernet{0}.generatedAddress"' networkIdx);  		string vdev = string.Format ("ethernet{0}.virtualDev"' networkIdx);  		if (vmxcfg.ContainsKey (datakey))  			mac = vmxcfg [datakey];  		if (vmxcfg.ContainsKey (vdev))  			cap = vmxcfg [vdev];  		AddNetwork (env' vsId' lang' Guid.NewGuid ().ToString ()' cap' mac);  		addedNetwork++;  	}  }  else if (key.ToLower ().StartsWith ("displayname")) {  	vmxName = vmxcfg [key];  }  else if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("ethernet")) {  	char i = key [8];  	int networkIdx = (int)i - 48;  	if (networkIdx == addedNetwork) {  		string mac = null;  		string cap = "Network";  		string datakey = string.Format ("ethernet{0}.generatedAddress"' networkIdx);  		string vdev = string.Format ("ethernet{0}.virtualDev"' networkIdx);  		if (vmxcfg.ContainsKey (datakey))  			mac = vmxcfg [datakey];  		if (vmxcfg.ContainsKey (vdev))  			cap = vmxcfg [vdev];  		AddNetwork (env' vsId' lang' Guid.NewGuid ().ToString ()' cap' mac);  		addedNetwork++;  	}  }  else if (key.ToLower ().StartsWith ("displayname")) {  	vmxName = vmxcfg [key];  }  else if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("ethernet")) {  	char i = key [8];  	int networkIdx = (int)i - 48;  	if (networkIdx == addedNetwork) {  		string mac = null;  		string cap = "Network";  		string datakey = string.Format ("ethernet{0}.generatedAddress"' networkIdx);  		string vdev = string.Format ("ethernet{0}.virtualDev"' networkIdx);  		if (vmxcfg.ContainsKey (datakey))  			mac = vmxcfg [datakey];  		if (vmxcfg.ContainsKey (vdev))  			cap = vmxcfg [vdev];  		AddNetwork (env' vsId' lang' Guid.NewGuid ().ToString ()' cap' mac);  		addedNetwork++;  	}  }  else if (key.ToLower ().StartsWith ("displayname")) {  	vmxName = vmxcfg [key];  }  else if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("ethernet")) {  	char i = key [8];  	int networkIdx = (int)i - 48;  	if (networkIdx == addedNetwork) {  		string mac = null;  		string cap = "Network";  		string datakey = string.Format ("ethernet{0}.generatedAddress"' networkIdx);  		string vdev = string.Format ("ethernet{0}.virtualDev"' networkIdx);  		if (vmxcfg.ContainsKey (datakey))  			mac = vmxcfg [datakey];  		if (vmxcfg.ContainsKey (vdev))  			cap = vmxcfg [vdev];  		AddNetwork (env' vsId' lang' Guid.NewGuid ().ToString ()' cap' mac);  		addedNetwork++;  	}  }  else if (key.ToLower ().StartsWith ("displayname")) {  	vmxName = vmxcfg [key];  }  else if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("ethernet")) {  	char i = key [8];  	int networkIdx = (int)i - 48;  	if (networkIdx == addedNetwork) {  		string mac = null;  		string cap = "Network";  		string datakey = string.Format ("ethernet{0}.generatedAddress"' networkIdx);  		string vdev = string.Format ("ethernet{0}.virtualDev"' networkIdx);  		if (vmxcfg.ContainsKey (datakey))  			mac = vmxcfg [datakey];  		if (vmxcfg.ContainsKey (vdev))  			cap = vmxcfg [vdev];  		AddNetwork (env' vsId' lang' Guid.NewGuid ().ToString ()' cap' mac);  		addedNetwork++;  	}  }  else if (key.ToLower ().StartsWith ("displayname")) {  	vmxName = vmxcfg [key];  }  else if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("ethernet")) {  	char i = key [8];  	int networkIdx = (int)i - 48;  	if (networkIdx == addedNetwork) {  		string mac = null;  		string cap = "Network";  		string datakey = string.Format ("ethernet{0}.generatedAddress"' networkIdx);  		string vdev = string.Format ("ethernet{0}.virtualDev"' networkIdx);  		if (vmxcfg.ContainsKey (datakey))  			mac = vmxcfg [datakey];  		if (vmxcfg.ContainsKey (vdev))  			cap = vmxcfg [vdev];  		AddNetwork (env' vsId' lang' Guid.NewGuid ().ToString ()' cap' mac);  		addedNetwork++;  	}  }  else if (key.ToLower ().StartsWith ("displayname")) {  	vmxName = vmxcfg [key];  }  else if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("ethernet")) {  	char i = key [8];  	int networkIdx = (int)i - 48;  	if (networkIdx == addedNetwork) {  		string mac = null;  		string cap = "Network";  		string datakey = string.Format ("ethernet{0}.generatedAddress"' networkIdx);  		string vdev = string.Format ("ethernet{0}.virtualDev"' networkIdx);  		if (vmxcfg.ContainsKey (datakey))  			mac = vmxcfg [datakey];  		if (vmxcfg.ContainsKey (vdev))  			cap = vmxcfg [vdev];  		AddNetwork (env' vsId' lang' Guid.NewGuid ().ToString ()' cap' mac);  		addedNetwork++;  	}  }  else if (key.ToLower ().StartsWith ("displayname")) {  	vmxName = vmxcfg [key];  }  else if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("displayname")) {  	vmxName = vmxcfg [key];  }  else if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("displayname")) {  	vmxName = vmxcfg [key];  }  else if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("displayname")) {  	vmxName = vmxcfg [key];  }  else if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("displayname")) {  	vmxName = vmxcfg [key];  }  else if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("displayname")) {  	vmxName = vmxcfg [key];  }  else if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("displayname")) {  	vmxName = vmxcfg [key];  }  else if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("ide")) {  	char i = key [3];  	int ideIdx = (int)i - 48;  	if (ideIdx == addedIDE) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  		string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  		string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedIDE++;  	}  }  else if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (ideIdx == addedIDE) {  	string[] parts = key.Split (new char[] {  		':''  		'.'  	});  	int port = 0;  	if (parts.Length == 3) {  		port = Convert.ToInt32 (parts [1]);  	}  	string devId = Guid.NewGuid ().ToString ();  	string diskId = Guid.NewGuid ().ToString ();  	AddController (env' vsId' DeviceType.IDE' devId' ideIdx);  	string filekey = string.Format ("ide{0}:{1}.fileName"' ideIdx' port);  	string devicekey = string.Format ("ide{0}:{1}.deviceType"' ideIdx' port);  	bool addDiskImage = false;  	if (vmxcfg.ContainsKey (filekey))  		addDiskImage = true;  	if (vmxcfg.ContainsKey (devicekey)) {  		if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  			AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  			if (addDiskImage) {  				AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  				UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  	}  	else {  		if (addDiskImage) {  			AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  		}  	}  	AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  	addedIDE++;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (parts.Length == 3) {  	port = Convert.ToInt32 (parts [1]);  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (key.ToLower ().StartsWith ("scsi")) {  	char i = key [4];  	int scsiIdx = (int)i - 48;  	if (scsiIdx == addedSCSI) {  		string[] parts = key.Split (new char[] {  			':''  			'.'  		});  		int port = 0;  		if (parts.Length == 3) {  			port = Convert.ToInt32 (parts [1]);  		}  		else {  			continue;  		}  		string devId = Guid.NewGuid ().ToString ();  		string diskId = Guid.NewGuid ().ToString ();  		AddController (env' vsId' DeviceType.SCSI' devId' port);  		string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  		string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  		bool addDiskImage = false;  		if (vmxcfg.ContainsKey (filekey))  			addDiskImage = true;  		if (vmxcfg.ContainsKey (devicekey)) {  			if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  				AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				if (addDiskImage) {  					AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  					UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  				}  			}  			else {  				if (addDiskImage) {  					AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  				}  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  		AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  		addedSCSI++;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (scsiIdx == addedSCSI) {  	string[] parts = key.Split (new char[] {  		':''  		'.'  	});  	int port = 0;  	if (parts.Length == 3) {  		port = Convert.ToInt32 (parts [1]);  	}  	else {  		continue;  	}  	string devId = Guid.NewGuid ().ToString ();  	string diskId = Guid.NewGuid ().ToString ();  	AddController (env' vsId' DeviceType.SCSI' devId' port);  	string filekey = string.Format ("scsi{0}:{1}.fileName"' scsiIdx' port);  	string devicekey = string.Format ("scsi{0}:{1}.deviceType"' scsiIdx' port);  	bool addDiskImage = false;  	if (vmxcfg.ContainsKey (filekey))  		addDiskImage = true;  	if (vmxcfg.ContainsKey (devicekey)) {  		if (vmxcfg [devicekey].ToLower ().StartsWith ("cdrom")) {  			AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  			if (addDiskImage) {  				AddFileReference (env' lang' Path.GetFileName (vmxcfg [filekey])' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  				UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  			}  		}  		else {  			if (addDiskImage) {  				AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  			}  		}  	}  	else {  		if (addDiskImage) {  			AddDisk (env' vsId' diskId' lang' Path.GetFileName (vmxcfg [filekey])' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  		}  	}  	AddDeviceToController (env' vsId' diskId' devId' Convert.ToString (port));  	addedSCSI++;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The following statement contains a magic number: if (parts.Length == 3) {  	port = Convert.ToInt32 (parts [1]);  }  else {  	continue;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The following statement contains a magic number: foreach (XenMember n in vmstruct.xenmember) {  	//  	// Currently these are the only values we care about.  	//  	if (n.xenname.ToLower ().Equals ("uuid")) {  		UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemIdentifier"' (string)n.xenvalue);  	}  	if (n.xenname.ToLower ().Equals ("name_label")) {  		if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  			UpdateVirtualSystemName (env' vsId' lang' (string)n.xenvalue);  			UpdateVirtualSystemSettingData (env' vsId' "ElementName"' (string)n.xenvalue);  			UpdateVirtualSystemSettingData (env' vsId' "Caption"' _ovfrm.GetString ("CONVERT_APP_NAME"));  		}  	}  	else if (n.xenname.ToLower ().Equals ("memory_static_max")) {  		if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  			UInt64 memory = Convert.ToUInt64 (n.xenvalue) / MB;  			SetMemory (env' vsId' memory' "MB");  		}  	}  	else if (n.xenname.ToLower ().Equals ("vcpus_max")) {  		if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  			UInt64 cpus = Convert.ToUInt64 (n.xenvalue);  			SetCPUs (env' vsId' cpus);  		}  	}  	else if (n.xenname.ToLower ().Equals ("pv_bootloader") || n.xenname.ToLower ().Equals ("pv_kernel") || n.xenname.ToLower ().Equals ("pv_ramdisk") || n.xenname.ToLower ().Equals ("pv_args") || n.xenname.ToLower ().Equals ("pv_bootloader_args") || n.xenname.ToLower ().Equals ("pv_legacy_args") || n.xenname.ToLower ().Equals ("hvm_boot_policy") || n.xenname.ToLower ().Equals ("hvm_shadow_multiplier")) {  		if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  			if (n.xenname.ToLower ().StartsWith ("pv")) {  				PVvalue++;  			}  			if (n.xenname.ToLower ().StartsWith ("hvm_boot")) {  				PVvalue--;  			}  			AddOtherSystemSettingData (env' vsId' lang' n.xenname' (string)n.xenvalue' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION"));  		}  	}  	else if (n.xenname.ToLower ().Equals ("hvm_boot_params")) {  		if (n.xenvalue != null && n.xenvalue is XenStruct && ((XenStruct)n.xenvalue).xenmember != null) {  			string bootorder = "dc";  			foreach (XenMember xm in ((XenStruct)n.xenvalue).xenmember) {  				PVvalue--;  				if (xm.xenname.ToLower ().Equals ("order")) {  					if (xm.xenvalue != null && xm.xenvalue is string && ((string)xm.xenvalue).Length > 0) {  						bootorder = (string)xm.xenvalue;  					}  				}  			}  			AddOtherSystemSettingData (env' vsId' lang' n.xenname' bootorder' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION"));  		}  	}  	else if (n.xenname.ToLower ().Equals ("platform")) {  		if (n.xenvalue != null && n.xenvalue is XenStruct && ((XenStruct)n.xenvalue).xenmember != null) {  			StringBuilder p = new StringBuilder ();  			foreach (XenMember xm in ((XenStruct)n.xenvalue).xenmember) {  				if (xm.xenvalue != null && xm.xenvalue is string && ((string)xm.xenvalue).Length > 0) {  					p.AppendFormat ("{0}={1}; "' xm.xenname' (string)xm.xenvalue);  				}  			}  			AddOtherSystemSettingData (env' vsId' lang' n.xenname' p.ToString ().Trim ()' _ovfrm.GetString ("XENSERVER_PLATFORM_DESCRIPTION"));  		}  	}  	else if (n.xenname.ToLower ().Equals ("other_config")) {  		// Ignored' why you say? Because I haven't found one that is 'required' to reproduce the vm' yet.                              	}  	else if (n.xenname.ToLower ().Equals ("domarch")) {  		// Can't depend on a value here but we need to set it to work correctly.  		if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  			string svalue = (string)n.xenvalue;  			if (svalue.Equals ("hvm")) {  				PVvalue = -10;  			}  		}  		if (PVvalue < 0) {  			UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemType"' "hvm-3.0-unknown");  		}  		else {  			UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemType"' "xen-3.0-unknown");  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The following statement contains a magic number: if (n.xenname.ToLower ().Equals ("name_label")) {  	if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  		UpdateVirtualSystemName (env' vsId' lang' (string)n.xenvalue);  		UpdateVirtualSystemSettingData (env' vsId' "ElementName"' (string)n.xenvalue);  		UpdateVirtualSystemSettingData (env' vsId' "Caption"' _ovfrm.GetString ("CONVERT_APP_NAME"));  	}  }  else if (n.xenname.ToLower ().Equals ("memory_static_max")) {  	if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  		UInt64 memory = Convert.ToUInt64 (n.xenvalue) / MB;  		SetMemory (env' vsId' memory' "MB");  	}  }  else if (n.xenname.ToLower ().Equals ("vcpus_max")) {  	if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  		UInt64 cpus = Convert.ToUInt64 (n.xenvalue);  		SetCPUs (env' vsId' cpus);  	}  }  else if (n.xenname.ToLower ().Equals ("pv_bootloader") || n.xenname.ToLower ().Equals ("pv_kernel") || n.xenname.ToLower ().Equals ("pv_ramdisk") || n.xenname.ToLower ().Equals ("pv_args") || n.xenname.ToLower ().Equals ("pv_bootloader_args") || n.xenname.ToLower ().Equals ("pv_legacy_args") || n.xenname.ToLower ().Equals ("hvm_boot_policy") || n.xenname.ToLower ().Equals ("hvm_shadow_multiplier")) {  	if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  		if (n.xenname.ToLower ().StartsWith ("pv")) {  			PVvalue++;  		}  		if (n.xenname.ToLower ().StartsWith ("hvm_boot")) {  			PVvalue--;  		}  		AddOtherSystemSettingData (env' vsId' lang' n.xenname' (string)n.xenvalue' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION"));  	}  }  else if (n.xenname.ToLower ().Equals ("hvm_boot_params")) {  	if (n.xenvalue != null && n.xenvalue is XenStruct && ((XenStruct)n.xenvalue).xenmember != null) {  		string bootorder = "dc";  		foreach (XenMember xm in ((XenStruct)n.xenvalue).xenmember) {  			PVvalue--;  			if (xm.xenname.ToLower ().Equals ("order")) {  				if (xm.xenvalue != null && xm.xenvalue is string && ((string)xm.xenvalue).Length > 0) {  					bootorder = (string)xm.xenvalue;  				}  			}  		}  		AddOtherSystemSettingData (env' vsId' lang' n.xenname' bootorder' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION"));  	}  }  else if (n.xenname.ToLower ().Equals ("platform")) {  	if (n.xenvalue != null && n.xenvalue is XenStruct && ((XenStruct)n.xenvalue).xenmember != null) {  		StringBuilder p = new StringBuilder ();  		foreach (XenMember xm in ((XenStruct)n.xenvalue).xenmember) {  			if (xm.xenvalue != null && xm.xenvalue is string && ((string)xm.xenvalue).Length > 0) {  				p.AppendFormat ("{0}={1}; "' xm.xenname' (string)xm.xenvalue);  			}  		}  		AddOtherSystemSettingData (env' vsId' lang' n.xenname' p.ToString ().Trim ()' _ovfrm.GetString ("XENSERVER_PLATFORM_DESCRIPTION"));  	}  }  else if (n.xenname.ToLower ().Equals ("other_config")) {  	// Ignored' why you say? Because I haven't found one that is 'required' to reproduce the vm' yet.                              }  else if (n.xenname.ToLower ().Equals ("domarch")) {  	// Can't depend on a value here but we need to set it to work correctly.  	if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  		string svalue = (string)n.xenvalue;  		if (svalue.Equals ("hvm")) {  			PVvalue = -10;  		}  	}  	if (PVvalue < 0) {  		UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemType"' "hvm-3.0-unknown");  	}  	else {  		UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemType"' "xen-3.0-unknown");  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The following statement contains a magic number: if (n.xenname.ToLower ().Equals ("memory_static_max")) {  	if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  		UInt64 memory = Convert.ToUInt64 (n.xenvalue) / MB;  		SetMemory (env' vsId' memory' "MB");  	}  }  else if (n.xenname.ToLower ().Equals ("vcpus_max")) {  	if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  		UInt64 cpus = Convert.ToUInt64 (n.xenvalue);  		SetCPUs (env' vsId' cpus);  	}  }  else if (n.xenname.ToLower ().Equals ("pv_bootloader") || n.xenname.ToLower ().Equals ("pv_kernel") || n.xenname.ToLower ().Equals ("pv_ramdisk") || n.xenname.ToLower ().Equals ("pv_args") || n.xenname.ToLower ().Equals ("pv_bootloader_args") || n.xenname.ToLower ().Equals ("pv_legacy_args") || n.xenname.ToLower ().Equals ("hvm_boot_policy") || n.xenname.ToLower ().Equals ("hvm_shadow_multiplier")) {  	if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  		if (n.xenname.ToLower ().StartsWith ("pv")) {  			PVvalue++;  		}  		if (n.xenname.ToLower ().StartsWith ("hvm_boot")) {  			PVvalue--;  		}  		AddOtherSystemSettingData (env' vsId' lang' n.xenname' (string)n.xenvalue' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION"));  	}  }  else if (n.xenname.ToLower ().Equals ("hvm_boot_params")) {  	if (n.xenvalue != null && n.xenvalue is XenStruct && ((XenStruct)n.xenvalue).xenmember != null) {  		string bootorder = "dc";  		foreach (XenMember xm in ((XenStruct)n.xenvalue).xenmember) {  			PVvalue--;  			if (xm.xenname.ToLower ().Equals ("order")) {  				if (xm.xenvalue != null && xm.xenvalue is string && ((string)xm.xenvalue).Length > 0) {  					bootorder = (string)xm.xenvalue;  				}  			}  		}  		AddOtherSystemSettingData (env' vsId' lang' n.xenname' bootorder' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION"));  	}  }  else if (n.xenname.ToLower ().Equals ("platform")) {  	if (n.xenvalue != null && n.xenvalue is XenStruct && ((XenStruct)n.xenvalue).xenmember != null) {  		StringBuilder p = new StringBuilder ();  		foreach (XenMember xm in ((XenStruct)n.xenvalue).xenmember) {  			if (xm.xenvalue != null && xm.xenvalue is string && ((string)xm.xenvalue).Length > 0) {  				p.AppendFormat ("{0}={1}; "' xm.xenname' (string)xm.xenvalue);  			}  		}  		AddOtherSystemSettingData (env' vsId' lang' n.xenname' p.ToString ().Trim ()' _ovfrm.GetString ("XENSERVER_PLATFORM_DESCRIPTION"));  	}  }  else if (n.xenname.ToLower ().Equals ("other_config")) {  	// Ignored' why you say? Because I haven't found one that is 'required' to reproduce the vm' yet.                              }  else if (n.xenname.ToLower ().Equals ("domarch")) {  	// Can't depend on a value here but we need to set it to work correctly.  	if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  		string svalue = (string)n.xenvalue;  		if (svalue.Equals ("hvm")) {  			PVvalue = -10;  		}  	}  	if (PVvalue < 0) {  		UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemType"' "hvm-3.0-unknown");  	}  	else {  		UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemType"' "xen-3.0-unknown");  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The following statement contains a magic number: if (n.xenname.ToLower ().Equals ("vcpus_max")) {  	if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  		UInt64 cpus = Convert.ToUInt64 (n.xenvalue);  		SetCPUs (env' vsId' cpus);  	}  }  else if (n.xenname.ToLower ().Equals ("pv_bootloader") || n.xenname.ToLower ().Equals ("pv_kernel") || n.xenname.ToLower ().Equals ("pv_ramdisk") || n.xenname.ToLower ().Equals ("pv_args") || n.xenname.ToLower ().Equals ("pv_bootloader_args") || n.xenname.ToLower ().Equals ("pv_legacy_args") || n.xenname.ToLower ().Equals ("hvm_boot_policy") || n.xenname.ToLower ().Equals ("hvm_shadow_multiplier")) {  	if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  		if (n.xenname.ToLower ().StartsWith ("pv")) {  			PVvalue++;  		}  		if (n.xenname.ToLower ().StartsWith ("hvm_boot")) {  			PVvalue--;  		}  		AddOtherSystemSettingData (env' vsId' lang' n.xenname' (string)n.xenvalue' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION"));  	}  }  else if (n.xenname.ToLower ().Equals ("hvm_boot_params")) {  	if (n.xenvalue != null && n.xenvalue is XenStruct && ((XenStruct)n.xenvalue).xenmember != null) {  		string bootorder = "dc";  		foreach (XenMember xm in ((XenStruct)n.xenvalue).xenmember) {  			PVvalue--;  			if (xm.xenname.ToLower ().Equals ("order")) {  				if (xm.xenvalue != null && xm.xenvalue is string && ((string)xm.xenvalue).Length > 0) {  					bootorder = (string)xm.xenvalue;  				}  			}  		}  		AddOtherSystemSettingData (env' vsId' lang' n.xenname' bootorder' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION"));  	}  }  else if (n.xenname.ToLower ().Equals ("platform")) {  	if (n.xenvalue != null && n.xenvalue is XenStruct && ((XenStruct)n.xenvalue).xenmember != null) {  		StringBuilder p = new StringBuilder ();  		foreach (XenMember xm in ((XenStruct)n.xenvalue).xenmember) {  			if (xm.xenvalue != null && xm.xenvalue is string && ((string)xm.xenvalue).Length > 0) {  				p.AppendFormat ("{0}={1}; "' xm.xenname' (string)xm.xenvalue);  			}  		}  		AddOtherSystemSettingData (env' vsId' lang' n.xenname' p.ToString ().Trim ()' _ovfrm.GetString ("XENSERVER_PLATFORM_DESCRIPTION"));  	}  }  else if (n.xenname.ToLower ().Equals ("other_config")) {  	// Ignored' why you say? Because I haven't found one that is 'required' to reproduce the vm' yet.                              }  else if (n.xenname.ToLower ().Equals ("domarch")) {  	// Can't depend on a value here but we need to set it to work correctly.  	if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  		string svalue = (string)n.xenvalue;  		if (svalue.Equals ("hvm")) {  			PVvalue = -10;  		}  	}  	if (PVvalue < 0) {  		UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemType"' "hvm-3.0-unknown");  	}  	else {  		UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemType"' "xen-3.0-unknown");  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The following statement contains a magic number: if (n.xenname.ToLower ().Equals ("pv_bootloader") || n.xenname.ToLower ().Equals ("pv_kernel") || n.xenname.ToLower ().Equals ("pv_ramdisk") || n.xenname.ToLower ().Equals ("pv_args") || n.xenname.ToLower ().Equals ("pv_bootloader_args") || n.xenname.ToLower ().Equals ("pv_legacy_args") || n.xenname.ToLower ().Equals ("hvm_boot_policy") || n.xenname.ToLower ().Equals ("hvm_shadow_multiplier")) {  	if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  		if (n.xenname.ToLower ().StartsWith ("pv")) {  			PVvalue++;  		}  		if (n.xenname.ToLower ().StartsWith ("hvm_boot")) {  			PVvalue--;  		}  		AddOtherSystemSettingData (env' vsId' lang' n.xenname' (string)n.xenvalue' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION"));  	}  }  else if (n.xenname.ToLower ().Equals ("hvm_boot_params")) {  	if (n.xenvalue != null && n.xenvalue is XenStruct && ((XenStruct)n.xenvalue).xenmember != null) {  		string bootorder = "dc";  		foreach (XenMember xm in ((XenStruct)n.xenvalue).xenmember) {  			PVvalue--;  			if (xm.xenname.ToLower ().Equals ("order")) {  				if (xm.xenvalue != null && xm.xenvalue is string && ((string)xm.xenvalue).Length > 0) {  					bootorder = (string)xm.xenvalue;  				}  			}  		}  		AddOtherSystemSettingData (env' vsId' lang' n.xenname' bootorder' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION"));  	}  }  else if (n.xenname.ToLower ().Equals ("platform")) {  	if (n.xenvalue != null && n.xenvalue is XenStruct && ((XenStruct)n.xenvalue).xenmember != null) {  		StringBuilder p = new StringBuilder ();  		foreach (XenMember xm in ((XenStruct)n.xenvalue).xenmember) {  			if (xm.xenvalue != null && xm.xenvalue is string && ((string)xm.xenvalue).Length > 0) {  				p.AppendFormat ("{0}={1}; "' xm.xenname' (string)xm.xenvalue);  			}  		}  		AddOtherSystemSettingData (env' vsId' lang' n.xenname' p.ToString ().Trim ()' _ovfrm.GetString ("XENSERVER_PLATFORM_DESCRIPTION"));  	}  }  else if (n.xenname.ToLower ().Equals ("other_config")) {  	// Ignored' why you say? Because I haven't found one that is 'required' to reproduce the vm' yet.                              }  else if (n.xenname.ToLower ().Equals ("domarch")) {  	// Can't depend on a value here but we need to set it to work correctly.  	if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  		string svalue = (string)n.xenvalue;  		if (svalue.Equals ("hvm")) {  			PVvalue = -10;  		}  	}  	if (PVvalue < 0) {  		UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemType"' "hvm-3.0-unknown");  	}  	else {  		UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemType"' "xen-3.0-unknown");  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The following statement contains a magic number: if (n.xenname.ToLower ().Equals ("hvm_boot_params")) {  	if (n.xenvalue != null && n.xenvalue is XenStruct && ((XenStruct)n.xenvalue).xenmember != null) {  		string bootorder = "dc";  		foreach (XenMember xm in ((XenStruct)n.xenvalue).xenmember) {  			PVvalue--;  			if (xm.xenname.ToLower ().Equals ("order")) {  				if (xm.xenvalue != null && xm.xenvalue is string && ((string)xm.xenvalue).Length > 0) {  					bootorder = (string)xm.xenvalue;  				}  			}  		}  		AddOtherSystemSettingData (env' vsId' lang' n.xenname' bootorder' _ovfrm.GetString ("XENSERVER_SPECIFIC_DESCRIPTION"));  	}  }  else if (n.xenname.ToLower ().Equals ("platform")) {  	if (n.xenvalue != null && n.xenvalue is XenStruct && ((XenStruct)n.xenvalue).xenmember != null) {  		StringBuilder p = new StringBuilder ();  		foreach (XenMember xm in ((XenStruct)n.xenvalue).xenmember) {  			if (xm.xenvalue != null && xm.xenvalue is string && ((string)xm.xenvalue).Length > 0) {  				p.AppendFormat ("{0}={1}; "' xm.xenname' (string)xm.xenvalue);  			}  		}  		AddOtherSystemSettingData (env' vsId' lang' n.xenname' p.ToString ().Trim ()' _ovfrm.GetString ("XENSERVER_PLATFORM_DESCRIPTION"));  	}  }  else if (n.xenname.ToLower ().Equals ("other_config")) {  	// Ignored' why you say? Because I haven't found one that is 'required' to reproduce the vm' yet.                              }  else if (n.xenname.ToLower ().Equals ("domarch")) {  	// Can't depend on a value here but we need to set it to work correctly.  	if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  		string svalue = (string)n.xenvalue;  		if (svalue.Equals ("hvm")) {  			PVvalue = -10;  		}  	}  	if (PVvalue < 0) {  		UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemType"' "hvm-3.0-unknown");  	}  	else {  		UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemType"' "xen-3.0-unknown");  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The following statement contains a magic number: if (n.xenname.ToLower ().Equals ("platform")) {  	if (n.xenvalue != null && n.xenvalue is XenStruct && ((XenStruct)n.xenvalue).xenmember != null) {  		StringBuilder p = new StringBuilder ();  		foreach (XenMember xm in ((XenStruct)n.xenvalue).xenmember) {  			if (xm.xenvalue != null && xm.xenvalue is string && ((string)xm.xenvalue).Length > 0) {  				p.AppendFormat ("{0}={1}; "' xm.xenname' (string)xm.xenvalue);  			}  		}  		AddOtherSystemSettingData (env' vsId' lang' n.xenname' p.ToString ().Trim ()' _ovfrm.GetString ("XENSERVER_PLATFORM_DESCRIPTION"));  	}  }  else if (n.xenname.ToLower ().Equals ("other_config")) {  	// Ignored' why you say? Because I haven't found one that is 'required' to reproduce the vm' yet.                              }  else if (n.xenname.ToLower ().Equals ("domarch")) {  	// Can't depend on a value here but we need to set it to work correctly.  	if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  		string svalue = (string)n.xenvalue;  		if (svalue.Equals ("hvm")) {  			PVvalue = -10;  		}  	}  	if (PVvalue < 0) {  		UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemType"' "hvm-3.0-unknown");  	}  	else {  		UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemType"' "xen-3.0-unknown");  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The following statement contains a magic number: if (n.xenname.ToLower ().Equals ("other_config")) {  	// Ignored' why you say? Because I haven't found one that is 'required' to reproduce the vm' yet.                              }  else if (n.xenname.ToLower ().Equals ("domarch")) {  	// Can't depend on a value here but we need to set it to work correctly.  	if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  		string svalue = (string)n.xenvalue;  		if (svalue.Equals ("hvm")) {  			PVvalue = -10;  		}  	}  	if (PVvalue < 0) {  		UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemType"' "hvm-3.0-unknown");  	}  	else {  		UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemType"' "xen-3.0-unknown");  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The following statement contains a magic number: if (n.xenname.ToLower ().Equals ("domarch")) {  	// Can't depend on a value here but we need to set it to work correctly.  	if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  		string svalue = (string)n.xenvalue;  		if (svalue.Equals ("hvm")) {  			PVvalue = -10;  		}  	}  	if (PVvalue < 0) {  		UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemType"' "hvm-3.0-unknown");  	}  	else {  		UpdateVirtualSystemSettingData (env' vsId' "VirtualSystemType"' "xen-3.0-unknown");  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The following statement contains a magic number: if (n.xenvalue != null && n.xenvalue is string && ((string)n.xenvalue).Length > 0) {  	string svalue = (string)n.xenvalue;  	if (svalue.Equals ("hvm")) {  		PVvalue = -10;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The following statement contains a magic number: if (svalue.Equals ("hvm")) {  	PVvalue = -10;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VM,The following statement contains a magic number: PVvalue = -10;  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (Win32_NetworkAdapter != null) {  	foreach (ManagementObject mo in Win32_NetworkAdapter) {  		// Only get the physical adapters' not logical (which there are numerous)  		//if ((bool)mo["PhysicalAdapter"])  		bool addThisNetwork = false;  		string macaddress = null;  		string description = null;  		//  		// setPriority is used to determine the description  		// 0 = unset  		// 1 highest priority  		// 2 next  		// 3 next  		// ...  		//  		int setPriority = 0;  		foreach (PropertyData pd in mo.Properties) {  			if (pd.Name != null && pd.Name.Length > 0) {  				if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  					macaddress = (string)pd.Value;  				}  				else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  					description = (string)pd.Value;  					setPriority = 1;  				}  				else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  					if (setPriority == 0 || setPriority > 2) {  						description = (string)pd.Value;  						setPriority = 2;  					}  				}  				else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  					if (setPriority == 0 || setPriority > 3) {  						description = (string)pd.Value;  						setPriority = 3;  					}  				}  				// Below is trying to figure out if this is a Network Connection that  				// is to be exported/defined.  				// The issue is WMI has different value sets for different types of hardware  				// such as hardware as we know it... pci ethernet  				// or blade style' which WMI gives a different result.  				// WAN/RAS connections.. etc.  				// ANY one of the values can set this to true:  				//      netconnectionstatus  				//      pnpdeviceid  				//      physicaladapter  				//  				else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  					if ((UInt16)pd.Value == 0x2) {  						addThisNetwork = true;  					}  				}  				else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  					if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  						addThisNetwork = true;  					}  				}  				else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  					addThisNetwork = (bool)pd.Value;  				}  			}  		}  		if (addThisNetwork) {  			AddNetwork (ovfEnv' vsId' lang' Guid.NewGuid ().ToString ()' description' macaddress);  		}  	}  }  else {  	log.Warn ("No networks defined' If a network interface is required' the administrator will need to add it after import of OVF/OVA Package.");  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (Win32_NetworkAdapter != null) {  	foreach (ManagementObject mo in Win32_NetworkAdapter) {  		// Only get the physical adapters' not logical (which there are numerous)  		//if ((bool)mo["PhysicalAdapter"])  		bool addThisNetwork = false;  		string macaddress = null;  		string description = null;  		//  		// setPriority is used to determine the description  		// 0 = unset  		// 1 highest priority  		// 2 next  		// 3 next  		// ...  		//  		int setPriority = 0;  		foreach (PropertyData pd in mo.Properties) {  			if (pd.Name != null && pd.Name.Length > 0) {  				if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  					macaddress = (string)pd.Value;  				}  				else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  					description = (string)pd.Value;  					setPriority = 1;  				}  				else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  					if (setPriority == 0 || setPriority > 2) {  						description = (string)pd.Value;  						setPriority = 2;  					}  				}  				else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  					if (setPriority == 0 || setPriority > 3) {  						description = (string)pd.Value;  						setPriority = 3;  					}  				}  				// Below is trying to figure out if this is a Network Connection that  				// is to be exported/defined.  				// The issue is WMI has different value sets for different types of hardware  				// such as hardware as we know it... pci ethernet  				// or blade style' which WMI gives a different result.  				// WAN/RAS connections.. etc.  				// ANY one of the values can set this to true:  				//      netconnectionstatus  				//      pnpdeviceid  				//      physicaladapter  				//  				else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  					if ((UInt16)pd.Value == 0x2) {  						addThisNetwork = true;  					}  				}  				else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  					if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  						addThisNetwork = true;  					}  				}  				else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  					addThisNetwork = (bool)pd.Value;  				}  			}  		}  		if (addThisNetwork) {  			AddNetwork (ovfEnv' vsId' lang' Guid.NewGuid ().ToString ()' description' macaddress);  		}  	}  }  else {  	log.Warn ("No networks defined' If a network interface is required' the administrator will need to add it after import of OVF/OVA Package.");  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (Win32_NetworkAdapter != null) {  	foreach (ManagementObject mo in Win32_NetworkAdapter) {  		// Only get the physical adapters' not logical (which there are numerous)  		//if ((bool)mo["PhysicalAdapter"])  		bool addThisNetwork = false;  		string macaddress = null;  		string description = null;  		//  		// setPriority is used to determine the description  		// 0 = unset  		// 1 highest priority  		// 2 next  		// 3 next  		// ...  		//  		int setPriority = 0;  		foreach (PropertyData pd in mo.Properties) {  			if (pd.Name != null && pd.Name.Length > 0) {  				if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  					macaddress = (string)pd.Value;  				}  				else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  					description = (string)pd.Value;  					setPriority = 1;  				}  				else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  					if (setPriority == 0 || setPriority > 2) {  						description = (string)pd.Value;  						setPriority = 2;  					}  				}  				else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  					if (setPriority == 0 || setPriority > 3) {  						description = (string)pd.Value;  						setPriority = 3;  					}  				}  				// Below is trying to figure out if this is a Network Connection that  				// is to be exported/defined.  				// The issue is WMI has different value sets for different types of hardware  				// such as hardware as we know it... pci ethernet  				// or blade style' which WMI gives a different result.  				// WAN/RAS connections.. etc.  				// ANY one of the values can set this to true:  				//      netconnectionstatus  				//      pnpdeviceid  				//      physicaladapter  				//  				else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  					if ((UInt16)pd.Value == 0x2) {  						addThisNetwork = true;  					}  				}  				else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  					if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  						addThisNetwork = true;  					}  				}  				else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  					addThisNetwork = (bool)pd.Value;  				}  			}  		}  		if (addThisNetwork) {  			AddNetwork (ovfEnv' vsId' lang' Guid.NewGuid ().ToString ()' description' macaddress);  		}  	}  }  else {  	log.Warn ("No networks defined' If a network interface is required' the administrator will need to add it after import of OVF/OVA Package.");  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (Win32_NetworkAdapter != null) {  	foreach (ManagementObject mo in Win32_NetworkAdapter) {  		// Only get the physical adapters' not logical (which there are numerous)  		//if ((bool)mo["PhysicalAdapter"])  		bool addThisNetwork = false;  		string macaddress = null;  		string description = null;  		//  		// setPriority is used to determine the description  		// 0 = unset  		// 1 highest priority  		// 2 next  		// 3 next  		// ...  		//  		int setPriority = 0;  		foreach (PropertyData pd in mo.Properties) {  			if (pd.Name != null && pd.Name.Length > 0) {  				if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  					macaddress = (string)pd.Value;  				}  				else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  					description = (string)pd.Value;  					setPriority = 1;  				}  				else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  					if (setPriority == 0 || setPriority > 2) {  						description = (string)pd.Value;  						setPriority = 2;  					}  				}  				else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  					if (setPriority == 0 || setPriority > 3) {  						description = (string)pd.Value;  						setPriority = 3;  					}  				}  				// Below is trying to figure out if this is a Network Connection that  				// is to be exported/defined.  				// The issue is WMI has different value sets for different types of hardware  				// such as hardware as we know it... pci ethernet  				// or blade style' which WMI gives a different result.  				// WAN/RAS connections.. etc.  				// ANY one of the values can set this to true:  				//      netconnectionstatus  				//      pnpdeviceid  				//      physicaladapter  				//  				else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  					if ((UInt16)pd.Value == 0x2) {  						addThisNetwork = true;  					}  				}  				else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  					if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  						addThisNetwork = true;  					}  				}  				else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  					addThisNetwork = (bool)pd.Value;  				}  			}  		}  		if (addThisNetwork) {  			AddNetwork (ovfEnv' vsId' lang' Guid.NewGuid ().ToString ()' description' macaddress);  		}  	}  }  else {  	log.Warn ("No networks defined' If a network interface is required' the administrator will need to add it after import of OVF/OVA Package.");  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: foreach (ManagementObject mo in Win32_NetworkAdapter) {  	// Only get the physical adapters' not logical (which there are numerous)  	//if ((bool)mo["PhysicalAdapter"])  	bool addThisNetwork = false;  	string macaddress = null;  	string description = null;  	//  	// setPriority is used to determine the description  	// 0 = unset  	// 1 highest priority  	// 2 next  	// 3 next  	// ...  	//  	int setPriority = 0;  	foreach (PropertyData pd in mo.Properties) {  		if (pd.Name != null && pd.Name.Length > 0) {  			if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  				macaddress = (string)pd.Value;  			}  			else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  				description = (string)pd.Value;  				setPriority = 1;  			}  			else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  				if (setPriority == 0 || setPriority > 2) {  					description = (string)pd.Value;  					setPriority = 2;  				}  			}  			else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  				if (setPriority == 0 || setPriority > 3) {  					description = (string)pd.Value;  					setPriority = 3;  				}  			}  			// Below is trying to figure out if this is a Network Connection that  			// is to be exported/defined.  			// The issue is WMI has different value sets for different types of hardware  			// such as hardware as we know it... pci ethernet  			// or blade style' which WMI gives a different result.  			// WAN/RAS connections.. etc.  			// ANY one of the values can set this to true:  			//      netconnectionstatus  			//      pnpdeviceid  			//      physicaladapter  			//  			else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  				if ((UInt16)pd.Value == 0x2) {  					addThisNetwork = true;  				}  			}  			else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  				if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  					addThisNetwork = true;  				}  			}  			else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  				addThisNetwork = (bool)pd.Value;  			}  		}  	}  	if (addThisNetwork) {  		AddNetwork (ovfEnv' vsId' lang' Guid.NewGuid ().ToString ()' description' macaddress);  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: foreach (ManagementObject mo in Win32_NetworkAdapter) {  	// Only get the physical adapters' not logical (which there are numerous)  	//if ((bool)mo["PhysicalAdapter"])  	bool addThisNetwork = false;  	string macaddress = null;  	string description = null;  	//  	// setPriority is used to determine the description  	// 0 = unset  	// 1 highest priority  	// 2 next  	// 3 next  	// ...  	//  	int setPriority = 0;  	foreach (PropertyData pd in mo.Properties) {  		if (pd.Name != null && pd.Name.Length > 0) {  			if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  				macaddress = (string)pd.Value;  			}  			else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  				description = (string)pd.Value;  				setPriority = 1;  			}  			else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  				if (setPriority == 0 || setPriority > 2) {  					description = (string)pd.Value;  					setPriority = 2;  				}  			}  			else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  				if (setPriority == 0 || setPriority > 3) {  					description = (string)pd.Value;  					setPriority = 3;  				}  			}  			// Below is trying to figure out if this is a Network Connection that  			// is to be exported/defined.  			// The issue is WMI has different value sets for different types of hardware  			// such as hardware as we know it... pci ethernet  			// or blade style' which WMI gives a different result.  			// WAN/RAS connections.. etc.  			// ANY one of the values can set this to true:  			//      netconnectionstatus  			//      pnpdeviceid  			//      physicaladapter  			//  			else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  				if ((UInt16)pd.Value == 0x2) {  					addThisNetwork = true;  				}  			}  			else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  				if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  					addThisNetwork = true;  				}  			}  			else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  				addThisNetwork = (bool)pd.Value;  			}  		}  	}  	if (addThisNetwork) {  		AddNetwork (ovfEnv' vsId' lang' Guid.NewGuid ().ToString ()' description' macaddress);  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: foreach (ManagementObject mo in Win32_NetworkAdapter) {  	// Only get the physical adapters' not logical (which there are numerous)  	//if ((bool)mo["PhysicalAdapter"])  	bool addThisNetwork = false;  	string macaddress = null;  	string description = null;  	//  	// setPriority is used to determine the description  	// 0 = unset  	// 1 highest priority  	// 2 next  	// 3 next  	// ...  	//  	int setPriority = 0;  	foreach (PropertyData pd in mo.Properties) {  		if (pd.Name != null && pd.Name.Length > 0) {  			if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  				macaddress = (string)pd.Value;  			}  			else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  				description = (string)pd.Value;  				setPriority = 1;  			}  			else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  				if (setPriority == 0 || setPriority > 2) {  					description = (string)pd.Value;  					setPriority = 2;  				}  			}  			else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  				if (setPriority == 0 || setPriority > 3) {  					description = (string)pd.Value;  					setPriority = 3;  				}  			}  			// Below is trying to figure out if this is a Network Connection that  			// is to be exported/defined.  			// The issue is WMI has different value sets for different types of hardware  			// such as hardware as we know it... pci ethernet  			// or blade style' which WMI gives a different result.  			// WAN/RAS connections.. etc.  			// ANY one of the values can set this to true:  			//      netconnectionstatus  			//      pnpdeviceid  			//      physicaladapter  			//  			else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  				if ((UInt16)pd.Value == 0x2) {  					addThisNetwork = true;  				}  			}  			else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  				if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  					addThisNetwork = true;  				}  			}  			else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  				addThisNetwork = (bool)pd.Value;  			}  		}  	}  	if (addThisNetwork) {  		AddNetwork (ovfEnv' vsId' lang' Guid.NewGuid ().ToString ()' description' macaddress);  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: foreach (ManagementObject mo in Win32_NetworkAdapter) {  	// Only get the physical adapters' not logical (which there are numerous)  	//if ((bool)mo["PhysicalAdapter"])  	bool addThisNetwork = false;  	string macaddress = null;  	string description = null;  	//  	// setPriority is used to determine the description  	// 0 = unset  	// 1 highest priority  	// 2 next  	// 3 next  	// ...  	//  	int setPriority = 0;  	foreach (PropertyData pd in mo.Properties) {  		if (pd.Name != null && pd.Name.Length > 0) {  			if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  				macaddress = (string)pd.Value;  			}  			else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  				description = (string)pd.Value;  				setPriority = 1;  			}  			else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  				if (setPriority == 0 || setPriority > 2) {  					description = (string)pd.Value;  					setPriority = 2;  				}  			}  			else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  				if (setPriority == 0 || setPriority > 3) {  					description = (string)pd.Value;  					setPriority = 3;  				}  			}  			// Below is trying to figure out if this is a Network Connection that  			// is to be exported/defined.  			// The issue is WMI has different value sets for different types of hardware  			// such as hardware as we know it... pci ethernet  			// or blade style' which WMI gives a different result.  			// WAN/RAS connections.. etc.  			// ANY one of the values can set this to true:  			//      netconnectionstatus  			//      pnpdeviceid  			//      physicaladapter  			//  			else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  				if ((UInt16)pd.Value == 0x2) {  					addThisNetwork = true;  				}  			}  			else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  				if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  					addThisNetwork = true;  				}  			}  			else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  				addThisNetwork = (bool)pd.Value;  			}  		}  	}  	if (addThisNetwork) {  		AddNetwork (ovfEnv' vsId' lang' Guid.NewGuid ().ToString ()' description' macaddress);  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: foreach (PropertyData pd in mo.Properties) {  	if (pd.Name != null && pd.Name.Length > 0) {  		if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  			macaddress = (string)pd.Value;  		}  		else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  			description = (string)pd.Value;  			setPriority = 1;  		}  		else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  			if (setPriority == 0 || setPriority > 2) {  				description = (string)pd.Value;  				setPriority = 2;  			}  		}  		else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  			if (setPriority == 0 || setPriority > 3) {  				description = (string)pd.Value;  				setPriority = 3;  			}  		}  		// Below is trying to figure out if this is a Network Connection that  		// is to be exported/defined.  		// The issue is WMI has different value sets for different types of hardware  		// such as hardware as we know it... pci ethernet  		// or blade style' which WMI gives a different result.  		// WAN/RAS connections.. etc.  		// ANY one of the values can set this to true:  		//      netconnectionstatus  		//      pnpdeviceid  		//      physicaladapter  		//  		else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  			if ((UInt16)pd.Value == 0x2) {  				addThisNetwork = true;  			}  		}  		else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  			if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  				addThisNetwork = true;  			}  		}  		else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  			addThisNetwork = (bool)pd.Value;  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: foreach (PropertyData pd in mo.Properties) {  	if (pd.Name != null && pd.Name.Length > 0) {  		if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  			macaddress = (string)pd.Value;  		}  		else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  			description = (string)pd.Value;  			setPriority = 1;  		}  		else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  			if (setPriority == 0 || setPriority > 2) {  				description = (string)pd.Value;  				setPriority = 2;  			}  		}  		else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  			if (setPriority == 0 || setPriority > 3) {  				description = (string)pd.Value;  				setPriority = 3;  			}  		}  		// Below is trying to figure out if this is a Network Connection that  		// is to be exported/defined.  		// The issue is WMI has different value sets for different types of hardware  		// such as hardware as we know it... pci ethernet  		// or blade style' which WMI gives a different result.  		// WAN/RAS connections.. etc.  		// ANY one of the values can set this to true:  		//      netconnectionstatus  		//      pnpdeviceid  		//      physicaladapter  		//  		else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  			if ((UInt16)pd.Value == 0x2) {  				addThisNetwork = true;  			}  		}  		else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  			if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  				addThisNetwork = true;  			}  		}  		else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  			addThisNetwork = (bool)pd.Value;  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: foreach (PropertyData pd in mo.Properties) {  	if (pd.Name != null && pd.Name.Length > 0) {  		if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  			macaddress = (string)pd.Value;  		}  		else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  			description = (string)pd.Value;  			setPriority = 1;  		}  		else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  			if (setPriority == 0 || setPriority > 2) {  				description = (string)pd.Value;  				setPriority = 2;  			}  		}  		else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  			if (setPriority == 0 || setPriority > 3) {  				description = (string)pd.Value;  				setPriority = 3;  			}  		}  		// Below is trying to figure out if this is a Network Connection that  		// is to be exported/defined.  		// The issue is WMI has different value sets for different types of hardware  		// such as hardware as we know it... pci ethernet  		// or blade style' which WMI gives a different result.  		// WAN/RAS connections.. etc.  		// ANY one of the values can set this to true:  		//      netconnectionstatus  		//      pnpdeviceid  		//      physicaladapter  		//  		else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  			if ((UInt16)pd.Value == 0x2) {  				addThisNetwork = true;  			}  		}  		else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  			if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  				addThisNetwork = true;  			}  		}  		else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  			addThisNetwork = (bool)pd.Value;  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: foreach (PropertyData pd in mo.Properties) {  	if (pd.Name != null && pd.Name.Length > 0) {  		if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  			macaddress = (string)pd.Value;  		}  		else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  			description = (string)pd.Value;  			setPriority = 1;  		}  		else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  			if (setPriority == 0 || setPriority > 2) {  				description = (string)pd.Value;  				setPriority = 2;  			}  		}  		else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  			if (setPriority == 0 || setPriority > 3) {  				description = (string)pd.Value;  				setPriority = 3;  			}  		}  		// Below is trying to figure out if this is a Network Connection that  		// is to be exported/defined.  		// The issue is WMI has different value sets for different types of hardware  		// such as hardware as we know it... pci ethernet  		// or blade style' which WMI gives a different result.  		// WAN/RAS connections.. etc.  		// ANY one of the values can set this to true:  		//      netconnectionstatus  		//      pnpdeviceid  		//      physicaladapter  		//  		else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  			if ((UInt16)pd.Value == 0x2) {  				addThisNetwork = true;  			}  		}  		else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  			if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  				addThisNetwork = true;  			}  		}  		else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  			addThisNetwork = (bool)pd.Value;  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (pd.Name != null && pd.Name.Length > 0) {  	if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  		macaddress = (string)pd.Value;  	}  	else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  		description = (string)pd.Value;  		setPriority = 1;  	}  	else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  		if (setPriority == 0 || setPriority > 2) {  			description = (string)pd.Value;  			setPriority = 2;  		}  	}  	else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  		if (setPriority == 0 || setPriority > 3) {  			description = (string)pd.Value;  			setPriority = 3;  		}  	}  	// Below is trying to figure out if this is a Network Connection that  	// is to be exported/defined.  	// The issue is WMI has different value sets for different types of hardware  	// such as hardware as we know it... pci ethernet  	// or blade style' which WMI gives a different result.  	// WAN/RAS connections.. etc.  	// ANY one of the values can set this to true:  	//      netconnectionstatus  	//      pnpdeviceid  	//      physicaladapter  	//  	else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  		if ((UInt16)pd.Value == 0x2) {  			addThisNetwork = true;  		}  	}  	else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  		if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  			addThisNetwork = true;  		}  	}  	else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  		addThisNetwork = (bool)pd.Value;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (pd.Name != null && pd.Name.Length > 0) {  	if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  		macaddress = (string)pd.Value;  	}  	else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  		description = (string)pd.Value;  		setPriority = 1;  	}  	else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  		if (setPriority == 0 || setPriority > 2) {  			description = (string)pd.Value;  			setPriority = 2;  		}  	}  	else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  		if (setPriority == 0 || setPriority > 3) {  			description = (string)pd.Value;  			setPriority = 3;  		}  	}  	// Below is trying to figure out if this is a Network Connection that  	// is to be exported/defined.  	// The issue is WMI has different value sets for different types of hardware  	// such as hardware as we know it... pci ethernet  	// or blade style' which WMI gives a different result.  	// WAN/RAS connections.. etc.  	// ANY one of the values can set this to true:  	//      netconnectionstatus  	//      pnpdeviceid  	//      physicaladapter  	//  	else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  		if ((UInt16)pd.Value == 0x2) {  			addThisNetwork = true;  		}  	}  	else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  		if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  			addThisNetwork = true;  		}  	}  	else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  		addThisNetwork = (bool)pd.Value;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (pd.Name != null && pd.Name.Length > 0) {  	if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  		macaddress = (string)pd.Value;  	}  	else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  		description = (string)pd.Value;  		setPriority = 1;  	}  	else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  		if (setPriority == 0 || setPriority > 2) {  			description = (string)pd.Value;  			setPriority = 2;  		}  	}  	else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  		if (setPriority == 0 || setPriority > 3) {  			description = (string)pd.Value;  			setPriority = 3;  		}  	}  	// Below is trying to figure out if this is a Network Connection that  	// is to be exported/defined.  	// The issue is WMI has different value sets for different types of hardware  	// such as hardware as we know it... pci ethernet  	// or blade style' which WMI gives a different result.  	// WAN/RAS connections.. etc.  	// ANY one of the values can set this to true:  	//      netconnectionstatus  	//      pnpdeviceid  	//      physicaladapter  	//  	else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  		if ((UInt16)pd.Value == 0x2) {  			addThisNetwork = true;  		}  	}  	else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  		if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  			addThisNetwork = true;  		}  	}  	else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  		addThisNetwork = (bool)pd.Value;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (pd.Name != null && pd.Name.Length > 0) {  	if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  		macaddress = (string)pd.Value;  	}  	else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  		description = (string)pd.Value;  		setPriority = 1;  	}  	else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  		if (setPriority == 0 || setPriority > 2) {  			description = (string)pd.Value;  			setPriority = 2;  		}  	}  	else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  		if (setPriority == 0 || setPriority > 3) {  			description = (string)pd.Value;  			setPriority = 3;  		}  	}  	// Below is trying to figure out if this is a Network Connection that  	// is to be exported/defined.  	// The issue is WMI has different value sets for different types of hardware  	// such as hardware as we know it... pci ethernet  	// or blade style' which WMI gives a different result.  	// WAN/RAS connections.. etc.  	// ANY one of the values can set this to true:  	//      netconnectionstatus  	//      pnpdeviceid  	//      physicaladapter  	//  	else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  		if ((UInt16)pd.Value == 0x2) {  			addThisNetwork = true;  		}  	}  	else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  		if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  			addThisNetwork = true;  		}  	}  	else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  		addThisNetwork = (bool)pd.Value;  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  	macaddress = (string)pd.Value;  }  else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	description = (string)pd.Value;  	setPriority = 1;  }  else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 2) {  		description = (string)pd.Value;  		setPriority = 2;  	}  }  else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 3) {  		description = (string)pd.Value;  		setPriority = 3;  	}  }  // Below is trying to figure out if this is a Network Connection that  // is to be exported/defined.  // The issue is WMI has different value sets for different types of hardware  // such as hardware as we know it... pci ethernet  // or blade style' which WMI gives a different result.  // WAN/RAS connections.. etc.  // ANY one of the values can set this to true:  //      netconnectionstatus  //      pnpdeviceid  //      physicaladapter  //  else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  	if ((UInt16)pd.Value == 0x2) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  	addThisNetwork = (bool)pd.Value;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  	macaddress = (string)pd.Value;  }  else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	description = (string)pd.Value;  	setPriority = 1;  }  else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 2) {  		description = (string)pd.Value;  		setPriority = 2;  	}  }  else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 3) {  		description = (string)pd.Value;  		setPriority = 3;  	}  }  // Below is trying to figure out if this is a Network Connection that  // is to be exported/defined.  // The issue is WMI has different value sets for different types of hardware  // such as hardware as we know it... pci ethernet  // or blade style' which WMI gives a different result.  // WAN/RAS connections.. etc.  // ANY one of the values can set this to true:  //      netconnectionstatus  //      pnpdeviceid  //      physicaladapter  //  else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  	if ((UInt16)pd.Value == 0x2) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  	addThisNetwork = (bool)pd.Value;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  	macaddress = (string)pd.Value;  }  else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	description = (string)pd.Value;  	setPriority = 1;  }  else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 2) {  		description = (string)pd.Value;  		setPriority = 2;  	}  }  else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 3) {  		description = (string)pd.Value;  		setPriority = 3;  	}  }  // Below is trying to figure out if this is a Network Connection that  // is to be exported/defined.  // The issue is WMI has different value sets for different types of hardware  // such as hardware as we know it... pci ethernet  // or blade style' which WMI gives a different result.  // WAN/RAS connections.. etc.  // ANY one of the values can set this to true:  //      netconnectionstatus  //      pnpdeviceid  //      physicaladapter  //  else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  	if ((UInt16)pd.Value == 0x2) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  	addThisNetwork = (bool)pd.Value;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (pd.Name.ToLower ().Equals ("macaddress") && pd.Value != null && ((string)pd.Value).Length > 0) {  	macaddress = (string)pd.Value;  }  else if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	description = (string)pd.Value;  	setPriority = 1;  }  else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 2) {  		description = (string)pd.Value;  		setPriority = 2;  	}  }  else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 3) {  		description = (string)pd.Value;  		setPriority = 3;  	}  }  // Below is trying to figure out if this is a Network Connection that  // is to be exported/defined.  // The issue is WMI has different value sets for different types of hardware  // such as hardware as we know it... pci ethernet  // or blade style' which WMI gives a different result.  // WAN/RAS connections.. etc.  // ANY one of the values can set this to true:  //      netconnectionstatus  //      pnpdeviceid  //      physicaladapter  //  else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  	if ((UInt16)pd.Value == 0x2) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  	addThisNetwork = (bool)pd.Value;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	description = (string)pd.Value;  	setPriority = 1;  }  else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 2) {  		description = (string)pd.Value;  		setPriority = 2;  	}  }  else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 3) {  		description = (string)pd.Value;  		setPriority = 3;  	}  }  // Below is trying to figure out if this is a Network Connection that  // is to be exported/defined.  // The issue is WMI has different value sets for different types of hardware  // such as hardware as we know it... pci ethernet  // or blade style' which WMI gives a different result.  // WAN/RAS connections.. etc.  // ANY one of the values can set this to true:  //      netconnectionstatus  //      pnpdeviceid  //      physicaladapter  //  else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  	if ((UInt16)pd.Value == 0x2) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  	addThisNetwork = (bool)pd.Value;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	description = (string)pd.Value;  	setPriority = 1;  }  else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 2) {  		description = (string)pd.Value;  		setPriority = 2;  	}  }  else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 3) {  		description = (string)pd.Value;  		setPriority = 3;  	}  }  // Below is trying to figure out if this is a Network Connection that  // is to be exported/defined.  // The issue is WMI has different value sets for different types of hardware  // such as hardware as we know it... pci ethernet  // or blade style' which WMI gives a different result.  // WAN/RAS connections.. etc.  // ANY one of the values can set this to true:  //      netconnectionstatus  //      pnpdeviceid  //      physicaladapter  //  else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  	if ((UInt16)pd.Value == 0x2) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  	addThisNetwork = (bool)pd.Value;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	description = (string)pd.Value;  	setPriority = 1;  }  else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 2) {  		description = (string)pd.Value;  		setPriority = 2;  	}  }  else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 3) {  		description = (string)pd.Value;  		setPriority = 3;  	}  }  // Below is trying to figure out if this is a Network Connection that  // is to be exported/defined.  // The issue is WMI has different value sets for different types of hardware  // such as hardware as we know it... pci ethernet  // or blade style' which WMI gives a different result.  // WAN/RAS connections.. etc.  // ANY one of the values can set this to true:  //      netconnectionstatus  //      pnpdeviceid  //      physicaladapter  //  else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  	if ((UInt16)pd.Value == 0x2) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  	addThisNetwork = (bool)pd.Value;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (pd.Name.ToLower ().Equals ("netconnectionid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	description = (string)pd.Value;  	setPriority = 1;  }  else if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 2) {  		description = (string)pd.Value;  		setPriority = 2;  	}  }  else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 3) {  		description = (string)pd.Value;  		setPriority = 3;  	}  }  // Below is trying to figure out if this is a Network Connection that  // is to be exported/defined.  // The issue is WMI has different value sets for different types of hardware  // such as hardware as we know it... pci ethernet  // or blade style' which WMI gives a different result.  // WAN/RAS connections.. etc.  // ANY one of the values can set this to true:  //      netconnectionstatus  //      pnpdeviceid  //      physicaladapter  //  else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  	if ((UInt16)pd.Value == 0x2) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  	addThisNetwork = (bool)pd.Value;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 2) {  		description = (string)pd.Value;  		setPriority = 2;  	}  }  else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 3) {  		description = (string)pd.Value;  		setPriority = 3;  	}  }  // Below is trying to figure out if this is a Network Connection that  // is to be exported/defined.  // The issue is WMI has different value sets for different types of hardware  // such as hardware as we know it... pci ethernet  // or blade style' which WMI gives a different result.  // WAN/RAS connections.. etc.  // ANY one of the values can set this to true:  //      netconnectionstatus  //      pnpdeviceid  //      physicaladapter  //  else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  	if ((UInt16)pd.Value == 0x2) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  	addThisNetwork = (bool)pd.Value;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 2) {  		description = (string)pd.Value;  		setPriority = 2;  	}  }  else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 3) {  		description = (string)pd.Value;  		setPriority = 3;  	}  }  // Below is trying to figure out if this is a Network Connection that  // is to be exported/defined.  // The issue is WMI has different value sets for different types of hardware  // such as hardware as we know it... pci ethernet  // or blade style' which WMI gives a different result.  // WAN/RAS connections.. etc.  // ANY one of the values can set this to true:  //      netconnectionstatus  //      pnpdeviceid  //      physicaladapter  //  else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  	if ((UInt16)pd.Value == 0x2) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  	addThisNetwork = (bool)pd.Value;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 2) {  		description = (string)pd.Value;  		setPriority = 2;  	}  }  else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 3) {  		description = (string)pd.Value;  		setPriority = 3;  	}  }  // Below is trying to figure out if this is a Network Connection that  // is to be exported/defined.  // The issue is WMI has different value sets for different types of hardware  // such as hardware as we know it... pci ethernet  // or blade style' which WMI gives a different result.  // WAN/RAS connections.. etc.  // ANY one of the values can set this to true:  //      netconnectionstatus  //      pnpdeviceid  //      physicaladapter  //  else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  	if ((UInt16)pd.Value == 0x2) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  	addThisNetwork = (bool)pd.Value;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (pd.Name.ToLower ().Equals ("name") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 2) {  		description = (string)pd.Value;  		setPriority = 2;  	}  }  else if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 3) {  		description = (string)pd.Value;  		setPriority = 3;  	}  }  // Below is trying to figure out if this is a Network Connection that  // is to be exported/defined.  // The issue is WMI has different value sets for different types of hardware  // such as hardware as we know it... pci ethernet  // or blade style' which WMI gives a different result.  // WAN/RAS connections.. etc.  // ANY one of the values can set this to true:  //      netconnectionstatus  //      pnpdeviceid  //      physicaladapter  //  else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  	if ((UInt16)pd.Value == 0x2) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  	addThisNetwork = (bool)pd.Value;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (setPriority == 0 || setPriority > 2) {  	description = (string)pd.Value;  	setPriority = 2;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (setPriority == 0 || setPriority > 2) {  	description = (string)pd.Value;  	setPriority = 2;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: setPriority = 2;  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 3) {  		description = (string)pd.Value;  		setPriority = 3;  	}  }  // Below is trying to figure out if this is a Network Connection that  // is to be exported/defined.  // The issue is WMI has different value sets for different types of hardware  // such as hardware as we know it... pci ethernet  // or blade style' which WMI gives a different result.  // WAN/RAS connections.. etc.  // ANY one of the values can set this to true:  //      netconnectionstatus  //      pnpdeviceid  //      physicaladapter  //  else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  	if ((UInt16)pd.Value == 0x2) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  	addThisNetwork = (bool)pd.Value;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (pd.Name.ToLower ().Equals ("description") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if (setPriority == 0 || setPriority > 3) {  		description = (string)pd.Value;  		setPriority = 3;  	}  }  // Below is trying to figure out if this is a Network Connection that  // is to be exported/defined.  // The issue is WMI has different value sets for different types of hardware  // such as hardware as we know it... pci ethernet  // or blade style' which WMI gives a different result.  // WAN/RAS connections.. etc.  // ANY one of the values can set this to true:  //      netconnectionstatus  //      pnpdeviceid  //      physicaladapter  //  else if (pd.Name.ToLower ().Equals ("netconnectionstatus") && pd.Value != null) {  	if ((UInt16)pd.Value == 0x2) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null && ((string)pd.Value).Length > 0) {  	if ((((string)pd.Value).ToLower ().StartsWith ("pci") || ((string)pd.Value).ToLower ().StartsWith ("scsi"))) {  		addThisNetwork = true;  	}  }  else if (pd.Name.ToLower ().Equals ("physicaladapter") && pd.Value != null) {  	addThisNetwork = (bool)pd.Value;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (setPriority == 0 || setPriority > 3) {  	description = (string)pd.Value;  	setPriority = 3;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: if (setPriority == 0 || setPriority > 3) {  	description = (string)pd.Value;  	setPriority = 3;  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,AddNetworks,The following statement contains a magic number: setPriority = 3;  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The following statement contains a magic number: if (Win32_IDEController != null && Win32_IDEController.Count > 0) {  	foreach (ManagementObject mo in Win32_IDEController) {  		#region FIND BY PROPERTIES NOT EXPLICID  		string deviceid = null;  		foreach (PropertyData pd in mo.Properties) {  			if (pd.Name.ToLower ().Equals ("deviceid") && pd.Value != null) {  				deviceid = (string)pd.Value;  			}  		}  		#endregion  		if (deviceid == null) {  			traceLog.Debug ("No device id defined' continuing");  			continue;  		}  		List<ManagementObject> ControllerAssociations = FindDeviceReferences ("Win32_IDEControllerDevice"' deviceid);  		string controllerInstanceId = Guid.NewGuid ().ToString ();  		AddController (ovfEnv' vsId' DeviceType.IDE' controllerInstanceId' i++);  		foreach (ManagementObject ca in ControllerAssociations) {  			#region FIND BY PROPERTIES NOT EXPLICID  			string _dependent = null;  			foreach (PropertyData pd in ca.Properties) {  				if (pd.Name.ToLower ().Equals ("dependent") && pd.Value != null) {  					_dependent = (string)pd.Value;  				}  			}  			if (_dependent == null) {  				traceLog.Debug ("PCI Association not available' continuing.");  				continue;  			}  			#endregion  			string[] dependent = _dependent.Split (new char[] {  				'='  			});  			string dependentId = dependent [dependent.Length - 1].Replace ("\""' "");  			dependentId = dependentId.Replace (@"\"' "");  			string startswith = dependentId;  			//.Replace(@"\"' "");  			if (startswith.ToUpper ().StartsWith (@"IDEDISK")) {  				log.Debug ("OVF.CreateConnectedDevices Checking IDEDISK");  				foreach (ManagementObject md in Win32_DiskDrive) {  					#region FIND BY PROPERTIES NOT EXPLICID  					string _deviceid = null;  					string _pnpdeviceid = null;  					UInt64 _size = 0;  					foreach (PropertyData pd in md.Properties) {  						if (pd.Name.ToLower ().Equals ("deviceid") && pd.Value != null) {  							_deviceid = (string)pd.Value;  						}  						else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null) {  							_pnpdeviceid = (string)pd.Value;  						}  						else if (pd.Name.ToLower ().Equals ("size") && pd.Value != null) {  							_size = (UInt64)pd.Value;  						}  					}  					#endregion  					_pnpdeviceid = _pnpdeviceid.Replace (@"\"' "");  					if (_pnpdeviceid.Equals (dependentId)) {  						foreach (DiskInfo di in vhdExports) {  							if (_deviceid.Contains (di.DriveId)) {  								try {  									log.DebugFormat ("OVF.CreateConnectedDevices: Dependent: {0}  Device: {1}"' dependentId' _deviceid);  									string diskInstanceId = Guid.NewGuid ().ToString ();  									int lastAmp = dependentId.LastIndexOf ('&');  									if (lastAmp < 0)  										lastAmp = 0;  									string[] tmp = dependentId.Substring (lastAmp + 1).Split (new char[] {  										'.'  									});  									string address = null;  									if (tmp.Length >= 2) {  										address = tmp [1];  									}  									else {  										address = (guessPosition) ? "0" : "1";  										guessPosition = !guessPosition;  									}  									address = address.Replace ("&"' "_");  									bool bootable = IsBootDisk (di.DriveId);  									AddDisk (ovfEnv' vsId' diskInstanceId' lang' di.VhdFileName' bootable' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' Convert.ToUInt64 (di.PhysicalSize)' Convert.ToUInt64 (di.CapacitySize));  									AddDeviceToController (ovfEnv' vsId' diskInstanceId' controllerInstanceId' address);  									di.Added = true;  									log.DebugFormat ("OVF.CreateConnectedDevices: {0} ({1}) added to {2}"' di.DriveId' di.VhdFileName' dependentId);  								}  								catch (Exception ex) {  									string msg = string.Format ("{0} [{1}] controller connection could not be identified."' "IDEDISK"' _pnpdeviceid);  									log.ErrorFormat ("OVF.CreateConnectedDevices: {0}"' msg);  									throw new Exception (msg' ex);  								}  							}  						}  					}  				}  			}  			else if (startswith.ToUpper ().StartsWith (@"IDECDROM")) {  				log.Debug ("OVF.CreateConnectedDevices Checking IDECDROM");  				foreach (ManagementObject md in Win32_CDROMDrive) {  					#region FIND BY PROPERTIES NOT EXPLICID  					string _pnpdeviceid = null;  					foreach (PropertyData pd in md.Properties) {  						if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null) {  							_pnpdeviceid = (string)pd.Value;  						}  					}  					if (_pnpdeviceid == null) {  						traceLog.Debug ("PNPDeviceID not available' continuing.");  						continue;  					}  					#endregion  					_pnpdeviceid = _pnpdeviceid.Replace (@"\"' "");  					if (_pnpdeviceid.Equals (dependentId)) {  						log.DebugFormat ("OVF.CreateConnectedDevices: Dependent: {0}  Device: {1}"' dependentId' _pnpdeviceid);  						try {  							string diskInstanceId = Guid.NewGuid ().ToString ();  							int lastAmp = dependentId.LastIndexOf ('&');  							if (lastAmp < 0)  								lastAmp = 0;  							string[] tmp = dependentId.Substring (lastAmp + 1).Split (new char[] {  								'.'  							});  							//string[] tmp = dependentId.Split(new char[] { '.' });  							string address = tmp [1];  							int idetest = Convert.ToInt32 (address);  							if (idetest != 0 && idetest != 1) {  								address = "0";  							}  							AddCDROM (ovfEnv' vsId' diskInstanceId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  							AddDeviceToController (ovfEnv' vsId' diskInstanceId' controllerInstanceId' address);  							log.DebugFormat ("OVF.CreateConnectedDevices: CDROM added to {0}"' dependentId);  						}  						catch {  							log.WarnFormat ("OVF.CreateConnectedDevices: CDROM [{0}] controller connection could not be identified' skipped."' _pnpdeviceid);  						}  					}  				}  			}  		}  	}  }  else {  	log.Info ("OVF.CreateConnectedDevices NO IDE controllers detected.");  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The following statement contains a magic number: foreach (ManagementObject mo in Win32_IDEController) {  	#region FIND BY PROPERTIES NOT EXPLICID  	string deviceid = null;  	foreach (PropertyData pd in mo.Properties) {  		if (pd.Name.ToLower ().Equals ("deviceid") && pd.Value != null) {  			deviceid = (string)pd.Value;  		}  	}  	#endregion  	if (deviceid == null) {  		traceLog.Debug ("No device id defined' continuing");  		continue;  	}  	List<ManagementObject> ControllerAssociations = FindDeviceReferences ("Win32_IDEControllerDevice"' deviceid);  	string controllerInstanceId = Guid.NewGuid ().ToString ();  	AddController (ovfEnv' vsId' DeviceType.IDE' controllerInstanceId' i++);  	foreach (ManagementObject ca in ControllerAssociations) {  		#region FIND BY PROPERTIES NOT EXPLICID  		string _dependent = null;  		foreach (PropertyData pd in ca.Properties) {  			if (pd.Name.ToLower ().Equals ("dependent") && pd.Value != null) {  				_dependent = (string)pd.Value;  			}  		}  		if (_dependent == null) {  			traceLog.Debug ("PCI Association not available' continuing.");  			continue;  		}  		#endregion  		string[] dependent = _dependent.Split (new char[] {  			'='  		});  		string dependentId = dependent [dependent.Length - 1].Replace ("\""' "");  		dependentId = dependentId.Replace (@"\"' "");  		string startswith = dependentId;  		//.Replace(@"\"' "");  		if (startswith.ToUpper ().StartsWith (@"IDEDISK")) {  			log.Debug ("OVF.CreateConnectedDevices Checking IDEDISK");  			foreach (ManagementObject md in Win32_DiskDrive) {  				#region FIND BY PROPERTIES NOT EXPLICID  				string _deviceid = null;  				string _pnpdeviceid = null;  				UInt64 _size = 0;  				foreach (PropertyData pd in md.Properties) {  					if (pd.Name.ToLower ().Equals ("deviceid") && pd.Value != null) {  						_deviceid = (string)pd.Value;  					}  					else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null) {  						_pnpdeviceid = (string)pd.Value;  					}  					else if (pd.Name.ToLower ().Equals ("size") && pd.Value != null) {  						_size = (UInt64)pd.Value;  					}  				}  				#endregion  				_pnpdeviceid = _pnpdeviceid.Replace (@"\"' "");  				if (_pnpdeviceid.Equals (dependentId)) {  					foreach (DiskInfo di in vhdExports) {  						if (_deviceid.Contains (di.DriveId)) {  							try {  								log.DebugFormat ("OVF.CreateConnectedDevices: Dependent: {0}  Device: {1}"' dependentId' _deviceid);  								string diskInstanceId = Guid.NewGuid ().ToString ();  								int lastAmp = dependentId.LastIndexOf ('&');  								if (lastAmp < 0)  									lastAmp = 0;  								string[] tmp = dependentId.Substring (lastAmp + 1).Split (new char[] {  									'.'  								});  								string address = null;  								if (tmp.Length >= 2) {  									address = tmp [1];  								}  								else {  									address = (guessPosition) ? "0" : "1";  									guessPosition = !guessPosition;  								}  								address = address.Replace ("&"' "_");  								bool bootable = IsBootDisk (di.DriveId);  								AddDisk (ovfEnv' vsId' diskInstanceId' lang' di.VhdFileName' bootable' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' Convert.ToUInt64 (di.PhysicalSize)' Convert.ToUInt64 (di.CapacitySize));  								AddDeviceToController (ovfEnv' vsId' diskInstanceId' controllerInstanceId' address);  								di.Added = true;  								log.DebugFormat ("OVF.CreateConnectedDevices: {0} ({1}) added to {2}"' di.DriveId' di.VhdFileName' dependentId);  							}  							catch (Exception ex) {  								string msg = string.Format ("{0} [{1}] controller connection could not be identified."' "IDEDISK"' _pnpdeviceid);  								log.ErrorFormat ("OVF.CreateConnectedDevices: {0}"' msg);  								throw new Exception (msg' ex);  							}  						}  					}  				}  			}  		}  		else if (startswith.ToUpper ().StartsWith (@"IDECDROM")) {  			log.Debug ("OVF.CreateConnectedDevices Checking IDECDROM");  			foreach (ManagementObject md in Win32_CDROMDrive) {  				#region FIND BY PROPERTIES NOT EXPLICID  				string _pnpdeviceid = null;  				foreach (PropertyData pd in md.Properties) {  					if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null) {  						_pnpdeviceid = (string)pd.Value;  					}  				}  				if (_pnpdeviceid == null) {  					traceLog.Debug ("PNPDeviceID not available' continuing.");  					continue;  				}  				#endregion  				_pnpdeviceid = _pnpdeviceid.Replace (@"\"' "");  				if (_pnpdeviceid.Equals (dependentId)) {  					log.DebugFormat ("OVF.CreateConnectedDevices: Dependent: {0}  Device: {1}"' dependentId' _pnpdeviceid);  					try {  						string diskInstanceId = Guid.NewGuid ().ToString ();  						int lastAmp = dependentId.LastIndexOf ('&');  						if (lastAmp < 0)  							lastAmp = 0;  						string[] tmp = dependentId.Substring (lastAmp + 1).Split (new char[] {  							'.'  						});  						//string[] tmp = dependentId.Split(new char[] { '.' });  						string address = tmp [1];  						int idetest = Convert.ToInt32 (address);  						if (idetest != 0 && idetest != 1) {  							address = "0";  						}  						AddCDROM (ovfEnv' vsId' diskInstanceId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  						AddDeviceToController (ovfEnv' vsId' diskInstanceId' controllerInstanceId' address);  						log.DebugFormat ("OVF.CreateConnectedDevices: CDROM added to {0}"' dependentId);  					}  					catch {  						log.WarnFormat ("OVF.CreateConnectedDevices: CDROM [{0}] controller connection could not be identified' skipped."' _pnpdeviceid);  					}  				}  			}  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The following statement contains a magic number: foreach (ManagementObject ca in ControllerAssociations) {  	#region FIND BY PROPERTIES NOT EXPLICID  	string _dependent = null;  	foreach (PropertyData pd in ca.Properties) {  		if (pd.Name.ToLower ().Equals ("dependent") && pd.Value != null) {  			_dependent = (string)pd.Value;  		}  	}  	if (_dependent == null) {  		traceLog.Debug ("PCI Association not available' continuing.");  		continue;  	}  	#endregion  	string[] dependent = _dependent.Split (new char[] {  		'='  	});  	string dependentId = dependent [dependent.Length - 1].Replace ("\""' "");  	dependentId = dependentId.Replace (@"\"' "");  	string startswith = dependentId;  	//.Replace(@"\"' "");  	if (startswith.ToUpper ().StartsWith (@"IDEDISK")) {  		log.Debug ("OVF.CreateConnectedDevices Checking IDEDISK");  		foreach (ManagementObject md in Win32_DiskDrive) {  			#region FIND BY PROPERTIES NOT EXPLICID  			string _deviceid = null;  			string _pnpdeviceid = null;  			UInt64 _size = 0;  			foreach (PropertyData pd in md.Properties) {  				if (pd.Name.ToLower ().Equals ("deviceid") && pd.Value != null) {  					_deviceid = (string)pd.Value;  				}  				else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null) {  					_pnpdeviceid = (string)pd.Value;  				}  				else if (pd.Name.ToLower ().Equals ("size") && pd.Value != null) {  					_size = (UInt64)pd.Value;  				}  			}  			#endregion  			_pnpdeviceid = _pnpdeviceid.Replace (@"\"' "");  			if (_pnpdeviceid.Equals (dependentId)) {  				foreach (DiskInfo di in vhdExports) {  					if (_deviceid.Contains (di.DriveId)) {  						try {  							log.DebugFormat ("OVF.CreateConnectedDevices: Dependent: {0}  Device: {1}"' dependentId' _deviceid);  							string diskInstanceId = Guid.NewGuid ().ToString ();  							int lastAmp = dependentId.LastIndexOf ('&');  							if (lastAmp < 0)  								lastAmp = 0;  							string[] tmp = dependentId.Substring (lastAmp + 1).Split (new char[] {  								'.'  							});  							string address = null;  							if (tmp.Length >= 2) {  								address = tmp [1];  							}  							else {  								address = (guessPosition) ? "0" : "1";  								guessPosition = !guessPosition;  							}  							address = address.Replace ("&"' "_");  							bool bootable = IsBootDisk (di.DriveId);  							AddDisk (ovfEnv' vsId' diskInstanceId' lang' di.VhdFileName' bootable' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' Convert.ToUInt64 (di.PhysicalSize)' Convert.ToUInt64 (di.CapacitySize));  							AddDeviceToController (ovfEnv' vsId' diskInstanceId' controllerInstanceId' address);  							di.Added = true;  							log.DebugFormat ("OVF.CreateConnectedDevices: {0} ({1}) added to {2}"' di.DriveId' di.VhdFileName' dependentId);  						}  						catch (Exception ex) {  							string msg = string.Format ("{0} [{1}] controller connection could not be identified."' "IDEDISK"' _pnpdeviceid);  							log.ErrorFormat ("OVF.CreateConnectedDevices: {0}"' msg);  							throw new Exception (msg' ex);  						}  					}  				}  			}  		}  	}  	else if (startswith.ToUpper ().StartsWith (@"IDECDROM")) {  		log.Debug ("OVF.CreateConnectedDevices Checking IDECDROM");  		foreach (ManagementObject md in Win32_CDROMDrive) {  			#region FIND BY PROPERTIES NOT EXPLICID  			string _pnpdeviceid = null;  			foreach (PropertyData pd in md.Properties) {  				if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null) {  					_pnpdeviceid = (string)pd.Value;  				}  			}  			if (_pnpdeviceid == null) {  				traceLog.Debug ("PNPDeviceID not available' continuing.");  				continue;  			}  			#endregion  			_pnpdeviceid = _pnpdeviceid.Replace (@"\"' "");  			if (_pnpdeviceid.Equals (dependentId)) {  				log.DebugFormat ("OVF.CreateConnectedDevices: Dependent: {0}  Device: {1}"' dependentId' _pnpdeviceid);  				try {  					string diskInstanceId = Guid.NewGuid ().ToString ();  					int lastAmp = dependentId.LastIndexOf ('&');  					if (lastAmp < 0)  						lastAmp = 0;  					string[] tmp = dependentId.Substring (lastAmp + 1).Split (new char[] {  						'.'  					});  					//string[] tmp = dependentId.Split(new char[] { '.' });  					string address = tmp [1];  					int idetest = Convert.ToInt32 (address);  					if (idetest != 0 && idetest != 1) {  						address = "0";  					}  					AddCDROM (ovfEnv' vsId' diskInstanceId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  					AddDeviceToController (ovfEnv' vsId' diskInstanceId' controllerInstanceId' address);  					log.DebugFormat ("OVF.CreateConnectedDevices: CDROM added to {0}"' dependentId);  				}  				catch {  					log.WarnFormat ("OVF.CreateConnectedDevices: CDROM [{0}] controller connection could not be identified' skipped."' _pnpdeviceid);  				}  			}  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The following statement contains a magic number: if (startswith.ToUpper ().StartsWith (@"IDEDISK")) {  	log.Debug ("OVF.CreateConnectedDevices Checking IDEDISK");  	foreach (ManagementObject md in Win32_DiskDrive) {  		#region FIND BY PROPERTIES NOT EXPLICID  		string _deviceid = null;  		string _pnpdeviceid = null;  		UInt64 _size = 0;  		foreach (PropertyData pd in md.Properties) {  			if (pd.Name.ToLower ().Equals ("deviceid") && pd.Value != null) {  				_deviceid = (string)pd.Value;  			}  			else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null) {  				_pnpdeviceid = (string)pd.Value;  			}  			else if (pd.Name.ToLower ().Equals ("size") && pd.Value != null) {  				_size = (UInt64)pd.Value;  			}  		}  		#endregion  		_pnpdeviceid = _pnpdeviceid.Replace (@"\"' "");  		if (_pnpdeviceid.Equals (dependentId)) {  			foreach (DiskInfo di in vhdExports) {  				if (_deviceid.Contains (di.DriveId)) {  					try {  						log.DebugFormat ("OVF.CreateConnectedDevices: Dependent: {0}  Device: {1}"' dependentId' _deviceid);  						string diskInstanceId = Guid.NewGuid ().ToString ();  						int lastAmp = dependentId.LastIndexOf ('&');  						if (lastAmp < 0)  							lastAmp = 0;  						string[] tmp = dependentId.Substring (lastAmp + 1).Split (new char[] {  							'.'  						});  						string address = null;  						if (tmp.Length >= 2) {  							address = tmp [1];  						}  						else {  							address = (guessPosition) ? "0" : "1";  							guessPosition = !guessPosition;  						}  						address = address.Replace ("&"' "_");  						bool bootable = IsBootDisk (di.DriveId);  						AddDisk (ovfEnv' vsId' diskInstanceId' lang' di.VhdFileName' bootable' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' Convert.ToUInt64 (di.PhysicalSize)' Convert.ToUInt64 (di.CapacitySize));  						AddDeviceToController (ovfEnv' vsId' diskInstanceId' controllerInstanceId' address);  						di.Added = true;  						log.DebugFormat ("OVF.CreateConnectedDevices: {0} ({1}) added to {2}"' di.DriveId' di.VhdFileName' dependentId);  					}  					catch (Exception ex) {  						string msg = string.Format ("{0} [{1}] controller connection could not be identified."' "IDEDISK"' _pnpdeviceid);  						log.ErrorFormat ("OVF.CreateConnectedDevices: {0}"' msg);  						throw new Exception (msg' ex);  					}  				}  			}  		}  	}  }  else if (startswith.ToUpper ().StartsWith (@"IDECDROM")) {  	log.Debug ("OVF.CreateConnectedDevices Checking IDECDROM");  	foreach (ManagementObject md in Win32_CDROMDrive) {  		#region FIND BY PROPERTIES NOT EXPLICID  		string _pnpdeviceid = null;  		foreach (PropertyData pd in md.Properties) {  			if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null) {  				_pnpdeviceid = (string)pd.Value;  			}  		}  		if (_pnpdeviceid == null) {  			traceLog.Debug ("PNPDeviceID not available' continuing.");  			continue;  		}  		#endregion  		_pnpdeviceid = _pnpdeviceid.Replace (@"\"' "");  		if (_pnpdeviceid.Equals (dependentId)) {  			log.DebugFormat ("OVF.CreateConnectedDevices: Dependent: {0}  Device: {1}"' dependentId' _pnpdeviceid);  			try {  				string diskInstanceId = Guid.NewGuid ().ToString ();  				int lastAmp = dependentId.LastIndexOf ('&');  				if (lastAmp < 0)  					lastAmp = 0;  				string[] tmp = dependentId.Substring (lastAmp + 1).Split (new char[] {  					'.'  				});  				//string[] tmp = dependentId.Split(new char[] { '.' });  				string address = tmp [1];  				int idetest = Convert.ToInt32 (address);  				if (idetest != 0 && idetest != 1) {  					address = "0";  				}  				AddCDROM (ovfEnv' vsId' diskInstanceId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  				AddDeviceToController (ovfEnv' vsId' diskInstanceId' controllerInstanceId' address);  				log.DebugFormat ("OVF.CreateConnectedDevices: CDROM added to {0}"' dependentId);  			}  			catch {  				log.WarnFormat ("OVF.CreateConnectedDevices: CDROM [{0}] controller connection could not be identified' skipped."' _pnpdeviceid);  			}  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The following statement contains a magic number: foreach (ManagementObject md in Win32_DiskDrive) {  	#region FIND BY PROPERTIES NOT EXPLICID  	string _deviceid = null;  	string _pnpdeviceid = null;  	UInt64 _size = 0;  	foreach (PropertyData pd in md.Properties) {  		if (pd.Name.ToLower ().Equals ("deviceid") && pd.Value != null) {  			_deviceid = (string)pd.Value;  		}  		else if (pd.Name.ToLower ().Equals ("pnpdeviceid") && pd.Value != null) {  			_pnpdeviceid = (string)pd.Value;  		}  		else if (pd.Name.ToLower ().Equals ("size") && pd.Value != null) {  			_size = (UInt64)pd.Value;  		}  	}  	#endregion  	_pnpdeviceid = _pnpdeviceid.Replace (@"\"' "");  	if (_pnpdeviceid.Equals (dependentId)) {  		foreach (DiskInfo di in vhdExports) {  			if (_deviceid.Contains (di.DriveId)) {  				try {  					log.DebugFormat ("OVF.CreateConnectedDevices: Dependent: {0}  Device: {1}"' dependentId' _deviceid);  					string diskInstanceId = Guid.NewGuid ().ToString ();  					int lastAmp = dependentId.LastIndexOf ('&');  					if (lastAmp < 0)  						lastAmp = 0;  					string[] tmp = dependentId.Substring (lastAmp + 1).Split (new char[] {  						'.'  					});  					string address = null;  					if (tmp.Length >= 2) {  						address = tmp [1];  					}  					else {  						address = (guessPosition) ? "0" : "1";  						guessPosition = !guessPosition;  					}  					address = address.Replace ("&"' "_");  					bool bootable = IsBootDisk (di.DriveId);  					AddDisk (ovfEnv' vsId' diskInstanceId' lang' di.VhdFileName' bootable' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' Convert.ToUInt64 (di.PhysicalSize)' Convert.ToUInt64 (di.CapacitySize));  					AddDeviceToController (ovfEnv' vsId' diskInstanceId' controllerInstanceId' address);  					di.Added = true;  					log.DebugFormat ("OVF.CreateConnectedDevices: {0} ({1}) added to {2}"' di.DriveId' di.VhdFileName' dependentId);  				}  				catch (Exception ex) {  					string msg = string.Format ("{0} [{1}] controller connection could not be identified."' "IDEDISK"' _pnpdeviceid);  					log.ErrorFormat ("OVF.CreateConnectedDevices: {0}"' msg);  					throw new Exception (msg' ex);  				}  			}  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The following statement contains a magic number: if (_pnpdeviceid.Equals (dependentId)) {  	foreach (DiskInfo di in vhdExports) {  		if (_deviceid.Contains (di.DriveId)) {  			try {  				log.DebugFormat ("OVF.CreateConnectedDevices: Dependent: {0}  Device: {1}"' dependentId' _deviceid);  				string diskInstanceId = Guid.NewGuid ().ToString ();  				int lastAmp = dependentId.LastIndexOf ('&');  				if (lastAmp < 0)  					lastAmp = 0;  				string[] tmp = dependentId.Substring (lastAmp + 1).Split (new char[] {  					'.'  				});  				string address = null;  				if (tmp.Length >= 2) {  					address = tmp [1];  				}  				else {  					address = (guessPosition) ? "0" : "1";  					guessPosition = !guessPosition;  				}  				address = address.Replace ("&"' "_");  				bool bootable = IsBootDisk (di.DriveId);  				AddDisk (ovfEnv' vsId' diskInstanceId' lang' di.VhdFileName' bootable' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' Convert.ToUInt64 (di.PhysicalSize)' Convert.ToUInt64 (di.CapacitySize));  				AddDeviceToController (ovfEnv' vsId' diskInstanceId' controllerInstanceId' address);  				di.Added = true;  				log.DebugFormat ("OVF.CreateConnectedDevices: {0} ({1}) added to {2}"' di.DriveId' di.VhdFileName' dependentId);  			}  			catch (Exception ex) {  				string msg = string.Format ("{0} [{1}] controller connection could not be identified."' "IDEDISK"' _pnpdeviceid);  				log.ErrorFormat ("OVF.CreateConnectedDevices: {0}"' msg);  				throw new Exception (msg' ex);  			}  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The following statement contains a magic number: foreach (DiskInfo di in vhdExports) {  	if (_deviceid.Contains (di.DriveId)) {  		try {  			log.DebugFormat ("OVF.CreateConnectedDevices: Dependent: {0}  Device: {1}"' dependentId' _deviceid);  			string diskInstanceId = Guid.NewGuid ().ToString ();  			int lastAmp = dependentId.LastIndexOf ('&');  			if (lastAmp < 0)  				lastAmp = 0;  			string[] tmp = dependentId.Substring (lastAmp + 1).Split (new char[] {  				'.'  			});  			string address = null;  			if (tmp.Length >= 2) {  				address = tmp [1];  			}  			else {  				address = (guessPosition) ? "0" : "1";  				guessPosition = !guessPosition;  			}  			address = address.Replace ("&"' "_");  			bool bootable = IsBootDisk (di.DriveId);  			AddDisk (ovfEnv' vsId' diskInstanceId' lang' di.VhdFileName' bootable' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' Convert.ToUInt64 (di.PhysicalSize)' Convert.ToUInt64 (di.CapacitySize));  			AddDeviceToController (ovfEnv' vsId' diskInstanceId' controllerInstanceId' address);  			di.Added = true;  			log.DebugFormat ("OVF.CreateConnectedDevices: {0} ({1}) added to {2}"' di.DriveId' di.VhdFileName' dependentId);  		}  		catch (Exception ex) {  			string msg = string.Format ("{0} [{1}] controller connection could not be identified."' "IDEDISK"' _pnpdeviceid);  			log.ErrorFormat ("OVF.CreateConnectedDevices: {0}"' msg);  			throw new Exception (msg' ex);  		}  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The following statement contains a magic number: if (_deviceid.Contains (di.DriveId)) {  	try {  		log.DebugFormat ("OVF.CreateConnectedDevices: Dependent: {0}  Device: {1}"' dependentId' _deviceid);  		string diskInstanceId = Guid.NewGuid ().ToString ();  		int lastAmp = dependentId.LastIndexOf ('&');  		if (lastAmp < 0)  			lastAmp = 0;  		string[] tmp = dependentId.Substring (lastAmp + 1).Split (new char[] {  			'.'  		});  		string address = null;  		if (tmp.Length >= 2) {  			address = tmp [1];  		}  		else {  			address = (guessPosition) ? "0" : "1";  			guessPosition = !guessPosition;  		}  		address = address.Replace ("&"' "_");  		bool bootable = IsBootDisk (di.DriveId);  		AddDisk (ovfEnv' vsId' diskInstanceId' lang' di.VhdFileName' bootable' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' Convert.ToUInt64 (di.PhysicalSize)' Convert.ToUInt64 (di.CapacitySize));  		AddDeviceToController (ovfEnv' vsId' diskInstanceId' controllerInstanceId' address);  		di.Added = true;  		log.DebugFormat ("OVF.CreateConnectedDevices: {0} ({1}) added to {2}"' di.DriveId' di.VhdFileName' dependentId);  	}  	catch (Exception ex) {  		string msg = string.Format ("{0} [{1}] controller connection could not be identified."' "IDEDISK"' _pnpdeviceid);  		log.ErrorFormat ("OVF.CreateConnectedDevices: {0}"' msg);  		throw new Exception (msg' ex);  	}  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The following statement contains a magic number: try {  	log.DebugFormat ("OVF.CreateConnectedDevices: Dependent: {0}  Device: {1}"' dependentId' _deviceid);  	string diskInstanceId = Guid.NewGuid ().ToString ();  	int lastAmp = dependentId.LastIndexOf ('&');  	if (lastAmp < 0)  		lastAmp = 0;  	string[] tmp = dependentId.Substring (lastAmp + 1).Split (new char[] {  		'.'  	});  	string address = null;  	if (tmp.Length >= 2) {  		address = tmp [1];  	}  	else {  		address = (guessPosition) ? "0" : "1";  		guessPosition = !guessPosition;  	}  	address = address.Replace ("&"' "_");  	bool bootable = IsBootDisk (di.DriveId);  	AddDisk (ovfEnv' vsId' diskInstanceId' lang' di.VhdFileName' bootable' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' Convert.ToUInt64 (di.PhysicalSize)' Convert.ToUInt64 (di.CapacitySize));  	AddDeviceToController (ovfEnv' vsId' diskInstanceId' controllerInstanceId' address);  	di.Added = true;  	log.DebugFormat ("OVF.CreateConnectedDevices: {0} ({1}) added to {2}"' di.DriveId' di.VhdFileName' dependentId);  }  catch (Exception ex) {  	string msg = string.Format ("{0} [{1}] controller connection could not be identified."' "IDEDISK"' _pnpdeviceid);  	log.ErrorFormat ("OVF.CreateConnectedDevices: {0}"' msg);  	throw new Exception (msg' ex);  }  
Magic Number,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,CreateConnectedDevices,The following statement contains a magic number: if (tmp.Length >= 2) {  	address = tmp [1];  }  else {  	address = (guessPosition) ? "0" : "1";  	guessPosition = !guessPosition;  }  
Magic Number,XenOvf,FileDigest,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Package.cs,ToArray,The following statement contains a magic number: if ((HexString.Length % 2) > 0) {  	// The length is odd.  	// Pad the hex string on the left with a space to interpret as a leading zero.  	HexString = HexString.PadLeft (HexString.Length + 1);  }  
Magic Number,XenOvf,FileDigest,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Package.cs,ToArray,The following statement contains a magic number: try {  	for (int i = 0; i < HexString.Length; i += 2) {  		array [i / 2] = byte.Parse (HexString.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  	}  }  catch {  	throw new Exception (HexString + " contains an invalid hexadecimal number.");  }  
Magic Number,XenOvf,FileDigest,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Package.cs,ToArray,The following statement contains a magic number: try {  	for (int i = 0; i < HexString.Length; i += 2) {  		array [i / 2] = byte.Parse (HexString.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  	}  }  catch {  	throw new Exception (HexString + " contains an invalid hexadecimal number.");  }  
Magic Number,XenOvf,FileDigest,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Package.cs,ToArray,The following statement contains a magic number: try {  	for (int i = 0; i < HexString.Length; i += 2) {  		array [i / 2] = byte.Parse (HexString.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  	}  }  catch {  	throw new Exception (HexString + " contains an invalid hexadecimal number.");  }  
Magic Number,XenOvf,FileDigest,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Package.cs,ToArray,The following statement contains a magic number: for (int i = 0; i < HexString.Length; i += 2) {  	array [i / 2] = byte.Parse (HexString.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  }  
Magic Number,XenOvf,FileDigest,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Package.cs,ToArray,The following statement contains a magic number: for (int i = 0; i < HexString.Length; i += 2) {  	array [i / 2] = byte.Parse (HexString.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  }  
Magic Number,XenOvf,FileDigest,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Package.cs,ToArray,The following statement contains a magic number: for (int i = 0; i < HexString.Length; i += 2) {  	array [i / 2] = byte.Parse (HexString.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  }  
Magic Number,XenOvf,FileDigest,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Package.cs,ToArray,The following statement contains a magic number: i += 2
Magic Number,XenOvf,FileDigest,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Package.cs,ToArray,The following statement contains a magic number: array [i / 2] = byte.Parse (HexString.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  
Magic Number,XenOvf,FileDigest,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Package.cs,ToArray,The following statement contains a magic number: array [i / 2] = byte.Parse (HexString.Substring (i' 2)' System.Globalization.NumberStyles.HexNumber);  
Duplicate Code,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVMXcfg,The method contains a code clone-set at the following line numbers (starting from the method definition): ((59' 81)' (105' 127))
Missing Default,XenOvf,OvfCompressor,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Compression.cs,UncompressFileStream,The following switch statement is missing a default case: switch (method.ToLower ()) {  case "gzip":  	return CompressionFactory.Reader (CompressionFactory.Type.Gz' inputstream);  case "bzip2":  	return CompressionFactory.Reader (CompressionFactory.Type.Bz2' inputstream);  }  
Missing Default,XenOvf,OvfCompressor,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Compression.cs,CompressFileStream,The following switch statement is missing a default case: switch (method.ToLower ()) {  case "gzip":  	return CompressionFactory.Writer (CompressionFactory.Type.Gz' inputstream);  case "bzip2":  	return CompressionFactory.Writer (CompressionFactory.Type.Bz2' inputstream);  }  
Missing Default,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following switch statement is missing a default case: switch (prop.Name) {  case "ElementName": {  	ElementName = ((Ms_ParameterValue_Type)prop).Value;  	break;  }  case "InstanceID": {  	InstanceId = ((Ms_ParameterValue_Type)prop).Value;  	break;  }  case "SystemName": {  	SystemName = ((Ms_ParameterValue_Type)prop).Value;  	break;  }  case "VirtualSystemType": {  	VirtualSystemType = ((Ms_ParameterValue_Type)prop).Value;  	break;  }  }  
Missing Default,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following switch statement is missing a default case: switch (prop.Type.ToLower ()) {  case "string": {  	newvalue = new cimString ((string)((Ms_ParameterValue_Type)prop).Value);  	break;  }  case "boolean": {  	newvalue = new cimBoolean ();  	((cimBoolean)newvalue).Value = Convert.ToBoolean (((Ms_ParameterValue_Type)prop).Value);  	break;  }  case "uint16": {  	newvalue = new cimUnsignedShort ();  	((cimUnsignedShort)newvalue).Value = Convert.ToUInt16 (((Ms_ParameterValue_Type)prop).Value);  	break;  }  case "uint32": {  	newvalue = new cimUnsignedInt ();  	((cimUnsignedInt)newvalue).Value = Convert.ToUInt32 (((Ms_ParameterValue_Type)prop).Value);  	break;  }  case "uint64": {  	newvalue = new cimUnsignedLong ();  	((cimUnsignedLong)newvalue).Value = Convert.ToUInt64 (((Ms_ParameterValue_Type)prop).Value);  	break;  }  }  
Missing Default,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromHyperVXml,The following switch statement is missing a default case: switch (prop.Type.ToLower ()) {  case "string": {  	List<cimString> sarray = new List<cimString> ();  	foreach (Ms_ParameterValue_Type svalue in ((Ms_ParameterValueArray_Type)prop).Values) {  		sarray.Add (new cimString (svalue.Value));  	}  	newvalue = sarray.ToArray ();  	break;  }  }  
Missing Default,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,ConvertFromVPCXml,The following switch statement is missing a default case: switch (loc.drive_type.value) {  case "0": {  	continue;  }  // when 0 location appears empty  case "1":// when 1 VHD   {  	AddDisk (env' vsId' lang' diskId' Path.GetFileName (loc.pathname.absolute.value)' true' _ovfrm.GetString ("RASD_19_CAPTION")' _ovfrm.GetString ("RASD_19_DESCRIPTION")' 0' 0);  	break;  }  case "2":// when 2 ISO   {  	AddCDROM (env' vsId' diskId' _ovfrm.GetString ("RASD_16_CAPTION")' _ovfrm.GetString ("RASD_16_ELEMENTNAME"));  	if (loc.pathname != null && loc.pathname.absolute != null && !string.IsNullOrEmpty (loc.pathname.absolute.value)) {  		AddFileReference (env' lang' Path.GetFileName (loc.pathname.absolute.value)' diskId' 0' Properties.Settings.Default.isoFileFormatURI);  		UpdateResourceAllocationSettingData (env' vsId' diskId' "HostResource"' string.Format (Properties.Settings.Default.hostresource' diskId));  	}  	break;  }  }  
Missing Default,XenOvf,OVF,C:\repos\aftabahmedsajid_XenCenter-Complete-dependencies-\XenOvfApi\Conversions.cs,TransformXvaOvf_VBD,The following switch statement is missing a default case: switch (((string)n.xenvalue).ToUpper ()) {  case "CD": {  	isDisk = false;  	caption = _ovfrm.GetString ("RASD_16_CAPTION");  	description = _ovfrm.GetString ("RASD_16_DESCRIPTION");  	break;  }  case "DISK": {  	caption = _ovfrm.GetString ("RASD_19_CAPTION");  	description = _ovfrm.GetString ("RASD_19_DESCRIPTION");  	isDisk = true;  	break;  }  }  
