Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Jose,AesGcm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesGcm.cs,Decrypt,The method has 5 parameters. Parameters: key' iv' aad' cipherText' authTag
Long Parameter List,Jose,ConcatKDF,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\ConcatKDF.cs,DeriveKey,The method has 7 parameters. Parameters: externalPubKey' privateKey' keyBitLength' algorithmId' partyVInfo' partyUInfo' suppPubInfo
Long Parameter List,Jose,PBKDF2,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\PBKDF2.cs,DeriveKey,The method has 5 parameters. Parameters: password' salt' iterationCount' keyBitLength' prf
Long Parameter List,Jose,RsaPss,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\RsaPss.cs,Verify,The method has 5 parameters. Parameters: securedInput' signature' key' hash' saltSize
Long Parameter List,Jose,RsaPss,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\RsaPss.cs,VerifyHash,The method has 5 parameters. Parameters: hash' signature' key' algorithm' saltSize
Long Parameter List,Jose,AesCbcHmacEncryption,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwe\AesCbcHmacEncryption.cs,Decrypt,The method has 5 parameters. Parameters: aad' cek' iv' cipherText' authTag
Long Parameter List,Jose,AesGcmEncryption,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwe\AesGcmEncryption.cs,Decrypt,The method has 5 parameters. Parameters: aad' cek' iv' cipherText' authTag
Long Parameter List,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,Encode,The method has 7 parameters. Parameters: payload' key' alg' enc' compression' extraHeaders' settings
Long Parameter List,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,Encode,The method has 7 parameters. Parameters: payload' key' alg' enc' compression' extraHeaders' settings
Long Parameter List,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,EncodeBytes,The method has 7 parameters. Parameters: payload' key' alg' enc' compression' extraHeaders' settings
Long Parameter List,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,Encode,The method has 5 parameters. Parameters: payload' key' algorithm' extraHeaders' settings
Long Parameter List,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,Encode,The method has 5 parameters. Parameters: payload' key' algorithm' extraHeaders' settings
Long Parameter List,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,EncodeBytes,The method has 5 parameters. Parameters: payload' key' algorithm' extraHeaders' settings
Long Parameter List,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,Decode,The method has 5 parameters. Parameters: token' key' alg' enc' settings
Long Parameter List,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,DecodeBytes,The method has 5 parameters. Parameters: token' key' alg' enc' settings
Long Parameter List,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,Decode,The method has 5 parameters. Parameters: token' key' alg' enc' settings
Long Parameter List,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,DecodeBytes,The method has 6 parameters. Parameters: token' key' expectedJwsAlg' expectedJweAlg' expectedJweEnc' settings
Long Parameter List,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,Decode,The method has 6 parameters. Parameters: token' key' jwsAlg' jweAlg' jweEnc' settings
Long Parameter List,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,DecryptBytes,The method has 5 parameters. Parameters: parts' key' jweAlg' jweEnc' settings
Long Parameter List,Jose.jwe,IJweAlgorithm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwe\IJweAlgorithm.cs,Decrypt,The method has 5 parameters. Parameters: aad' cek' iv' cipherText' authTag
Long Parameter List,Jose.native,BCrypt,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\native\BCrypt.cs,BCryptGetProperty,The method has 6 parameters. Parameters: hObject' pszProperty' pbOutput' cbOutput' pcbResult' flags
Long Parameter List,Jose.native,BCrypt,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\native\BCrypt.cs,BCryptSetAlgorithmProperty,The method has 5 parameters. Parameters: hObject' pszProperty' pbInput' cbInput' dwFlags
Long Parameter List,Jose.native,BCrypt,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\native\BCrypt.cs,BCryptImportKey,The method has 9 parameters. Parameters: hAlgorithm' hImportKey' pszBlobType' phKey' pbKeyObject' cbKeyObject' pbInput' cbInput' dwFlags
Long Parameter List,Jose.native,BCrypt,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\native\BCrypt.cs,BCryptEncrypt,The method has 10 parameters. Parameters: hKey' pbInput' cbInput' pPaddingInfo' pbIV' cbIV' pbOutput' cbOutput' pcbResult' dwFlags
Long Parameter List,Jose.native,BCrypt,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\native\BCrypt.cs,BCryptDecrypt,The method has 10 parameters. Parameters: hKey' pbInput' cbInput' pPaddingInfo' pbIV' cbIV' pbOutput' cbOutput' pcbResult' dwFlags
Long Parameter List,Jose.native,NCrypt,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\native\NCrypt.cs,NCryptDeriveKey,The method has 7 parameters. Parameters: hSharedSecret' kdf' parameterList' derivedKey' derivedKeyByteSize' result' flags
Long Parameter List,Jose.native,NCrypt,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\native\NCrypt.cs,NCryptSignHash,The method has 8 parameters. Parameters: hKey' pPaddingInfo' pbHashValue' cbHashValue' pbSignature' cbSignature' pcbResult' dwFlags
Long Parameter List,Jose.native,NCrypt,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\native\NCrypt.cs,NCryptVerifySignature,The method has 7 parameters. Parameters: hKey' pPaddingInfo' pbHashValue' cbHashValue' pbSignature' cbSignature' dwFlags
Long Parameter List,Jose.native,NCrypt,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\native\NCrypt.cs,NCryptDecrypt,The method has 8 parameters. Parameters: hKey' pbInput' cbInput' pvPadding' pbOutput' cbOutput' pcbResult' dwFlags
Long Parameter List,Jose.native,NCrypt,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\native\NCrypt.cs,NCryptEncrypt,The method has 8 parameters. Parameters: hKey' pbInput' cbInput' pvPadding' pbOutput' cbOutput' pcbResult' dwFlags
Long Identifier,Jose.native,BCrypt,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\native\BCrypt.cs,,The length of the parameter BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG is 33.
Long Identifier,Jose.native,BCrypt,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\native\BCrypt.cs,,The length of the parameter BCRYPT_INIT_AUTH_MODE_INFO_VERSION is 34.
Long Identifier,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,,The length of the parameter BCRYPT_ECDSA_PUBLIC_P256_MAGIC is 30.
Long Identifier,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,,The length of the parameter BCRYPT_ECDSA_PRIVATE_P256_MAGIC is 31.
Long Identifier,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,,The length of the parameter BCRYPT_ECDSA_PUBLIC_P384_MAGIC is 30.
Long Identifier,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,,The length of the parameter BCRYPT_ECDSA_PRIVATE_P384_MAGIC is 31.
Long Identifier,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,,The length of the parameter BCRYPT_ECDSA_PUBLIC_P521_MAGIC is 30.
Long Identifier,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,,The length of the parameter BCRYPT_ECDSA_PRIVATE_P521_MAGIC is 31.
Long Identifier,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,,The length of the parameter BCRYPT_ECDH_PRIVATE_P256_MAGIC is 30.
Long Identifier,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,,The length of the parameter BCRYPT_ECDH_PRIVATE_P384_MAGIC is 30.
Long Identifier,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,,The length of the parameter BCRYPT_ECDH_PRIVATE_P521_MAGIC is 30.
Long Statement,Jose,AesGcm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesGcm.cs,Encrypt,The length of the statement  "            IntPtr hAlg = OpenAlgorithmProvider(BCrypt.BCRYPT_AES_ALGORITHM' BCrypt.MS_PRIMITIVE_PROVIDER' BCrypt.BCRYPT_CHAIN_MODE_GCM); " is 125.
Long Statement,Jose,AesGcm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesGcm.cs,Encrypt,The length of the statement  "                uint status = BCrypt.BCryptEncrypt(hKey' plainText' plainText.Length' ref authInfo' ivData' ivData.Length' null' 0' ref cipherSize' 0x0); " is 137.
Long Statement,Jose,AesGcm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesGcm.cs,Encrypt,The length of the statement  "                    throw new CryptographicException(string.Format("BCrypt.BCryptEncrypt() (get size) failed with status code:{0}"' status)); " is 121.
Long Statement,Jose,AesGcm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesGcm.cs,Decrypt,The length of the statement  "            IntPtr hAlg = OpenAlgorithmProvider(BCrypt.BCRYPT_AES_ALGORITHM' BCrypt.MS_PRIMITIVE_PROVIDER' BCrypt.BCRYPT_CHAIN_MODE_GCM); " is 125.
Long Statement,Jose,AesGcm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesGcm.cs,Decrypt,The length of the statement  "                uint status = BCrypt.BCryptDecrypt(hKey' cipherText' cipherText.Length' ref authInfo' ivData' ivData.Length' null' 0' ref plainTextSize' 0x0); " is 142.
Long Statement,Jose,AesGcm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesGcm.cs,Decrypt,The length of the statement  "                    throw new CryptographicException(string.Format("BCrypt.BCryptDecrypt() (get size) failed with status code: {0}"' status)); " is 122.
Long Statement,Jose,AesGcm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesGcm.cs,Decrypt,The length of the statement  "                status = BCrypt.BCryptDecrypt(hKey' cipherText' cipherText.Length' ref authInfo' ivData' ivData.Length' plainText' plainText.Length' ref plainTextSize' 0x0); " is 157.
Long Statement,Jose,AesGcm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesGcm.cs,MaxAuthTagSize,The length of the statement  "            return BitConverter.ToInt32(new[] { tagLengthsValue[4]' tagLengthsValue[5]' tagLengthsValue[6]' tagLengthsValue[7] }' 0); " is 121.
Long Statement,Jose,AesGcm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesGcm.cs,OpenAlgorithmProvider,The length of the statement  "                throw new CryptographicException(string.Format("BCrypt.BCryptOpenAlgorithmProvider() failed with status code:{0}"' status)); " is 124.
Long Statement,Jose,AesGcm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesGcm.cs,OpenAlgorithmProvider,The length of the statement  "                throw new CryptographicException(string.Format("BCrypt.BCryptSetAlgorithmProperty(BCrypt.BCRYPT_CHAINING_MODE' BCrypt.BCRYPT_CHAIN_MODE_GCM) failed with status code:{0}"' status)); " is 180.
Long Statement,Jose,AesGcm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesGcm.cs,ImportKey,The length of the statement  "            byte[] keyBlob = Arrays.Concat(BCrypt.BCRYPT_KEY_DATA_BLOB_MAGIC' BitConverter.GetBytes(0x1)' BitConverter.GetBytes(key.Length)' key); " is 134.
Long Statement,Jose,AesGcm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesGcm.cs,ImportKey,The length of the statement  "            uint status = BCrypt.BCryptImportKey(hAlg' IntPtr.Zero' BCrypt.BCRYPT_KEY_DATA_BLOB' out hKey' keyDataBuffer' keyDataSize' keyBlob' keyBlob.Length' 0x0); " is 153.
Long Statement,Jose,AesGcm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesGcm.cs,GetProperty,The length of the statement  "                throw new CryptographicException(string.Format("BCrypt.BCryptGetProperty() (get size) failed with status code:{0}"' status)); " is 125.
Long Statement,Jose,AesKeyWrap,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesKeyWrap.cs,Wrap,The length of the statement  "            Ensure.MinBitSize(cek' 128' "AesKeyWrap.Wrap() expects content length not less than 128 bits' but was {0}"' cek.Length * 8L); " is 125.
Long Statement,Jose,AesKeyWrap,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesKeyWrap.cs,Wrap,The length of the statement  "            Ensure.Divisible(cek.Length' 8' "AesKeyWrap.Wrap() expects content length to be divisable by 8' but was given a content of {0} bit size."' cek.Length * 8L); " is 156.
Long Statement,Jose,AesKeyWrap,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesKeyWrap.cs,Unwrap,The length of the statement  "            Ensure.MinBitSize(encryptedCek' 128' "AesKeyWrap.Unwrap() expects content length not less than 128 bits' but was {0}"' encryptedCek.Length * 8L); " is 145.
Long Statement,Jose,AesKeyWrap,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesKeyWrap.cs,Unwrap,The length of the statement  "            Ensure.Divisible(encryptedCek.Length' 8' "AesKeyWrap.Unwrap() expects content length to be divisable by 8' but was given a content of {0} bit size."' encryptedCek.Length * 8L); " is 176.
Long Statement,Jose,ConcatKDF,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\ConcatKDF.cs,DeriveKey,The length of the statement  "                            uint status = NCrypt.NCryptDeriveKey(hSecretAgreement' "SP800_56A_CONCAT"' parameters' null' 0' out derivedSecretByteSize' 0); " is 126.
Long Statement,Jose,ConcatKDF,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\ConcatKDF.cs,DeriveKey,The length of the statement  "                            status = NCrypt.NCryptDeriveKey(hSecretAgreement' "SP800_56A_CONCAT"' parameters' secretKey' derivedSecretByteSize' out derivedSecretByteSize' 0); " is 146.
Long Statement,Jose,PBKDF2,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\PBKDF2.cs,DeriveKey,The length of the statement  "            Ensure.MaxValue(keyBitLength' 4294967295' "PBKDF2 expect derived key size to be not more that (2^32-1) bits' but was requested {0} bits."'keyBitLength); " is 152.
Long Statement,Jose,RsaOaep,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\RsaOaep.cs,Decrypt,The length of the statement  "            uint status = NCrypt.NCryptDecrypt(key.Handle' cipherText' cipherText.Length' ref paddingInfo' null' 0' out plainTextByteSize' BCrypt.BCRYPT_PAD_OAEP); " is 151.
Long Statement,Jose,RsaOaep,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\RsaOaep.cs,Decrypt,The length of the statement  "                throw new CryptographicException(string.Format("NCrypt.Decrypt() (plaintext buffer size) failed with status code:{0}"' status)); " is 128.
Long Statement,Jose,RsaOaep,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\RsaOaep.cs,Decrypt,The length of the statement  "            status = NCrypt.NCryptDecrypt(key.Handle' cipherText' cipherText.Length' ref paddingInfo' plainText' plainTextByteSize' out plainTextByteSize' BCrypt.BCRYPT_PAD_OAEP); " is 167.
Long Statement,Jose,RsaOaep,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\RsaOaep.cs,Encrypt,The length of the statement  "            uint status = NCrypt.NCryptEncrypt(key.Handle' plainText' plainText.Length' ref paddingInfo' null' 0' out cipherTextByteSize' BCrypt.BCRYPT_PAD_OAEP); " is 150.
Long Statement,Jose,RsaOaep,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\RsaOaep.cs,Encrypt,The length of the statement  "                throw new CryptographicException(string.Format("NCrypt.Encrypt() (ciphertext buffer size) failed with status code:{0}"' status)); " is 129.
Long Statement,Jose,RsaOaep,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\RsaOaep.cs,Encrypt,The length of the statement  "            status = NCrypt.NCryptEncrypt(key.Handle' plainText' plainText.Length' ref paddingInfo' cipherText' cipherTextByteSize' out cipherTextByteSize' BCrypt.BCRYPT_PAD_OAEP); " is 168.
Long Statement,Jose,RsaPss,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\RsaPss.cs,VerifyHash,The length of the statement  "            uint status = NCrypt.NCryptVerifySignature(key.Handle' ref paddingInfo' hash' hash.Length' signature' signature.Length' BCrypt.BCRYPT_PAD_PSS); " is 143.
Long Statement,Jose,RsaPss,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\RsaPss.cs,VerifyHash,The length of the statement  "            if (status == NCrypt.NTE_BAD_SIGNATURE) //honestly it always failing with NTE_INVALID_PARAMETER' but let's stick to public API " is 126.
Long Statement,Jose,RsaPss,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\RsaPss.cs,VerifyHash,The length of the statement  "                throw new CryptographicException(string.Format("NCrypt.NCryptSignHash() (signature size) failed with status code:{0}"' status)); " is 128.
Long Statement,Jose,RsaPss,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\RsaPss.cs,SignHash,The length of the statement  "            status = NCrypt.NCryptSignHash(key.Handle' ref paddingIndo' hash' hash.Length' null' 0' out size'BCrypt.BCRYPT_PAD_PSS); " is 120.
Long Statement,Jose,RsaPss,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\RsaPss.cs,SignHash,The length of the statement  "                throw new CryptographicException(string.Format("NCrypt.NCryptSignHash() (signature size) failed with status code:{0}"' status)); " is 128.
Long Statement,Jose,RsaPss,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\RsaPss.cs,SignHash,The length of the statement  "            status = NCrypt.NCryptSignHash(key.Handle' ref paddingIndo' hash' hash.Length' signature' signature.Length' out size' BCrypt.BCRYPT_PAD_PSS); " is 141.
Long Statement,Jose,RsaPss,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\RsaPss.cs,HashAlgorithm,The length of the statement  "            throw new ArgumentException(string.Format("RsaPss expects hash function to be SHA256' SHA384 or SHA512' but was given:{0}"'hash)); " is 130.
Long Statement,Jose,AesGcmKeyWrapManagement,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\AesGcmKeyWrapManagement.cs,WrapNewKey,The length of the statement  "            Ensure.BitSize(sharedKey' keyLengthBits' string.Format("AesGcmKeyWrapManagement management algorithm expected key of size {0} bits' but was given {1} bits"' keyLengthBits' sharedKey.Length * 8L)); " is 196.
Long Statement,Jose,AesGcmKeyWrapManagement,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\AesGcmKeyWrapManagement.cs,Unwrap,The length of the statement  "            Ensure.BitSize(sharedKey' keyLengthBits' string.Format("AesGcmKeyWrapManagement management algorithm expected key of size {0} bits' but was given {1} bits"' keyLengthBits' sharedKey.Length * 8L)); " is 196.
Long Statement,Jose,AesGcmKeyWrapManagement,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\AesGcmKeyWrapManagement.cs,Unwrap,The length of the statement  "            Ensure.Contains(header' new[] { "iv" }' "AesGcmKeyWrapManagement algorithm expects 'iv' param in JWT header' but was not found"); " is 129.
Long Statement,Jose,AesGcmKeyWrapManagement,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\AesGcmKeyWrapManagement.cs,Unwrap,The length of the statement  "            Ensure.Contains(header' new[] { "tag" }' "AesGcmKeyWrapManagement algorithm expects 'tag' param in JWT header' but was not found"); " is 131.
Long Statement,Jose,AesKeyWrapManagement,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\AesKeyWrapManagement.cs,WrapNewKey,The length of the statement  "            Ensure.BitSize(sharedKey' kekLengthBits' string.Format("AesKeyWrap management algorithm expected key of size {0} bits' but was given {1} bits"' kekLengthBits' sharedKey.Length * 8L)); " is 183.
Long Statement,Jose,AesKeyWrapManagement,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\AesKeyWrapManagement.cs,Unwrap,The length of the statement  "            Ensure.BitSize(sharedKey' kekLengthBits' string.Format("AesKeyWrap management algorithm expected key of size {0} bits' but was given {1} bits"' kekLengthBits' sharedKey.Length * 8L)); " is 183.
Long Statement,Jose,EcdhKeyManagement,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\EcdhKeyManagement.cs,Unwrap,The length of the statement  "            Ensure.Contains(header' new[] {"epk"}' "EcdhKeyManagement algorithm expects 'epk' key param in JWT header' but was not found"); " is 127.
Long Statement,Jose,EcdhKeyManagement,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\EcdhKeyManagement.cs,Unwrap,The length of the statement  "            Ensure.Contains(header' new[] {algIdHeader}' "EcdhKeyManagement algorithm expects 'enc' header to be present in JWT header' but was not found"); " is 144.
Long Statement,Jose,EcdhKeyManagement,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\EcdhKeyManagement.cs,Unwrap,The length of the statement  "            Ensure.Contains(epk' new[] {"x"'"y"'"crv"}' "EcdhKeyManagement algorithm expects 'epk' key to contain 'x'''y' and 'crv' fields."); " is 130.
Long Statement,Jose,EcdhKeyManagement,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\EcdhKeyManagement.cs,DeriveKey,The length of the statement  "            return ConcatKDF.DeriveKey(externalPublicKey' privateKey' cekSizeBits' algorithmId' partyVInfo' partyUInfo' suppPubInfo); " is 121.
Long Statement,Jose,Pbse2HmacShaKeyManagementWithAesKeyWrap,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\Pbse2HmacShaKeyManagementWithAesKeyWrap.cs,WrapNewKey,The length of the statement  "            var sharedPassphrase = Ensure.Type<string>(key' "Pbse2HmacShaKeyManagementWithAesKeyWrap management algorithm expectes key to be string."); " is 139.
Long Statement,Jose,Pbse2HmacShaKeyManagementWithAesKeyWrap,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\Pbse2HmacShaKeyManagementWithAesKeyWrap.cs,Unwrap,The length of the statement  "            var sharedPassphrase = Ensure.Type<string>(key' "Pbse2HmacShaKeyManagementWithAesKeyWrap management algorithm expectes key to be string."); " is 139.
Long Statement,Jose,Pbse2HmacShaKeyManagementWithAesKeyWrap,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\Pbse2HmacShaKeyManagementWithAesKeyWrap.cs,Unwrap,The length of the statement  "            Ensure.Contains(header' new[] { "p2c" }' "Pbse2HmacShaKeyManagementWithAesKeyWrap algorithm expects 'p2c' param in JWT header' but was not found"); " is 147.
Long Statement,Jose,Pbse2HmacShaKeyManagementWithAesKeyWrap,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\Pbse2HmacShaKeyManagementWithAesKeyWrap.cs,Unwrap,The length of the statement  "            Ensure.Contains(header' new[] { "p2s" }' "Pbse2HmacShaKeyManagementWithAesKeyWrap algorithm expects 'p2s' param in JWT header' but was not found"); " is 147.
Long Statement,Jose,RsaKeyManagement,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\RsaKeyManagement.cs,WrapNewKey,The length of the statement  "            var publicKey = Ensure.Type<RSACryptoServiceProvider>(key' "RsaKeyManagement alg expects key to be of RSACryptoServiceProvider type."); " is 135.
Long Statement,Jose,RsaKeyManagement,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\RsaKeyManagement.cs,WrapNewKey,The length of the statement  "            throw new ArgumentException("RsaKeyManagement algorithm expects key to be of either CngKey' RSACryptoServiceProvider or RSA types."); " is 133.
Long Statement,Jose,RsaKeyManagement,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\RsaKeyManagement.cs,Unwrap,The length of the statement  "            var privateKey = Ensure.Type<RSACryptoServiceProvider>(key' "RsaKeyManagement alg expects key to be of RSACryptoServiceProvider type."); " is 136.
Long Statement,Jose,RsaKeyManagement,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\RsaKeyManagement.cs,Unwrap,The length of the statement  "            throw new ArgumentException("RsaKeyManagement algorithm expects key to be of either CngKey' RSACryptoServiceProvider or RSA types."); " is 133.
Long Statement,Jose,AesCbcHmacEncryption,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwe\AesCbcHmacEncryption.cs,Encrypt,The length of the statement  "            Ensure.BitSize(cek' keyLength' string.Format("AES-CBC with HMAC algorithm expected key of size {0} bits' but was given {1} bits"' keyLength' cek.Length * 8L)); " is 159.
Long Statement,Jose,AesCbcHmacEncryption,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwe\AesCbcHmacEncryption.cs,Decrypt,The length of the statement  "            Ensure.BitSize(cek' keyLength' string.Format("AES-CBC with HMAC algorithm expected key of size {0} bits' but was given {1} bits"' keyLength' cek.Length * 8L)); " is 159.
Long Statement,Jose,AesGcmEncryption,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwe\AesGcmEncryption.cs,Encrypt,The length of the statement  "            Ensure.BitSize(cek' keyLength' string.Format("AES-GCM algorithm expected key of size {0} bits' but was given {1} bits"'keyLength' cek.Length * 8L)); " is 148.
Long Statement,Jose,AesGcmEncryption,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwe\AesGcmEncryption.cs,Decrypt,The length of the statement  "            Ensure.BitSize(cek' keyLength' string.Format("AES-GCM algorithm expected key of size {0} bits' but was given {1} bits"'keyLength' cek.Length * 8L)); " is 148.
Long Statement,Jose,RsaUsingSha,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jws\RsaUsingSha.cs,Verify,The length of the statement  "                var publicKey = Ensure.Type<AsymmetricAlgorithm>(key' "RsaUsingSha alg expects key to be of AsymmetricAlgorithm type.");  " is 120.
Long Statement,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,EncodeBytes,The length of the statement  "            IDictionary<string' object> jwtHeader = new Dictionary<string' object> { { "alg"' jwtSettings.JwaHeaderValue(alg)}' { "enc"' jwtSettings.JweHeaderValue(enc) } }; " is 161.
Long Statement,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,DecodeBytes,The length of the statement  "            Ensure.IsNotEmpty(token' "Incoming token expected to be in compact serialization form' not empty' whitespace or null."); " is 120.
Long Statement,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,DecryptBytes,The length of the statement  "            IDictionary<string' object> jwtHeader = jwtSettings.JsonMapper.Parse<Dictionary<string' object>>(Encoding.UTF8.GetString(header)); " is 130.
Long Statement,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,DecryptBytes,The length of the statement  "                throw new InvalidAlgorithmException("The algorithm type passed to the Decrypt method did not match the algorithm type in the header."); " is 135.
Long Statement,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,DecryptBytes,The length of the statement  "                throw new InvalidAlgorithmException("The encryption type passed to the Decrypt method did not match the encryption type in the header."); " is 137.
Long Statement,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,Xor,The length of the statement  "            Ensure.SameSize(left'right'"Arrays.Xor(byte[]' byte[]) expects both arrays to be same legnth' but was given {0} and {1}"'left.Length'right.Length); " is 147.
Long Statement,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,IntToBytes,The length of the statement  "                ? new[] { (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) } " is 125.
Long Statement,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,IntToBytes,The length of the statement  "                : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF) }; " is 126.
Long Statement,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,LongToBytes,The length of the statement  "                ? new[] { (byte)((_value >> 56) & 0xFF)' (byte)((_value >> 48) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }  " is 249.
Long Statement,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,LongToBytes,The length of the statement  "                : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 48) & 0xFF) ' (byte)((_value >> 56) & 0xFF) }; " is 251.
Long Statement,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,RightmostBits,The length of the statement  "            Ensure.Divisible(lengthBits' 8' "RightmostBits() expects length in bits divisible by 8' but was given {0}"' lengthBits); " is 120.
Long Statement,Jose.netstandard1_4,EcdsaUsingSha,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jws\netstandard1_4\EcdsaUsingSha.cs,Sign,The length of the statement  "                    Ensure.BitSize(privateKey.KeySize' keySize' string.Format("EcdsaUsingSha algorithm expected key of size {0} bits' but was given {1} bits"' keySize' privateKey.KeySize)); " is 169.
Long Statement,Jose.netstandard1_4,EcdsaUsingSha,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jws\netstandard1_4\EcdsaUsingSha.cs,Sign,The length of the statement  "                    Ensure.BitSize(privateKey.KeySize' keySize' string.Format("EcdsaUsingSha algorithm expected key of size {0} bits' but was given {1} bits"' keySize' privateKey.KeySize)); " is 169.
Long Statement,Jose.netstandard1_4,EcdsaUsingSha,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jws\netstandard1_4\EcdsaUsingSha.cs,Verify,The length of the statement  "                    Ensure.BitSize(publicKey.KeySize' keySize' string.Format("EcdsaUsingSha algorithm expected key of size {0} bits' but was given {1} bits"' keySize' publicKey.KeySize)); " is 167.
Long Statement,Jose.netstandard1_4,EcdsaUsingSha,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jws\netstandard1_4\EcdsaUsingSha.cs,Verify,The length of the statement  "                    Ensure.BitSize(publicKey.KeySize' keySize' string.Format("EcdsaUsingSha algorithm expected key of size {0} bits' but was given {1} bits"' keySize' publicKey.KeySize)); " is 167.
Long Statement,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,New,The length of the statement  "                throw new ArgumentException("Usage parameter expected to be set either 'CngKeyUsages.Signing' or 'CngKeyUsages.KeyAgreement"); " is 126.
Long Statement,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,Generate,The length of the statement  "            CngKey cngKey = CngKey.Create(recieverPubKey.Algorithm' null' new CngKeyCreationParameters { ExportPolicy = CngExportPolicies.AllowPlaintextExport }); " is 150.
Long Statement,Security.Cryptography,RsaKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\RsaKey.cs,New,The length of the statement  "            byte[] blob = Arrays.Concat(magic' bitLength' expLength' modLength' prime1Length' prime2Length' exponent' modulus' p' q); " is 121.
Magic Number,Jose,AesGcm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesGcm.cs,MaxAuthTagSize,The following statement contains a magic number: return BitConverter.ToInt32(new[] { tagLengthsValue[4]' tagLengthsValue[5]' tagLengthsValue[6]' tagLengthsValue[7] }' 0);
Magic Number,Jose,AesGcm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesGcm.cs,MaxAuthTagSize,The following statement contains a magic number: return BitConverter.ToInt32(new[] { tagLengthsValue[4]' tagLengthsValue[5]' tagLengthsValue[6]' tagLengthsValue[7] }' 0);
Magic Number,Jose,AesGcm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesGcm.cs,MaxAuthTagSize,The following statement contains a magic number: return BitConverter.ToInt32(new[] { tagLengthsValue[4]' tagLengthsValue[5]' tagLengthsValue[6]' tagLengthsValue[7] }' 0);
Magic Number,Jose,AesGcm,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesGcm.cs,MaxAuthTagSize,The following statement contains a magic number: return BitConverter.ToInt32(new[] { tagLengthsValue[4]' tagLengthsValue[5]' tagLengthsValue[6]' tagLengthsValue[7] }' 0);
Magic Number,Jose,AesKeyWrap,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesKeyWrap.cs,Wrap,The following statement contains a magic number: Ensure.MinBitSize(cek' 128' "AesKeyWrap.Wrap() expects content length not less than 128 bits' but was {0}"' cek.Length * 8L);
Magic Number,Jose,AesKeyWrap,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesKeyWrap.cs,Wrap,The following statement contains a magic number: Ensure.Divisible(cek.Length' 8' "AesKeyWrap.Wrap() expects content length to be divisable by 8' but was given a content of {0} bit size."' cek.Length * 8L);
Magic Number,Jose,AesKeyWrap,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesKeyWrap.cs,Wrap,The following statement contains a magic number: byte[][] r = Arrays.Slice(cek' 8);
Magic Number,Jose,AesKeyWrap,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesKeyWrap.cs,Wrap,The following statement contains a magic number: for (long j = 0; j < 6; j++)                                      // For j = 0 to 5              {                  for (long i = 0; i < n; i++)                                  //    For i=1 to n                  {                      long t = n * j + i + 1;                        byte[] b = AesEnc(kek' Arrays.Concat(a' r[i]));     //      B=AES(K' A | R[i])                      a = Arrays.FirstHalf(b);                                  //      A=MSB(64'B) ^ t where t = (n*j)+i                      r[i] = Arrays.SecondHalf(b);                              //      R[i] = LSB(64' B)                        a = Arrays.Xor(a' t);                  }              }
Magic Number,Jose,AesKeyWrap,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesKeyWrap.cs,Unwrap,The following statement contains a magic number: Ensure.MinBitSize(encryptedCek' 128' "AesKeyWrap.Unwrap() expects content length not less than 128 bits' but was {0}"' encryptedCek.Length * 8L);
Magic Number,Jose,AesKeyWrap,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesKeyWrap.cs,Unwrap,The following statement contains a magic number: Ensure.Divisible(encryptedCek.Length' 8' "AesKeyWrap.Unwrap() expects content length to be divisable by 8' but was given a content of {0} bit size."' encryptedCek.Length * 8L);
Magic Number,Jose,AesKeyWrap,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesKeyWrap.cs,Unwrap,The following statement contains a magic number: byte[][] c = Arrays.Slice(encryptedCek' 8);
Magic Number,Jose,AesKeyWrap,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\AesKeyWrap.cs,Unwrap,The following statement contains a magic number: for (long j = 5; j >= 0; j--)                                   // For j = 5 to 0              {                  for (long i = n - 1; i >= 0; i--)                           //   For i = n to 1                  {                      long t = n * j + i + 1;                        a = Arrays.Xor(a' t);                      byte[] B = AesDec(kek' Arrays.Concat(a' r[i]));     //     B = AES-1(K' (A ^ t) | R[i]) where t = n*j+i                      a = Arrays.FirstHalf(B);                                  //     A = MSB(64' B)                      r[i] = Arrays.SecondHalf(B);                              //     R[i] = LSB(64' B)                  }              }
Magic Number,Jose,PBKDF2,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\PBKDF2.cs,DeriveKey,The following statement contains a magic number: Ensure.MaxValue(keyBitLength' 4294967295' "PBKDF2 expect derived key size to be not more that (2^32-1) bits' but was requested {0} bits."'keyBitLength);
Magic Number,Jose,PBKDF2,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\PBKDF2.cs,DeriveKey,The following statement contains a magic number: int hLen=prf.HashSize / 8;
Magic Number,Jose,PBKDF2,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\PBKDF2.cs,DeriveKey,The following statement contains a magic number: int dkLen = keyBitLength /8;
Magic Number,Jose,PBKDF2,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\PBKDF2.cs,DeriveKey,The following statement contains a magic number: T[l - 1] = Arrays.LeftmostBits(T[l - 1]' r * 8);
Magic Number,Jose,PBKDF2,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\crypto\PBKDF2.cs,F,The following statement contains a magic number: for(int i=2;i<=iterationCount;i++)              {                  U = prf.ComputeHash(U);                                                     // U_c = PRF (P' U_{c-1}) .                                  result = Arrays.Xor(result' U);                                             // U_1 \xor U_2 \xor ... \xor U_c              }
Magic Number,Jose,AesGcmKeyWrapManagement,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\AesGcmKeyWrapManagement.cs,WrapNewKey,The following statement contains a magic number: byte[] iv = Arrays.Random(96);
Magic Number,Jose,Pbse2HmacShaKeyManagementWithAesKeyWrap,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\Pbse2HmacShaKeyManagementWithAesKeyWrap.cs,WrapNewKey,The following statement contains a magic number: int iterationCount = 8192;
Magic Number,Jose,Pbse2HmacShaKeyManagementWithAesKeyWrap,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwa\Pbse2HmacShaKeyManagementWithAesKeyWrap.cs,WrapNewKey,The following statement contains a magic number: byte[] saltInput = Arrays.Random(96);
Magic Number,Jose,AesGcmEncryption,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jwe\AesGcmEncryption.cs,Encrypt,The following statement contains a magic number: byte[] iv = Arrays.Random(96);
Magic Number,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,Payload,The following statement contains a magic number: if(parts.Length > 3)              {                  throw new JoseException(                      "Getting payload for encrypted tokens is not supported. Please use Jose.JWT.Decode() method instead.");              }
Magic Number,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,PayloadBytes,The following statement contains a magic number: if (parts.Length > 3)              {                  throw new JoseException(                      "Getting payload for encrypted tokens is not supported. Please use Jose.JWT.Decode() method instead.");              }
Magic Number,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,EncodeBytes,The following statement contains a magic number: return Compact.Serialize(header' encryptedCek' encParts[0]' encParts[1]' encParts[2]);
Magic Number,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,DecodeBytes,The following statement contains a magic number: if (parts.Length == 5) //encrypted JWT              {                  return DecryptBytes(parts' key' expectedJweAlg' expectedJweEnc' settings);              }              else              {                  //signed or plain JWT                  byte[] header = parts[0];                  byte[] payload = parts[1];                  byte[] signature = parts[2];                    byte[] securedInput = Encoding.UTF8.GetBytes(Compact.Serialize(header' payload));                    var jwtSettings = GetSettings(settings);                    var headerData = jwtSettings.JsonMapper.Parse<Dictionary<string' object>>(Encoding.UTF8.GetString(header));                  var algorithm = (string)headerData["alg"];                  var jwsAlgorithm = jwtSettings.JwsAlgorithmFromHeader(algorithm);                  if (expectedJwsAlg != null && expectedJwsAlg != jwsAlgorithm)                  {                      throw new InvalidAlgorithmException(                          "The algorithm type passed to the Decode method did not match the algorithm type in the header.");                  }                    var jwsAlgorithmImpl = jwtSettings.Jws(jwsAlgorithm);                    if (jwsAlgorithmImpl == null)                  {                      throw new JoseException(string.Format("Unsupported JWS algorithm requested: {0}"' algorithm));                  }                    if (!jwsAlgorithmImpl.Verify(signature' securedInput' key))                  {                      throw new IntegrityException("Invalid signature.");                  }                    return payload;              }
Magic Number,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,DecodeBytes,The following statement contains a magic number: if (parts.Length == 5) //encrypted JWT              {                  return DecryptBytes(parts' key' expectedJweAlg' expectedJweEnc' settings);              }              else              {                  //signed or plain JWT                  byte[] header = parts[0];                  byte[] payload = parts[1];                  byte[] signature = parts[2];                    byte[] securedInput = Encoding.UTF8.GetBytes(Compact.Serialize(header' payload));                    var jwtSettings = GetSettings(settings);                    var headerData = jwtSettings.JsonMapper.Parse<Dictionary<string' object>>(Encoding.UTF8.GetString(header));                  var algorithm = (string)headerData["alg"];                  var jwsAlgorithm = jwtSettings.JwsAlgorithmFromHeader(algorithm);                  if (expectedJwsAlg != null && expectedJwsAlg != jwsAlgorithm)                  {                      throw new InvalidAlgorithmException(                          "The algorithm type passed to the Decode method did not match the algorithm type in the header.");                  }                    var jwsAlgorithmImpl = jwtSettings.Jws(jwsAlgorithm);                    if (jwsAlgorithmImpl == null)                  {                      throw new JoseException(string.Format("Unsupported JWS algorithm requested: {0}"' algorithm));                  }                    if (!jwsAlgorithmImpl.Verify(signature' securedInput' key))                  {                      throw new IntegrityException("Invalid signature.");                  }                    return payload;              }
Magic Number,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,DecryptBytes,The following statement contains a magic number: byte[] iv = parts[2];
Magic Number,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,DecryptBytes,The following statement contains a magic number: byte[] cipherText = parts[3];
Magic Number,Jose,JWT,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\JWT.cs,DecryptBytes,The following statement contains a magic number: byte[] authTag = parts[4];
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,FirstHalf,The following statement contains a magic number: Ensure.Divisible(arr.Length' 2' "Arrays.FirstHalf() expects even number of element in array.");
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,FirstHalf,The following statement contains a magic number: int halfIndex = arr.Length/2;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,SecondHalf,The following statement contains a magic number: Ensure.Divisible(arr.Length' 2' "Arrays.SecondHalf() expects even number of element in array.");
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,SecondHalf,The following statement contains a magic number: int halfIndex = arr.Length/2;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,Xor,The following statement contains a magic number: Ensure.BitSize(left' 64' "Arrays.Xor(byte[]' long) expects array size to be 8 bytes' but was {0}"' left.Length);
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,Random,The following statement contains a magic number: byte[] data = new byte[sizeBits / 8];
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,IntToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                  ? new[] { (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                  : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,IntToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                  ? new[] { (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                  : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,IntToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                  ? new[] { (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                  : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,IntToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                  ? new[] { (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                  : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,IntToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                  ? new[] { (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                  : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,IntToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                  ? new[] { (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                  : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,LongToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                   ? new[] { (byte)((_value >> 56) & 0xFF)' (byte)((_value >> 48) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                   : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 48) & 0xFF) ' (byte)((_value >> 56) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,LongToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                   ? new[] { (byte)((_value >> 56) & 0xFF)' (byte)((_value >> 48) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                   : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 48) & 0xFF) ' (byte)((_value >> 56) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,LongToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                   ? new[] { (byte)((_value >> 56) & 0xFF)' (byte)((_value >> 48) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                   : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 48) & 0xFF) ' (byte)((_value >> 56) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,LongToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                   ? new[] { (byte)((_value >> 56) & 0xFF)' (byte)((_value >> 48) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                   : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 48) & 0xFF) ' (byte)((_value >> 56) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,LongToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                   ? new[] { (byte)((_value >> 56) & 0xFF)' (byte)((_value >> 48) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                   : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 48) & 0xFF) ' (byte)((_value >> 56) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,LongToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                   ? new[] { (byte)((_value >> 56) & 0xFF)' (byte)((_value >> 48) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                   : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 48) & 0xFF) ' (byte)((_value >> 56) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,LongToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                   ? new[] { (byte)((_value >> 56) & 0xFF)' (byte)((_value >> 48) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                   : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 48) & 0xFF) ' (byte)((_value >> 56) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,LongToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                   ? new[] { (byte)((_value >> 56) & 0xFF)' (byte)((_value >> 48) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                   : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 48) & 0xFF) ' (byte)((_value >> 56) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,LongToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                   ? new[] { (byte)((_value >> 56) & 0xFF)' (byte)((_value >> 48) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                   : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 48) & 0xFF) ' (byte)((_value >> 56) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,LongToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                   ? new[] { (byte)((_value >> 56) & 0xFF)' (byte)((_value >> 48) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                   : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 48) & 0xFF) ' (byte)((_value >> 56) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,LongToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                   ? new[] { (byte)((_value >> 56) & 0xFF)' (byte)((_value >> 48) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                   : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 48) & 0xFF) ' (byte)((_value >> 56) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,LongToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                   ? new[] { (byte)((_value >> 56) & 0xFF)' (byte)((_value >> 48) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                   : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 48) & 0xFF) ' (byte)((_value >> 56) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,LongToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                   ? new[] { (byte)((_value >> 56) & 0xFF)' (byte)((_value >> 48) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                   : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 48) & 0xFF) ' (byte)((_value >> 56) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,LongToBytes,The following statement contains a magic number: return BitConverter.IsLittleEndian                   ? new[] { (byte)((_value >> 56) & 0xFF)' (byte)((_value >> 48) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)(_value & 0xFF) }                   : new[] { (byte)(_value & 0xFF)' (byte)((_value >> 8) & 0xFF)' (byte)((_value >> 16) & 0xFF)' (byte)((_value >> 24) & 0xFF)' (byte)((_value >> 32) & 0xFF)' (byte)((_value >> 40) & 0xFF)' (byte)((_value >> 48) & 0xFF) ' (byte)((_value >> 56) & 0xFF) };
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long msb = BitConverter.IsLittleEndian                           ? (long)(array[0] << 24 | array[1] << 16 | array[2] << 8 | array[3]) << 32                          : (long)(array[7] << 24 | array[6] << 16 | array[5] << 8 | array[4]) << 32;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long msb = BitConverter.IsLittleEndian                           ? (long)(array[0] << 24 | array[1] << 16 | array[2] << 8 | array[3]) << 32                          : (long)(array[7] << 24 | array[6] << 16 | array[5] << 8 | array[4]) << 32;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long msb = BitConverter.IsLittleEndian                           ? (long)(array[0] << 24 | array[1] << 16 | array[2] << 8 | array[3]) << 32                          : (long)(array[7] << 24 | array[6] << 16 | array[5] << 8 | array[4]) << 32;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long msb = BitConverter.IsLittleEndian                           ? (long)(array[0] << 24 | array[1] << 16 | array[2] << 8 | array[3]) << 32                          : (long)(array[7] << 24 | array[6] << 16 | array[5] << 8 | array[4]) << 32;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long msb = BitConverter.IsLittleEndian                           ? (long)(array[0] << 24 | array[1] << 16 | array[2] << 8 | array[3]) << 32                          : (long)(array[7] << 24 | array[6] << 16 | array[5] << 8 | array[4]) << 32;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long msb = BitConverter.IsLittleEndian                           ? (long)(array[0] << 24 | array[1] << 16 | array[2] << 8 | array[3]) << 32                          : (long)(array[7] << 24 | array[6] << 16 | array[5] << 8 | array[4]) << 32;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long msb = BitConverter.IsLittleEndian                           ? (long)(array[0] << 24 | array[1] << 16 | array[2] << 8 | array[3]) << 32                          : (long)(array[7] << 24 | array[6] << 16 | array[5] << 8 | array[4]) << 32;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long msb = BitConverter.IsLittleEndian                           ? (long)(array[0] << 24 | array[1] << 16 | array[2] << 8 | array[3]) << 32                          : (long)(array[7] << 24 | array[6] << 16 | array[5] << 8 | array[4]) << 32;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long msb = BitConverter.IsLittleEndian                           ? (long)(array[0] << 24 | array[1] << 16 | array[2] << 8 | array[3]) << 32                          : (long)(array[7] << 24 | array[6] << 16 | array[5] << 8 | array[4]) << 32;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long msb = BitConverter.IsLittleEndian                           ? (long)(array[0] << 24 | array[1] << 16 | array[2] << 8 | array[3]) << 32                          : (long)(array[7] << 24 | array[6] << 16 | array[5] << 8 | array[4]) << 32;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long msb = BitConverter.IsLittleEndian                           ? (long)(array[0] << 24 | array[1] << 16 | array[2] << 8 | array[3]) << 32                          : (long)(array[7] << 24 | array[6] << 16 | array[5] << 8 | array[4]) << 32;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long msb = BitConverter.IsLittleEndian                           ? (long)(array[0] << 24 | array[1] << 16 | array[2] << 8 | array[3]) << 32                          : (long)(array[7] << 24 | array[6] << 16 | array[5] << 8 | array[4]) << 32;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long msb = BitConverter.IsLittleEndian                           ? (long)(array[0] << 24 | array[1] << 16 | array[2] << 8 | array[3]) << 32                          : (long)(array[7] << 24 | array[6] << 16 | array[5] << 8 | array[4]) << 32;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long msb = BitConverter.IsLittleEndian                           ? (long)(array[0] << 24 | array[1] << 16 | array[2] << 8 | array[3]) << 32                          : (long)(array[7] << 24 | array[6] << 16 | array[5] << 8 | array[4]) << 32;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long lsb = BitConverter.IsLittleEndian                             ? (array[4] << 24 | array[5] << 16 | array[6] << 8 | array[7]) & 0x00000000ffffffff                             : (array[3] << 24 | array[2] << 16 | array[1] << 8 | array[0]) & 0x00000000ffffffff;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long lsb = BitConverter.IsLittleEndian                             ? (array[4] << 24 | array[5] << 16 | array[6] << 8 | array[7]) & 0x00000000ffffffff                             : (array[3] << 24 | array[2] << 16 | array[1] << 8 | array[0]) & 0x00000000ffffffff;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long lsb = BitConverter.IsLittleEndian                             ? (array[4] << 24 | array[5] << 16 | array[6] << 8 | array[7]) & 0x00000000ffffffff                             : (array[3] << 24 | array[2] << 16 | array[1] << 8 | array[0]) & 0x00000000ffffffff;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long lsb = BitConverter.IsLittleEndian                             ? (array[4] << 24 | array[5] << 16 | array[6] << 8 | array[7]) & 0x00000000ffffffff                             : (array[3] << 24 | array[2] << 16 | array[1] << 8 | array[0]) & 0x00000000ffffffff;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long lsb = BitConverter.IsLittleEndian                             ? (array[4] << 24 | array[5] << 16 | array[6] << 8 | array[7]) & 0x00000000ffffffff                             : (array[3] << 24 | array[2] << 16 | array[1] << 8 | array[0]) & 0x00000000ffffffff;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long lsb = BitConverter.IsLittleEndian                             ? (array[4] << 24 | array[5] << 16 | array[6] << 8 | array[7]) & 0x00000000ffffffff                             : (array[3] << 24 | array[2] << 16 | array[1] << 8 | array[0]) & 0x00000000ffffffff;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long lsb = BitConverter.IsLittleEndian                             ? (array[4] << 24 | array[5] << 16 | array[6] << 8 | array[7]) & 0x00000000ffffffff                             : (array[3] << 24 | array[2] << 16 | array[1] << 8 | array[0]) & 0x00000000ffffffff;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long lsb = BitConverter.IsLittleEndian                             ? (array[4] << 24 | array[5] << 16 | array[6] << 8 | array[7]) & 0x00000000ffffffff                             : (array[3] << 24 | array[2] << 16 | array[1] << 8 | array[0]) & 0x00000000ffffffff;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long lsb = BitConverter.IsLittleEndian                             ? (array[4] << 24 | array[5] << 16 | array[6] << 8 | array[7]) & 0x00000000ffffffff                             : (array[3] << 24 | array[2] << 16 | array[1] << 8 | array[0]) & 0x00000000ffffffff;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long lsb = BitConverter.IsLittleEndian                             ? (array[4] << 24 | array[5] << 16 | array[6] << 8 | array[7]) & 0x00000000ffffffff                             : (array[3] << 24 | array[2] << 16 | array[1] << 8 | array[0]) & 0x00000000ffffffff;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long lsb = BitConverter.IsLittleEndian                             ? (array[4] << 24 | array[5] << 16 | array[6] << 8 | array[7]) & 0x00000000ffffffff                             : (array[3] << 24 | array[2] << 16 | array[1] << 8 | array[0]) & 0x00000000ffffffff;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,BytesToLong,The following statement contains a magic number: long lsb = BitConverter.IsLittleEndian                             ? (array[4] << 24 | array[5] << 16 | array[6] << 8 | array[7]) & 0x00000000ffffffff                             : (array[3] << 24 | array[2] << 16 | array[1] << 8 | array[0]) & 0x00000000ffffffff;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,LeftmostBits,The following statement contains a magic number: Ensure.Divisible(lengthBits' 8' "LeftmostBits() expects length in bits divisible by 8' but was given {0}"' lengthBits);
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,LeftmostBits,The following statement contains a magic number: int byteCount = lengthBits/8;
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,RightmostBits,The following statement contains a magic number: Ensure.Divisible(lengthBits' 8' "RightmostBits() expects length in bits divisible by 8' but was given {0}"' lengthBits);
Magic Number,Jose,Arrays,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Arrays.cs,RightmostBits,The following statement contains a magic number: int byteCount = lengthBits / 8;
Magic Number,Jose,Base64Url,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Base64Url.cs,Decode,The following statement contains a magic number: switch (output.Length % 4) // Pad with trailing '='s              {                  case 0: break; // No pad chars in this case                  case 2: output += "=="; break; // Two pad chars                  case 3: output += "="; break; // One pad char                  default: throw new System.ArgumentOutOfRangeException("input"'"Illegal base64url string!");              }
Magic Number,Jose,Base64Url,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Base64Url.cs,Decode,The following statement contains a magic number: switch (output.Length % 4) // Pad with trailing '='s              {                  case 0: break; // No pad chars in this case                  case 2: output += "=="; break; // Two pad chars                  case 3: output += "="; break; // One pad char                  default: throw new System.ArgumentOutOfRangeException("input"'"Illegal base64url string!");              }
Magic Number,Jose,Base64Url,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\util\Base64Url.cs,Decode,The following statement contains a magic number: switch (output.Length % 4) // Pad with trailing '='s              {                  case 0: break; // No pad chars in this case                  case 2: output += "=="; break; // Two pad chars                  case 3: output += "="; break; // One pad char                  default: throw new System.ArgumentOutOfRangeException("input"'"Illegal base64url string!");              }
Magic Number,Jose.native,NCryptBuffer,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\native\NCrypt.cs,NCryptBuffer,The following statement contains a magic number: cbBuffer = (uint)((data.Length * 2) + 2);
Magic Number,Jose.native,NCryptBuffer,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\native\NCrypt.cs,NCryptBuffer,The following statement contains a magic number: cbBuffer = (uint)((data.Length * 2) + 2);
Magic Number,Jose.native,NCryptBuffer,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\native\NCrypt.cs,NCryptBuffer,The following statement contains a magic number: pvBuffer = Marshal.AllocHGlobal(data.Length * 2);
Magic Number,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,New,The following statement contains a magic number: if (partSize == 32)              {                  magic = (d == null)                              ? signing ? BCRYPT_ECDSA_PUBLIC_P256_MAGIC  : BCRYPT_ECDH_PUBLIC_P256_MAGIC                              : signing ? BCRYPT_ECDSA_PRIVATE_P256_MAGIC : BCRYPT_ECDH_PRIVATE_P256_MAGIC;              }              else if (partSize == 48)              {                  magic = (d == null)                              ? signing ? BCRYPT_ECDSA_PUBLIC_P384_MAGIC  : BCRYPT_ECDH_PUBLIC_P384_MAGIC                              : signing ? BCRYPT_ECDSA_PRIVATE_P384_MAGIC : BCRYPT_ECDH_PRIVATE_P384_MAGIC;              }              else if (partSize == 66)              {                  magic = (d == null)                              ? signing ? BCRYPT_ECDSA_PUBLIC_P521_MAGIC  : BCRYPT_ECDH_PUBLIC_P521_MAGIC                              : signing ? BCRYPT_ECDSA_PRIVATE_P521_MAGIC : BCRYPT_ECDH_PRIVATE_P521_MAGIC;              }              else                  throw new ArgumentException("Size of X'Y or D must equal to 32' 48 or 66 bytes");
Magic Number,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,New,The following statement contains a magic number: if (partSize == 32)              {                  magic = (d == null)                              ? signing ? BCRYPT_ECDSA_PUBLIC_P256_MAGIC  : BCRYPT_ECDH_PUBLIC_P256_MAGIC                              : signing ? BCRYPT_ECDSA_PRIVATE_P256_MAGIC : BCRYPT_ECDH_PRIVATE_P256_MAGIC;              }              else if (partSize == 48)              {                  magic = (d == null)                              ? signing ? BCRYPT_ECDSA_PUBLIC_P384_MAGIC  : BCRYPT_ECDH_PUBLIC_P384_MAGIC                              : signing ? BCRYPT_ECDSA_PRIVATE_P384_MAGIC : BCRYPT_ECDH_PRIVATE_P384_MAGIC;              }              else if (partSize == 66)              {                  magic = (d == null)                              ? signing ? BCRYPT_ECDSA_PUBLIC_P521_MAGIC  : BCRYPT_ECDH_PUBLIC_P521_MAGIC                              : signing ? BCRYPT_ECDSA_PRIVATE_P521_MAGIC : BCRYPT_ECDH_PRIVATE_P521_MAGIC;              }              else                  throw new ArgumentException("Size of X'Y or D must equal to 32' 48 or 66 bytes");
Magic Number,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,New,The following statement contains a magic number: if (partSize == 32)              {                  magic = (d == null)                              ? signing ? BCRYPT_ECDSA_PUBLIC_P256_MAGIC  : BCRYPT_ECDH_PUBLIC_P256_MAGIC                              : signing ? BCRYPT_ECDSA_PRIVATE_P256_MAGIC : BCRYPT_ECDH_PRIVATE_P256_MAGIC;              }              else if (partSize == 48)              {                  magic = (d == null)                              ? signing ? BCRYPT_ECDSA_PUBLIC_P384_MAGIC  : BCRYPT_ECDH_PUBLIC_P384_MAGIC                              : signing ? BCRYPT_ECDSA_PRIVATE_P384_MAGIC : BCRYPT_ECDH_PRIVATE_P384_MAGIC;              }              else if (partSize == 66)              {                  magic = (d == null)                              ? signing ? BCRYPT_ECDSA_PUBLIC_P521_MAGIC  : BCRYPT_ECDH_PUBLIC_P521_MAGIC                              : signing ? BCRYPT_ECDSA_PRIVATE_P521_MAGIC : BCRYPT_ECDH_PRIVATE_P521_MAGIC;              }              else                  throw new ArgumentException("Size of X'Y or D must equal to 32' 48 or 66 bytes");
Magic Number,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,ExportKey,The following statement contains a magic number: byte[] length = new[] { blob[4]' blob[5]' blob[6]' blob[7] };
Magic Number,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,ExportKey,The following statement contains a magic number: byte[] length = new[] { blob[4]' blob[5]' blob[6]' blob[7] };
Magic Number,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,ExportKey,The following statement contains a magic number: byte[] length = new[] { blob[4]' blob[5]' blob[6]' blob[7] };
Magic Number,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,ExportKey,The following statement contains a magic number: byte[] length = new[] { blob[4]' blob[5]' blob[6]' blob[7] };
Magic Number,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,ExportKey,The following statement contains a magic number: byte[][] keyParts = Arrays.Slice(Arrays.RightmostBits(blob' partSize * 24)' partSize);
Magic Number,Security.Cryptography,EccKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\EccKey.cs,ExportKey,The following statement contains a magic number: d = keyParts[2];
Magic Number,Security.Cryptography,RsaKey,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\Security\Cryptography\RsaKey.cs,New,The following statement contains a magic number: byte[] bitLength = BitConverter.GetBytes(modulus.Length * 8);
Duplicate Code,Jose,RsaPssUsingSha,C:\repos\dvsekhvalnov_jose-jwt\jose-jwt\jws\RsaPssUsingSha.cs,Verify,The method contains a code clone-set at the following line numbers (starting from the method definition): ((3' 32)' (36' 65))
