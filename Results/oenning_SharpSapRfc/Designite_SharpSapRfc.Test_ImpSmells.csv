Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SharpSapRfc.Test.TestCases,Soap_ExceptionDetailsTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\Soap_ExceptionDetailsTestCase.cs,GetExpectedRequestBody,The length of the statement  "            return @"<urn:Z_SSRT_DIVIDE xmlns:urn=""urn:sap-com:document:sap:rfc:functions""><I_NUM1>2</I_NUM1><I_NUM2>0</I_NUM2></urn:Z_SSRT_DIVIDE>"; " is 139.
Long Statement,SharpSapRfc.Test.TestCases,Plain_ExceptionDetailsTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\Soap_ExceptionDetailsTestCase.cs,GetExpectedRequestBody,The length of the statement  "            return @"FUNCTION Z_SSRT_DIVIDE (EXPORT PARAMETER E_QUOTIENT=0.00' EXPORT PARAMETER E_REMAINDER=0' IMPORT PARAMETER I_NUM1=2.00' IMPORT PARAMETER I_NUM2=0.00)"; " is 160.
Virtual Method Call from Constructor,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteExceptionTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteExceptionTestData.cs,AbapValueMapperFromRemoteExceptionTestData,The constructor "AbapValueMapperFromRemoteExceptionTestData" calls a virtual method "AdditionalTestData".
Virtual Method Call from Constructor,SharpSapRfc.Test.Mapper,AbapValueMapperToRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperToRemoteTestData.cs,AbapValueMapperToRemoteTestData,The constructor "AbapValueMapperToRemoteTestData" calls a virtual method "AdditionalTestData".
Virtual Method Call from Constructor,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The constructor "AbapValueMapperFromRemoteTestData" calls a virtual method "AdditionalTestData".
Magic Number,SharpSapRfc.Test.TestCases,Soap_ConnectionTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\ConnectionTestCase.cs,GetConnection,The following statement contains a magic number: cfg.Timeout = 5000;
Magic Number,SharpSapRfc.Test.TestCases,FunctionObjectTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\FunctionObjectTestCase.cs,ObjectFunctionTest,The following statement contains a magic number: var result = conn.ExecuteFunction(new DivideTwoNumbersFunction(9' 2));
Magic Number,SharpSapRfc.Test.TestCases,FunctionObjectTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\FunctionObjectTestCase.cs,ObjectFunctionTest,The following statement contains a magic number: var result = conn.ExecuteFunction(new DivideTwoNumbersFunction(9' 2));
Magic Number,SharpSapRfc.Test.TestCases,FunctionObjectTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\FunctionObjectTestCase.cs,ObjectFunctionTest,The following statement contains a magic number: Assert.Equal(4.5m' result.Quotient);
Magic Number,SharpSapRfc.Test.TestCases,FunctionObjectTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\FunctionObjectTestCase.cs,ObjectFunctionWithSingleReturnValueTest,The following statement contains a magic number: int value = conn.ExecuteFunction(new SumOfTwoNumbersFunction(2' 8));
Magic Number,SharpSapRfc.Test.TestCases,FunctionObjectTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\FunctionObjectTestCase.cs,ObjectFunctionWithSingleReturnValueTest,The following statement contains a magic number: int value = conn.ExecuteFunction(new SumOfTwoNumbersFunction(2' 8));
Magic Number,SharpSapRfc.Test.TestCases,FunctionObjectTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\FunctionObjectTestCase.cs,ObjectFunctionWithSingleReturnValueTest,The following statement contains a magic number: Assert.Equal(10' value);
Magic Number,SharpSapRfc.Test.TestCases,FunctionObjectTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\FunctionObjectTestCase.cs,ObjectFunctionWithTableReturnValueTest,The following statement contains a magic number: Assert.Equal(2' customers.Count());
Magic Number,SharpSapRfc.Test.TestCases,ExceptionDetailsTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\Soap_ExceptionDetailsTestCase.cs,ShouldReturnRequestBodyOnExceptionTest,The following statement contains a magic number: SharpRfcCallException ex = Assert.Throws<SharpRfcCallException>(() =>                  {                      var result = conn.ExecuteFunction("Z_SSRT_DIVIDE"' new                      {                          i_num1 = 2'                          i_num2 = 0                      });                  });
Magic Number,SharpSapRfc.Test.TestCases,ExceptionDetailsTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\Soap_ExceptionDetailsTestCase.cs,ExceptionToStringShouldReturnRequestBodyTest,The following statement contains a magic number: SharpRfcCallException ex = Assert.Throws<SharpRfcCallException>(() =>                  {                      var result = conn.ExecuteFunction("Z_SSRT_DIVIDE"' new                      {                          i_num1 = 2'                          i_num2 = 0                      });                  });
Magic Number,SharpSapRfc.Test.TestCases,AccessDeniedTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\AccessDeniedTestCase.cs,ShouldNotExecuteFunctionBecauseItIsNotAllowed,The following statement contains a magic number: Assert.Throws<SharpRfcCallException>(() => {                      var result = conn.ExecuteFunction("Z_SSRT_SUM"'                          new RfcParameter("i_num1"' 2)'                          new RfcParameter("i_num2"' 4)                      );                  });
Magic Number,SharpSapRfc.Test.TestCases,AccessDeniedTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\AccessDeniedTestCase.cs,ShouldNotExecuteFunctionBecauseItIsNotAllowed,The following statement contains a magic number: Assert.Throws<SharpRfcCallException>(() => {                      var result = conn.ExecuteFunction("Z_SSRT_SUM"'                          new RfcParameter("i_num1"' 2)'                          new RfcParameter("i_num2"' 4)                      );                  });
Magic Number,SharpSapRfc.Test.TestCases,FluentRfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\FluentRfcReadTableTestCase.cs,ReadAllEntriesTest,The following statement contains a magic number: Assert.Equal(18' scarr.Count());
Magic Number,SharpSapRfc.Test.TestCases,FluentRfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\FluentRfcReadTableTestCase.cs,ReadTwoFieldsTest,The following statement contains a magic number: Assert.Equal(18' scarr.Count());
Magic Number,SharpSapRfc.Test.TestCases,FluentRfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\FluentRfcReadTableTestCase.cs,StrongTypeGreaterAndLessThanConditionTest,The following statement contains a magic number: var flights = conn.Table<Flight>("SPFLI")                                    .Where("DISTANCE"' RfcReadTableOption.GreaterThan' 8000)                                    .And("DISTANCE"' RfcReadTableOption.LessThan' 10000)                                    .Read();
Magic Number,SharpSapRfc.Test.TestCases,FluentRfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\FluentRfcReadTableTestCase.cs,StrongTypeGreaterAndLessThanConditionTest,The following statement contains a magic number: var flights = conn.Table<Flight>("SPFLI")                                    .Where("DISTANCE"' RfcReadTableOption.GreaterThan' 8000)                                    .And("DISTANCE"' RfcReadTableOption.LessThan' 10000)                                    .Read();
Magic Number,SharpSapRfc.Test.TestCases,FluentRfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\FluentRfcReadTableTestCase.cs,StrongTypeGreaterAndLessThanConditionTest,The following statement contains a magic number: Assert.Equal(4' flights.Count());
Magic Number,SharpSapRfc.Test.TestCases,FluentRfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\FluentRfcReadTableTestCase.cs,StrongTypeGreaterEqualAndLessEqualThanConditionTest,The following statement contains a magic number: var flights = conn.Table<Flight>("SPFLI")                                    .Where("DISTANCE"' RfcReadTableOption.GreaterOrEqualThan' 6030)                                    .And("DISTANCE"' RfcReadTableOption.LessOrEqualThan' 9100)                                    .Read();
Magic Number,SharpSapRfc.Test.TestCases,FluentRfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\FluentRfcReadTableTestCase.cs,StrongTypeGreaterEqualAndLessEqualThanConditionTest,The following statement contains a magic number: var flights = conn.Table<Flight>("SPFLI")                                    .Where("DISTANCE"' RfcReadTableOption.GreaterOrEqualThan' 6030)                                    .And("DISTANCE"' RfcReadTableOption.LessOrEqualThan' 9100)                                    .Read();
Magic Number,SharpSapRfc.Test.TestCases,FluentRfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\FluentRfcReadTableTestCase.cs,StrongTypeGreaterEqualAndLessEqualThanConditionTest,The following statement contains a magic number: Assert.Equal(12' flights.Count());
Magic Number,SharpSapRfc.Test.TestCases,FluentRfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\FluentRfcReadTableTestCase.cs,ReadWithTwoOrConditionsTest,The following statement contains a magic number: Assert.Equal(2' scarr.Count());
Magic Number,SharpSapRfc.Test.TestCases,ParallelTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\ParallelTestCase.cs,TenTimesTest,The following statement contains a magic number: Parallel.For(1' 10' (int idx) =>              {                  using (SapRfcConnection conn = this.GetConnection())                  {                      var result = conn.ExecuteFunction("Z_SSRT_SUM"'                          new RfcParameter("i_num1"' 2)'                          new RfcParameter("i_num2"' 4)                      );                  }              });
Magic Number,SharpSapRfc.Test.TestCases,ParallelTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\ParallelTestCase.cs,TenTimesTest,The following statement contains a magic number: Parallel.For(1' 10' (int idx) =>              {                  using (SapRfcConnection conn = this.GetConnection())                  {                      var result = conn.ExecuteFunction("Z_SSRT_SUM"'                          new RfcParameter("i_num1"' 2)'                          new RfcParameter("i_num2"' 4)                      );                  }              });
Magic Number,SharpSapRfc.Test.TestCases,ParallelTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\ParallelTestCase.cs,TenTimesTest,The following statement contains a magic number: Parallel.For(1' 10' (int idx) =>              {                  using (SapRfcConnection conn = this.GetConnection())                  {                      var result = conn.ExecuteFunction("Z_SSRT_SUM"'                          new RfcParameter("i_num1"' 2)'                          new RfcParameter("i_num2"' 4)                      );                  }              });
Magic Number,SharpSapRfc.Test.TestCases,PreparedFunctionTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\PreparedFunctionTestCase.cs,PreparedFunctionWithTwoParametersTest,The following statement contains a magic number: function.AddParameter(new RfcParameter("i_num1"' 2));
Magic Number,SharpSapRfc.Test.TestCases,PreparedFunctionTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\PreparedFunctionTestCase.cs,PreparedFunctionWithTwoParametersTest,The following statement contains a magic number: function.AddParameter(new { i_num2 = 4 });
Magic Number,SharpSapRfc.Test.TestCases,PreparedFunctionTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\PreparedFunctionTestCase.cs,PreparedFunctionWithTwoParametersTest,The following statement contains a magic number: Assert.Equal(6' total);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadAllEntriesTest,The following statement contains a magic number: Assert.Equal(18' scarr.Count());
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadSingleFieldTest,The following statement contains a magic number: Assert.Equal(18' scarr.Count());
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadTableAllFieldsType,The following statement contains a magic number: Assert.Equal(3' maras.Count());
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadTableAllFieldsType,The following statement contains a magic number: Assert.Equal(254.54m' mara.Price);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadTableAllFieldsType,The following statement contains a magic number: Assert.Equal(2' mara.Id);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadTableAllFieldsType,The following statement contains a magic number: Assert.Equal(64m' mara.Price);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadTableAllFieldsType,The following statement contains a magic number: Assert.Equal(new DateTime(2014' 6' 4)' mara.Date);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadTableAllFieldsType,The following statement contains a magic number: Assert.Equal(new DateTime(2014' 6' 4)' mara.Date);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadTableAllFieldsType,The following statement contains a magic number: Assert.Equal(new DateTime(2014' 6' 4)' mara.Date);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadTableAllFieldsType,The following statement contains a magic number: Assert.Equal(new DateTime(0001' 1' 1' 15' 42' 22)' mara.Time);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadTableAllFieldsType,The following statement contains a magic number: Assert.Equal(new DateTime(0001' 1' 1' 15' 42' 22)' mara.Time);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadTableAllFieldsType,The following statement contains a magic number: Assert.Equal(new DateTime(0001' 1' 1' 15' 42' 22)' mara.Time);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadTableAllFieldsType,The following statement contains a magic number: mara = maras.ElementAt(2);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadTableAllFieldsType,The following statement contains a magic number: Assert.Equal(3' mara.Id);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadTableAllFieldsType,The following statement contains a magic number: Assert.Equal(21253154.2464m' mara.Price);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadTableAllFieldsType,The following statement contains a magic number: Assert.Equal(new DateTime(2000' 1' 4)' mara.Date);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadTableAllFieldsType,The following statement contains a magic number: Assert.Equal(new DateTime(2000' 1' 4)' mara.Date);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadTableAllFieldsType,The following statement contains a magic number: Assert.Equal(new DateTime(0001' 1' 1' 10' 0' 23)' mara.Time);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadTableAllFieldsType,The following statement contains a magic number: Assert.Equal(new DateTime(0001' 1' 1' 10' 0' 23)' mara.Time);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadDateTimeSingleField,The following statement contains a magic number: Assert.Equal(3' maras.Count());
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadDateTimeSingleField,The following statement contains a magic number: Assert.Equal(2' mara.Id);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadDateTimeSingleField,The following statement contains a magic number: Assert.Equal(new DateTime(2014' 6' 4' 15' 42' 22)' mara.DateTime);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadDateTimeSingleField,The following statement contains a magic number: Assert.Equal(new DateTime(2014' 6' 4' 15' 42' 22)' mara.DateTime);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadDateTimeSingleField,The following statement contains a magic number: Assert.Equal(new DateTime(2014' 6' 4' 15' 42' 22)' mara.DateTime);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadDateTimeSingleField,The following statement contains a magic number: Assert.Equal(new DateTime(2014' 6' 4' 15' 42' 22)' mara.DateTime);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadDateTimeSingleField,The following statement contains a magic number: Assert.Equal(new DateTime(2014' 6' 4' 15' 42' 22)' mara.DateTime);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadDateTimeSingleField,The following statement contains a magic number: Assert.Equal(new DateTime(2014' 6' 4' 15' 42' 22)' mara.DateTime);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadDateTimeSingleField,The following statement contains a magic number: mara = maras.ElementAt(2);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadDateTimeSingleField,The following statement contains a magic number: Assert.Equal(3' mara.Id);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadDateTimeSingleField,The following statement contains a magic number: Assert.Equal(new DateTime(2000' 1' 4' 10' 0' 23)' mara.DateTime);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadDateTimeSingleField,The following statement contains a magic number: Assert.Equal(new DateTime(2000' 1' 4' 10' 0' 23)' mara.DateTime);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadDateTimeSingleField,The following statement contains a magic number: Assert.Equal(new DateTime(2000' 1' 4' 10' 0' 23)' mara.DateTime);
Magic Number,SharpSapRfc.Test.TestCases,RfcReadTableTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\RfcReadTableTestCase.cs,ReadDateTimeSingleField,The following statement contains a magic number: Assert.Equal(new DateTime(2000' 1' 4' 10' 0' 23)' mara.DateTime);
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,ExportSingleParameterTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_SUM"'                      new RfcParameter("i_num1"' 2)'                      new RfcParameter("i_num2"' 4)                  );
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,ExportSingleParameterTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_SUM"'                      new RfcParameter("i_num1"' 2)'                      new RfcParameter("i_num2"' 4)                  );
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,ExportSingleParameterTest,The following statement contains a magic number: Assert.Equal(6' total);
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,ExportSingleParameterTest_WithAnonymousType,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_SUM"' new                  {                      i_num1 = 2'                      i_num2 = 7                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,ExportSingleParameterTest_WithAnonymousType,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_SUM"' new                  {                      i_num1 = 2'                      i_num2 = 7                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,ExportSingleParameterTest_WithAnonymousType,The following statement contains a magic number: Assert.Equal(9' total);
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,ChangingSingleParameterTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_ADD"'                      new RfcParameter("i_add"' 4)'                      new RfcParameter("c_num"' 4)                  );
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,ChangingSingleParameterTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_ADD"'                      new RfcParameter("i_add"' 4)'                      new RfcParameter("c_num"' 4)                  );
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,ChangingSingleParameterTest,The following statement contains a magic number: Assert.Equal(8' total);
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,ExportMultipleParametersTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_DIVIDE"'                      new RfcParameter("i_num1"' 5)'                      new RfcParameter("i_num2"' 2)                  );
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,ExportMultipleParametersTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_DIVIDE"'                      new RfcParameter("i_num1"' 5)'                      new RfcParameter("i_num2"' 2)                  );
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,ExportMultipleParametersTest,The following statement contains a magic number: Assert.Equal(2.5m' quotient);
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_IN_OUT"' new                  {                      I_NAME = ""'                      I_ID = 2'                      I_INT1 = 200'                      I_FLOAT = 20.12f'                      I_DEC_3_2 = 4.52'                      I_DEC_23_4 = 999999999.999'                      I_DEC_30_7 = 999999999.9999'                      I_DATUM = new DateTime(2014' 4' 6)'                      I_UZEIT = new DateTime(1' 1' 1' 12' 10' 53)'                      i_active = true'                      i_multiple_id = new int[] { 10' 20' 30 }'                      i_multiple_name = new string[] { "A"' "B"' "C"' "D" }'                      i_mara = new ZMaraSingleDateTime { Id = 4' DateTime = new DateTime(2014' 4' 6' 12' 10' 53) }                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(2' result.GetOutput<int>("E_ID"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(200' result.GetOutput<byte>("E_INT1"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(4.52m' result.GetOutput<decimal>("E_DEC_3_2"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(999999999.999m' result.GetOutput<decimal>("E_DEC_23_4"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(999999999.9999m' result.GetOutput<decimal>("E_DEC_30_7"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(20.12f' result.GetOutput<double>("E_FLOAT")' 1);
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(new DateTime(2014' 4' 6)' result.GetOutput<DateTime>("E_DATUM"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(new DateTime(2014' 4' 6)' result.GetOutput<DateTime>("E_DATUM"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(new DateTime(2014' 4' 6)' result.GetOutput<DateTime>("E_DATUM"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(new DateTime(1' 1' 1' 12' 10' 53)' result.GetOutput<DateTime>("E_UZEIT"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(new DateTime(1' 1' 1' 12' 10' 53)' result.GetOutput<DateTime>("E_UZEIT"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(new DateTime(1' 1' 1' 12' 10' 53)' result.GetOutput<DateTime>("E_UZEIT"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(4' result.GetOutput<int>("e_mara_id"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(new int[] { 10' 20' 30 }' result.GetTable<int>("e_multiple_id"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(new int[] { 10' 20' 30 }' result.GetTable<int>("e_multiple_id"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(new int[] { 10' 20' 30 }' result.GetTable<int>("e_multiple_id"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(new DateTime(2014' 4' 6)' result.GetOutput<DateTime>("e_mara_datum"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(new DateTime(2014' 4' 6)' result.GetOutput<DateTime>("e_mara_datum"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(new DateTime(2014' 4' 6)' result.GetOutput<DateTime>("e_mara_datum"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(new DateTime(1' 1' 1' 12' 10' 53)' result.GetOutput<DateTime>("e_mara_UZEIT"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(new DateTime(1' 1' 1' 12' 10' 53)' result.GetOutput<DateTime>("e_mara_UZEIT"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,AllTypesInOutTest,The following statement contains a magic number: Assert.Equal(new DateTime(1' 1' 1' 12' 10' 53)' result.GetOutput<DateTime>("e_mara_UZEIT"));
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,CustomExceptionOnInvalidParameter,The following statement contains a magic number: Exception ex = Assert.Throws<UnknownRfcParameterException>(() =>                  {                      var result = conn.ExecuteFunction("Z_SSRT_SUM"'                          new RfcParameter("i_num1"' 2)'                          new RfcParameter("i_num2"' 4)'                          new RfcParameter("i_num3"' 4)                      );                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,CustomExceptionOnInvalidParameter,The following statement contains a magic number: Exception ex = Assert.Throws<UnknownRfcParameterException>(() =>                  {                      var result = conn.ExecuteFunction("Z_SSRT_SUM"'                          new RfcParameter("i_num1"' 2)'                          new RfcParameter("i_num2"' 4)'                          new RfcParameter("i_num3"' 4)                      );                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,CustomExceptionOnInvalidParameter,The following statement contains a magic number: Exception ex = Assert.Throws<UnknownRfcParameterException>(() =>                  {                      var result = conn.ExecuteFunction("Z_SSRT_SUM"'                          new RfcParameter("i_num1"' 2)'                          new RfcParameter("i_num2"' 4)'                          new RfcParameter("i_num3"' 4)                      );                  });
Magic Number,SharpSapRfc.Test.TestCases,SimpleTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SimpleTestCase.cs,ExceptionTest,The following statement contains a magic number: SharpRfcCallException ex = Assert.Throws<SharpRfcCallException>(() =>                  {                      var result = conn.ExecuteFunction("Z_SSRT_DIVIDE"'                          new RfcParameter("i_num1"' 5)'                          new RfcParameter("i_num2"' 0)                      );                  });
Magic Number,SharpSapRfc.Test.TestCases,SoapConfigurationSectionTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\SoapConfigurationSectionTestCase.cs,ParametersCanBeRead,The following statement contains a magic number: Assert.Equal(5000' destination.Timeout);
Magic Number,SharpSapRfc.Test.TestCases,StructureTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\StructureTestCase.cs,ImportStructureTest,The following statement contains a magic number: var customer = new ZCustomer { Id = 3' Name = "Microsoft"' IsActive = true };
Magic Number,SharpSapRfc.Test.TestCases,StructureTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\StructureTestCase.cs,ImportStructureTest_WithAnonymousType,The following statement contains a magic number: var customer = new ZCustomer { Id = 3' Name = "Microsoft"' IsActive = true };
Magic Number,SharpSapRfc.Test.TestCases,StructureTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\StructureTestCase.cs,ExportStructureTest,The following statement contains a magic number: var result = conn.ExecuteFunction("Z_SSRT_GET_CUSTOMER"'                       new RfcParameter("i_id"' 2)                  );
Magic Number,SharpSapRfc.Test.TestCases,StructureTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\StructureTestCase.cs,ExportStructureTest,The following statement contains a magic number: Assert.Equal(2' customer.Id);
Magic Number,SharpSapRfc.Test.TestCases,StructureTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\StructureTestCase.cs,ExportTableTest,The following statement contains a magic number: Assert.Equal(2' customers.Count());
Magic Number,SharpSapRfc.Test.TestCases,StructureTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\StructureTestCase.cs,ExportTableTest,The following statement contains a magic number: Assert.Equal(2' customers.ElementAt(1).Id);
Magic Number,SharpSapRfc.Test.TestCases,StructureTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\StructureTestCase.cs,ExportTableCategoryTest,The following statement contains a magic number: Assert.Equal(2' customers.Count());
Magic Number,SharpSapRfc.Test.TestCases,StructureTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\StructureTestCase.cs,ExportTableCategoryTest,The following statement contains a magic number: Assert.Equal(2' customers.ElementAt(1).Id);
Magic Number,SharpSapRfc.Test.TestCases,Soap_TimeoutTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\TimeoutTestCase.cs,ShouldThrowTimeoutException,The following statement contains a magic number: Exception ex = Assert.Throws<SharpRfcCallException>(() =>                  {                      var result = conn.ExecuteFunction("Z_SSRT_LONG_PROCESS"' new                      {                          i_seconds = 10                      });                  });
Magic Number,SharpSapRfc.Test.TestCases,WrongCredentialsTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\WrongCredentialsTestCase.cs,ShouldNotExecuteFunctionBecauseItIsNotAllowed,The following statement contains a magic number: Assert.Throws<SharpRfcCallException>(() =>                  {                      var result = conn.ExecuteFunction("Z_SSRT_SUM"'                          new RfcParameter("i_num1"' 2)'                          new RfcParameter("i_num2"' 4)                      );                  });
Magic Number,SharpSapRfc.Test.TestCases,WrongCredentialsTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\TestCases\WrongCredentialsTestCase.cs,ShouldNotExecuteFunctionBecauseItIsNotAllowed,The following statement contains a magic number: Assert.Throws<SharpRfcCallException>(() =>                  {                      var result = conn.ExecuteFunction("Z_SSRT_SUM"'                          new RfcParameter("i_num1"' 2)'                          new RfcParameter("i_num2"' 4)                      );                  });
Magic Number,SharpSapRfc.Test.Mapper,Soap_AbapValueMapperToRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperToRemoteTestData.cs,AdditionalTestData,The following statement contains a magic number: return new List<object[]> {                    new object[] { "56.2"' AbapDataType.DECIMAL' 56.2m }'              };
Magic Number,SharpSapRfc.Test.Mapper,Plain_AbapValueMapperToRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperToRemoteTestData.cs,AdditionalTestData,The following statement contains a magic number: return new List<object[]> {                    new object[] { "56.2"' AbapDataType.DECIMAL' 56.2m }'              };
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperToRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperToRemoteTestData.cs,AbapValueMapperToRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { "X"' AbapDataType.CHAR' true }'                  new object[] { " "' AbapDataType.CHAR' false }'                                        new object[] { "My test"' AbapDataType.CHAR' "My test" }'                                        new object[] { "12424"' AbapDataType.DECIMAL' 12424m }'                  new object[] { "464"' AbapDataType.DECIMAL' 464m }'                    new object[] { "20140406"' AbapDataType.DATE' new DateTime(2014' 4' 6) }'                  new object[] { "124253"' AbapDataType.TIME' new DateTime(2014' 4' 6' 12' 42' 53) }'                    new object[] { "AVAL"' AbapDataType.CHAR' MaterialState.Available }'                  new object[] { "BLOK"' AbapDataType.CHAR' MaterialState.Blocked }'                  new object[] { "OOS"' AbapDataType.CHAR' MaterialState.OutOfStock }'                  new object[] { ""' AbapDataType.CHAR' default(MaterialState) }'                    new object[] { "1"' AbapDataType.NUMERIC' MaterialState.Available }'                  new object[] { "2"' AbapDataType.NUMERIC' MaterialState.Blocked }'                  new object[] { "3"' AbapDataType.NUMERIC' MaterialState.OutOfStock }'                  new object[] { "0"' AbapDataType.NUMERIC' default(MaterialState) }'                                        new object[] { 1' AbapDataType.INTEGER' MaterialState.Available }'                  new object[] { 2' AbapDataType.INTEGER' MaterialState.Blocked }'                  new object[] { 3' AbapDataType.INTEGER' MaterialState.OutOfStock }'                  new object[] { 0' AbapDataType.INTEGER' default(MaterialState) }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperToRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperToRemoteTestData.cs,AbapValueMapperToRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { "X"' AbapDataType.CHAR' true }'                  new object[] { " "' AbapDataType.CHAR' false }'                                        new object[] { "My test"' AbapDataType.CHAR' "My test" }'                                        new object[] { "12424"' AbapDataType.DECIMAL' 12424m }'                  new object[] { "464"' AbapDataType.DECIMAL' 464m }'                    new object[] { "20140406"' AbapDataType.DATE' new DateTime(2014' 4' 6) }'                  new object[] { "124253"' AbapDataType.TIME' new DateTime(2014' 4' 6' 12' 42' 53) }'                    new object[] { "AVAL"' AbapDataType.CHAR' MaterialState.Available }'                  new object[] { "BLOK"' AbapDataType.CHAR' MaterialState.Blocked }'                  new object[] { "OOS"' AbapDataType.CHAR' MaterialState.OutOfStock }'                  new object[] { ""' AbapDataType.CHAR' default(MaterialState) }'                    new object[] { "1"' AbapDataType.NUMERIC' MaterialState.Available }'                  new object[] { "2"' AbapDataType.NUMERIC' MaterialState.Blocked }'                  new object[] { "3"' AbapDataType.NUMERIC' MaterialState.OutOfStock }'                  new object[] { "0"' AbapDataType.NUMERIC' default(MaterialState) }'                                        new object[] { 1' AbapDataType.INTEGER' MaterialState.Available }'                  new object[] { 2' AbapDataType.INTEGER' MaterialState.Blocked }'                  new object[] { 3' AbapDataType.INTEGER' MaterialState.OutOfStock }'                  new object[] { 0' AbapDataType.INTEGER' default(MaterialState) }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperToRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperToRemoteTestData.cs,AbapValueMapperToRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { "X"' AbapDataType.CHAR' true }'                  new object[] { " "' AbapDataType.CHAR' false }'                                        new object[] { "My test"' AbapDataType.CHAR' "My test" }'                                        new object[] { "12424"' AbapDataType.DECIMAL' 12424m }'                  new object[] { "464"' AbapDataType.DECIMAL' 464m }'                    new object[] { "20140406"' AbapDataType.DATE' new DateTime(2014' 4' 6) }'                  new object[] { "124253"' AbapDataType.TIME' new DateTime(2014' 4' 6' 12' 42' 53) }'                    new object[] { "AVAL"' AbapDataType.CHAR' MaterialState.Available }'                  new object[] { "BLOK"' AbapDataType.CHAR' MaterialState.Blocked }'                  new object[] { "OOS"' AbapDataType.CHAR' MaterialState.OutOfStock }'                  new object[] { ""' AbapDataType.CHAR' default(MaterialState) }'                    new object[] { "1"' AbapDataType.NUMERIC' MaterialState.Available }'                  new object[] { "2"' AbapDataType.NUMERIC' MaterialState.Blocked }'                  new object[] { "3"' AbapDataType.NUMERIC' MaterialState.OutOfStock }'                  new object[] { "0"' AbapDataType.NUMERIC' default(MaterialState) }'                                        new object[] { 1' AbapDataType.INTEGER' MaterialState.Available }'                  new object[] { 2' AbapDataType.INTEGER' MaterialState.Blocked }'                  new object[] { 3' AbapDataType.INTEGER' MaterialState.OutOfStock }'                  new object[] { 0' AbapDataType.INTEGER' default(MaterialState) }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperToRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperToRemoteTestData.cs,AbapValueMapperToRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { "X"' AbapDataType.CHAR' true }'                  new object[] { " "' AbapDataType.CHAR' false }'                                        new object[] { "My test"' AbapDataType.CHAR' "My test" }'                                        new object[] { "12424"' AbapDataType.DECIMAL' 12424m }'                  new object[] { "464"' AbapDataType.DECIMAL' 464m }'                    new object[] { "20140406"' AbapDataType.DATE' new DateTime(2014' 4' 6) }'                  new object[] { "124253"' AbapDataType.TIME' new DateTime(2014' 4' 6' 12' 42' 53) }'                    new object[] { "AVAL"' AbapDataType.CHAR' MaterialState.Available }'                  new object[] { "BLOK"' AbapDataType.CHAR' MaterialState.Blocked }'                  new object[] { "OOS"' AbapDataType.CHAR' MaterialState.OutOfStock }'                  new object[] { ""' AbapDataType.CHAR' default(MaterialState) }'                    new object[] { "1"' AbapDataType.NUMERIC' MaterialState.Available }'                  new object[] { "2"' AbapDataType.NUMERIC' MaterialState.Blocked }'                  new object[] { "3"' AbapDataType.NUMERIC' MaterialState.OutOfStock }'                  new object[] { "0"' AbapDataType.NUMERIC' default(MaterialState) }'                                        new object[] { 1' AbapDataType.INTEGER' MaterialState.Available }'                  new object[] { 2' AbapDataType.INTEGER' MaterialState.Blocked }'                  new object[] { 3' AbapDataType.INTEGER' MaterialState.OutOfStock }'                  new object[] { 0' AbapDataType.INTEGER' default(MaterialState) }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperToRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperToRemoteTestData.cs,AbapValueMapperToRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { "X"' AbapDataType.CHAR' true }'                  new object[] { " "' AbapDataType.CHAR' false }'                                        new object[] { "My test"' AbapDataType.CHAR' "My test" }'                                        new object[] { "12424"' AbapDataType.DECIMAL' 12424m }'                  new object[] { "464"' AbapDataType.DECIMAL' 464m }'                    new object[] { "20140406"' AbapDataType.DATE' new DateTime(2014' 4' 6) }'                  new object[] { "124253"' AbapDataType.TIME' new DateTime(2014' 4' 6' 12' 42' 53) }'                    new object[] { "AVAL"' AbapDataType.CHAR' MaterialState.Available }'                  new object[] { "BLOK"' AbapDataType.CHAR' MaterialState.Blocked }'                  new object[] { "OOS"' AbapDataType.CHAR' MaterialState.OutOfStock }'                  new object[] { ""' AbapDataType.CHAR' default(MaterialState) }'                    new object[] { "1"' AbapDataType.NUMERIC' MaterialState.Available }'                  new object[] { "2"' AbapDataType.NUMERIC' MaterialState.Blocked }'                  new object[] { "3"' AbapDataType.NUMERIC' MaterialState.OutOfStock }'                  new object[] { "0"' AbapDataType.NUMERIC' default(MaterialState) }'                                        new object[] { 1' AbapDataType.INTEGER' MaterialState.Available }'                  new object[] { 2' AbapDataType.INTEGER' MaterialState.Blocked }'                  new object[] { 3' AbapDataType.INTEGER' MaterialState.OutOfStock }'                  new object[] { 0' AbapDataType.INTEGER' default(MaterialState) }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperToRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperToRemoteTestData.cs,AbapValueMapperToRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { "X"' AbapDataType.CHAR' true }'                  new object[] { " "' AbapDataType.CHAR' false }'                                        new object[] { "My test"' AbapDataType.CHAR' "My test" }'                                        new object[] { "12424"' AbapDataType.DECIMAL' 12424m }'                  new object[] { "464"' AbapDataType.DECIMAL' 464m }'                    new object[] { "20140406"' AbapDataType.DATE' new DateTime(2014' 4' 6) }'                  new object[] { "124253"' AbapDataType.TIME' new DateTime(2014' 4' 6' 12' 42' 53) }'                    new object[] { "AVAL"' AbapDataType.CHAR' MaterialState.Available }'                  new object[] { "BLOK"' AbapDataType.CHAR' MaterialState.Blocked }'                  new object[] { "OOS"' AbapDataType.CHAR' MaterialState.OutOfStock }'                  new object[] { ""' AbapDataType.CHAR' default(MaterialState) }'                    new object[] { "1"' AbapDataType.NUMERIC' MaterialState.Available }'                  new object[] { "2"' AbapDataType.NUMERIC' MaterialState.Blocked }'                  new object[] { "3"' AbapDataType.NUMERIC' MaterialState.OutOfStock }'                  new object[] { "0"' AbapDataType.NUMERIC' default(MaterialState) }'                                        new object[] { 1' AbapDataType.INTEGER' MaterialState.Available }'                  new object[] { 2' AbapDataType.INTEGER' MaterialState.Blocked }'                  new object[] { 3' AbapDataType.INTEGER' MaterialState.OutOfStock }'                  new object[] { 0' AbapDataType.INTEGER' default(MaterialState) }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperToRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperToRemoteTestData.cs,AbapValueMapperToRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { "X"' AbapDataType.CHAR' true }'                  new object[] { " "' AbapDataType.CHAR' false }'                                        new object[] { "My test"' AbapDataType.CHAR' "My test" }'                                        new object[] { "12424"' AbapDataType.DECIMAL' 12424m }'                  new object[] { "464"' AbapDataType.DECIMAL' 464m }'                    new object[] { "20140406"' AbapDataType.DATE' new DateTime(2014' 4' 6) }'                  new object[] { "124253"' AbapDataType.TIME' new DateTime(2014' 4' 6' 12' 42' 53) }'                    new object[] { "AVAL"' AbapDataType.CHAR' MaterialState.Available }'                  new object[] { "BLOK"' AbapDataType.CHAR' MaterialState.Blocked }'                  new object[] { "OOS"' AbapDataType.CHAR' MaterialState.OutOfStock }'                  new object[] { ""' AbapDataType.CHAR' default(MaterialState) }'                    new object[] { "1"' AbapDataType.NUMERIC' MaterialState.Available }'                  new object[] { "2"' AbapDataType.NUMERIC' MaterialState.Blocked }'                  new object[] { "3"' AbapDataType.NUMERIC' MaterialState.OutOfStock }'                  new object[] { "0"' AbapDataType.NUMERIC' default(MaterialState) }'                                        new object[] { 1' AbapDataType.INTEGER' MaterialState.Available }'                  new object[] { 2' AbapDataType.INTEGER' MaterialState.Blocked }'                  new object[] { 3' AbapDataType.INTEGER' MaterialState.OutOfStock }'                  new object[] { 0' AbapDataType.INTEGER' default(MaterialState) }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperToRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperToRemoteTestData.cs,AbapValueMapperToRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { "X"' AbapDataType.CHAR' true }'                  new object[] { " "' AbapDataType.CHAR' false }'                                        new object[] { "My test"' AbapDataType.CHAR' "My test" }'                                        new object[] { "12424"' AbapDataType.DECIMAL' 12424m }'                  new object[] { "464"' AbapDataType.DECIMAL' 464m }'                    new object[] { "20140406"' AbapDataType.DATE' new DateTime(2014' 4' 6) }'                  new object[] { "124253"' AbapDataType.TIME' new DateTime(2014' 4' 6' 12' 42' 53) }'                    new object[] { "AVAL"' AbapDataType.CHAR' MaterialState.Available }'                  new object[] { "BLOK"' AbapDataType.CHAR' MaterialState.Blocked }'                  new object[] { "OOS"' AbapDataType.CHAR' MaterialState.OutOfStock }'                  new object[] { ""' AbapDataType.CHAR' default(MaterialState) }'                    new object[] { "1"' AbapDataType.NUMERIC' MaterialState.Available }'                  new object[] { "2"' AbapDataType.NUMERIC' MaterialState.Blocked }'                  new object[] { "3"' AbapDataType.NUMERIC' MaterialState.OutOfStock }'                  new object[] { "0"' AbapDataType.NUMERIC' default(MaterialState) }'                                        new object[] { 1' AbapDataType.INTEGER' MaterialState.Available }'                  new object[] { 2' AbapDataType.INTEGER' MaterialState.Blocked }'                  new object[] { 3' AbapDataType.INTEGER' MaterialState.OutOfStock }'                  new object[] { 0' AbapDataType.INTEGER' default(MaterialState) }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperToRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperToRemoteTestData.cs,AbapValueMapperToRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { "X"' AbapDataType.CHAR' true }'                  new object[] { " "' AbapDataType.CHAR' false }'                                        new object[] { "My test"' AbapDataType.CHAR' "My test" }'                                        new object[] { "12424"' AbapDataType.DECIMAL' 12424m }'                  new object[] { "464"' AbapDataType.DECIMAL' 464m }'                    new object[] { "20140406"' AbapDataType.DATE' new DateTime(2014' 4' 6) }'                  new object[] { "124253"' AbapDataType.TIME' new DateTime(2014' 4' 6' 12' 42' 53) }'                    new object[] { "AVAL"' AbapDataType.CHAR' MaterialState.Available }'                  new object[] { "BLOK"' AbapDataType.CHAR' MaterialState.Blocked }'                  new object[] { "OOS"' AbapDataType.CHAR' MaterialState.OutOfStock }'                  new object[] { ""' AbapDataType.CHAR' default(MaterialState) }'                    new object[] { "1"' AbapDataType.NUMERIC' MaterialState.Available }'                  new object[] { "2"' AbapDataType.NUMERIC' MaterialState.Blocked }'                  new object[] { "3"' AbapDataType.NUMERIC' MaterialState.OutOfStock }'                  new object[] { "0"' AbapDataType.NUMERIC' default(MaterialState) }'                                        new object[] { 1' AbapDataType.INTEGER' MaterialState.Available }'                  new object[] { 2' AbapDataType.INTEGER' MaterialState.Blocked }'                  new object[] { 3' AbapDataType.INTEGER' MaterialState.OutOfStock }'                  new object[] { 0' AbapDataType.INTEGER' default(MaterialState) }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperToRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperToRemoteTestData.cs,AbapValueMapperToRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { "X"' AbapDataType.CHAR' true }'                  new object[] { " "' AbapDataType.CHAR' false }'                                        new object[] { "My test"' AbapDataType.CHAR' "My test" }'                                        new object[] { "12424"' AbapDataType.DECIMAL' 12424m }'                  new object[] { "464"' AbapDataType.DECIMAL' 464m }'                    new object[] { "20140406"' AbapDataType.DATE' new DateTime(2014' 4' 6) }'                  new object[] { "124253"' AbapDataType.TIME' new DateTime(2014' 4' 6' 12' 42' 53) }'                    new object[] { "AVAL"' AbapDataType.CHAR' MaterialState.Available }'                  new object[] { "BLOK"' AbapDataType.CHAR' MaterialState.Blocked }'                  new object[] { "OOS"' AbapDataType.CHAR' MaterialState.OutOfStock }'                  new object[] { ""' AbapDataType.CHAR' default(MaterialState) }'                    new object[] { "1"' AbapDataType.NUMERIC' MaterialState.Available }'                  new object[] { "2"' AbapDataType.NUMERIC' MaterialState.Blocked }'                  new object[] { "3"' AbapDataType.NUMERIC' MaterialState.OutOfStock }'                  new object[] { "0"' AbapDataType.NUMERIC' default(MaterialState) }'                                        new object[] { 1' AbapDataType.INTEGER' MaterialState.Available }'                  new object[] { 2' AbapDataType.INTEGER' MaterialState.Blocked }'                  new object[] { 3' AbapDataType.INTEGER' MaterialState.OutOfStock }'                  new object[] { 0' AbapDataType.INTEGER' default(MaterialState) }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperToRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperToRemoteTestData.cs,AbapValueMapperToRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { "X"' AbapDataType.CHAR' true }'                  new object[] { " "' AbapDataType.CHAR' false }'                                        new object[] { "My test"' AbapDataType.CHAR' "My test" }'                                        new object[] { "12424"' AbapDataType.DECIMAL' 12424m }'                  new object[] { "464"' AbapDataType.DECIMAL' 464m }'                    new object[] { "20140406"' AbapDataType.DATE' new DateTime(2014' 4' 6) }'                  new object[] { "124253"' AbapDataType.TIME' new DateTime(2014' 4' 6' 12' 42' 53) }'                    new object[] { "AVAL"' AbapDataType.CHAR' MaterialState.Available }'                  new object[] { "BLOK"' AbapDataType.CHAR' MaterialState.Blocked }'                  new object[] { "OOS"' AbapDataType.CHAR' MaterialState.OutOfStock }'                  new object[] { ""' AbapDataType.CHAR' default(MaterialState) }'                    new object[] { "1"' AbapDataType.NUMERIC' MaterialState.Available }'                  new object[] { "2"' AbapDataType.NUMERIC' MaterialState.Blocked }'                  new object[] { "3"' AbapDataType.NUMERIC' MaterialState.OutOfStock }'                  new object[] { "0"' AbapDataType.NUMERIC' default(MaterialState) }'                                        new object[] { 1' AbapDataType.INTEGER' MaterialState.Available }'                  new object[] { 2' AbapDataType.INTEGER' MaterialState.Blocked }'                  new object[] { 3' AbapDataType.INTEGER' MaterialState.OutOfStock }'                  new object[] { 0' AbapDataType.INTEGER' default(MaterialState) }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperToRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperToRemoteTestData.cs,AbapValueMapperToRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { "X"' AbapDataType.CHAR' true }'                  new object[] { " "' AbapDataType.CHAR' false }'                                        new object[] { "My test"' AbapDataType.CHAR' "My test" }'                                        new object[] { "12424"' AbapDataType.DECIMAL' 12424m }'                  new object[] { "464"' AbapDataType.DECIMAL' 464m }'                    new object[] { "20140406"' AbapDataType.DATE' new DateTime(2014' 4' 6) }'                  new object[] { "124253"' AbapDataType.TIME' new DateTime(2014' 4' 6' 12' 42' 53) }'                    new object[] { "AVAL"' AbapDataType.CHAR' MaterialState.Available }'                  new object[] { "BLOK"' AbapDataType.CHAR' MaterialState.Blocked }'                  new object[] { "OOS"' AbapDataType.CHAR' MaterialState.OutOfStock }'                  new object[] { ""' AbapDataType.CHAR' default(MaterialState) }'                    new object[] { "1"' AbapDataType.NUMERIC' MaterialState.Available }'                  new object[] { "2"' AbapDataType.NUMERIC' MaterialState.Blocked }'                  new object[] { "3"' AbapDataType.NUMERIC' MaterialState.OutOfStock }'                  new object[] { "0"' AbapDataType.NUMERIC' default(MaterialState) }'                                        new object[] { 1' AbapDataType.INTEGER' MaterialState.Available }'                  new object[] { 2' AbapDataType.INTEGER' MaterialState.Blocked }'                  new object[] { 3' AbapDataType.INTEGER' MaterialState.OutOfStock }'                  new object[] { 0' AbapDataType.INTEGER' default(MaterialState) }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperToRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperToRemoteTestData.cs,AbapValueMapperToRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { "X"' AbapDataType.CHAR' true }'                  new object[] { " "' AbapDataType.CHAR' false }'                                        new object[] { "My test"' AbapDataType.CHAR' "My test" }'                                        new object[] { "12424"' AbapDataType.DECIMAL' 12424m }'                  new object[] { "464"' AbapDataType.DECIMAL' 464m }'                    new object[] { "20140406"' AbapDataType.DATE' new DateTime(2014' 4' 6) }'                  new object[] { "124253"' AbapDataType.TIME' new DateTime(2014' 4' 6' 12' 42' 53) }'                    new object[] { "AVAL"' AbapDataType.CHAR' MaterialState.Available }'                  new object[] { "BLOK"' AbapDataType.CHAR' MaterialState.Blocked }'                  new object[] { "OOS"' AbapDataType.CHAR' MaterialState.OutOfStock }'                  new object[] { ""' AbapDataType.CHAR' default(MaterialState) }'                    new object[] { "1"' AbapDataType.NUMERIC' MaterialState.Available }'                  new object[] { "2"' AbapDataType.NUMERIC' MaterialState.Blocked }'                  new object[] { "3"' AbapDataType.NUMERIC' MaterialState.OutOfStock }'                  new object[] { "0"' AbapDataType.NUMERIC' default(MaterialState) }'                                        new object[] { 1' AbapDataType.INTEGER' MaterialState.Available }'                  new object[] { 2' AbapDataType.INTEGER' MaterialState.Blocked }'                  new object[] { 3' AbapDataType.INTEGER' MaterialState.OutOfStock }'                  new object[] { 0' AbapDataType.INTEGER' default(MaterialState) }              });
Magic Number,SharpSapRfc.Test.Mapper,Soap_AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AdditionalTestData,The following statement contains a magic number: return new List<object[]> {                   new object[] { 200.78m' typeof(Decimal)' "200.78" }'                  new object[] { 514646.89m' typeof(Decimal)' "514646.89" }'                  new object[] { 1988.89d' typeof(Double)' "1988.89" }'              };
Magic Number,SharpSapRfc.Test.Mapper,Soap_AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AdditionalTestData,The following statement contains a magic number: return new List<object[]> {                   new object[] { 200.78m' typeof(Decimal)' "200.78" }'                  new object[] { 514646.89m' typeof(Decimal)' "514646.89" }'                  new object[] { 1988.89d' typeof(Double)' "1988.89" }'              };
Magic Number,SharpSapRfc.Test.Mapper,Soap_AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AdditionalTestData,The following statement contains a magic number: return new List<object[]> {                   new object[] { 200.78m' typeof(Decimal)' "200.78" }'                  new object[] { 514646.89m' typeof(Decimal)' "514646.89" }'                  new object[] { 1988.89d' typeof(Double)' "1988.89" }'              };
Magic Number,SharpSapRfc.Test.Mapper,Plain_AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AdditionalTestData,The following statement contains a magic number: return new List<object[]> {                   new object[] { 200.78m' typeof(Decimal)' "200'78" }'                  new object[] { 514646.89m' typeof(Decimal)' "514646'89" }'                  new object[] { 1988.89d' typeof(Double)' "1988'89" }'              };
Magic Number,SharpSapRfc.Test.Mapper,Plain_AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AdditionalTestData,The following statement contains a magic number: return new List<object[]> {                   new object[] { 200.78m' typeof(Decimal)' "200'78" }'                  new object[] { 514646.89m' typeof(Decimal)' "514646'89" }'                  new object[] { 1988.89d' typeof(Double)' "1988'89" }'              };
Magic Number,SharpSapRfc.Test.Mapper,Plain_AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AdditionalTestData,The following statement contains a magic number: return new List<object[]> {                   new object[] { 200.78m' typeof(Decimal)' "200'78" }'                  new object[] { 514646.89m' typeof(Decimal)' "514646'89" }'                  new object[] { 1988.89d' typeof(Double)' "1988'89" }'              };
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Mapper,AbapValueMapperFromRemoteTestData,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Mapper\AbapValueMapperFromRemoteTestData.cs,AbapValueMapperFromRemoteTestData,The following statement contains a magic number: this.testData.AddRange(new[] {                  new object[] { true' typeof(Boolean)' "X" }'                  new object[] { false' typeof(Boolean)' " " }'                  new object[] { false' typeof(Boolean)' "" }'                                    new object[] { ""' typeof(string)' "" }'                  new object[] { ""' typeof(string)' null }'                                  new object[] { " "' typeof(string)' " " }'                               new object[] { "abc"' typeof(string)' "abc" }'                          new object[] { "A@b2"' typeof(string)' "A@b2" }'                    new object[] { "My Name is"' typeof(String)' "My Name is" }'                  new object[] { 1' typeof(int)' "0001" }'                  new object[] { 10' typeof(int)' "10" }'                  new object[] { 15' typeof(int)' 15 }'                    new object[] { new DateTime(1' 1' 1' 12' 42' 12)' typeof(DateTime)' "12:42:12" }'                  new object[] { new DateTime(1' 1' 1' 17' 9' 34)' typeof(DateTime)' "170934" }'                  new object[] { new DateTime(2014' 12' 10)' typeof(DateTime)' "2014-12-10" }'                  new object[] { new DateTime(2014' 7' 4)' typeof(DateTime)' "20140704" }'                                    new object[] { 0m' typeof(Decimal)' null }'                  new object[] { null' typeof(Decimal?)' null }'                  new object[] { 0m' typeof(Decimal)' "" }'                  new object[] { null' typeof(Decimal?)' "" }'                  new object[] { -200m' typeof(Decimal)' "-200" }'                  new object[] { -451d' typeof(Double)' "-451" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' 1 }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' 2 }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' 3 }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "0001" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "0002" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "0003" }'                    new object[] { MaterialState.Available' typeof(MaterialState)' "AVAL" }'                  new object[] { MaterialState.Blocked' typeof(MaterialState)' "BLOK" }'                  new object[] { MaterialState.OutOfStock' typeof(MaterialState)' "OOS" }              });
Magic Number,SharpSapRfc.Test.Metadata,FunctionMetadataTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Metadata\FunctionMetadataTestCase.cs,SimpleFunctionMetadataTest,The following statement contains a magic number: Assert.Equal(2' metadata.InputParameters.Length);
Magic Number,SharpSapRfc.Test.Metadata,FunctionMetadataTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Metadata\FunctionMetadataTestCase.cs,InOutFunctionMetadataTest,The following statement contains a magic number: Assert.Equal(13' metadata.InputParameters.Length);
Magic Number,SharpSapRfc.Test.Metadata,FunctionMetadataTestCase,C:\research\architectureSmells\repos\oenning_SharpSapRfc\tests\Metadata\FunctionMetadataTestCase.cs,InOutFunctionMetadataTest,The following statement contains a magic number: Assert.Equal(15' metadata.OutputParameters.Length);
