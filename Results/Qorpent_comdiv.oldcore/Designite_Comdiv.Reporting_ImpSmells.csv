Implementation smell,Namespace,Class,File,Method,Description
Long Method,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,Eval,The method has 126 lines of code.
Complex Method,Comdiv.Reporting,Parameter,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\Parameter.cs,Authorize,Cyclomatic complexity of the method is 9
Complex Method,Comdiv.Reporting,ReportDefinitionBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ReportDefinitionBase.cs,Clone,Cyclomatic complexity of the method is 9
Complex Method,Comdiv.Reporting,ReportWidgetCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ReportWidgetCollection.cs,ReadFromXml,Cyclomatic complexity of the method is 8
Complex Method,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,AllParameters,Cyclomatic complexity of the method is 9
Long Parameter List,Comdiv.Reporting,ISavedReportRepository,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\SavedReportRepository.cs,Define,The method has 8 parameters.
Long Parameter List,Comdiv.Reporting,SavedReportRepository,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\SavedReportRepository.cs,Define,The method has 8 parameters.
Long Parameter List,Comdiv.Reporting,SavedReportRepository,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\SavedReportRepository.cs,Define,The method has 9 parameters.
Long Parameter List,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,normalizeParameter,The method has 5 parameters.
Long Parameter List,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,Eval,The method has 25 parameters.
Long Statement,Comdiv.Reporting,ReportDefinitionBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ReportDefinitionBase.cs,LoadParameters,The length of the statement  "			TemplateParameters.SavedReport = myapp.storage.Get<ISavedReport> ().Load (HttpContext.Current.Request.Params ["srcode"]); " is 121.
Long Statement,Comdiv.Reporting,ReportDefinitionBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ReportDefinitionBase.cs,LoadParameters,The length of the statement  "				throw new SecurityException ("������� ������ ������������ ��������� ������ � ����� " + TemplateParameters.SavedReport.Code); " is 124.
Long Statement,Comdiv.Reporting,WikiHelper,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\WikiHelper.cs,Contextualize,The length of the statement  "	this.repos = this.repos ?? InversionExtensions.get<IWikiRepository> ((IInversionContainer)myapp.ioc) ?? new WikiRepository (); " is 126.
Long Statement,Comdiv.Reporting,WikiHelper,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\WikiHelper.cs,Contextualize,The length of the statement  "	this.render_ = this.render_ ?? InversionExtensions.get<IWikiRenderService> ((IInversionContainer)myapp.ioc) ?? new WikiRender (); " is 129.
Long Statement,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,Eval,The length of the statement  "		var templateTargets = AllParameters ().Where (x => !x.Static && (x.Target == "condition" || !staticTargets.Contains (x.RealTarget))).Select (x => x.RealTarget).Distinct (); " is 172.
Long Statement,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,Eval,The length of the statement  "					result [key] = Regex.Replace (result [key].ToString ()' @"\$([^\W\d]+)"' m => result [m.Groups [1].Value].ToString ()' RegexOptions.Compiled); " is 142.
Long Statement,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,GetTemplateParametersTabs,The length of the statement  "	return AllParameters ().Select (x => x.Tab.hasContent () ? x.Tab : "00. ��������").Distinct ().OrderBy (x => x).ToList (); " is 122.
Long Statement,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,GetTemplateParametersGroups,The length of the statement  "	return AllParameters ().Where (x => (x.Tab == tab || (x.Tab.noContent () && tab == "00. ��������"))).Select (x => x.Group.hasContent () ? x.Group : "99. ������").Distinct ().OrderBy (x => x == "99. ������" ? "����" : x).ToList (); " is 230.
Long Statement,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,GetTemplateParameters,The length of the statement  "	return this.GetTemplateParameters ().Where (x => (x.Tab == tab || (x.Tab.noContent () && tab == "00. ��������")) && ((x.Group == group) || (x.Group.noContent () && group == "99. ������"))).OrderBy (x => x.Idx == 0 ? 1000 : x.Idx).ToList (); " is 240.
Long Statement,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,GetTemplateParametersGroups,The length of the statement  "	return AllParameters ().Select (x => x.Group.hasContent () ? x.Group : "99. ������").Distinct ().OrderBy (x => x == "99. ������" ? "����" : x).ToList (); " is 153.
Long Statement,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,GetTemplateParameters,The length of the statement  "	return this.GetTemplateParameters ().Where (x => (x.Group == group) || (x.Group.noContent () && group == "99. ������")).OrderBy (x => x.Idx).ToList (); " is 151.
Complex Conditional,Comdiv.Reporting,Parameter,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\Parameter.cs,Authorize,The conditional expression  "(strict && isinrole) || (!strict && !isinrole)"  is complex.
Magic Number,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,AllParameters,The following statement contains a magic number: if (cachedall == null || !cacheAble) {  	var skipped = new List<Parameter> ();  	var result = new List<Parameter> ();  	foreach (var p in this) {  		processSelfParameter (p' skipped' result);  	}  	if (this.Report != null) {  		var hiidx = 5;  		foreach (var rd in this.Report.Sources.Reverse ()) {  			var idx = 1;  			foreach (var p in rd.TemplateParameters.AllParameters ()) {  				if (p.Idx == 0) {  					p.Idx = hiidx * 100 + idx;  				}  				Parameter existed = null;  				if (null == (existed = result.FirstOrDefault (x => x.Code == p.Code))) {  					result.Add (p.Clone ().MarkAsFromLib (rd.Code));  				}  				else {  					if (existed.Idx == 0) {  						existed.Idx = p.Idx;  					}  					skipped.Add (p.Clone ().MarkAsFromLib (rd.Code));  				}  				idx++;  			}  			hiidx--;  		}  	}  	normalizeParameter (result' skipped' "viewname");  	normalizeParameter (result' skipped' "generatorname");  	cachedall = result.Where (x => x.Authorize (myapp.usr)).OrderBy (x => x.Idx).ToArray ();  }  
Magic Number,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,AllParameters,The following statement contains a magic number: if (cachedall == null || !cacheAble) {  	var skipped = new List<Parameter> ();  	var result = new List<Parameter> ();  	foreach (var p in this) {  		processSelfParameter (p' skipped' result);  	}  	if (this.Report != null) {  		var hiidx = 5;  		foreach (var rd in this.Report.Sources.Reverse ()) {  			var idx = 1;  			foreach (var p in rd.TemplateParameters.AllParameters ()) {  				if (p.Idx == 0) {  					p.Idx = hiidx * 100 + idx;  				}  				Parameter existed = null;  				if (null == (existed = result.FirstOrDefault (x => x.Code == p.Code))) {  					result.Add (p.Clone ().MarkAsFromLib (rd.Code));  				}  				else {  					if (existed.Idx == 0) {  						existed.Idx = p.Idx;  					}  					skipped.Add (p.Clone ().MarkAsFromLib (rd.Code));  				}  				idx++;  			}  			hiidx--;  		}  	}  	normalizeParameter (result' skipped' "viewname");  	normalizeParameter (result' skipped' "generatorname");  	cachedall = result.Where (x => x.Authorize (myapp.usr)).OrderBy (x => x.Idx).ToArray ();  }  
Magic Number,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,AllParameters,The following statement contains a magic number: if (this.Report != null) {  	var hiidx = 5;  	foreach (var rd in this.Report.Sources.Reverse ()) {  		var idx = 1;  		foreach (var p in rd.TemplateParameters.AllParameters ()) {  			if (p.Idx == 0) {  				p.Idx = hiidx * 100 + idx;  			}  			Parameter existed = null;  			if (null == (existed = result.FirstOrDefault (x => x.Code == p.Code))) {  				result.Add (p.Clone ().MarkAsFromLib (rd.Code));  			}  			else {  				if (existed.Idx == 0) {  					existed.Idx = p.Idx;  				}  				skipped.Add (p.Clone ().MarkAsFromLib (rd.Code));  			}  			idx++;  		}  		hiidx--;  	}  }  
Magic Number,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,AllParameters,The following statement contains a magic number: if (this.Report != null) {  	var hiidx = 5;  	foreach (var rd in this.Report.Sources.Reverse ()) {  		var idx = 1;  		foreach (var p in rd.TemplateParameters.AllParameters ()) {  			if (p.Idx == 0) {  				p.Idx = hiidx * 100 + idx;  			}  			Parameter existed = null;  			if (null == (existed = result.FirstOrDefault (x => x.Code == p.Code))) {  				result.Add (p.Clone ().MarkAsFromLib (rd.Code));  			}  			else {  				if (existed.Idx == 0) {  					existed.Idx = p.Idx;  				}  				skipped.Add (p.Clone ().MarkAsFromLib (rd.Code));  			}  			idx++;  		}  		hiidx--;  	}  }  
Magic Number,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,AllParameters,The following statement contains a magic number: foreach (var rd in this.Report.Sources.Reverse ()) {  	var idx = 1;  	foreach (var p in rd.TemplateParameters.AllParameters ()) {  		if (p.Idx == 0) {  			p.Idx = hiidx * 100 + idx;  		}  		Parameter existed = null;  		if (null == (existed = result.FirstOrDefault (x => x.Code == p.Code))) {  			result.Add (p.Clone ().MarkAsFromLib (rd.Code));  		}  		else {  			if (existed.Idx == 0) {  				existed.Idx = p.Idx;  			}  			skipped.Add (p.Clone ().MarkAsFromLib (rd.Code));  		}  		idx++;  	}  	hiidx--;  }  
Magic Number,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,AllParameters,The following statement contains a magic number: foreach (var p in rd.TemplateParameters.AllParameters ()) {  	if (p.Idx == 0) {  		p.Idx = hiidx * 100 + idx;  	}  	Parameter existed = null;  	if (null == (existed = result.FirstOrDefault (x => x.Code == p.Code))) {  		result.Add (p.Clone ().MarkAsFromLib (rd.Code));  	}  	else {  		if (existed.Idx == 0) {  			existed.Idx = p.Idx;  		}  		skipped.Add (p.Clone ().MarkAsFromLib (rd.Code));  	}  	idx++;  }  
Magic Number,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,AllParameters,The following statement contains a magic number: if (p.Idx == 0) {  	p.Idx = hiidx * 100 + idx;  }  
Magic Number,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,AllParameters,The following statement contains a magic number: p.Idx = hiidx * 100 + idx;  
Magic Number,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,Eval,The following statement contains a magic number: lock (this) {  	log.debug (() => "start eval parameters");  	//prepare  	var result = new Dictionary<string' object> ();  	AllParameters ().map (x => x.RawValue = null);  	log.debug (() => "Initial parameters:\r\n" + this.Select (x => x.ToString ()).concat (";\r\n"));  	var outervalues = new Dictionary<string' object> ();  	collection.Where (x => x.Key.StartsWith (Prefix)).map (x => outervalues [x.Key.Substring (Prefix.Length)] = x.Value);  	// first - we need collect all targets from parameters and init rawvalues collection  	AllParameters ().Select (x => x.RealTarget).Distinct ().map (x => result [x] = null);  	if (Extensible) {  		foreach (var pair in outervalues) {  			if (!result.ContainsKey (pair.Key)) {  				result [pair.Key] = pair.Value;  			}  		}  	}  	log.debug (() => "Outer parameters:\r\n" + outervalues.Select (x => x.Key + " : " + x.Value).concat (";\r\n"));  	// firstly we process STATIC parameters  	foreach (var v in result.Keys.ToArray ()) {  		var parameters = AllParameters ().Where (x => x.Static && x.RealTarget == v && x.Value != null).ToList ();  		if (parameters.Count == 0)  			continue;  		if (parameters.Count == 1)  			result [v] = parameters [0].Value;  		else {  			result [v] = parameters.Select (x => x.Value.toStr ()).concat ("'");  		}  	}  	//next we must process template parameters that not shares targets with static except conditions  	var staticTargets = AllParameters ().Where (x => x.Static).Select (x => x.RealTarget).ToList ();  	var templateTargets = AllParameters ().Where (x => !x.Static && (x.Target == "condition" || !staticTargets.Contains (x.RealTarget))).Select (x => x.RealTarget).Distinct ();  	var templateValues = new Dictionary<string' object> ();  	this.AdvancedSavedReports = new List<ISavedReport> ();  	foreach (var parameter in AllParameters ().Where (x => x.Code.StartsWith ("param_template_")).OrderBy (x => x.Code)) {  		string value = "";  		if (collection.ContainsKey ("tp." + parameter.Code)) {  			value = collection ["tp." + parameter.Code].toStr ();  		}  		if (value.noContent ())  			value = parameter.Value.toStr ();  		if (value.hasContent ()) {  			var report = myapp.storage.Get<ISavedReport> ().Load (value);  			this.AdvancedSavedReports.Add (report);  		}  	}  	foreach (var target in templateTargets) {  		var temps = AllParameters ().Where (x => x.RealTarget == target).Select (x => new Parameter () {  			Code = x.Code'  			DefaultValue = x.DefaultValue'  			Type = x.Type'  			AltValue = x.AltValue  		}).ToList ();  		foreach (var list in temps) {  			if (outervalues.ContainsKey (list.Code)) {  				list.RawValue = outervalues [list.Code];  			}  		}  		foreach (var advancedSavedReport in this.AdvancedSavedReports) {  			foreach (var t in temps) {  				var sr = advancedSavedReport.Parameters.FirstOrDefault (x => x.Name == t.Code);  				if (null != sr) {  					t.RawValue = sr.Value;  					//t.setdef(sr.Value);  				}  			}  		}  		if (null != SavedReport) {  			foreach (var t in temps) {  				var sr = SavedReport.Parameters.FirstOrDefault (x => x.Name == t.Code);  				if (null != sr) {  					t.RawValue = sr.Value;  					//t.setdef(sr.Value);  				}  			}  		}  		var pseudo = new Parameter {  			RealType = temps [0].RealType  		};  		if (target == "condition") {  			pseudo.RealType = typeof(string);  		}  		templateValues [target] = null;  		if (outervalues.ContainsKey (target)) {  			pseudo.DefaultValue = outervalues [target];  		}  		else {  			if (1 == temps.Count) {  				pseudo.RawValue = temps [0].Value;  			}  			else {  				pseudo.RawValue = temps.Select (x => x.Value).Where (v => null != v).Select (v => v.toStr ()).concat ("'");  			}  		}  		templateValues [target] = pseudo.Value;  	}  	foreach (var v in templateValues) {  		var val = v.Value;  		if (v.Key == "condition") {  			val = result ["condition"].toStr () + "'" + val;  		}  		result [v.Key] = val;  	}  	var keys = result.Keys.ToArray ();  	foreach (var key in keys) {  		try {  			if (result [key] is string) {  				result [key] = Regex.Replace (result [key].ToString ()' @"\$([^\W\d]+)"' m => result [m.Groups [1].Value].ToString ()' RegexOptions.Compiled);  			}  		}  		catch (Exception ex) {  			logger.get ("comdiv.sys").Error ("������ ���������� {0}({1})"' key' result [key]);  			throw;  		}  	}  	log.debug (() => "Result :\r\n" + result.Select (x => x.Key + " : " + x.Value).concat (";\r\n"));  	if (result.ContainsKey ("year")) {  		var y = result.get<int> ("year");  		if (y > -20 && y < 20) {  			result ["year"] = DateTime.Today.Year + y;  		}  	}  	return result;  }  
Magic Number,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,Eval,The following statement contains a magic number: lock (this) {  	log.debug (() => "start eval parameters");  	//prepare  	var result = new Dictionary<string' object> ();  	AllParameters ().map (x => x.RawValue = null);  	log.debug (() => "Initial parameters:\r\n" + this.Select (x => x.ToString ()).concat (";\r\n"));  	var outervalues = new Dictionary<string' object> ();  	collection.Where (x => x.Key.StartsWith (Prefix)).map (x => outervalues [x.Key.Substring (Prefix.Length)] = x.Value);  	// first - we need collect all targets from parameters and init rawvalues collection  	AllParameters ().Select (x => x.RealTarget).Distinct ().map (x => result [x] = null);  	if (Extensible) {  		foreach (var pair in outervalues) {  			if (!result.ContainsKey (pair.Key)) {  				result [pair.Key] = pair.Value;  			}  		}  	}  	log.debug (() => "Outer parameters:\r\n" + outervalues.Select (x => x.Key + " : " + x.Value).concat (";\r\n"));  	// firstly we process STATIC parameters  	foreach (var v in result.Keys.ToArray ()) {  		var parameters = AllParameters ().Where (x => x.Static && x.RealTarget == v && x.Value != null).ToList ();  		if (parameters.Count == 0)  			continue;  		if (parameters.Count == 1)  			result [v] = parameters [0].Value;  		else {  			result [v] = parameters.Select (x => x.Value.toStr ()).concat ("'");  		}  	}  	//next we must process template parameters that not shares targets with static except conditions  	var staticTargets = AllParameters ().Where (x => x.Static).Select (x => x.RealTarget).ToList ();  	var templateTargets = AllParameters ().Where (x => !x.Static && (x.Target == "condition" || !staticTargets.Contains (x.RealTarget))).Select (x => x.RealTarget).Distinct ();  	var templateValues = new Dictionary<string' object> ();  	this.AdvancedSavedReports = new List<ISavedReport> ();  	foreach (var parameter in AllParameters ().Where (x => x.Code.StartsWith ("param_template_")).OrderBy (x => x.Code)) {  		string value = "";  		if (collection.ContainsKey ("tp." + parameter.Code)) {  			value = collection ["tp." + parameter.Code].toStr ();  		}  		if (value.noContent ())  			value = parameter.Value.toStr ();  		if (value.hasContent ()) {  			var report = myapp.storage.Get<ISavedReport> ().Load (value);  			this.AdvancedSavedReports.Add (report);  		}  	}  	foreach (var target in templateTargets) {  		var temps = AllParameters ().Where (x => x.RealTarget == target).Select (x => new Parameter () {  			Code = x.Code'  			DefaultValue = x.DefaultValue'  			Type = x.Type'  			AltValue = x.AltValue  		}).ToList ();  		foreach (var list in temps) {  			if (outervalues.ContainsKey (list.Code)) {  				list.RawValue = outervalues [list.Code];  			}  		}  		foreach (var advancedSavedReport in this.AdvancedSavedReports) {  			foreach (var t in temps) {  				var sr = advancedSavedReport.Parameters.FirstOrDefault (x => x.Name == t.Code);  				if (null != sr) {  					t.RawValue = sr.Value;  					//t.setdef(sr.Value);  				}  			}  		}  		if (null != SavedReport) {  			foreach (var t in temps) {  				var sr = SavedReport.Parameters.FirstOrDefault (x => x.Name == t.Code);  				if (null != sr) {  					t.RawValue = sr.Value;  					//t.setdef(sr.Value);  				}  			}  		}  		var pseudo = new Parameter {  			RealType = temps [0].RealType  		};  		if (target == "condition") {  			pseudo.RealType = typeof(string);  		}  		templateValues [target] = null;  		if (outervalues.ContainsKey (target)) {  			pseudo.DefaultValue = outervalues [target];  		}  		else {  			if (1 == temps.Count) {  				pseudo.RawValue = temps [0].Value;  			}  			else {  				pseudo.RawValue = temps.Select (x => x.Value).Where (v => null != v).Select (v => v.toStr ()).concat ("'");  			}  		}  		templateValues [target] = pseudo.Value;  	}  	foreach (var v in templateValues) {  		var val = v.Value;  		if (v.Key == "condition") {  			val = result ["condition"].toStr () + "'" + val;  		}  		result [v.Key] = val;  	}  	var keys = result.Keys.ToArray ();  	foreach (var key in keys) {  		try {  			if (result [key] is string) {  				result [key] = Regex.Replace (result [key].ToString ()' @"\$([^\W\d]+)"' m => result [m.Groups [1].Value].ToString ()' RegexOptions.Compiled);  			}  		}  		catch (Exception ex) {  			logger.get ("comdiv.sys").Error ("������ ���������� {0}({1})"' key' result [key]);  			throw;  		}  	}  	log.debug (() => "Result :\r\n" + result.Select (x => x.Key + " : " + x.Value).concat (";\r\n"));  	if (result.ContainsKey ("year")) {  		var y = result.get<int> ("year");  		if (y > -20 && y < 20) {  			result ["year"] = DateTime.Today.Year + y;  		}  	}  	return result;  }  
Magic Number,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,Eval,The following statement contains a magic number: if (result.ContainsKey ("year")) {  	var y = result.get<int> ("year");  	if (y > -20 && y < 20) {  		result ["year"] = DateTime.Today.Year + y;  	}  }  
Magic Number,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,Eval,The following statement contains a magic number: if (result.ContainsKey ("year")) {  	var y = result.get<int> ("year");  	if (y > -20 && y < 20) {  		result ["year"] = DateTime.Today.Year + y;  	}  }  
Magic Number,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,Eval,The following statement contains a magic number: if (y > -20 && y < 20) {  	result ["year"] = DateTime.Today.Year + y;  }  
Magic Number,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,Eval,The following statement contains a magic number: if (y > -20 && y < 20) {  	result ["year"] = DateTime.Today.Year + y;  }  
Magic Number,Comdiv.MVC,ParametersCollection,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Reporting\ParametersCollection.cs,GetTemplateParameters,The following statement contains a magic number: return this.GetTemplateParameters ().Where (x => (x.Tab == tab || (x.Tab.noContent () && tab == "00. ��������")) && ((x.Group == group) || (x.Group.noContent () && group == "99. ������"))).OrderBy (x => x.Idx == 0 ? 1000 : x.Idx).ToList ();  
