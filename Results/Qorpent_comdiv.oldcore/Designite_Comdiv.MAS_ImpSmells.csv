Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Comdiv.MAS,MasApplicationBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasApplicationBase.cs,setupAssemblyLoader,Cyclomatic complexity of the method is 11
Complex Method,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,getcolor,Cyclomatic complexity of the method is 8
Complex Method,Comdiv.MAS,DefaultRepositorySetupProvider,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Services\DefaultRepositorySetupProvider.cs,Execute,Cyclomatic complexity of the method is 12
Complex Method,Comdiv.MAS,MasController,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Web\MasController.cs,run,Cyclomatic complexity of the method is 8
Long Parameter List,Comdiv.MAS,MasApplicationBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasApplicationBase.cs,log,The method has 5 parameters.
Long Parameter List,Comdiv.MAS,MasController,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Web\MasController.cs,clean,The method has 8 parameters.
Long Statement,Comdiv.MAS,MasApplicationBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasApplicationBase.cs,setupAssemblyLoader,The length of the statement  "	var dir = Path.GetFullPath (Path.Combine (Path.GetDirectoryName (Assembly.GetEntryAssembly ().CodeBase.Replace ("file:///"' ""))' "..\\..\\bin")); " is 146.
Long Statement,Comdiv.MAS,MasApplicationBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasApplicationBase.cs,setupAssemblyLoader,The length of the statement  "	dir = Path.GetFullPath (Path.Combine (Path.GetDirectoryName (Assembly.GetEntryAssembly ().CodeBase.Replace ("file:///"' ""))' "..\\..\\extensions")); " is 149.
Long Statement,Comdiv.MAS,MasApplicationBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasApplicationBase.cs,setupAssemblyLoader,The length of the statement  "	dir = Path.GetFullPath (Path.Combine (Path.GetDirectoryName (Assembly.GetEntryAssembly ().CodeBase.Replace ("file:///"' ""))' "..\\..\\tmp\\dlls")); " is 148.
Long Statement,Comdiv.MAS,MasApplicationBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasApplicationBase.cs,setupAssemblyLoader,The length of the statement  "	dir = Path.GetFullPath (Path.Combine (Path.GetDirectoryName (Assembly.GetEntryAssembly ().CodeBase.Replace ("file:///"' ""))' "..\\extensions")); " is 145.
Long Statement,Comdiv.MAS,MasApplicationBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasApplicationBase.cs,setupAssemblyLoader,The length of the statement  "	dir = Path.GetFullPath (Path.Combine (Path.GetDirectoryName (Assembly.GetEntryAssembly ().CodeBase.Replace ("file:///"' ""))' "..\\tmp\\dlls")); " is 144.
Long Statement,Comdiv.MAS,MasApplicationBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasApplicationBase.cs,setupMas,The length of the statement  "	this.IgnoreMas = (Args.get ("mas-ignore"' () => false) || this.IgnoreMasByDefault) && !Args.get ("mas-use"' () => false); " is 121.
Long Statement,Comdiv.MAS,MasApplicationBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasApplicationBase.cs,getevent,The length of the statement  "					logtrace ("message (" + LastMessage.Type + ") processed : " + LastMessage.Processed + " answer : '" + LastMessage.Answer + "'"); " is 128.
Long Statement,Comdiv.MAS,DefaultRepositorySetupProvider,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Services\DefaultRepositorySetupProvider.cs,Execute,The length of the statement  "		connections.Set (config.System' string.Format ("Data Source={0};Initial Catalog={1};Integrated Security=True"' config.Server' config.Database)); " is 144.
Long Statement,Comdiv.MAS,DefaultRepositorySetupProvider,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Services\DefaultRepositorySetupProvider.cs,Execute,The length of the statement  "			schemahash = c.ExecuteScalar<string> ("select comdiv.get_prop_value('comdiv.mas.schema.hashcode')"' (IParametersProvider)null); " is 127.
Long Statement,Comdiv.MAS,DefaultRepositorySetupProvider,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Services\DefaultRepositorySetupProvider.cs,Execute,The length of the statement  "		var schemasqlresourcename = Enumerable.FirstOrDefault<string> (Assembly.GetExecutingAssembly ().GetManifestResourceNames ()' x => x.Contains ("schema.sql")); " is 157.
Long Statement,Comdiv.MAS,DefaultRepositorySetupProvider,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Services\DefaultRepositorySetupProvider.cs,Execute,The length of the statement  "		using (var sr = new StreamReader (Assembly.GetExecutingAssembly ().GetManifestResourceStream (schemasqlresourcename))) { " is 120.
Long Statement,Comdiv.MAS,DefaultRepositorySetupProvider,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Services\DefaultRepositorySetupProvider.cs,Execute,The length of the statement  "		var actualhash = Convert.ToBase64String (System.Security.Cryptography.MD5.Create ().ComputeHash (Encoding.UTF8.GetBytes (script))); " is 131.
Long Statement,Comdiv.MAS,DefaultRepositorySetupProvider,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Services\DefaultRepositorySetupProvider.cs,Execute,The length of the statement  "			c.ExecuteNonQuery ("exec comdiv.set_prop_value 'comdiv.mas.schema.hashcode'''" + actualhash + "'"' (IParametersProvider)null); " is 126.
Long Statement,Comdiv.MAS,MasInversionExtension,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Services\MasInversionExtension.cs,setupMas,The length of the statement  "	var repositorysetupprovider = processrepository.getFirstAttribute<SetupProviderAttribute> ().Type.create<IMasSetupProvider> (); " is 127.
Long Statement,Comdiv.MAS.Model,MasExtensions,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Model\MasExtensions.cs,getCommand,The length of the statement  "	var cc = type.CachedCommands ?? (type.CachedCommands = new BxlParser ().Parse ((type.getFullCommands () ?? "").Trim ()' "")); " is 125.
Complex Conditional,Comdiv.MAS,MasApplicationBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasApplicationBase.cs,log,The conditional expression  "!IgnoreMas && !onlyself && null != MasConfig && MasConfig.DefaultLogLevel <= type"  is complex.
Magic Number,Comdiv.MAS,MasApplicationBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasApplicationBase.cs,setupMasProcess,The following statement contains a magic number: if (!IgnoreMas) {  	this.MasProcess = this.MasRepository.Start (this.MasProcess);  	this.EventRate = Args.get ("mas-eventrate"' () => 5000);  }  
Magic Number,Comdiv.MAS,MasApplicationBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasApplicationBase.cs,setupMasProcess,The following statement contains a magic number: this.EventRate = Args.get ("mas-eventrate"' () => 5000);  
Magic Number,Comdiv.MAS,MasApplicationBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasApplicationBase.cs,getCanProceed,The following statement contains a magic number: if (!runrecord.CanRun) {  	MasProcess.Result = 2;  	MasProcess.ResultDescription = runrecord.Description;  	MasRepository.Finish (MasProcess);  	Finished = true;  }  
Magic Number,Comdiv.MAS,MasApplicationBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasApplicationBase.cs,getCanProceed,The following statement contains a magic number: MasProcess.Result = 2;  
Magic Number,Comdiv.MAS,MasApplicationBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasApplicationBase.cs,normalProcessFinish,The following statement contains a magic number: if (MasProcess.Result == -10) {  	MasProcess.Result = 0;  }  
Magic Number,Comdiv.MAS,MasApplicationBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasApplicationBase.cs,getevent,The following statement contains a magic number: lock (this) {  	try {  		EventTimer.Stop ();  		this.LastMessage = MasRepository.GetNext (MasProcess' LastMessage);  		if (LastMessage != null) {  			logtrace ("message: " + LastMessage.Message + " from " + LastMessage.Sender + " recieved");  			try {  				dispatchMessage (LastMessage);  				logtrace ("message (" + LastMessage.Type + ") processed : " + LastMessage.Processed + " answer : '" + LastMessage.Answer + "'");  			}  			finally {  				if (null != LastMessage) {  					this.LastMessage.Accepted = true;  					if (this.LastMessage.Processed) {  						this.LastMessage.AnswerTime = DateTime.Now;  					}  					this.LastMessage = MasRepository.Update (LastMessage);  				}  			}  		}  		EventTimer.Start ();  	}  	catch (MasKillException ex) {  		logfatal (ex.Message' "ERROR ON MESSAGE PROCESSING"' "SELF");  		MasProcess.Result = -2;  		MasProcess.ResultDescription = "killed";  		MasRepository.Finish (MasProcess);  		System.Diagnostics.Process.GetCurrentProcess ().Kill ();  	}  }  
Magic Number,Comdiv.MAS,MasApplicationBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasApplicationBase.cs,getevent,The following statement contains a magic number: try {  	EventTimer.Stop ();  	this.LastMessage = MasRepository.GetNext (MasProcess' LastMessage);  	if (LastMessage != null) {  		logtrace ("message: " + LastMessage.Message + " from " + LastMessage.Sender + " recieved");  		try {  			dispatchMessage (LastMessage);  			logtrace ("message (" + LastMessage.Type + ") processed : " + LastMessage.Processed + " answer : '" + LastMessage.Answer + "'");  		}  		finally {  			if (null != LastMessage) {  				this.LastMessage.Accepted = true;  				if (this.LastMessage.Processed) {  					this.LastMessage.AnswerTime = DateTime.Now;  				}  				this.LastMessage = MasRepository.Update (LastMessage);  			}  		}  	}  	EventTimer.Start ();  }  catch (MasKillException ex) {  	logfatal (ex.Message' "ERROR ON MESSAGE PROCESSING"' "SELF");  	MasProcess.Result = -2;  	MasProcess.ResultDescription = "killed";  	MasRepository.Finish (MasProcess);  	System.Diagnostics.Process.GetCurrentProcess ().Kill ();  }  
Magic Number,Comdiv.MAS,MasApplicationBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasApplicationBase.cs,getevent,The following statement contains a magic number: MasProcess.Result = -2;  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: if (!lastMessage.Processed) {  	if (lastMessage.Type == "write") {  		lastMessage.Processed = true;  		lastMessage.Answer = "output to log";  		loginfo (lastMessage.Message' "FROM MESSAGE"' lastMessage.Sender);  	}  	else if (lastMessage.Type == "readline") {  		lock (consolesync) {  			Console.Beep (800' 300);  			Console.Beep (1000' 200);  			Console.Beep (1500' 100);  			Console.Write (lastMessage.Message + " > ");  			var result = Console.ReadLine ();  			lastMessage.Answer = result;  			lastMessage.Processed = true;  			logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  		}  	}  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: if (!lastMessage.Processed) {  	if (lastMessage.Type == "write") {  		lastMessage.Processed = true;  		lastMessage.Answer = "output to log";  		loginfo (lastMessage.Message' "FROM MESSAGE"' lastMessage.Sender);  	}  	else if (lastMessage.Type == "readline") {  		lock (consolesync) {  			Console.Beep (800' 300);  			Console.Beep (1000' 200);  			Console.Beep (1500' 100);  			Console.Write (lastMessage.Message + " > ");  			var result = Console.ReadLine ();  			lastMessage.Answer = result;  			lastMessage.Processed = true;  			logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  		}  	}  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: if (!lastMessage.Processed) {  	if (lastMessage.Type == "write") {  		lastMessage.Processed = true;  		lastMessage.Answer = "output to log";  		loginfo (lastMessage.Message' "FROM MESSAGE"' lastMessage.Sender);  	}  	else if (lastMessage.Type == "readline") {  		lock (consolesync) {  			Console.Beep (800' 300);  			Console.Beep (1000' 200);  			Console.Beep (1500' 100);  			Console.Write (lastMessage.Message + " > ");  			var result = Console.ReadLine ();  			lastMessage.Answer = result;  			lastMessage.Processed = true;  			logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  		}  	}  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: if (!lastMessage.Processed) {  	if (lastMessage.Type == "write") {  		lastMessage.Processed = true;  		lastMessage.Answer = "output to log";  		loginfo (lastMessage.Message' "FROM MESSAGE"' lastMessage.Sender);  	}  	else if (lastMessage.Type == "readline") {  		lock (consolesync) {  			Console.Beep (800' 300);  			Console.Beep (1000' 200);  			Console.Beep (1500' 100);  			Console.Write (lastMessage.Message + " > ");  			var result = Console.ReadLine ();  			lastMessage.Answer = result;  			lastMessage.Processed = true;  			logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  		}  	}  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: if (!lastMessage.Processed) {  	if (lastMessage.Type == "write") {  		lastMessage.Processed = true;  		lastMessage.Answer = "output to log";  		loginfo (lastMessage.Message' "FROM MESSAGE"' lastMessage.Sender);  	}  	else if (lastMessage.Type == "readline") {  		lock (consolesync) {  			Console.Beep (800' 300);  			Console.Beep (1000' 200);  			Console.Beep (1500' 100);  			Console.Write (lastMessage.Message + " > ");  			var result = Console.ReadLine ();  			lastMessage.Answer = result;  			lastMessage.Processed = true;  			logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  		}  	}  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: if (!lastMessage.Processed) {  	if (lastMessage.Type == "write") {  		lastMessage.Processed = true;  		lastMessage.Answer = "output to log";  		loginfo (lastMessage.Message' "FROM MESSAGE"' lastMessage.Sender);  	}  	else if (lastMessage.Type == "readline") {  		lock (consolesync) {  			Console.Beep (800' 300);  			Console.Beep (1000' 200);  			Console.Beep (1500' 100);  			Console.Write (lastMessage.Message + " > ");  			var result = Console.ReadLine ();  			lastMessage.Answer = result;  			lastMessage.Processed = true;  			logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  		}  	}  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: if (lastMessage.Type == "write") {  	lastMessage.Processed = true;  	lastMessage.Answer = "output to log";  	loginfo (lastMessage.Message' "FROM MESSAGE"' lastMessage.Sender);  }  else if (lastMessage.Type == "readline") {  	lock (consolesync) {  		Console.Beep (800' 300);  		Console.Beep (1000' 200);  		Console.Beep (1500' 100);  		Console.Write (lastMessage.Message + " > ");  		var result = Console.ReadLine ();  		lastMessage.Answer = result;  		lastMessage.Processed = true;  		logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  	}  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: if (lastMessage.Type == "write") {  	lastMessage.Processed = true;  	lastMessage.Answer = "output to log";  	loginfo (lastMessage.Message' "FROM MESSAGE"' lastMessage.Sender);  }  else if (lastMessage.Type == "readline") {  	lock (consolesync) {  		Console.Beep (800' 300);  		Console.Beep (1000' 200);  		Console.Beep (1500' 100);  		Console.Write (lastMessage.Message + " > ");  		var result = Console.ReadLine ();  		lastMessage.Answer = result;  		lastMessage.Processed = true;  		logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  	}  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: if (lastMessage.Type == "write") {  	lastMessage.Processed = true;  	lastMessage.Answer = "output to log";  	loginfo (lastMessage.Message' "FROM MESSAGE"' lastMessage.Sender);  }  else if (lastMessage.Type == "readline") {  	lock (consolesync) {  		Console.Beep (800' 300);  		Console.Beep (1000' 200);  		Console.Beep (1500' 100);  		Console.Write (lastMessage.Message + " > ");  		var result = Console.ReadLine ();  		lastMessage.Answer = result;  		lastMessage.Processed = true;  		logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  	}  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: if (lastMessage.Type == "write") {  	lastMessage.Processed = true;  	lastMessage.Answer = "output to log";  	loginfo (lastMessage.Message' "FROM MESSAGE"' lastMessage.Sender);  }  else if (lastMessage.Type == "readline") {  	lock (consolesync) {  		Console.Beep (800' 300);  		Console.Beep (1000' 200);  		Console.Beep (1500' 100);  		Console.Write (lastMessage.Message + " > ");  		var result = Console.ReadLine ();  		lastMessage.Answer = result;  		lastMessage.Processed = true;  		logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  	}  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: if (lastMessage.Type == "write") {  	lastMessage.Processed = true;  	lastMessage.Answer = "output to log";  	loginfo (lastMessage.Message' "FROM MESSAGE"' lastMessage.Sender);  }  else if (lastMessage.Type == "readline") {  	lock (consolesync) {  		Console.Beep (800' 300);  		Console.Beep (1000' 200);  		Console.Beep (1500' 100);  		Console.Write (lastMessage.Message + " > ");  		var result = Console.ReadLine ();  		lastMessage.Answer = result;  		lastMessage.Processed = true;  		logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  	}  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: if (lastMessage.Type == "write") {  	lastMessage.Processed = true;  	lastMessage.Answer = "output to log";  	loginfo (lastMessage.Message' "FROM MESSAGE"' lastMessage.Sender);  }  else if (lastMessage.Type == "readline") {  	lock (consolesync) {  		Console.Beep (800' 300);  		Console.Beep (1000' 200);  		Console.Beep (1500' 100);  		Console.Write (lastMessage.Message + " > ");  		var result = Console.ReadLine ();  		lastMessage.Answer = result;  		lastMessage.Processed = true;  		logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  	}  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: if (lastMessage.Type == "readline") {  	lock (consolesync) {  		Console.Beep (800' 300);  		Console.Beep (1000' 200);  		Console.Beep (1500' 100);  		Console.Write (lastMessage.Message + " > ");  		var result = Console.ReadLine ();  		lastMessage.Answer = result;  		lastMessage.Processed = true;  		logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  	}  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: if (lastMessage.Type == "readline") {  	lock (consolesync) {  		Console.Beep (800' 300);  		Console.Beep (1000' 200);  		Console.Beep (1500' 100);  		Console.Write (lastMessage.Message + " > ");  		var result = Console.ReadLine ();  		lastMessage.Answer = result;  		lastMessage.Processed = true;  		logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  	}  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: if (lastMessage.Type == "readline") {  	lock (consolesync) {  		Console.Beep (800' 300);  		Console.Beep (1000' 200);  		Console.Beep (1500' 100);  		Console.Write (lastMessage.Message + " > ");  		var result = Console.ReadLine ();  		lastMessage.Answer = result;  		lastMessage.Processed = true;  		logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  	}  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: if (lastMessage.Type == "readline") {  	lock (consolesync) {  		Console.Beep (800' 300);  		Console.Beep (1000' 200);  		Console.Beep (1500' 100);  		Console.Write (lastMessage.Message + " > ");  		var result = Console.ReadLine ();  		lastMessage.Answer = result;  		lastMessage.Processed = true;  		logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  	}  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: if (lastMessage.Type == "readline") {  	lock (consolesync) {  		Console.Beep (800' 300);  		Console.Beep (1000' 200);  		Console.Beep (1500' 100);  		Console.Write (lastMessage.Message + " > ");  		var result = Console.ReadLine ();  		lastMessage.Answer = result;  		lastMessage.Processed = true;  		logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  	}  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: if (lastMessage.Type == "readline") {  	lock (consolesync) {  		Console.Beep (800' 300);  		Console.Beep (1000' 200);  		Console.Beep (1500' 100);  		Console.Write (lastMessage.Message + " > ");  		var result = Console.ReadLine ();  		lastMessage.Answer = result;  		lastMessage.Processed = true;  		logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  	}  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: lock (consolesync) {  	Console.Beep (800' 300);  	Console.Beep (1000' 200);  	Console.Beep (1500' 100);  	Console.Write (lastMessage.Message + " > ");  	var result = Console.ReadLine ();  	lastMessage.Answer = result;  	lastMessage.Processed = true;  	logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: lock (consolesync) {  	Console.Beep (800' 300);  	Console.Beep (1000' 200);  	Console.Beep (1500' 100);  	Console.Write (lastMessage.Message + " > ");  	var result = Console.ReadLine ();  	lastMessage.Answer = result;  	lastMessage.Processed = true;  	logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: lock (consolesync) {  	Console.Beep (800' 300);  	Console.Beep (1000' 200);  	Console.Beep (1500' 100);  	Console.Write (lastMessage.Message + " > ");  	var result = Console.ReadLine ();  	lastMessage.Answer = result;  	lastMessage.Processed = true;  	logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: lock (consolesync) {  	Console.Beep (800' 300);  	Console.Beep (1000' 200);  	Console.Beep (1500' 100);  	Console.Write (lastMessage.Message + " > ");  	var result = Console.ReadLine ();  	lastMessage.Answer = result;  	lastMessage.Processed = true;  	logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: lock (consolesync) {  	Console.Beep (800' 300);  	Console.Beep (1000' 200);  	Console.Beep (1500' 100);  	Console.Write (lastMessage.Message + " > ");  	var result = Console.ReadLine ();  	lastMessage.Answer = result;  	lastMessage.Processed = true;  	logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: lock (consolesync) {  	Console.Beep (800' 300);  	Console.Beep (1000' 200);  	Console.Beep (1500' 100);  	Console.Write (lastMessage.Message + " > ");  	var result = Console.ReadLine ();  	lastMessage.Answer = result;  	lastMessage.Processed = true;  	logtrace ("'" + result + "' was sended to " + lastMessage.Sender);  }  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: Console.Beep (800' 300);  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: Console.Beep (800' 300);  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: Console.Beep (1000' 200);  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: Console.Beep (1000' 200);  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: Console.Beep (1500' 100);  
Magic Number,Comdiv.MAS,MasConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasConsoleApplication.cs,dispatchMessage,The following statement contains a magic number: Console.Beep (1500' 100);  
Magic Number,Comdiv.MAS,MasTestConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasTestConsoleApplication.cs,execute,The following statement contains a magic number: while (!ForceQuit) {  	Thread.Sleep (500);  }  
Magic Number,Comdiv.MAS,MasTestConsoleApplication,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Application\MasTestConsoleApplication.cs,execute,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,Comdiv.MAS,DefaultMasProcessRepository,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Services\DefaultMasProcessRepository.cs,Start,The following statement contains a magic number: processinfo.Result = -10;  
Magic Number,Comdiv.MAS.Model,MasExtensions,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Model\MasExtensions.cs,getRootUrl,The following statement contains a magic number: if (app.getConfigParameter ("machinename") == Environment.MachineName) {  	var uri = new Uri (url);  	url = uri.Scheme + "://localhost:" + uri.Port;  }  else if (localping.hasContent ()) {  	var ping = new Ping ();  	var reply = ping.Send (localping' 300);  	if (reply.Status != IPStatus.Success) {  		url = app.Server.INetUrl;  	}  }  
Magic Number,Comdiv.MAS.Model,MasExtensions,C:\repos\Qorpent_comdiv.oldcore\Comdiv.MAS\Model\MasExtensions.cs,getRootUrl,The following statement contains a magic number: if (localping.hasContent ()) {  	var ping = new Ping ();  	var reply = ping.Send (localping' 300);  	if (reply.Status != IPStatus.Success) {  		url = app.Server.INetUrl;  	}  }  
