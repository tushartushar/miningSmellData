Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Comdiv.Booxml,ApplyGlobalsAndSubstitutionsStep,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Booxml\ApplyGlobalsAndSubstitutionsStep.cs,resolveSubstitutions,Cyclomatic complexity of the method is 12
Complex Method,Comdiv.Booxml,BooxmlGenerator,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Booxml\BooxmlGenerator.cs,generateElement,Cyclomatic complexity of the method is 9
Complex Method,Comdiv.Extensibility.Brail,ExpandBmlStep,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\ExpandBmlStep.cs,OnMacroStatement,Cyclomatic complexity of the method is 10
Complex Method,Comdiv.Extensibility.Brail,ExpandBmlStep,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\ExpandBmlStep.cs,gradeReferencesAndStringsToBeWriteout,Cyclomatic complexity of the method is 17
Complex Method,Comdiv.Extensibility.Brail,BrailBuildingHelper,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\BrailBuildingHelper.cs,brailOutResolve,Cyclomatic complexity of the method is 9
Complex Method,Comdiv.Extensibility.Brail,BrailBuildingHelper,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\BrailBuildingHelper.cs,getAttributes,Cyclomatic complexity of the method is 22
Complex Method,Comdiv.Extensibility.Brail,ExpandDuckTypedExpressions_WorkaroundForDuplicateVirtualMethods,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\ExpandDuckTypedExpressions_WorkaroundForDuplicateVirtualMethods.cs,SetSlice,Cyclomatic complexity of the method is 8
Complex Method,Comdiv.Extensibility.Brail,ExpandDuckTypedExpressions_WorkaroundForDuplicateVirtualMethods,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\ExpandDuckTypedExpressions_WorkaroundForDuplicateVirtualMethods.cs,GetSlice,Cyclomatic complexity of the method is 8
Complex Method,Comdiv.Extensibility.Brail,WSAIgnoranceParsingStep,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\WSAIgnoranceParsingStep.cs,Run,Cyclomatic complexity of the method is 9
Complex Method,Comdiv.Extensibility.Brail,ForeachSnippet,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\FOREACH\ForeachSnippet.cs,prepare,Cyclomatic complexity of the method is 10
Complex Method,Castle.MonoRail.Views.Brail,BrailConfigurationSectionBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\BrailConfigurationSectionBase.cs,Create,Cyclomatic complexity of the method is 13
Complex Method,Comdiv.Extensibility.Boo.Dsl,BooBasedCompiler,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Dsl\BooBasedCompiler.cs,Compile,Cyclomatic complexity of the method is 13
Complex Method,Comdiv.Extensibility.ExtensionsCompiler,ExtensionsPreprocessor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\ExtensionsCompiler\ExtensionsPreprocessor.cs,getmacronamespaces,Cyclomatic complexity of the method is 9
Long Parameter List,Comdiv.Extensibility.Boo.Dsl,BooBasedCompiler,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Dsl\BooBasedCompiler.cs,Compile,The method has 5 parameters.
Long Parameter List,Comdiv.Extensibility.Boo.Dsl,DslAstUtil,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Dsl\DslAstUtil.cs,FindOrCreateClass,The method has 5 parameters.
Long Parameter List,Comdiv.Extensibility.Boo.Dsl,DslAstUtil,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Dsl\DslAstUtil.cs,findExistedClass,The method has 5 parameters.
Long Identifier,Comdiv.Extensibility.Brail,OutputWriteUnification,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\OutputWriteUnification.cs,joinInterpolations,The length of the parameter expressionInterpolationExpression is 33.
Long Identifier,Comdiv.Extensibility.Brail,BrailPreProcessor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailPreProcessor.cs,EscapeNullPropagationsInOutputExpression,The length of the parameter positionAfterEndOfClosingQuote is 30.
Long Statement,Comdiv.Extensibility,AnykeyMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\AnyKeyMacro.cs,Expand,The length of the statement  "	result.Statements.Add (new ExpressionStatement (new MethodInvocationExpression (AstUtil.CreateReferenceExpression ("System.Console.WriteLine")' new StringLiteralExpression ("Press any key...")))); " is 196.
Long Statement,Comdiv.Extensibility,AnykeyMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\AnyKeyMacro.cs,Expand,The length of the statement  "	result.Statements.Add (new ExpressionStatement (new MethodInvocationExpression (AstUtil.CreateReferenceExpression ("System.Console.ReadKey")))); " is 144.
Long Statement,Comdiv.Extensibility,BooExtensions,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\BooExtensions.cs,extractMethodBody,The length of the statement  "		if (macro.Body.Statements.Count == 1 && ((macro.Body.Statements [0] is ExpressionStatement) || (macro.Body.Statements [0] is MacroStatement && ((MacroStatement)macro.Body.Statements [0]).Arguments.Count == 0 && ((MacroStatement)macro.Body.Statements [0]).Body.Statements.Count == 0))) { " is 286.
Long Statement,Comdiv.Extensibility,CommondataMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\CommonDataMacro.cs,getBuilderMethod,The length of the statement  "	return cls.FindOrCreateMember<Method> ("buildData"' f => f.Private ().Static ().As<IDictionary<string' object>> ().Append (Variable.Define (resultVar' typeof(Dictionary<string' object>))).Append (Variable.Return (resultVar))); " is 226.
Long Statement,Comdiv.Extensibility,CommondataMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\CommonDataMacro.cs,prepareField,The length of the statement  "	cls.FindOrCreateMember<Field> ("_data"' f => f.Static ().Private ().As<IDictionary<string' object>> ().Init ("buildData")); " is 123.
Long Statement,Comdiv.Extensibility,CommondataMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\CommonDataMacro.cs,preparePublicProperty,The length of the statement  "	cls.FindOrCreateMember<Property> ("Data"' f => f.Static ().As<IDictionary<string' object>> ().ReturnsField ("_data").NoSetter ()); " is 130.
Long Statement,Comdiv.Extensibility,Metas,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Metas.cs,read,The length of the statement  "	MethodInvocationExpression assign = AstUtil.CreateMethodInvocationExpression (AstUtil.CreateReferenceExpression ("System.IO.File.ReadAllText")' arg); " is 149.
Long Statement,Comdiv.Extensibility,SetupDefaultNamespacesAndReferencesStep,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\SetupDefaultNamespacesAndReferencesStep.cs,Run,The length of the statement  "			logger.get ("comdiv.dsl").Debug ("SetupDefaultNamespacesAndReferencesStep on {0} - {1} ref added"' Context.Parameters.OutputAssembly' assembly.GetName ().Name); " is 160.
Long Statement,Comdiv.Extensibility,SetupDefaultNamespacesAndReferencesStep,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\SetupDefaultNamespacesAndReferencesStep.cs,Run,The length of the statement  "			Console.WriteLine ("SetupDefaultNamespacesAndReferencesStep on {0} - {1} ref added"' Context.Parameters.OutputAssembly' assembly.GetName ().Name); " is 146.
Long Statement,Comdiv.Extensibility,SetupDefaultNamespacesAndReferencesStep,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\SetupDefaultNamespacesAndReferencesStep.cs,OnModule,The length of the statement  "		node.Namespace = new NamespaceDeclaration (System.IO.Path.GetFileNameWithoutExtension (Context.Parameters.OutputAssembly)); " is 123.
Long Statement,Comdiv.Booxml,BooxmlGenerator,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Booxml\BooxmlGenerator.cs,generateAttribute,The length of the statement  "	var exp = new BinaryExpression (BinaryOperatorType.Assign' new ReferenceExpression (attribute.Name.LocalName)' getSimplified (attribute.Value)); " is 144.
Long Statement,Comdiv.Booxml,MacroAsElementStep,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Booxml\MacroAsElementStep.cs,innerOnMacro,The length of the statement  "	Element = new XElement (node.Name' new XAttribute ("_line"' node.LexicalInfo.Line)' new XAttribute ("_file"' node.LexicalInfo.FileName)); " is 137.
Long Statement,Comdiv.Extensibility.Brail,ExpandBmlStep,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\ExpandBmlStep.cs,OnMacroStatement,The length of the statement  "		if (null != (_exc_def = node.Arguments.OfType<BinaryExpression> ().FirstOrDefault (n => n.Left.ToCodeString () == "ex"))) { " is 123.
Long Statement,Comdiv.Extensibility.Brail,BrailBaseCommon,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\BrailBaseCommon.cs,tofio,The length of the statement  "		return name.replace (fiopattern' m => "{1}.{2}. {0}"._format (m.Groups [1].Value' m.Groups [2].Value.Substring (0' 1).ToUpper ()' m.Groups [3].Value.Substring (0' 1).ToUpper ())); " is 179.
Long Statement,Comdiv.Extensibility.Brail,BrailBuildingHelper,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\BrailBuildingHelper.cs,brailOutResolve,The length of the statement  "		if (ex is ReferenceExpression || ex is MethodInvocationExpression || ex is BinaryExpression || ex is ExpressionInterpolationExpression) { " is 137.
Long Statement,Comdiv.Extensibility.Brail,BrailCompiler,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailCompiler.cs,setupPipeline,The length of the statement  "		compiler.Parameters.Pipeline.Replace (typeof(ExpandDuckTypedExpressions)' new ExpandDuckTypedExpressions_WorkaroundForDuplicateVirtualMethods ()); " is 146.
Long Statement,Comdiv.Extensibility.Brail,BrailCompiler,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailCompiler.cs,setupPipeline,The length of the statement  "	compiler.Parameters.Pipeline.InsertBefore (typeof(MacroAndAttributeExpansion)' new FixTryGetParameterConditionalChecks ()); " is 123.
Long Statement,Comdiv.Extensibility.Brail,BrailPreProcessor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailPreProcessor.cs,Run,The length of the statement  "				if (null == booViewEngine || booViewEngine.ConditionalPreProcessingOnly (input.Name) == false || ShouldPreProcess (code)) { " is 123.
Long Statement,Comdiv.Extensibility.Brail,BrailPreProcessor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailPreProcessor.cs,EscapeNullPropagationsInOutputExpression,The length of the statement  "			escapedCode.Append (code.Substring (nextOpeningQuotePosition' positionAfterEndOfClosingQuote - nextOpeningQuotePosition)); " is 122.
Long Statement,Comdiv.Extensibility.Brail,ExpandDuckTypedExpressions_WorkaroundForDuplicateVirtualMethods,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\ExpandDuckTypedExpressions_WorkaroundForDuplicateVirtualMethods.cs,SetProperty,The length of the statement  "		target.GetType ().InvokeMember (name' ResolveFlagsToUse (target.GetType ()' SetPropertyBindingFlags)' null' target' new[] { " is 123.
Long Statement,Comdiv.Extensibility.Brail,ExpandDuckTypedExpressions_WorkaroundForDuplicateVirtualMethods,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\ExpandDuckTypedExpressions_WorkaroundForDuplicateVirtualMethods.cs,GetProperty,The length of the statement  "			return target.GetType ().InvokeMember (name' ResolveFlagsToUse (target.GetType ()' GetPropertyBindingFlags)' null' target' null); " is 129.
Long Statement,Comdiv.Extensibility.Brail,ExpandDuckTypedExpressions_WorkaroundForDuplicateVirtualMethods,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\ExpandDuckTypedExpressions_WorkaroundForDuplicateVirtualMethods.cs,GetProperty,The length of the statement  "		throw new Exception ("Error calling property " + name + " on  object " + target == null ? "NULL" : target.ToString ()' ex); " is 123.
Long Statement,Comdiv.Extensibility.Brail,ExpandDuckTypedExpressions_WorkaroundForDuplicateVirtualMethods,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\ExpandDuckTypedExpressions_WorkaroundForDuplicateVirtualMethods.cs,ResolveFlagsToUse,The length of the statement  "	if (type.Assembly.FullName.StartsWith ("DynamicAssemblyProxyGen") || type.Assembly.FullName.StartsWith ("DynamicProxyGenAssembly2")) { " is 134.
Long Statement,Comdiv.Extensibility.Brail,ExpandDuckTypedExpressions_WorkaroundForDuplicateVirtualMethods,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\ExpandDuckTypedExpressions_WorkaroundForDuplicateVirtualMethods.cs,SelectSliceMember,The length of the statement  "	return Type.DefaultBinder.BindToMethod (DefaultBindingFlags | BindingFlags.OptionalParamBinding' candidates' ref args' null' null' null' out state); " is 148.
Long Statement,Comdiv.Extensibility.Brail,FixTryGetParameterConditionalChecks,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\FixTryGetParameterConditionalChecks.cs,FixCondition,The length of the statement  "	condition = new MethodInvocationExpression (new MemberReferenceExpression (new SuperLiteralExpression ()' "TryGetParameter")' new StringLiteralExpression (name)); " is 162.
Long Statement,Comdiv.Extensibility.Brail,ForeachSnippet,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\FOREACH\ForeachSnippet.cs,ExpandImpl,The length of the statement  "	ExpressionInterpolationExpression attr = BrailBuildingHelper.getAttributes (macro.Arguments' SkipBinaryParametersOnGetAttributes' new string[] { " is 144.
Long Statement,Comdiv.Extensibility.Brail,IgnoreNull,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\IgnoreNull.cs,QuackSet,The length of the statement  "		ExpandDuckTypedExpressions_WorkaroundForDuplicateVirtualMethods.SetSlice (target' name' GetParameterArray (parameters' obj)); " is 125.
Long Statement,Comdiv.Extensibility.Brail,CallMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\MACROSES\CallMacro.cs,ExpandImpl,The length of the statement  "		Context.Errors.Add (new CompilerError (macro.LexicalInfo' "call macro requires at least one reference or string attribute for action name")); " is 141.
Long Statement,Comdiv.Extensibility.Brail,CallMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\MACROSES\CallMacro.cs,ExpandImpl,The length of the statement  "			result.Add (new DeclarationStatement (new Declaration (name' null)' new MethodInvocationExpression (AstUtil.CreateReferenceExpression ("RouteValueDictionary")))); " is 162.
Long Statement,Comdiv.Extensibility.Brail,CallMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\MACROSES\CallMacro.cs,ExpandImpl,The length of the statement  "				result.Add (new MethodInvocationExpression (AstUtil.CreateReferenceExpression (name + ".Add")' item.First' item.Second)); " is 121.
Long Statement,Comdiv.Extensibility.Brail,CatchMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\MACROSES\CatchMacro.cs,ExpandImpl,The length of the statement  "	tryer.EnsureBlock = new Block ().add (outvar.assign (new MethodInvocationExpression (new ReferenceExpression ("_endcatchoutput")))); " is 132.
Long Statement,Comdiv.Extensibility.Brail,DefinebrailpropertyMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\MACROSES\DefinebrailpropertyMacro.cs,ExpandImpl,The length of the statement  "		geter.Body.add (new IfStatement (new BinaryExpression (BinaryOperatorType.Equality' new NullLiteralExpression ()' new MethodInvocationExpression (new ReferenceExpression ("TryGetParameterNoIgnoreNull")' new StringLiteralExpression (propname)))' new Block ().add (new MethodInvocationExpression (new ReferenceExpression ("SetProperty")' new StringLiteralExpression (propname)' initializer ?? new NullLiteralExpression ()))' null)); " is 430.
Long Statement,Comdiv.Extensibility.Brail,DefinebrailpropertyMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\MACROSES\DefinebrailpropertyMacro.cs,ExpandImpl,The length of the statement  "	var valuecall = new MethodInvocationExpression (new ReferenceExpression ("TryGetParameterNoIgnoreNull")' new StringLiteralExpression (propname)); " is 145.
Long Statement,Comdiv.Extensibility.Brail,DefinebrailpropertyMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\MACROSES\DefinebrailpropertyMacro.cs,ExpandImpl,The length of the statement  "	seter.Body = new Block ().add (new MethodInvocationExpression (new ReferenceExpression ("SetProperty")' new StringLiteralExpression (propname)' new ReferenceExpression ("value"))); " is 180.
Long Statement,Comdiv.Extensibility.Brail,DefinesMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\MACROSES\DefinesMacro.cs,ExpandImpl,The length of the statement  "				decl = new DeclarationStatement (new Declaration (((MethodInvocationExpression)refer.Expression).Target.ToCodeString ()' null)' null); " is 134.
Long Statement,Comdiv.Extensibility.Brail,DefinesMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\MACROSES\DefinesMacro.cs,ExpandImpl,The length of the statement  "		var bin = new BinaryExpression (BinaryOperatorType.Assign' new TryCastExpression (new ReferenceExpression (decl.Declaration.Name)' decl.Declaration.Type)' decl.Initializer); " is 173.
Long Statement,Comdiv.Extensibility.Brail,SubMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\MACROSES\SubMacro.cs,ExpandImpl,The length of the statement  "		Context.Errors.Add (new CompilerError (macro.LexicalInfo' "sub macro requires at least one reference or string attribute for subview name")); " is 141.
Long Statement,Comdiv.Extensibility.Brail,ReplaceUknownWithParameters,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\ReplaceUknownWithParameters.cs,OnReferenceExpression,The length of the statement  "			MethodInvocationExpression mie = CodeBuilder.CreateMethodInvocation (CodeBuilder.CreateSelfReference (_currentMethod.DeclaringType)' GetMethod (node.Name)); " is 156.
Long Statement,Comdiv.Extensibility.Brail,TransformToBrailStep,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\TransformToBrailStep.cs,ScriptDirectoryProperty,The length of the statement  "	p.Getter.Body.Add (new ReturnStatement (new StringLiteralExpression (Path.GetDirectoryName (module.LexicalInfo.FileName)))); " is 124.
Long Statement,Comdiv.Extensibility.Boo.Dsl,BooBasedCompiler,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Dsl\BooBasedCompiler.cs,Compile,The length of the statement  "			assemblyProvider.GetAssembly ().GetTypes ().Where (t => typeof(IBooCompilerPipelineModifier).IsAssignableFrom (t) && typeof(IBooCompilerPipelineModifier) != t).Select (t => t.create<IBooCompilerPipelineModifier> ()).OrderBy (m => m.Order).map (m => m.Modify (compiler.Parameters.Pipeline)); " is 290.
Long Statement,Comdiv.Extensibility.Boo.Dsl,DirectoryBasedDynamicBooAssemblyProvider,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Dsl\DirectoryBasedDynamicBooAssemblyProvider.cs,compile,The length of the statement  "	descriptor.Sources = new DirectoryInfo (InputDirectory).GetFiles ("*.boo*"' SearchOption.AllDirectories).Select (f => (ISourceProvider)new FileBasedBooSourceProvider (f.FullName)); " is 180.
Long Statement,Comdiv.Extensibility.Boo.Dsl,DslAstUtil,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Dsl\DslAstUtil.cs,CreateSimpleProperty,The length of the statement  "	p.Setter.Body.Add (new BinaryExpression (BinaryOperatorType.Assign' new ReferenceExpression (f.Name)' new ReferenceExpression ("value"))); " is 138.
Long Statement,Comdiv.Extensibility.Boo.Dsl,MethodUtils,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Dsl\MethodUtils.cs,Static,The length of the statement  "	method.Modifiers = method.Modifiers | TypeMemberModifiers.Static | TypeMemberModifiers.Final | TypeMemberModifiers.Abstract; " is 124.
Long Statement,Comdiv.Extensibility.Boo.Dsl,Variable,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Dsl\Variable.cs,Define,The length of the statement  "	return new DeclarationStatement (new Declaration (name' type.GetTypeReference ())' init ? (Expression)initType.GetConstructorInvocation () : new NullLiteralExpression ()); " is 171.
Long Statement,Comdiv.Extensibility.ExtensionsCompiler,ExtensionsPreprocessor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\ExtensionsCompiler\ExtensionsPreprocessor.cs,ConvertModule,The length of the statement  "	module.Imports.Add (new Import ("Comdiv.Extensibility.IRegistryLoader"' new ReferenceExpression ("Comdiv.Core")' new ReferenceExpression ("_IRL_"))); " is 149.
Complex Conditional,Comdiv.Extensibility,BooExtensions,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\BooExtensions.cs,extractMethodBody,The conditional expression  "macro.Body.Statements.Count == 1 && ((macro.Body.Statements [0] is ExpressionStatement) || (macro.Body.Statements [0] is MacroStatement && ((MacroStatement)macro.Body.Statements [0]).Arguments.Count == 0 && ((MacroStatement)macro.Body.Statements [0]).Body.Statements.Count == 0))"  is complex.
Complex Conditional,Comdiv.Extensibility.Brail,ExpandBmlStep,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\ExpandBmlStep.cs,OnMacroStatement,The conditional expression  "bml && (allowall && (!exceptions.Contains (simplename))) || (!allowall && exceptions.Contains (simplename))"  is complex.
Complex Conditional,Comdiv.Extensibility.Brail,BrailBuildingHelper,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\BrailBuildingHelper.cs,brailOutResolve,The conditional expression  "ex is ReferenceExpression || ex is MethodInvocationExpression || ex is BinaryExpression || ex is ExpressionInterpolationExpression"  is complex.
Magic Number,Comdiv.Extensibility,Interpreter,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Interpreter.cs,Eval,The following statement contains a magic number: if (expression.StartsWith ("hql:")) {  	string hql = expression.Substring (4);  	return Container.first<IHqlEvaluator> ().Execute (hql);  }  
Magic Number,Comdiv.Extensibility,BooScriptMachine,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\ScriptMachine.cs,Reload,The following statement contains a magic number: lock (this) {  	if (_inreloadMode) {  		while (_inreloadMode) {  			Thread.Sleep (10);  		}  		return;  	}  	_inreloadMode = true;  	try {  		if (null == _boo)  			_boo = new BooEval ();  		if (RootDirs.Length == 0)  			return;  		_boo.Interpreter.Reset ();  		if (References != null) {  			foreach (var assembly in References) {  				_boo.Interpreter.References.Add (assembly);  			}  		}  		Registry.Clear ();  		foreach (var rootDir in RootDirs) {  			if (!Directory.Exists (rootDir))  				continue;  			_boo.Interpreter.SetValue ("registry"' Registry);  			foreach (var pair in DefaultValues)  				_boo.Interpreter.SetValue (pair.Key' pair.Value);  			_boo.EvalDirectory (rootDir + "/imports");  			_boo.EvalDirectory (rootDir);  		}  	}  	finally {  		_inreloadMode = false;  	}  }  
Magic Number,Comdiv.Extensibility,BooScriptMachine,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\ScriptMachine.cs,Reload,The following statement contains a magic number: if (_inreloadMode) {  	while (_inreloadMode) {  		Thread.Sleep (10);  	}  	return;  }  
Magic Number,Comdiv.Extensibility,BooScriptMachine,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\ScriptMachine.cs,Reload,The following statement contains a magic number: while (_inreloadMode) {  	Thread.Sleep (10);  }  
Magic Number,Comdiv.Extensibility,BooScriptMachine,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\ScriptMachine.cs,Reload,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,Comdiv.Booxml,DefaultAttributesStep,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Booxml\DefaultAttributesStep.cs,innerOnMacro,The following statement contains a magic number: if (simps.Count > 2) {  	foreach (var attr in simps.Skip (2).ToArray ()) {  		Element.SetAttributeValue (attr.ToCodeString ()' "1");  	}  }  
Magic Number,Comdiv.Booxml,DefaultAttributesStep,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Booxml\DefaultAttributesStep.cs,innerOnMacro,The following statement contains a magic number: if (simps.Count > 2) {  	foreach (var attr in simps.Skip (2).ToArray ()) {  		Element.SetAttributeValue (attr.ToCodeString ()' "1");  	}  }  
Magic Number,Comdiv.Booxml,DefaultAttributesStep,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Booxml\DefaultAttributesStep.cs,innerOnMacro,The following statement contains a magic number: foreach (var attr in simps.Skip (2).ToArray ()) {  	Element.SetAttributeValue (attr.ToCodeString ()' "1");  }  
Magic Number,Comdiv.Extensibility.Brail,ViewSourceResolverBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\FRAMEWORK\ViewSourceResolverBase.cs,setup,The following statement contains a magic number: lock (this) {  	var statics = sources.Values.Where (x => x.Level == -10).ToArray ();  	sources.Clear ();  	var dirs = getDirectoriesOfViews ();  	indexFiles (dirs);  	prepareListeners (dirs);  	foreach (var staticview in statics) {  		sources [staticview.Key] = staticview;  	}  	invalid = false;  }  
Magic Number,Comdiv.Extensibility.Brail,ViewSourceResolverBase,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\FRAMEWORK\ViewSourceResolverBase.cs,SetStatic,The following statement contains a magic number: this.sources [key] = new ViewCodeSource {  	Key = key'  	DirectContent = code'  	Level = -10  };  
Magic Number,Comdiv.Extensibility.Brail,ViewTypeFactory,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\FRAMEWORK\ViewTypeFactory.cs,internalGetType,The following statement contains a magic number: if (null == existed || (info.LastModified - existed.Timestamp).TotalMilliseconds > 1000) {  	lock (sync) {  		if (existed == null && ApplicationAssembly != null) {  			result = ApplicationAssembly.GetType (key.Replace ("/"' "_0_")' false' true);  			if (null != result) {  				storeType (key' result);  				existed = cache.get (key);  				if ((info.LastModified - existed.Timestamp).TotalMilliseconds < 1000) {  					return result;  				}  			}  		}  		result = Compiler.CompileSingle (info' Options);  		storeType (key' result);  		return result;  	}  }  
Magic Number,Comdiv.Extensibility.Brail,ViewTypeFactory,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\FRAMEWORK\ViewTypeFactory.cs,internalGetType,The following statement contains a magic number: if (null == existed || (info.LastModified - existed.Timestamp).TotalMilliseconds > 1000) {  	lock (sync) {  		if (existed == null && ApplicationAssembly != null) {  			result = ApplicationAssembly.GetType (key.Replace ("/"' "_0_")' false' true);  			if (null != result) {  				storeType (key' result);  				existed = cache.get (key);  				if ((info.LastModified - existed.Timestamp).TotalMilliseconds < 1000) {  					return result;  				}  			}  		}  		result = Compiler.CompileSingle (info' Options);  		storeType (key' result);  		return result;  	}  }  
Magic Number,Comdiv.Extensibility.Brail,ViewTypeFactory,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\FRAMEWORK\ViewTypeFactory.cs,internalGetType,The following statement contains a magic number: lock (sync) {  	if (existed == null && ApplicationAssembly != null) {  		result = ApplicationAssembly.GetType (key.Replace ("/"' "_0_")' false' true);  		if (null != result) {  			storeType (key' result);  			existed = cache.get (key);  			if ((info.LastModified - existed.Timestamp).TotalMilliseconds < 1000) {  				return result;  			}  		}  	}  	result = Compiler.CompileSingle (info' Options);  	storeType (key' result);  	return result;  }  
Magic Number,Comdiv.Extensibility.Brail,ViewTypeFactory,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\FRAMEWORK\ViewTypeFactory.cs,internalGetType,The following statement contains a magic number: if (existed == null && ApplicationAssembly != null) {  	result = ApplicationAssembly.GetType (key.Replace ("/"' "_0_")' false' true);  	if (null != result) {  		storeType (key' result);  		existed = cache.get (key);  		if ((info.LastModified - existed.Timestamp).TotalMilliseconds < 1000) {  			return result;  		}  	}  }  
Magic Number,Comdiv.Extensibility.Brail,ViewTypeFactory,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\FRAMEWORK\ViewTypeFactory.cs,internalGetType,The following statement contains a magic number: if (null != result) {  	storeType (key' result);  	existed = cache.get (key);  	if ((info.LastModified - existed.Timestamp).TotalMilliseconds < 1000) {  		return result;  	}  }  
Magic Number,Comdiv.Extensibility.Brail,ViewTypeFactory,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\FRAMEWORK\ViewTypeFactory.cs,internalGetType,The following statement contains a magic number: if ((info.LastModified - existed.Timestamp).TotalMilliseconds < 1000) {  	return result;  }  
Magic Number,Comdiv.Extensibility.Brail,BrailBaseCommon,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\BrailBaseCommon.cs,tofio,The following statement contains a magic number: if (name.like (fiopattern)) {  	return name.replace (fiopattern' m => "{1}.{2}. {0}"._format (m.Groups [1].Value' m.Groups [2].Value.Substring (0' 1).ToUpper ()' m.Groups [3].Value.Substring (0' 1).ToUpper ()));  }  
Magic Number,Comdiv.Extensibility.Brail,BrailBaseCommon,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\BrailBaseCommon.cs,tofio,The following statement contains a magic number: if (name.like (fiopattern)) {  	return name.replace (fiopattern' m => "{1}.{2}. {0}"._format (m.Groups [1].Value' m.Groups [2].Value.Substring (0' 1).ToUpper ()' m.Groups [3].Value.Substring (0' 1).ToUpper ()));  }  
Magic Number,Comdiv.Extensibility.Brail,BrailBaseCommon,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\BrailBaseCommon.cs,tofio,The following statement contains a magic number: return name.replace (fiopattern' m => "{1}.{2}. {0}"._format (m.Groups [1].Value' m.Groups [2].Value.Substring (0' 1).ToUpper ()' m.Groups [3].Value.Substring (0' 1).ToUpper ()));  
Magic Number,Comdiv.Extensibility.Brail,BrailBaseCommon,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\BrailBaseCommon.cs,tofio,The following statement contains a magic number: return name.replace (fiopattern' m => "{1}.{2}. {0}"._format (m.Groups [1].Value' m.Groups [2].Value.Substring (0' 1).ToUpper ()' m.Groups [3].Value.Substring (0' 1).ToUpper ()));  
Magic Number,Comdiv.Extensibility.Brail,BrailBuildingHelper,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\BrailBuildingHelper.cs,getAttributes,The following statement contains a magic number: foreach (Expression argument in expressions) {  	if (argument is HashLiteralExpression) {  		foreach (ExpressionPair pair in ((HashLiteralExpression)argument).Items) {  			dict [convertToAttribute (pair.First)] = convertToAttribute (pair.Second);  		}  		//it MUST be last statement  		break;  	}  	if (argument is BinaryExpression) {  		var _binexp = (BinaryExpression)argument;  		if (skips.Contains (_binexp.Left.ToCodeString ())) {  			continue;  		}  		if (_binexp.Right is ListLiteralExpression) {  			continue;  		}  		if (_binexp.Right is HashLiteralExpression) {  			continue;  		}  		var name = convertToAttribute (_binexp.Left);  		var value = convertToAttribute (_binexp.Right);  		//������������� ��� �������� checked - ����������� � ��� �������� � �����  		bool proceed = true;  		if (name.fromLiteral () == "checked") {  			if (value.fromLiteral ().ToLower () == "true") {  				value = "checked".toLiteral ();  			}  			else {  				proceed = false;  			}  		}  		if (proceed) {  			dict [name] = value;  		}  	}  	else {  		Expression exp = convertToAttribute (argument);  		if (idx <= 2) {  			dict [new StringLiteralExpression (mainattributes [idx])] = exp;  		}  		else {  			throw new Exception ("cannot understand target of attribute' only three anonymous supported for class'id'name");  		}  	}  	idx++;  }  
Magic Number,Comdiv.Extensibility.Brail,BrailBuildingHelper,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\BrailBuildingHelper.cs,getAttributes,The following statement contains a magic number: if (argument is BinaryExpression) {  	var _binexp = (BinaryExpression)argument;  	if (skips.Contains (_binexp.Left.ToCodeString ())) {  		continue;  	}  	if (_binexp.Right is ListLiteralExpression) {  		continue;  	}  	if (_binexp.Right is HashLiteralExpression) {  		continue;  	}  	var name = convertToAttribute (_binexp.Left);  	var value = convertToAttribute (_binexp.Right);  	//������������� ��� �������� checked - ����������� � ��� �������� � �����  	bool proceed = true;  	if (name.fromLiteral () == "checked") {  		if (value.fromLiteral ().ToLower () == "true") {  			value = "checked".toLiteral ();  		}  		else {  			proceed = false;  		}  	}  	if (proceed) {  		dict [name] = value;  	}  }  else {  	Expression exp = convertToAttribute (argument);  	if (idx <= 2) {  		dict [new StringLiteralExpression (mainattributes [idx])] = exp;  	}  	else {  		throw new Exception ("cannot understand target of attribute' only three anonymous supported for class'id'name");  	}  }  
Magic Number,Comdiv.Extensibility.Brail,BrailBuildingHelper,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\BrailBuildingHelper.cs,getAttributes,The following statement contains a magic number: if (idx <= 2) {  	dict [new StringLiteralExpression (mainattributes [idx])] = exp;  }  else {  	throw new Exception ("cannot understand target of attribute' only three anonymous supported for class'id'name");  }  
Magic Number,Comdiv.Extensibility.Brail,BrailCompiler,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailCompiler.cs,setupPipeline,The following statement contains a magic number: compiler.Parameters.Pipeline.Insert (2' new TransformToBrailStep (info.Options));  
Magic Number,Comdiv.Extensibility.Brail,BrailPreProcessor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailPreProcessor.cs,Booify,The following statement contains a magic number: while (index != -1) {  	index = code.IndexOf (start' lastIndex);  	if (index == -1) {  		break;  	}  	Output (buffer' code.Substring (lastIndex' index - lastIndex));  	int startReading = index + start.Length;  	lastIndex = code.IndexOf (end' startReading);  	if (lastIndex == -1) {  		throw new Exception ("expected " + end);  	}  	int lastIndexOffset = end.Length;  	if (code [lastIndex - 1] == '-') {  		--lastIndex;  		if (EndTagEndsWithNewline (code' lastIndex + lastIndexOffset)) {  			lastIndexOffset += 2;  		}  		++lastIndexOffset;  	}  	string line = code.Substring (startReading' lastIndex - startReading);  	line = EscapeNullPropagationsInCode (line);  	buffer.WriteLine (line);  	lastIndex += lastIndexOffset;  }  
Magic Number,Comdiv.Extensibility.Brail,BrailPreProcessor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailPreProcessor.cs,Booify,The following statement contains a magic number: if (code [lastIndex - 1] == '-') {  	--lastIndex;  	if (EndTagEndsWithNewline (code' lastIndex + lastIndexOffset)) {  		lastIndexOffset += 2;  	}  	++lastIndexOffset;  }  
Magic Number,Comdiv.Extensibility.Brail,BrailPreProcessor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailPreProcessor.cs,Booify,The following statement contains a magic number: if (EndTagEndsWithNewline (code' lastIndex + lastIndexOffset)) {  	lastIndexOffset += 2;  }  
Magic Number,Comdiv.Extensibility.Brail,BrailPreProcessor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailPreProcessor.cs,Booify,The following statement contains a magic number: lastIndexOffset += 2;  
Magic Number,Comdiv.Extensibility.Brail,BrailPreProcessor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailPreProcessor.cs,EndTagEndsWithNewline,The following statement contains a magic number: return code.Length > endIndex + 2 && code.Substring (endIndex + 1' 2) == "\r\n";  
Magic Number,Comdiv.Extensibility.Brail,BrailPreProcessor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailPreProcessor.cs,EndTagEndsWithNewline,The following statement contains a magic number: return code.Length > endIndex + 2 && code.Substring (endIndex + 1' 2) == "\r\n";  
Magic Number,Comdiv.Extensibility.Brail,BrailPreProcessor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailPreProcessor.cs,Output,The following statement contains a magic number: foreach (ExpressionPosition position in expressions) {  	string text = code.Substring (start' position.Start - start);  	OutputText (buffer' text);  	string expression = code.Substring (position.Start + 2' position.End - (position.Start + 2));  	OutputExpression (buffer' expression' position.ShouldEscape);  	start = position.End + 1;  }  
Magic Number,Comdiv.Extensibility.Brail,BrailPreProcessor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailPreProcessor.cs,Output,The following statement contains a magic number: foreach (ExpressionPosition position in expressions) {  	string text = code.Substring (start' position.Start - start);  	OutputText (buffer' text);  	string expression = code.Substring (position.Start + 2' position.End - (position.Start + 2));  	OutputExpression (buffer' expression' position.ShouldEscape);  	start = position.End + 1;  }  
Magic Number,Comdiv.Extensibility.Brail,BrailPreProcessor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailPreProcessor.cs,FindPositionAfterClosingQuote,The following statement contains a magic number: if (IsTripleQuote (code' openingQuotePosition)) {  	return code.IndexOf (TripleDoubleQuote' openingQuotePosition + 3) + 3;  }  
Magic Number,Comdiv.Extensibility.Brail,BrailPreProcessor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailPreProcessor.cs,FindPositionAfterClosingQuote,The following statement contains a magic number: if (IsTripleQuote (code' openingQuotePosition)) {  	return code.IndexOf (TripleDoubleQuote' openingQuotePosition + 3) + 3;  }  
Magic Number,Comdiv.Extensibility.Brail,BrailPreProcessor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailPreProcessor.cs,FindPositionAfterClosingQuote,The following statement contains a magic number: return code.IndexOf (TripleDoubleQuote' openingQuotePosition + 3) + 3;  
Magic Number,Comdiv.Extensibility.Brail,BrailPreProcessor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailPreProcessor.cs,FindPositionAfterClosingQuote,The following statement contains a magic number: return code.IndexOf (TripleDoubleQuote' openingQuotePosition + 3) + 3;  
Magic Number,Comdiv.Extensibility.Brail,BrailPreProcessor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\BrailPreProcessor.cs,ParentExpressionIsNotValid,The following statement contains a magic number: if (index - 2 < 0) {  	return false;  }  
Magic Number,Comdiv.Extensibility.Brail,ExpandDuckTypedExpressions_WorkaroundForDuplicateVirtualMethods,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\ExpandDuckTypedExpressions_WorkaroundForDuplicateVirtualMethods.cs,IsSetArraySlice,The following statement contains a magic number: return args.Length == 2 && target is Array;  
Magic Number,Comdiv.Extensibility.Brail,WSAIgnoranceParsingStep,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\WSAIgnoranceParsingStep.cs,ParseModule,The following statement contains a magic number: if (wsa) {  	return WSABooParser.ParseModule (4' _context.CompileUnit' name' reader' onParserError);  }  else {  	return BooParser.ParseModule (4' _context.CompileUnit' name' reader' onParserError);  }  
Magic Number,Comdiv.Extensibility.Brail,WSAIgnoranceParsingStep,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\WSAIgnoranceParsingStep.cs,ParseModule,The following statement contains a magic number: if (wsa) {  	return WSABooParser.ParseModule (4' _context.CompileUnit' name' reader' onParserError);  }  else {  	return BooParser.ParseModule (4' _context.CompileUnit' name' reader' onParserError);  }  
Magic Number,Comdiv.Extensibility.Brail,WSAIgnoranceParsingStep,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\WSAIgnoranceParsingStep.cs,ParseModule,The following statement contains a magic number: return WSABooParser.ParseModule (4' _context.CompileUnit' name' reader' onParserError);  
Magic Number,Comdiv.Extensibility.Brail,WSAIgnoranceParsingStep,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\COMPILATION\WSAIgnoranceParsingStep.cs,ParseModule,The following statement contains a magic number: return BooParser.ParseModule (4' _context.CompileUnit' name' reader' onParserError);  
Magic Number,Comdiv.Extensibility.Brail,TemplateBindVisitor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\Bml\TemplateBindVisitor.cs,OnArrayLiteralExpression,The following statement contains a magic number: if (node.Items.Count == 2 && node.Items [0].ToCodeString ().StartsWith ("@_")) {  	need_expansion = true;  }  
Magic Number,Comdiv.Extensibility.Brail,TemplateBindVisitor,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\Bml\TemplateBindVisitor.cs,checkSubstitution,The following statement contains a magic number: if (m.Success) {  	int idx = 0;  	var isordered = int.TryParse (m.Groups [1].Value' out idx);  	bool accomodate_to_strings = m.Groups [2].Value != "";  	Expression exp = new NullLiteralExpression ();  	if (isordered) {  		idx = idx - 1;  		if (idx < args.Count) {  			exp = args [idx];  		}  	}  	else {  		var name = m.Groups [1].Value;  		if (namedargs.ContainsKey (name)) {  			exp = namedargs [name];  		}  	}  	if (accomodate_to_strings && (exp is ReferenceExpression)) {  		if (exp.ToCodeString ().StartsWith ("@")) {  			exp = new ReferenceExpression (exp.ToCodeString ().Substring (1));  		}  		else {  			exp = new StringLiteralExpression (exp.ToCodeString ());  		}  	}  	node.ParentNode.Replace (node' exp);  	return true;  }  
Magic Number,Comdiv.Extensibility.Brail,CallMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\MACROSES\CallMacro.cs,ExpandImpl,The following statement contains a magic number: foreach (Expression argument in macro.Arguments) {  	i++;  	Expression exp = argument;  	if (!(exp is HashLiteralExpression)) {  		//action and contrller parameters  		if (!(exp is NullLiteralExpression)) {  			exp = new StringLiteralExpression (argument.ToCodeString ());  		}  		call.Arguments.Add (exp);  	}  	else {  		string name = "__rd";  		result.Add (new DeclarationStatement (new Declaration (name' null)' new MethodInvocationExpression (AstUtil.CreateReferenceExpression ("RouteValueDictionary"))));  		var dict = argument as HashLiteralExpression;  		foreach (ExpressionPair item in dict.Items) {  			result.Add (new MethodInvocationExpression (AstUtil.CreateReferenceExpression (name + ".Add")' item.First' item.Second));  		}  		if (i == 2) {  			call.Arguments.Add (new NullLiteralExpression ());  		}  		call.Arguments.Add (AstUtil.CreateReferenceExpression (name));  	}  }  
Magic Number,Comdiv.Extensibility.Brail,CallMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\MACROSES\CallMacro.cs,ExpandImpl,The following statement contains a magic number: if (!(exp is HashLiteralExpression)) {  	//action and contrller parameters  	if (!(exp is NullLiteralExpression)) {  		exp = new StringLiteralExpression (argument.ToCodeString ());  	}  	call.Arguments.Add (exp);  }  else {  	string name = "__rd";  	result.Add (new DeclarationStatement (new Declaration (name' null)' new MethodInvocationExpression (AstUtil.CreateReferenceExpression ("RouteValueDictionary"))));  	var dict = argument as HashLiteralExpression;  	foreach (ExpressionPair item in dict.Items) {  		result.Add (new MethodInvocationExpression (AstUtil.CreateReferenceExpression (name + ".Add")' item.First' item.Second));  	}  	if (i == 2) {  		call.Arguments.Add (new NullLiteralExpression ());  	}  	call.Arguments.Add (AstUtil.CreateReferenceExpression (name));  }  
Magic Number,Comdiv.Extensibility.Brail,CallMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\MACROSES\CallMacro.cs,ExpandImpl,The following statement contains a magic number: if (i == 2) {  	call.Arguments.Add (new NullLiteralExpression ());  }  
Magic Number,Comdiv.Extensibility.Brail,ExportMacro,C:\repos\Qorpent_comdiv.oldcore\Comdiv.Extensibility\Brail\MACROSES\ExportMacro.cs,ExpandImpl,The following statement contains a magic number: if (macro.Arguments.Count == 2) {  	call.Arguments.Add (macro.Arguments [1]);  }  
