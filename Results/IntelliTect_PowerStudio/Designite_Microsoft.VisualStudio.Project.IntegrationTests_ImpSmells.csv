Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.VisualStudio.Project.IntegrationTests,DialogBoxPurger,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\DialogboxPurger.cs,HandleDialogBoxes,The method has 114 lines of code.
Complex Method,Microsoft.VisualStudio.Project.IntegrationTests,DialogBoxPurger,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\DialogboxPurger.cs,HandleDialogBoxes,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestImplicitNestedProjectReload,Cyclomatic complexity of the method is 8
Long Parameter List,Microsoft.VisualStudio.Project.IntegrationTests,NativeMethods,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\NativeMethods.cs,PeekMessage,The method has 5 parameters. Parameters: msg' hwnd' msgMin' msgMax' remove
Long Parameter List,Microsoft.VisualStudio.Project.IntegrationTests,NativeMethods,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\NativeMethods.cs,MsgWaitForMultipleObjects,The method has 5 parameters. Parameters: nCount' pHandles' fWaitAll' dwMilliseconds' dwWakeMask
Long Parameter List,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,CheckForSaveAsOnBadFileName,The method has 5 parameters. Parameters: sp' project' saveAs' badFileName' expectedMessage
Long Parameter List,Microsoft.VisualStudio.Project.IntegrationTests,Utilities,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\Utilities.cs,CreateMyNestedProject,The method has 5 parameters. Parameters: sp' dte' projectName' destination' exclusive
Long Parameter List,Microsoft.VisualStudio.Project.IntegrationTests,Utilities,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\Utilities.cs,CreateSampleProject,The method has 6 parameters. Parameters: dte' relTemplateLocation' destination' projectName' projectType' exclusive
Long Parameter List,Microsoft.VisualStudio.Project.IntegrationTests,Utilities,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\Utilities.cs,GetOutputWindowpane,The method has 5 parameters. Parameters: serviceProvider' guidPane' paneName' visible' clearWithSolution
Long Identifier,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,,The length of the parameter EmbeddedResourceProjectLocation is 31.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,DialogBoxPurger,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\DialogboxPurger.cs,HandleDialogBoxes,The length of the statement  "				// The loop will be exited either if a message is send by the caller thread or if we found the dialog. If a message box text is specified the loop will not exit until the dialog is found." is 187.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,DialogBoxPurger,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\DialogboxPurger.cs,HandleDialogBoxes,The length of the statement  "								NativeMethods.EnumChildWindows(hwnds[hwndIndex]' new NativeMethods.CallBack(FindMessageBoxString)' unmanagedMemoryLocation);" is 124.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,DialogBoxPurger,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\DialogboxPurger.cs,HandleDialogBoxes,The length of the statement  "								if(String.IsNullOrEmpty(this.expectedDialogBoxText) || (!String.IsNullOrEmpty(dialogBoxText) && String.Compare(this.expectedDialogBoxText' dialogBoxText.Trim()' StringComparison.OrdinalIgnoreCase) == 0))" is 203.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestAutomationOnProject,The length of the statement  "				Assert.IsTrue(this.CheckForSaveWithBadFileName<InvalidOperationException>(automation' true' badFileName' String.Empty)' "The file named " + badFileName + " could be saved");" is 173.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestAutomationOnProject,The length of the statement  "				Assert.IsTrue(this.CheckForSaveWithBadFileName<InvalidOperationException>(automation' true' badFileName' String.Empty)' "The file named " + badFileName + " could be saved");" is 173.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestAutomationOnProject,The length of the statement  "				Assert.IsTrue((String.Compare(project.ProjectFile' goodFileName' StringComparison.OrdinalIgnoreCase) == 0)' "Save as failed since the file comparison test failed");" is 164.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestAutomationOnProjectItem,The length of the statement  "				Assert.IsTrue(document.Name == "AssemblyInfo.cs"' "The document for the file item is incorrect. It's name should be AssemblyInfo.cs");" is 134.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestAutomationOnProjectItem,The length of the statement  "				Assert.IsFalse(itemProperty is OANullProperty' "Could not retrieve the BuildAction property from the nested project item");" is 123.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestAutomationOnProjectItem,The length of the statement  "				Assert.IsTrue(item.Name == "AssemblyInfo1.cs"' "File item has been renamed to AssemblyInfo1.cs but the Name property has not");" is 127.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestAutomationOnProjectItem,The length of the statement  "				System.Reflection.MethodInfo mi = typeof(ProjectNode).GetMethod("FindChild"' BindingFlags.NonPublic | BindingFlags.Instance);" is 125.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestAutomationOnProjectItems,The length of the statement  "				Assert.IsTrue(pi.Name == Path.GetFileName(newModelFilePath)' "ProjectItems AddFromFileCopy has not returned the item that was added");" is 134.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestAutomationOnProjectProperties,The length of the statement  "				Assert.IsFalse(String.IsNullOrEmpty(fullPath.Value.ToString())' "FullPath property is null or has not been assigned any value");" is 128.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestAutomationOnProjectProperties,The length of the statement  "				Assert.IsTrue(0 == String.Compare(fullPath.Value.ToString()' fullPathFromProjectNode' true)' "FullPath property does not return the correct Value");" is 148.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestFolderNodeRelatedProjectItemProperties,The length of the statement  "				System.Reflection.MethodInfo mi = typeof(HierarchyNode).GetMethod("AddNewFolder"' BindingFlags.NonPublic | BindingFlags.Instance);" is 130.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,CompareProperties,The length of the statement  "			Assert.AreEqual(properties.Count' propertyNamesFieldInfo.Length' "Number of properties does not match expected number of properties");" is 134.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,CheckForSaveWithBadFileName,The length of the statement  "					if((expectedMessage.Length > 0) && (e.Message == expectedMessage || e.Message.Contains(expectedMessage)) || expectedMessage.Length == 0)" is 136.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,BadFileNameChecks,The length of the statement  "				Assert.IsTrue(this.CheckForSaveWithBadFileName<InvalidOperationException>(automation' forSave' newBadFileName' errorMessage)' "The file named " + newBadFileName + " could be saved");" is 182.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,BadFileNameChecks,The length of the statement  "			Assert.IsTrue(this.CheckForSaveWithBadFileName<InvalidOperationException>(automation' forSave' badFileName' errorMessage)' "The file named " + badFileName + " could be saved");" is 176.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,BadFileNameChecks,The length of the statement  "			Assert.IsTrue(this.CheckForSaveWithBadFileName<InvalidOperationException>(automation' forSave' badFileName' errorMessage)' "The file named " + badFileName + " could be saved");" is 176.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,BadFileNameChecks,The length of the statement  "			Assert.IsTrue(this.CheckForSaveWithBadFileName<InvalidOperationException>(automation' forSave' badFileName' errorMessage)' "The file named " + badFileName + " could be saved");" is 176.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,BadFileNameChecks,The length of the statement  "			errorMessage = String.Format(System.Globalization.CultureInfo.CurrentCulture' Utilities.GetResourceStringFromTheProjectAssembly("PathTooLong")' Path.Combine(Path.GetDirectoryName(automation.FullName)' Utilities.LongFileName));" is 226.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,BadFileNameChecks,The length of the statement  "			Assert.IsTrue(this.CheckForSaveWithBadFileName<InvalidOperationException>(automation' forSave' Utilities.LongFileName' errorMessage)' "The file named " + Utilities.LongFileName + " could be saved");" is 198.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestFileNamesThatShouldPassForSaveAs,The length of the statement  "				Assert.IsTrue((String.Compare(project.FileName' goodFileName' StringComparison.OrdinalIgnoreCase) == 0)' "Save as failed since the file comparison test failed");" is 161.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,CheckForItem,The length of the statement  "			Assert.IsTrue(String.Compare(Path.GetExtension(item.Name)' ".cs"' StringComparison.OrdinalIgnoreCase) == 0' "The item has not been added as a moxl file!");" is 155.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestGlobalProperties,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestGlobalProperties.cs,TestConfigChange,The length of the statement  "				// Now change the active config that should trigger a project config change event and the global property should be thus updated." is 129.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestGlobalProperties,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestGlobalProperties.cs,TestConfigChange,The length of the statement  "                MSBuild.Project buildProject = typeof(ProjectNode).GetProperty("BuildProject"' BindingFlags.Instance | BindingFlags.NonPublic).GetValue(project' new object[] { }) as MSBuild.Project;" is 182.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestNodeProperties,The length of the statement  "				Assert.IsTrue(props.BuildAction == BuildAction.EmbeddedResource' "BuildAction has not been set correctly in the project file");" is 127.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestRenameOfFileNode,The length of the statement  "				Assert.IsTrue((String.Compare(fileNode.FileName' fileNameWithCaseOnlyChange' StringComparison.Ordinal) == 0)' "SetEditLabel failed since the file comparison test failed");" is 171.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestRenameOfFileNode,The length of the statement  "				Assert.IsTrue(NativeMethods.IsSamePath(fileNode.Url' Path.Combine(project.ProjectFolder' goodFileName))' "SetEditLabel failed since the Url test failed");" is 154.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestRenameOfFileNode,The length of the statement  "				Assert.IsTrue((String.Compare(fileNode.FileName' goodFileName' StringComparison.Ordinal) == 0)' "SetEditLabel failed since the file comparison test failed");" is 157.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestSingleFileGeneratorOnNodes,The length of the statement  "				MethodInfo mi = typeof(FileNode).GetMethod("CreateSingleFileGenerator"' BindingFlags.Instance | BindingFlags.NonPublic);" is 120.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestSingleFileGeneratorOnNodes,The length of the statement  "						Assert.IsFalse(node.NodeProperties is SingleFileGeneratorNodeProperties' "If no generators are supported then the properties should not be of type SingleFileGeneratorNodeProperties");" is 183.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestSingleFileGeneratorOnNodes,The length of the statement  "						Assert.IsTrue(node.NodeProperties is SingleFileGeneratorNodeProperties' "The properties for a node supporting single file generators should be of type SingleFileGeneratorNodeProperties");" is 187.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestRenameWithBadFileName,The length of the statement  "					Assert.IsTrue(Utilities.CheckForSetEditLabelBadFileName<InvalidOperationException>(fileNode' newBadFileName' errorMessage)' "The file named " + newBadFileName + " could be saved as");" is 183.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestRenameWithBadFileName,The length of the statement  "				Assert.IsTrue(Utilities.CheckForSetEditLabelBadFileName<InvalidOperationException>(fileNode' badFileName' errorMessage)' "The file named " + badFileName + " could be saved as");" is 177.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestRenameWithBadFileName,The length of the statement  "				Assert.IsTrue(Utilities.CheckForSetEditLabelBadFileName<InvalidOperationException>(fileNode' badFileName' errorMessage)' "The file named " + badFileName + " could be saved as");" is 177.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestRenameWithBadFileName,The length of the statement  "				Assert.IsTrue(Utilities.CheckForSetEditLabelBadFileName<InvalidOperationException>(fileNode' badFileName' errorMessage)' "The file named " + badFileName + " could be saved as");" is 177.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestRenameWithBadFileName,The length of the statement  "				errorMessage = String.Format(System.Globalization.CultureInfo.CurrentCulture' Utilities.GetResourceStringFromTheProjectAssembly("PathTooLong")' Utilities.LongFileName);" is 168.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestRenameWithBadFileName,The length of the statement  "				Assert.IsTrue(Utilities.CheckForSetEditLabelBadFileName<InvalidOperationException>(fileNode' Utilities.LongFileName' errorMessage)' "The file named " + Utilities.LongFileName + " could be saved");" is 196.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestSaveAsDifferentLocation,The length of the statement  "				Assert.IsTrue(string.Compare(window.Caption' item.Name' true) == 0' "Caption of window does not match the new filename");" is 121.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestSaveAsDifferentLocation,The length of the statement  "				Assert.IsTrue(string.Compare(window.Document.FullName' updatedFileName' true) == 0' "FullName of document is not as expected");" is 127.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestSaveAsSameLocation,The length of the statement  "				Assert.IsTrue(string.Compare(window.Caption' newNameOfFile' true) == 0' "Caption of window does not match the new filename");" is 125.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestSaveAsSameLocation,The length of the statement  "				Assert.IsTrue(string.Compare(window.Document.FullName' updatedFileName' true) == 0' "FullName of document is not as expected");" is 127.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestSaveAsInExistingSubFolder,The length of the statement  "				Assert.IsTrue(string.Compare(window.Caption' newNameOfFile' true) == 0' "Caption of window does not match the new filename");" is 125.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestSaveAsInExistingSubFolder,The length of the statement  "				Assert.IsTrue(string.Compare(window.Document.FullName' updatedFileName' true) == 0' "FullName of document is not as expected");" is 127.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestSaveAsInNewDirectory,The length of the statement  "				Assert.IsTrue(string.Compare(window.Caption' newNameOfFile' true) == 0' "Caption of window does not match the new filename");" is 125.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestNode,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestNode.cs,TestSaveAsInNewDirectory,The length of the statement  "				Assert.IsTrue(string.Compare(window.Document.FullName' updatedFileName' true) == 0' "FullName of document is not as expected");" is 127.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestDesignTimeAssemblyResolution,The length of the statement  "				Marshal.ThrowExceptionForHR(project.ResolveAssemblyPathInTargetFx(assemblySpecs' (uint)assemblySpecs.Length' resolvedPaths' out resolvedCount));" is 144.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestDoDefaultActionOnFileNode,The length of the statement  "				MethodInfo doDefaultAction = typeof(ProjectNode).GetMethod("DoDefaultAction"' BindingFlags.NonPublic | BindingFlags.Instance);" is 126.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestDoDefaultActionOnFileNode,The length of the statement  "						MethodInfo getDocumentManager = typeof(FileNode).GetMethod("GetDocumentManager"' BindingFlags.NonPublic | BindingFlags.Instance);" is 129.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestDoDefaultActionOnFileNode,The length of the statement  "						Assert.IsTrue(VsShellUtilities.IsDocumentOpen(node.ProjectMgr.Site' document' logicalView' out hierOpen' out itemId' out windowFrame)' "DoDeafult action did not open the file");" is 177.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestSaveAsOnProjectFile,The length of the statement  "				Assert.IsTrue((String.Compare(project.ProjectFile' "test.nestedProj"' StringComparison.OrdinalIgnoreCase) == 0)' "Save as failed since the file comparison test failed");" is 169.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestRenameOfProjectFile,The length of the statement  "				Assert.IsTrue(NativeMethods.IsSamePath(project.Url' Path.Combine(project.ProjectFolder' goodFileName + ".nestedProj"))' "SetEditLabel failed since the Url test failed");" is 169.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestRenameOfProjectFile,The length of the statement  "				Assert.IsTrue((String.Compare(project.ProjectFile' "test" + extension' StringComparison.Ordinal) == 0)' "SetEditLabel failed since the file comparison test failed. Expected that " + project.ProjectFile + " equals test.nestedProj");" is 231.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestRenameOfProjectFile,The length of the statement  "				Assert.IsTrue((String.Compare(project.ProjectFile' "Test" + extension' StringComparison.Ordinal) == 0)' "SetEditLabel failed since the file comparison test failed. Expected that " + project.ProjectFile + " equals Test.nestedProj");" is 231.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestRenameOfRenamedProjectFile,The length of the statement  "				Assert.IsTrue(Utilities.CheckForSetEditLabelBadFileName<InvalidOperationException>(project' "NewFileName"' message)' "The messagebox for not being able to rename a file that has been deleted has never popped up");" is 213.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestBuildEngineAndProject,The length of the statement  "                Assert.AreEqual<MSBuild.ProjectCollection>(MSBuild.ProjectCollection.GlobalProjectCollection' fi.GetValue(project) as MSBuild.ProjectCollection);" is 145.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestUnloadReloadOfProject,The length of the statement  "				dte.Commands.Raise(VsMenus.guidStandardCommandSet97.ToString("B")' (int)Microsoft.VisualStudio.VSConstants.VSStd97CmdID.UnloadProject' ref customin' ref customout);" is 164.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestUnloadReloadOfProject,The length of the statement  "				dte.Commands.Raise(VsMenus.guidStandardCommandSet97.ToString("B")' (int)Microsoft.VisualStudio.VSConstants.VSStd97CmdID.ReloadProject' ref customin' ref customout);" is 164.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestUnloadReloadOfProject,The length of the statement  "				// Check to see if the project is reloaded. we cannot use the instance for the project since that is zombied at this point." is 123.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestLoadingOfProjectWithDuplicateItems,The length of the statement  "				// It would be nice if we could just copy the embedded resource to the opened project file' but implicit reload of nested projects crashes on non SP1 versions." is 159.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestLoadingOfProjectWithDuplicateItems,The length of the statement  "					ErrorHandler.ThrowOnFailure(solutionService.CreateProject(ref guid' path' null' null' (uint)__VSCREATEPROJFLAGS.CPF_OPENFILE' ref iid' out projectPtr));" is 152.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestRenameOfNestedProject,The length of the statement  "				ErrorHandler.ThrowOnFailure(nestedProjectHierarchy.GetProperty(VSConstants.VSITEMID_ROOT' (int)__VSHPROPID.VSHPROPID_ExtObject' out extensibility));" is 148.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,CheckForSaveAsOnBadFileName,The length of the statement  "				if((e.InnerException is T) && (e.InnerException.Message == expectedMessage || e.InnerException.Message.Contains(expectedMessage)))" is 130.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestBadFileNameForSaveAs,The length of the statement  "			string errorMessage = String.Format(System.Globalization.CultureInfo.CurrentCulture' Utilities.GetResourceStringFromTheProjectAssembly("PathTooLong")' Utilities.LongFileName);" is 175.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestBadFileNameForSaveAs,The length of the statement  "			Assert.IsTrue(this.CheckForSaveAsOnBadFileName<InvalidOperationException>(sp' project' saveAs' Utilities.LongFileName' errorMessage)' "The file named " + Utilities.LongFileName + " could be saved");" is 198.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestBadFileNameForSaveAs,The length of the statement  "			Assert.IsTrue(this.CheckForSaveAsOnBadFileName<InvalidOperationException>(sp' project' saveAs' badFileName' errorMessage)' "The file named " + badFileName + " could be saved as");" is 179.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestBadFileNameForSaveAs,The length of the statement  "			errorMessage = String.Format("The project file can only be saved into the project location '{0}'."' project.ProjectFolder);" is 123.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestBadFileNameForSaveAs,The length of the statement  "			Assert.IsTrue(this.CheckForSaveAsOnBadFileName<InvalidOperationException>(sp' project' saveAs' badFileName' errorMessage)' "The file named " + badFileName + " could be saved as");" is 179.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestBadFileNameForSaveAs,The length of the statement  "				Assert.IsTrue(this.CheckForSaveAsOnBadFileName<InvalidOperationException>(sp' project' saveAs' newBadFileName' errorMessage)' "The file named " + newBadFileName + " could be saved as");" is 185.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestBadFileNameForSetEditLabel,The length of the statement  "				Assert.IsTrue(Utilities.CheckForSetEditLabelBadFileName<InvalidOperationException>(project' newBadFileName' errorMessage)' "The file named " + newBadFileName + " could be saved as");" is 182.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestBadFileNameForSetEditLabel,The length of the statement  "			Assert.IsTrue(Utilities.CheckForSetEditLabelBadFileName<InvalidOperationException>(project' badFileName' errorMessage)' "The file named " + badFileName + " could be saved as");" is 176.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestBadFileNameForSetEditLabel,The length of the statement  "			Assert.IsTrue(Utilities.CheckForSetEditLabelBadFileName<InvalidOperationException>(project' badFileName' errorMessage)' "The file named " + badFileName + " could be saved as");" is 176.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestBadFileNameForSetEditLabel,The length of the statement  "			Assert.IsTrue(Utilities.CheckForSetEditLabelBadFileName<InvalidOperationException>(project' badFileName' errorMessage)' "The file named " + badFileName + " could be saved as");" is 176.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestBadFileNameForSetEditLabel,The length of the statement  "			errorMessage = String.Format(System.Globalization.CultureInfo.CurrentCulture' Utilities.GetResourceStringFromTheProjectAssembly("PathTooLong")' Utilities.LongFileName);" is 168.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestBadFileNameForSetEditLabel,The length of the statement  "			Assert.IsTrue(Utilities.CheckForSetEditLabelBadFileName<InvalidOperationException>(project' Utilities.LongFileName' errorMessage)' "The file named " + Utilities.LongFileName + " could be saved");" is 195.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,TestFileNameThatHasToPassForSetEditLabel,The length of the statement  "				Assert.IsTrue(NativeMethods.IsSamePath(project.Url' Path.Combine(project.ProjectFolder' goodFileName))' "SetEditLabel failed since the Url test failed");" is 153.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,AddReferenceExternallyToTheProjectFile,The length of the statement  "				string stringToWrite = Environment.NewLine + "<ItemGroup>" + Environment.NewLine + " <Reference Include=\"" + BuildEngineRef + "\"/>" + Environment.NewLine + "</ItemGroup>" + Environment.NewLine + "</Project>";" is 210.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,VerifyNestedProjectRename,The length of the statement  "			Assert.IsTrue(NativeMethods.IsSamePath(nestedProject.Url' nestedProjectPath)' "Failed to rename the nested project file to " + nestedProjectPath);" is 146.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestProject,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestProject.cs,VerifyNestedProjectRename,The length of the statement  "            MSBuild.Project buildProject = typeof(ProjectNode).GetProperty("BuildProject"' BindingFlags.Instance | BindingFlags.NonPublic).GetValue(project' new object[] { }) as MSBuild.Project;" is 182.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,Utilities,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\Utilities.cs,GetResourceStringFromTheProjectAssembly,The length of the statement  "			MethodInfo getString = type.GetMethod("GetString"' BindingFlags.Static | BindingFlags.Public' null' new Type[] { typeof(string)' typeof(CultureInfo) }' new ParameterModifier[] { });" is 181.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,Utilities,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\Utilities.cs,AddFile,The length of the statement  "			project.AddItem(VSConstants.VSITEMID_ROOT' VSADDITEMOPERATION.VSADDITEMOP_OPENFILE' String.Empty' 1' new string[] { newModelFilePath }' IntPtr.Zero' result);" is 157.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,Utilities,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\Utilities.cs,AddComReference,The length of the statement  "					if(refererenceNode.TypeGuid == selectorData.guidTypeLibrary && String.Compare(refererenceNode.Caption' selectorData.bstrTitle' StringComparison.OrdinalIgnoreCase) == 0)" is 168.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,Utilities,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\Utilities.cs,GetAutomationObject,The length of the statement  "			ErrorHandler.ThrowOnFailure(hierarchy.GetProperty(VSConstants.VSITEMID_ROOT' (int)__VSHPROPID.VSHPROPID_ExtObject' out extensibility));" is 135.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,Utilities,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\Utilities.cs,CreateFolder,The length of the statement  "			MethodInfo createFolder = typeof(ProjectNode).GetMethod("CreateFolderNode"' BindingFlags.NonPublic | BindingFlags.Instance' null' new Type[] { typeof(string) }' null);" is 167.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,Utilities,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\Utilities.cs,CreateCSharpLibraryProject,The length of the statement  "			Assert.IsTrue(csharpProject != null' string.Format("Failed to find newly created project. Relative project name: {0}. Solution.Projects.Count: {1}"' relativeProjectFileName' dte.Solution.Projects.Count));" is 204.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestUtils,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\Utilities.cs,WriteEmbeddedResourceToFile,The length of the statement  "				throw new ApplicationException("Failed to get embedded resource '" + embeddedResourceName + "' from assembly '" + assembly.FullName);" is 133.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestUtils,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\Utilities.cs,WriteEmbeddedResourceToBinaryFile,The length of the statement  "				throw new InvalidOperationException("Failed to get embedded resource '" + embeddedResourceName + "' from assembly '" + assembly.FullName);" is 138.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestUtils,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\Utilities.cs,SaveDocument,The length of the statement  "			IVsRunningDocumentTable runningDocumentTableService = (IVsRunningDocumentTable)serviceProvider.GetService(typeof(IVsRunningDocumentTable));" is 139.
Long Statement,Microsoft.VisualStudio.Project.IntegrationTests,TestUtils,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\Utilities.cs,CloseInEditorWithoutSaving,The length of the statement  "			IVsRunningDocumentTable runningDocumentTableService = (IVsRunningDocumentTable)serviceProvider.GetService(typeof(IVsRunningDocumentTable));" is 139.
Complex Conditional,Microsoft.VisualStudio.Project.IntegrationTests,NativeMethods,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\NativeMethods.cs,IsSamePath,The conditional expression  "uri1 != null && uri1.IsFile && uri2 != null && uri2.IsFile"  is complex.
Complex Conditional,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,CheckForSaveWithBadFileName,The conditional expression  "(expectedMessage.Length > 0) && (e.Message == expectedMessage || e.Message.Contains(expectedMessage)) || expectedMessage.Length == 0"  is complex.
Empty Catch Block,Microsoft.VisualStudio.Project.IntegrationTests,Utilities,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\Utilities.cs,GetOutputPath,The method has an empty catch block.
Empty Catch Block,Microsoft.VisualStudio.Project.IntegrationTests,Utilities,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\Utilities.cs,CreateCSharpLibraryProject,The method has an empty catch block.
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,DialogBoxPurger,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\DialogboxPurger.cs,Start,The following statement contains a magic number: this.threadStarted.WaitOne(3500' false);
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,DialogBoxPurger,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\DialogboxPurger.cs,HandleDialogBoxes,The following statement contains a magic number: StringBuilder windowClassName = new StringBuilder(256);
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,DialogBoxPurger,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\DialogboxPurger.cs,HandleDialogBoxes,The following statement contains a magic number: unmanagedMemoryLocation = Marshal.AllocHGlobal(10 * 1024);
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,DialogBoxPurger,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\DialogboxPurger.cs,HandleDialogBoxes,The following statement contains a magic number: unmanagedMemoryLocation = Marshal.AllocHGlobal(10 * 1024);
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,DialogBoxPurger,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\DialogboxPurger.cs,FindMessageBoxString,The following statement contains a magic number: StringBuilder sb = new StringBuilder(512);
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,DialogBoxPurger,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\DialogboxPurger.cs,FindMessageBoxString,The following statement contains a magic number: StringBuilder windowText = new StringBuilder(2048);
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,DialogBoxPurger,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\DialogboxPurger.cs,FindMessageBoxString,The following statement contains a magic number: Marshal.WriteInt32(unmanagedMemoryLocation' 2 * stringAsArray.Length' 0);
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,DialogBoxPurger,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\DialogboxPurger.cs,FindMessageBoxString,The following statement contains a magic number: (2 * stringAsArray.Length) + 1 < 2048
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,DialogBoxPurger,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\DialogboxPurger.cs,FindMessageBoxString,The following statement contains a magic number: (2 * stringAsArray.Length) + 1 < 2048
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,NativeMethods,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\NativeMethods.cs,HResultFromWin32,The following statement contains a magic number: return ((error & 0x0000FFFF) | (Facility_Win32 << 16) | 0x80000000);
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestAutomationOnProjectItems,The following statement contains a magic number: UIThreadInvoker.Invoke((ThreadInvoker)delegate() 			{ 				//Get the global service provider and the dte 				IServiceProvider sp = VsIdeTestHostContext.ServiceProvider; 				DTE dte = (DTE)sp.GetService(typeof(DTE));  				string destination = Path.Combine(TestContext.TestDir' TestContext.TestName); 				Utilities.CreateMyNestedProject(sp' dte' TestContext.TestName' destination' true);  				OAProject automation = Utilities.FindExtObject(sp' Utilities.NestedProjectGuid' TestContext.TestName) as OAProject; 				Assert.IsNotNull(automation' "Failed to create a project using automation");  				string newModelFilePath = TestUtils.GetNewFileName(TestContext.TestDir' TestContext.TestName' "model"); 				EnvDTE.ProjectItem pi = automation.ProjectItems.AddFromFileCopy(Path.GetFullPath(newModelFilePath)); 				Assert.IsNotNull(pi' "Failed to create a modeling project item through automation"); 				Assert.IsTrue(pi.Name == Path.GetFileName(newModelFilePath)' "ProjectItems AddFromFileCopy has not returned the item that was added");  				bool[] found = new bool[3]; 				// Test enumerators on project items 				foreach(EnvDTE.ProjectItem item in automation.ProjectItems) 				{ 					if(item.Name == Path.GetFileName(newModelFilePath)) 					{ 						found[0] = true; 					} 					else if(item.Name == "Program.cs") 					{ 						found[1] = true; 					} 					else if(item.Name == "AssemblyInfo.cs") 					{ 						found[2] = true; 					} 				}  				foreach(bool foundValue in found) 				{ 					Assert.IsTrue(foundValue' "The iterator on item collection has not been implemented correctly"); 				}  				/*****Test the AddFolder method*****/ 				//Add a simple folder to the project 				ProjectItem folder = automation.ProjectItems.AddFolder("directory"' null); 				//Add a subfolder to the folder 				ProjectItem subfolder = folder.ProjectItems.AddFolder("subdirectory"' string.Empty); 				//Add another subfolder to that folder 				subfolder.ProjectItems.AddFolder("subsubdirectory"' EnvDTE.Constants.vsProjectItemKindPhysicalFolder);  				//Verify that we have the following structure: 				//Project 				//	-directory 				//		-subdirectory 				//			-subsubdirectory 				ProjectItem directory = automation.ProjectItems.Item("directory") as ProjectItem; 				ProjectItem subdirectory = directory.ProjectItems.Item("subdirectory") as ProjectItem; 				ProjectItem subsubdirectory = subdirectory.ProjectItems.Item("subsubdirectory") as ProjectItem; 				Assert.IsNotNull(directory); 				Assert.IsNotNull(subdirectory); 				Assert.IsNotNull(subsubdirectory);   				bool argumentExceptionThrown = false; 				try 				{ 					//We expect virtual folders to fail this way. 					folder.ProjectItems.AddFolder("virtualfolder"' EnvDTE.Constants.vsProjectItemKindVirtualFolder); 				} 				catch(ArgumentException) { argumentExceptionThrown = true; } 				Assert.IsTrue(argumentExceptionThrown);  				argumentExceptionThrown = false; 				try 				{ 					//Verify that you can't add a folder where a node with that name already exists 					folder.ProjectItems.AddFolder("subdirectory"' string.Empty); 				} 				catch(ArgumentException) { argumentExceptionThrown = true; } 				Assert.IsTrue(argumentExceptionThrown); 			});
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestAutomationOnProjectItems,The following statement contains a magic number: UIThreadInvoker.Invoke((ThreadInvoker)delegate() 			{ 				//Get the global service provider and the dte 				IServiceProvider sp = VsIdeTestHostContext.ServiceProvider; 				DTE dte = (DTE)sp.GetService(typeof(DTE));  				string destination = Path.Combine(TestContext.TestDir' TestContext.TestName); 				Utilities.CreateMyNestedProject(sp' dte' TestContext.TestName' destination' true);  				OAProject automation = Utilities.FindExtObject(sp' Utilities.NestedProjectGuid' TestContext.TestName) as OAProject; 				Assert.IsNotNull(automation' "Failed to create a project using automation");  				string newModelFilePath = TestUtils.GetNewFileName(TestContext.TestDir' TestContext.TestName' "model"); 				EnvDTE.ProjectItem pi = automation.ProjectItems.AddFromFileCopy(Path.GetFullPath(newModelFilePath)); 				Assert.IsNotNull(pi' "Failed to create a modeling project item through automation"); 				Assert.IsTrue(pi.Name == Path.GetFileName(newModelFilePath)' "ProjectItems AddFromFileCopy has not returned the item that was added");  				bool[] found = new bool[3]; 				// Test enumerators on project items 				foreach(EnvDTE.ProjectItem item in automation.ProjectItems) 				{ 					if(item.Name == Path.GetFileName(newModelFilePath)) 					{ 						found[0] = true; 					} 					else if(item.Name == "Program.cs") 					{ 						found[1] = true; 					} 					else if(item.Name == "AssemblyInfo.cs") 					{ 						found[2] = true; 					} 				}  				foreach(bool foundValue in found) 				{ 					Assert.IsTrue(foundValue' "The iterator on item collection has not been implemented correctly"); 				}  				/*****Test the AddFolder method*****/ 				//Add a simple folder to the project 				ProjectItem folder = automation.ProjectItems.AddFolder("directory"' null); 				//Add a subfolder to the folder 				ProjectItem subfolder = folder.ProjectItems.AddFolder("subdirectory"' string.Empty); 				//Add another subfolder to that folder 				subfolder.ProjectItems.AddFolder("subsubdirectory"' EnvDTE.Constants.vsProjectItemKindPhysicalFolder);  				//Verify that we have the following structure: 				//Project 				//	-directory 				//		-subdirectory 				//			-subsubdirectory 				ProjectItem directory = automation.ProjectItems.Item("directory") as ProjectItem; 				ProjectItem subdirectory = directory.ProjectItems.Item("subdirectory") as ProjectItem; 				ProjectItem subsubdirectory = subdirectory.ProjectItems.Item("subsubdirectory") as ProjectItem; 				Assert.IsNotNull(directory); 				Assert.IsNotNull(subdirectory); 				Assert.IsNotNull(subsubdirectory);   				bool argumentExceptionThrown = false; 				try 				{ 					//We expect virtual folders to fail this way. 					folder.ProjectItems.AddFolder("virtualfolder"' EnvDTE.Constants.vsProjectItemKindVirtualFolder); 				} 				catch(ArgumentException) { argumentExceptionThrown = true; } 				Assert.IsTrue(argumentExceptionThrown);  				argumentExceptionThrown = false; 				try 				{ 					//Verify that you can't add a folder where a node with that name already exists 					folder.ProjectItems.AddFolder("subdirectory"' string.Empty); 				} 				catch(ArgumentException) { argumentExceptionThrown = true; } 				Assert.IsTrue(argumentExceptionThrown); 			});
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestInterfaceMethodsOnProperty,The following statement contains a magic number: UIThreadInvoker.Invoke((ThreadInvoker)delegate() 			{ 				//Get the global service provider and the dte 				IServiceProvider sp = VsIdeTestHostContext.ServiceProvider; 				DTE dte = (DTE)sp.GetService(typeof(DTE));  				string destination = Path.Combine(TestContext.TestDir' TestContext.TestName); 				Utilities.CreateMyNestedProject(sp' dte' TestContext.TestName' destination' true);  				OAProject automation = Utilities.FindExtObject(sp' Utilities.NestedProjectGuid' TestContext.TestName) as OAProject; 				Assert.IsNotNull(automation' "Failed to create a project using automation");  				ProjectNode projectNode = automation.Project;  				// Get Project Property object 				EnvDTE.Property property = automation.Properties.Item("RootNamespace"); 				Assert.IsNotNull(property' "Could not retrieve valid RootNamespace property"); 				Assert.IsFalse(property is OANullProperty' "Could not retrieve valid RootNamespace property"); 				object retValue = property.Application; 				Assert.IsNull(retValue);  				Assert.IsTrue((string)property.Value == "Application"' "Failed to retrieve the Value property."); 				property.Value = "Test1"; 				Assert.AreEqual(property.Value' "Test1");   				// Get Collection object from property object 				EnvDTE.Properties properties = property.Collection; 				Assert.IsNotNull(properties' "Collection property failed to retrieve an object");  				// Get the DTE 				retValue = property.DTE; 				Assert.IsNotNull(retValue);  				// Get the Indexed value 				retValue = property.get_IndexedValue(1' 2' 3' 4); 				Assert.IsNull(retValue);  				property.let_Value(1); 				Assert.AreEqual(property.Value' "1");  				// Check the name. 				string name = property.Name; 				Assert.IsNotNull(name); 				Assert.IsTrue(name == "RootNamespace"' "RootNamespace property was not set correctly");  				short numIndeces = property.NumIndices; 				//Currently it gives back 0 				//It must be Assertd when the method changes 				Assert.IsTrue(numIndeces == 0);  				// Assert the Object property 				retValue = property.Object; 				Assert.AreEqual(retValue' property.Value); 				property.Object = "test1"; 				retValue = property.Object; 				Assert.AreEqual(retValue' "test1");  				// Test the parent property 				EnvDTE.Properties parent = property.Parent; 				Assert.IsTrue(parent is OAProperties' "Parent property failed to return the parent of a property");  				//It does nothing currently. Cannot be Assertd. 				property.set_IndexedValue(1' 2' 3' 4' 5);  				// Try a non string value on the Value. 				ArrayList list = new ArrayList(); 				property.Value = list; 				retValue = property.Value; 				Assert.AreEqual(retValue' list.ToString());  				// Test the iterators for enumeration. 				// We are interested to see that we advance with the iteration. 				bool[] found = new bool[2];  				foreach(EnvDTE.Property aProperty in automation.Properties) 				{  					if(aProperty.Name == "RootNamespace") 					{ 						found[0] = true; 					} 					else if(aProperty.Name == "AssemblyName") 					{ 						found[1] = true; 					} 				}  				foreach(bool foundValue in found) 				{ 					Assert.IsTrue(foundValue' "The iterator on property collection has not been implemented correctly"); 				} 			});
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestInterfaceMethodsOnProperty,The following statement contains a magic number: UIThreadInvoker.Invoke((ThreadInvoker)delegate() 			{ 				//Get the global service provider and the dte 				IServiceProvider sp = VsIdeTestHostContext.ServiceProvider; 				DTE dte = (DTE)sp.GetService(typeof(DTE));  				string destination = Path.Combine(TestContext.TestDir' TestContext.TestName); 				Utilities.CreateMyNestedProject(sp' dte' TestContext.TestName' destination' true);  				OAProject automation = Utilities.FindExtObject(sp' Utilities.NestedProjectGuid' TestContext.TestName) as OAProject; 				Assert.IsNotNull(automation' "Failed to create a project using automation");  				ProjectNode projectNode = automation.Project;  				// Get Project Property object 				EnvDTE.Property property = automation.Properties.Item("RootNamespace"); 				Assert.IsNotNull(property' "Could not retrieve valid RootNamespace property"); 				Assert.IsFalse(property is OANullProperty' "Could not retrieve valid RootNamespace property"); 				object retValue = property.Application; 				Assert.IsNull(retValue);  				Assert.IsTrue((string)property.Value == "Application"' "Failed to retrieve the Value property."); 				property.Value = "Test1"; 				Assert.AreEqual(property.Value' "Test1");   				// Get Collection object from property object 				EnvDTE.Properties properties = property.Collection; 				Assert.IsNotNull(properties' "Collection property failed to retrieve an object");  				// Get the DTE 				retValue = property.DTE; 				Assert.IsNotNull(retValue);  				// Get the Indexed value 				retValue = property.get_IndexedValue(1' 2' 3' 4); 				Assert.IsNull(retValue);  				property.let_Value(1); 				Assert.AreEqual(property.Value' "1");  				// Check the name. 				string name = property.Name; 				Assert.IsNotNull(name); 				Assert.IsTrue(name == "RootNamespace"' "RootNamespace property was not set correctly");  				short numIndeces = property.NumIndices; 				//Currently it gives back 0 				//It must be Assertd when the method changes 				Assert.IsTrue(numIndeces == 0);  				// Assert the Object property 				retValue = property.Object; 				Assert.AreEqual(retValue' property.Value); 				property.Object = "test1"; 				retValue = property.Object; 				Assert.AreEqual(retValue' "test1");  				// Test the parent property 				EnvDTE.Properties parent = property.Parent; 				Assert.IsTrue(parent is OAProperties' "Parent property failed to return the parent of a property");  				//It does nothing currently. Cannot be Assertd. 				property.set_IndexedValue(1' 2' 3' 4' 5);  				// Try a non string value on the Value. 				ArrayList list = new ArrayList(); 				property.Value = list; 				retValue = property.Value; 				Assert.AreEqual(retValue' list.ToString());  				// Test the iterators for enumeration. 				// We are interested to see that we advance with the iteration. 				bool[] found = new bool[2];  				foreach(EnvDTE.Property aProperty in automation.Properties) 				{  					if(aProperty.Name == "RootNamespace") 					{ 						found[0] = true; 					} 					else if(aProperty.Name == "AssemblyName") 					{ 						found[1] = true; 					} 				}  				foreach(bool foundValue in found) 				{ 					Assert.IsTrue(foundValue' "The iterator on property collection has not been implemented correctly"); 				} 			});
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestInterfaceMethodsOnProperty,The following statement contains a magic number: UIThreadInvoker.Invoke((ThreadInvoker)delegate() 			{ 				//Get the global service provider and the dte 				IServiceProvider sp = VsIdeTestHostContext.ServiceProvider; 				DTE dte = (DTE)sp.GetService(typeof(DTE));  				string destination = Path.Combine(TestContext.TestDir' TestContext.TestName); 				Utilities.CreateMyNestedProject(sp' dte' TestContext.TestName' destination' true);  				OAProject automation = Utilities.FindExtObject(sp' Utilities.NestedProjectGuid' TestContext.TestName) as OAProject; 				Assert.IsNotNull(automation' "Failed to create a project using automation");  				ProjectNode projectNode = automation.Project;  				// Get Project Property object 				EnvDTE.Property property = automation.Properties.Item("RootNamespace"); 				Assert.IsNotNull(property' "Could not retrieve valid RootNamespace property"); 				Assert.IsFalse(property is OANullProperty' "Could not retrieve valid RootNamespace property"); 				object retValue = property.Application; 				Assert.IsNull(retValue);  				Assert.IsTrue((string)property.Value == "Application"' "Failed to retrieve the Value property."); 				property.Value = "Test1"; 				Assert.AreEqual(property.Value' "Test1");   				// Get Collection object from property object 				EnvDTE.Properties properties = property.Collection; 				Assert.IsNotNull(properties' "Collection property failed to retrieve an object");  				// Get the DTE 				retValue = property.DTE; 				Assert.IsNotNull(retValue);  				// Get the Indexed value 				retValue = property.get_IndexedValue(1' 2' 3' 4); 				Assert.IsNull(retValue);  				property.let_Value(1); 				Assert.AreEqual(property.Value' "1");  				// Check the name. 				string name = property.Name; 				Assert.IsNotNull(name); 				Assert.IsTrue(name == "RootNamespace"' "RootNamespace property was not set correctly");  				short numIndeces = property.NumIndices; 				//Currently it gives back 0 				//It must be Assertd when the method changes 				Assert.IsTrue(numIndeces == 0);  				// Assert the Object property 				retValue = property.Object; 				Assert.AreEqual(retValue' property.Value); 				property.Object = "test1"; 				retValue = property.Object; 				Assert.AreEqual(retValue' "test1");  				// Test the parent property 				EnvDTE.Properties parent = property.Parent; 				Assert.IsTrue(parent is OAProperties' "Parent property failed to return the parent of a property");  				//It does nothing currently. Cannot be Assertd. 				property.set_IndexedValue(1' 2' 3' 4' 5);  				// Try a non string value on the Value. 				ArrayList list = new ArrayList(); 				property.Value = list; 				retValue = property.Value; 				Assert.AreEqual(retValue' list.ToString());  				// Test the iterators for enumeration. 				// We are interested to see that we advance with the iteration. 				bool[] found = new bool[2];  				foreach(EnvDTE.Property aProperty in automation.Properties) 				{  					if(aProperty.Name == "RootNamespace") 					{ 						found[0] = true; 					} 					else if(aProperty.Name == "AssemblyName") 					{ 						found[1] = true; 					} 				}  				foreach(bool foundValue in found) 				{ 					Assert.IsTrue(foundValue' "The iterator on property collection has not been implemented correctly"); 				} 			});
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestInterfaceMethodsOnProperty,The following statement contains a magic number: UIThreadInvoker.Invoke((ThreadInvoker)delegate() 			{ 				//Get the global service provider and the dte 				IServiceProvider sp = VsIdeTestHostContext.ServiceProvider; 				DTE dte = (DTE)sp.GetService(typeof(DTE));  				string destination = Path.Combine(TestContext.TestDir' TestContext.TestName); 				Utilities.CreateMyNestedProject(sp' dte' TestContext.TestName' destination' true);  				OAProject automation = Utilities.FindExtObject(sp' Utilities.NestedProjectGuid' TestContext.TestName) as OAProject; 				Assert.IsNotNull(automation' "Failed to create a project using automation");  				ProjectNode projectNode = automation.Project;  				// Get Project Property object 				EnvDTE.Property property = automation.Properties.Item("RootNamespace"); 				Assert.IsNotNull(property' "Could not retrieve valid RootNamespace property"); 				Assert.IsFalse(property is OANullProperty' "Could not retrieve valid RootNamespace property"); 				object retValue = property.Application; 				Assert.IsNull(retValue);  				Assert.IsTrue((string)property.Value == "Application"' "Failed to retrieve the Value property."); 				property.Value = "Test1"; 				Assert.AreEqual(property.Value' "Test1");   				// Get Collection object from property object 				EnvDTE.Properties properties = property.Collection; 				Assert.IsNotNull(properties' "Collection property failed to retrieve an object");  				// Get the DTE 				retValue = property.DTE; 				Assert.IsNotNull(retValue);  				// Get the Indexed value 				retValue = property.get_IndexedValue(1' 2' 3' 4); 				Assert.IsNull(retValue);  				property.let_Value(1); 				Assert.AreEqual(property.Value' "1");  				// Check the name. 				string name = property.Name; 				Assert.IsNotNull(name); 				Assert.IsTrue(name == "RootNamespace"' "RootNamespace property was not set correctly");  				short numIndeces = property.NumIndices; 				//Currently it gives back 0 				//It must be Assertd when the method changes 				Assert.IsTrue(numIndeces == 0);  				// Assert the Object property 				retValue = property.Object; 				Assert.AreEqual(retValue' property.Value); 				property.Object = "test1"; 				retValue = property.Object; 				Assert.AreEqual(retValue' "test1");  				// Test the parent property 				EnvDTE.Properties parent = property.Parent; 				Assert.IsTrue(parent is OAProperties' "Parent property failed to return the parent of a property");  				//It does nothing currently. Cannot be Assertd. 				property.set_IndexedValue(1' 2' 3' 4' 5);  				// Try a non string value on the Value. 				ArrayList list = new ArrayList(); 				property.Value = list; 				retValue = property.Value; 				Assert.AreEqual(retValue' list.ToString());  				// Test the iterators for enumeration. 				// We are interested to see that we advance with the iteration. 				bool[] found = new bool[2];  				foreach(EnvDTE.Property aProperty in automation.Properties) 				{  					if(aProperty.Name == "RootNamespace") 					{ 						found[0] = true; 					} 					else if(aProperty.Name == "AssemblyName") 					{ 						found[1] = true; 					} 				}  				foreach(bool foundValue in found) 				{ 					Assert.IsTrue(foundValue' "The iterator on property collection has not been implemented correctly"); 				} 			});
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestInterfaceMethodsOnProperty,The following statement contains a magic number: UIThreadInvoker.Invoke((ThreadInvoker)delegate() 			{ 				//Get the global service provider and the dte 				IServiceProvider sp = VsIdeTestHostContext.ServiceProvider; 				DTE dte = (DTE)sp.GetService(typeof(DTE));  				string destination = Path.Combine(TestContext.TestDir' TestContext.TestName); 				Utilities.CreateMyNestedProject(sp' dte' TestContext.TestName' destination' true);  				OAProject automation = Utilities.FindExtObject(sp' Utilities.NestedProjectGuid' TestContext.TestName) as OAProject; 				Assert.IsNotNull(automation' "Failed to create a project using automation");  				ProjectNode projectNode = automation.Project;  				// Get Project Property object 				EnvDTE.Property property = automation.Properties.Item("RootNamespace"); 				Assert.IsNotNull(property' "Could not retrieve valid RootNamespace property"); 				Assert.IsFalse(property is OANullProperty' "Could not retrieve valid RootNamespace property"); 				object retValue = property.Application; 				Assert.IsNull(retValue);  				Assert.IsTrue((string)property.Value == "Application"' "Failed to retrieve the Value property."); 				property.Value = "Test1"; 				Assert.AreEqual(property.Value' "Test1");   				// Get Collection object from property object 				EnvDTE.Properties properties = property.Collection; 				Assert.IsNotNull(properties' "Collection property failed to retrieve an object");  				// Get the DTE 				retValue = property.DTE; 				Assert.IsNotNull(retValue);  				// Get the Indexed value 				retValue = property.get_IndexedValue(1' 2' 3' 4); 				Assert.IsNull(retValue);  				property.let_Value(1); 				Assert.AreEqual(property.Value' "1");  				// Check the name. 				string name = property.Name; 				Assert.IsNotNull(name); 				Assert.IsTrue(name == "RootNamespace"' "RootNamespace property was not set correctly");  				short numIndeces = property.NumIndices; 				//Currently it gives back 0 				//It must be Assertd when the method changes 				Assert.IsTrue(numIndeces == 0);  				// Assert the Object property 				retValue = property.Object; 				Assert.AreEqual(retValue' property.Value); 				property.Object = "test1"; 				retValue = property.Object; 				Assert.AreEqual(retValue' "test1");  				// Test the parent property 				EnvDTE.Properties parent = property.Parent; 				Assert.IsTrue(parent is OAProperties' "Parent property failed to return the parent of a property");  				//It does nothing currently. Cannot be Assertd. 				property.set_IndexedValue(1' 2' 3' 4' 5);  				// Try a non string value on the Value. 				ArrayList list = new ArrayList(); 				property.Value = list; 				retValue = property.Value; 				Assert.AreEqual(retValue' list.ToString());  				// Test the iterators for enumeration. 				// We are interested to see that we advance with the iteration. 				bool[] found = new bool[2];  				foreach(EnvDTE.Property aProperty in automation.Properties) 				{  					if(aProperty.Name == "RootNamespace") 					{ 						found[0] = true; 					} 					else if(aProperty.Name == "AssemblyName") 					{ 						found[1] = true; 					} 				}  				foreach(bool foundValue in found) 				{ 					Assert.IsTrue(foundValue' "The iterator on property collection has not been implemented correctly"); 				} 			});
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestInterfaceMethodsOnProperty,The following statement contains a magic number: UIThreadInvoker.Invoke((ThreadInvoker)delegate() 			{ 				//Get the global service provider and the dte 				IServiceProvider sp = VsIdeTestHostContext.ServiceProvider; 				DTE dte = (DTE)sp.GetService(typeof(DTE));  				string destination = Path.Combine(TestContext.TestDir' TestContext.TestName); 				Utilities.CreateMyNestedProject(sp' dte' TestContext.TestName' destination' true);  				OAProject automation = Utilities.FindExtObject(sp' Utilities.NestedProjectGuid' TestContext.TestName) as OAProject; 				Assert.IsNotNull(automation' "Failed to create a project using automation");  				ProjectNode projectNode = automation.Project;  				// Get Project Property object 				EnvDTE.Property property = automation.Properties.Item("RootNamespace"); 				Assert.IsNotNull(property' "Could not retrieve valid RootNamespace property"); 				Assert.IsFalse(property is OANullProperty' "Could not retrieve valid RootNamespace property"); 				object retValue = property.Application; 				Assert.IsNull(retValue);  				Assert.IsTrue((string)property.Value == "Application"' "Failed to retrieve the Value property."); 				property.Value = "Test1"; 				Assert.AreEqual(property.Value' "Test1");   				// Get Collection object from property object 				EnvDTE.Properties properties = property.Collection; 				Assert.IsNotNull(properties' "Collection property failed to retrieve an object");  				// Get the DTE 				retValue = property.DTE; 				Assert.IsNotNull(retValue);  				// Get the Indexed value 				retValue = property.get_IndexedValue(1' 2' 3' 4); 				Assert.IsNull(retValue);  				property.let_Value(1); 				Assert.AreEqual(property.Value' "1");  				// Check the name. 				string name = property.Name; 				Assert.IsNotNull(name); 				Assert.IsTrue(name == "RootNamespace"' "RootNamespace property was not set correctly");  				short numIndeces = property.NumIndices; 				//Currently it gives back 0 				//It must be Assertd when the method changes 				Assert.IsTrue(numIndeces == 0);  				// Assert the Object property 				retValue = property.Object; 				Assert.AreEqual(retValue' property.Value); 				property.Object = "test1"; 				retValue = property.Object; 				Assert.AreEqual(retValue' "test1");  				// Test the parent property 				EnvDTE.Properties parent = property.Parent; 				Assert.IsTrue(parent is OAProperties' "Parent property failed to return the parent of a property");  				//It does nothing currently. Cannot be Assertd. 				property.set_IndexedValue(1' 2' 3' 4' 5);  				// Try a non string value on the Value. 				ArrayList list = new ArrayList(); 				property.Value = list; 				retValue = property.Value; 				Assert.AreEqual(retValue' list.ToString());  				// Test the iterators for enumeration. 				// We are interested to see that we advance with the iteration. 				bool[] found = new bool[2];  				foreach(EnvDTE.Property aProperty in automation.Properties) 				{  					if(aProperty.Name == "RootNamespace") 					{ 						found[0] = true; 					} 					else if(aProperty.Name == "AssemblyName") 					{ 						found[1] = true; 					} 				}  				foreach(bool foundValue in found) 				{ 					Assert.IsTrue(foundValue' "The iterator on property collection has not been implemented correctly"); 				} 			});
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestInterfaceMethodsOnProperty,The following statement contains a magic number: UIThreadInvoker.Invoke((ThreadInvoker)delegate() 			{ 				//Get the global service provider and the dte 				IServiceProvider sp = VsIdeTestHostContext.ServiceProvider; 				DTE dte = (DTE)sp.GetService(typeof(DTE));  				string destination = Path.Combine(TestContext.TestDir' TestContext.TestName); 				Utilities.CreateMyNestedProject(sp' dte' TestContext.TestName' destination' true);  				OAProject automation = Utilities.FindExtObject(sp' Utilities.NestedProjectGuid' TestContext.TestName) as OAProject; 				Assert.IsNotNull(automation' "Failed to create a project using automation");  				ProjectNode projectNode = automation.Project;  				// Get Project Property object 				EnvDTE.Property property = automation.Properties.Item("RootNamespace"); 				Assert.IsNotNull(property' "Could not retrieve valid RootNamespace property"); 				Assert.IsFalse(property is OANullProperty' "Could not retrieve valid RootNamespace property"); 				object retValue = property.Application; 				Assert.IsNull(retValue);  				Assert.IsTrue((string)property.Value == "Application"' "Failed to retrieve the Value property."); 				property.Value = "Test1"; 				Assert.AreEqual(property.Value' "Test1");   				// Get Collection object from property object 				EnvDTE.Properties properties = property.Collection; 				Assert.IsNotNull(properties' "Collection property failed to retrieve an object");  				// Get the DTE 				retValue = property.DTE; 				Assert.IsNotNull(retValue);  				// Get the Indexed value 				retValue = property.get_IndexedValue(1' 2' 3' 4); 				Assert.IsNull(retValue);  				property.let_Value(1); 				Assert.AreEqual(property.Value' "1");  				// Check the name. 				string name = property.Name; 				Assert.IsNotNull(name); 				Assert.IsTrue(name == "RootNamespace"' "RootNamespace property was not set correctly");  				short numIndeces = property.NumIndices; 				//Currently it gives back 0 				//It must be Assertd when the method changes 				Assert.IsTrue(numIndeces == 0);  				// Assert the Object property 				retValue = property.Object; 				Assert.AreEqual(retValue' property.Value); 				property.Object = "test1"; 				retValue = property.Object; 				Assert.AreEqual(retValue' "test1");  				// Test the parent property 				EnvDTE.Properties parent = property.Parent; 				Assert.IsTrue(parent is OAProperties' "Parent property failed to return the parent of a property");  				//It does nothing currently. Cannot be Assertd. 				property.set_IndexedValue(1' 2' 3' 4' 5);  				// Try a non string value on the Value. 				ArrayList list = new ArrayList(); 				property.Value = list; 				retValue = property.Value; 				Assert.AreEqual(retValue' list.ToString());  				// Test the iterators for enumeration. 				// We are interested to see that we advance with the iteration. 				bool[] found = new bool[2];  				foreach(EnvDTE.Property aProperty in automation.Properties) 				{  					if(aProperty.Name == "RootNamespace") 					{ 						found[0] = true; 					} 					else if(aProperty.Name == "AssemblyName") 					{ 						found[1] = true; 					} 				}  				foreach(bool foundValue in found) 				{ 					Assert.IsTrue(foundValue' "The iterator on property collection has not been implemented correctly"); 				} 			});
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestInterfaceMethodsOnProperty,The following statement contains a magic number: UIThreadInvoker.Invoke((ThreadInvoker)delegate() 			{ 				//Get the global service provider and the dte 				IServiceProvider sp = VsIdeTestHostContext.ServiceProvider; 				DTE dte = (DTE)sp.GetService(typeof(DTE));  				string destination = Path.Combine(TestContext.TestDir' TestContext.TestName); 				Utilities.CreateMyNestedProject(sp' dte' TestContext.TestName' destination' true);  				OAProject automation = Utilities.FindExtObject(sp' Utilities.NestedProjectGuid' TestContext.TestName) as OAProject; 				Assert.IsNotNull(automation' "Failed to create a project using automation");  				ProjectNode projectNode = automation.Project;  				// Get Project Property object 				EnvDTE.Property property = automation.Properties.Item("RootNamespace"); 				Assert.IsNotNull(property' "Could not retrieve valid RootNamespace property"); 				Assert.IsFalse(property is OANullProperty' "Could not retrieve valid RootNamespace property"); 				object retValue = property.Application; 				Assert.IsNull(retValue);  				Assert.IsTrue((string)property.Value == "Application"' "Failed to retrieve the Value property."); 				property.Value = "Test1"; 				Assert.AreEqual(property.Value' "Test1");   				// Get Collection object from property object 				EnvDTE.Properties properties = property.Collection; 				Assert.IsNotNull(properties' "Collection property failed to retrieve an object");  				// Get the DTE 				retValue = property.DTE; 				Assert.IsNotNull(retValue);  				// Get the Indexed value 				retValue = property.get_IndexedValue(1' 2' 3' 4); 				Assert.IsNull(retValue);  				property.let_Value(1); 				Assert.AreEqual(property.Value' "1");  				// Check the name. 				string name = property.Name; 				Assert.IsNotNull(name); 				Assert.IsTrue(name == "RootNamespace"' "RootNamespace property was not set correctly");  				short numIndeces = property.NumIndices; 				//Currently it gives back 0 				//It must be Assertd when the method changes 				Assert.IsTrue(numIndeces == 0);  				// Assert the Object property 				retValue = property.Object; 				Assert.AreEqual(retValue' property.Value); 				property.Object = "test1"; 				retValue = property.Object; 				Assert.AreEqual(retValue' "test1");  				// Test the parent property 				EnvDTE.Properties parent = property.Parent; 				Assert.IsTrue(parent is OAProperties' "Parent property failed to return the parent of a property");  				//It does nothing currently. Cannot be Assertd. 				property.set_IndexedValue(1' 2' 3' 4' 5);  				// Try a non string value on the Value. 				ArrayList list = new ArrayList(); 				property.Value = list; 				retValue = property.Value; 				Assert.AreEqual(retValue' list.ToString());  				// Test the iterators for enumeration. 				// We are interested to see that we advance with the iteration. 				bool[] found = new bool[2];  				foreach(EnvDTE.Property aProperty in automation.Properties) 				{  					if(aProperty.Name == "RootNamespace") 					{ 						found[0] = true; 					} 					else if(aProperty.Name == "AssemblyName") 					{ 						found[1] = true; 					} 				}  				foreach(bool foundValue in found) 				{ 					Assert.IsTrue(foundValue' "The iterator on property collection has not been implemented correctly"); 				} 			});
Magic Number,Microsoft.VisualStudio.Project.IntegrationTests,TestAutomation,D:\research\architectureSmells\repos\IntelliTect_PowerStudio\source\Microsoft.VisualStudio.Project\Dev10\Tests\IntegrationTests\TestAutomation.cs,TestAutomationOnConfigDependentProperties,The following statement contains a magic number: const int expectedConfigs = 2;
