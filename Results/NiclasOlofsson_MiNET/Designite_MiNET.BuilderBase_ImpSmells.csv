Implementation smell,Namespace,Class,File,Method,Description
Long Method,MiNET.BuilderBase,RegionSelector,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\RegionSelector.cs,DisplaySelection,The method has 105 lines of code.
Long Method,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Expand,The method has 107 lines of code.
Long Method,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Contract,The method has 104 lines of code.
Complex Method,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,GetDirectionVector,Cyclomatic complexity of the method is 13
Complex Method,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,DrawLine,Cyclomatic complexity of the method is 9
Complex Method,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,Naturalize,Cyclomatic complexity of the method is 8
Complex Method,MiNET.BuilderBase,RegionSelector,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\RegionSelector.cs,DisplaySelection,Cyclomatic complexity of the method is 19
Complex Method,MiNET.BuilderBase.Commands,SchematicsCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SchematicsCommands.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Expand,Cyclomatic complexity of the method is 30
Complex Method,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Contract,Cyclomatic complexity of the method is 29
Complex Method,MiNET.BuilderBase.Masks,Mask,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Masks\Mask.cs,Deserialize,Cyclomatic complexity of the method is 9
Complex Method,MiNET.BuilderBase.Patterns,Pattern,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Patterns\Pattern.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,Erosion,Cyclomatic complexity of the method is 11
Complex Method,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,FillIteration,Cyclomatic complexity of the method is 11
Complex Method,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,ErosionIteration,Cyclomatic complexity of the method is 11
Long Parameter List,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,EditHelper,The method has 5 parameters. Parameters: level' player' mask' randomizeGeneration' undoRecorder
Long Parameter List,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,GetBlockInLineOfSight,The method has 5 parameters. Parameters: level' knownPosition' range' returnLastAir' limitHeight
Long Parameter List,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,DrawLine,The method has 6 parameters. Parameters: selector' pattern' pos1' pos2' radius' filled
Long Parameter List,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,Stack,The method has 5 parameters. Parameters: selector' count' dir' skipAir' moveSelection
Long Parameter List,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,MakeSphere,The method has 6 parameters. Parameters: pos' block' radiusX' radiusY' radiusZ' filled
Long Parameter List,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,MakeCylinder,The method has 6 parameters. Parameters: pos' block' radiusX' radiusZ' height' filled
Long Parameter List,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,Fill,The method has 6 parameters. Parameters: origin' pattern' mask' radius' depth' fillUp
Long Parameter List,MiNET.BuilderBase.Commands,BrushCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\BrushCommands.cs,BrushCylinder,The method has 5 parameters. Parameters: player' material' radius' height' hollow
Long Parameter List,MiNET.BuilderBase.Commands,MiscCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\MiscCommands.cs,Text,The method has 5 parameters. Parameters: player' text' pattern' fontName' pxSize
Long Parameter List,MiNET.BuilderBase.Commands,RegionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\RegionCommands.cs,Line,The method has 5 parameters. Parameters: player' tileName' tileData' thickness' shell
Long Parameter List,MiNET.BuilderBase.Commands,RegionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\RegionCommands.cs,Line,The method has 5 parameters. Parameters: player' tileId' tileData' thickness' shell
Long Parameter List,MiNET.BuilderBase.Commands,RegionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\RegionCommands.cs,Stack,The method has 5 parameters. Parameters: player' count' direction' skipAir' moveSelection
Long Parameter List,MiNET.BuilderBase.Commands,RegionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\RegionCommands.cs,Hsphere,The method has 5 parameters. Parameters: player' pattern' radiusX' radiusY' radiusZ
Long Parameter List,MiNET.BuilderBase.Commands,RegionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\RegionCommands.cs,Sphere,The method has 6 parameters. Parameters: player' pattern' radiusX' radiusY' radiusZ' filled
Long Parameter List,MiNET.BuilderBase.Commands,RegionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\RegionCommands.cs,Cylinder,The method has 6 parameters. Parameters: player' pattern' radiusX' height' radiusZ' filled
Long Parameter List,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,PlaceBlock,The method has 5 parameters. Parameters: world' player' blockCoordinates' face' faceCoords
Long Parameter List,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,Erosion,The method has 8 parameters. Parameters: editSession' brushSize' erodeFaces' erodeRec' fillFaces' fillRec' level' targetBlock
Long Parameter List,MiNET.BuilderBase.Tools,DistanceWand,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\DistanceWand.cs,PlaceBlock,The method has 5 parameters. Parameters: world' player' blockCoordinates' face' faceCoords
Long Parameter List,MiNET.BuilderBase.Tools,TeleportTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\TeleportTool.cs,PlaceBlock,The method has 5 parameters. Parameters: world' player' blockCoordinates' face' faceCoords
Long Statement,MiNET.BuilderBase,BuilderBasePlugin,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\BuilderBasePlugin.cs,SetInventory,The length of the statement  "			player.Inventory.Slots[idx++] = new BrushTool {BrushType = 0' Radius = 5' Mask = new Mask(player.Level' new List<Block> {new Air()}' true)}; " is 140.
Long Statement,MiNET.BuilderBase,Clipboard,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Clipboard.cs,GetMin,The length of the statement  "			return new BlockCoordinates(Math.Min(OriginPosition1.X' OriginPosition2.X)' Math.Min(OriginPosition1.Y' OriginPosition2.Y)' Math.Min(OriginPosition1.Z' OriginPosition2.Z)); " is 172.
Long Statement,MiNET.BuilderBase,Clipboard,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Clipboard.cs,GetMax,The length of the statement  "			return new BlockCoordinates(Math.Max(OriginPosition1.X' OriginPosition2.X)' Math.Max(OriginPosition1.Y' OriginPosition2.Y)' Math.Max(OriginPosition1.Z' OriginPosition2.Z)); " is 172.
Long Statement,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,Center,The length of the statement  "			BlockCoordinates center = new Vector3((float) Math.Truncate(centerVec.X)' (float) Math.Truncate(centerVec.Y)' (float) Math.Truncate(centerVec.Z)); " is 146.
Long Statement,MiNET.BuilderBase,RegionSelector,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\RegionSelector.cs,DisplaySelection,The length of the statement  "									//var particle = new LegacyParticle(particleId' Player.Level) {Position = new Vector3(x' y' z) + new Vector3(0.5f' 0.5f' 0.5f)}; " is 128.
Long Statement,MiNET.BuilderBase,RegionSelector,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\RegionSelector.cs,DisplaySelection,The length of the statement  "						//			//var particle = new LegacyParticle(10' Player.Level) {Position = new Vector3(x' y' z) + new Vector3(0.5f' 0.5f' 0.5f)}; " is 125.
Long Statement,MiNET.BuilderBase,RegionSelector,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\RegionSelector.cs,DisplaySelection,The length of the statement  "									//var particle = new LegacyParticle(10' Player.Level) {Position = new Vector3(x' y' z) + new Vector3(0.5f' 0.5f' 0.5f)}; " is 120.
Long Statement,MiNET.BuilderBase,RegionSelector,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\RegionSelector.cs,GetMin,The length of the statement  "			return new BlockCoordinates(Math.Min(Position1.X' Position2.X)' Math.Min(Position1.Y' Position2.Y)' Math.Min(Position1.Z' Position2.Z)); " is 136.
Long Statement,MiNET.BuilderBase,RegionSelector,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\RegionSelector.cs,GetMax,The length of the statement  "			return new BlockCoordinates(Math.Max(Position1.X' Position2.X)' Math.Max(Position1.Y' Position2.Y)' Math.Max(Position1.Z' Position2.Z)); " is 136.
Long Statement,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Chunk,The length of the statement  "			selector.Select(new BlockCoordinates(chunk.X << 4' 0' chunk.Z << 4)' new BlockCoordinates(16 + (chunk.X << 4)' 255' 16 + (chunk.Z << 4))); " is 138.
Long Statement,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Expand,The length of the statement  "				selector.Select(new BlockCoordinates(selector.Position1.X' 0' selector.Position1.Z)' new BlockCoordinates(selector.Position2.X' 255' selector.Position2.Z)); " is 156.
Long Statement,MiNET.BuilderBase.Masks,Mask,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Masks\Mask.cs,Test,The length of the statement  "			var matches = mask.BlockList.Exists(entry => entry.Id == block.Id && (entry.IgnoreMetadata || block.Metadata == entry.Metadata)); " is 129.
Long Statement,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,UseItem,The length of the statement  "			var target = new EditHelper(world' player' Mask).GetBlockInLineOfSight(player.Level' player.KnownPosition' returnLastAir: true); " is 128.
Long Statement,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,UseItem,The length of the statement  "						// public ErosionParameters(final int erosionFaces' final int erosionRecursion' final int fillFaces' final int fillRecursion) { " is 127.
Long Statement,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,Animate,The length of the statement  "			var target = new EditHelper(world' player).GetBlockInLineOfSight(player.Level' player.KnownPosition' returnLastAir: true); " is 122.
Long Statement,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,Animate,The length of the statement  "						// public ErosionParameters(final int erosionFaces' final int erosionRecursion' final int fillFaces' final int fillRecursion) { " is 127.
Long Statement,MiNET.BuilderBase.Tools,DistanceWand,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\DistanceWand.cs,UpdateExtraData,The length of the statement  "							new NbtString(ChatFormatting.Reset + ChatFormatting.Italic + ChatColors.White + "Wand that selects all blocks between pos1 and pos2.")' " is 135.
Long Statement,MiNET.BuilderBase.Tools,DistanceWand,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\DistanceWand.cs,UseItem,The length of the statement  "			var target = new EditHelper(world' player).GetBlockInLineOfSight(player.Level' player.KnownPosition' returnLastAir: true); " is 122.
Long Statement,MiNET.BuilderBase.Tools,DistanceWand,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\DistanceWand.cs,Animate,The length of the statement  "			var target = new EditHelper(world' player).GetBlockInLineOfSight(player.Level' player.KnownPosition' returnLastAir: true); " is 122.
Long Statement,MiNET.BuilderBase.Tools,TeleportTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\TeleportTool.cs,Teleport,The length of the statement  "			var target = new EditHelper(player.Level' player).GetBlockInLineOfSight(player.Level' player.KnownPosition' returnLastAir: true' limitHeight: false); " is 149.
Long Statement,MiNET.BuilderBase.Tools,TeleportTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\TeleportTool.cs,Teleport,The length of the statement  "			var newPosition = new PlayerLocation(pos.X' stayOnY ? known.Y - 1.62f : pos.Y + 1.62f' pos.Z' known.HeadYaw' known.Yaw' known.Pitch); " is 133.
Complex Conditional,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,GetHollowed,The conditional expression  "!(vset.Contains(new BlockCoordinates(x + 1' y' z)) &&  				      vset.Contains(new BlockCoordinates(x - 1' y' z)) &&  				      vset.Contains(new BlockCoordinates(x' y + 1' z)) &&  				      vset.Contains(new BlockCoordinates(x' y - 1' z)) &&  				      vset.Contains(new BlockCoordinates(x' y' z + 1)) &&  				      vset.Contains(new BlockCoordinates(x' y' z - 1)))"  is complex.
Complex Conditional,MiNET.BuilderBase,RegionSelector,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\RegionSelector.cs,DisplaySelection,The conditional expression  "x != minX && x != maxX && y != minY && y != maxY"  is complex.
Complex Conditional,MiNET.BuilderBase,RegionSelector,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\RegionSelector.cs,DisplaySelection,The conditional expression  "z != minZ && z != maxZ && y != minY && y != maxY"  is complex.
Magic Number,MiNET.BuilderBase,BuilderBasePlugin,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\BuilderBasePlugin.cs,OnEnable,The following statement contains a magic number: var tickTimer = new HighPrecisionTimer(50' LevelTick);
Magic Number,MiNET.BuilderBase,BuilderBasePlugin,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\BuilderBasePlugin.cs,SetInventory,The following statement contains a magic number: player.Inventory.Slots[idx++] = new BrushTool {BrushType = 0' Radius = 5' Mask = new Mask(player.Level' new List<Block> {new Air()}' true)};
Magic Number,MiNET.BuilderBase,BuilderBasePlugin,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\BuilderBasePlugin.cs,SetInventory,The following statement contains a magic number: player.Inventory.Slots[idx++] = new BrushTool {BrushType = 2' Radius = 5};
Magic Number,MiNET.BuilderBase,BuilderBasePlugin,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\BuilderBasePlugin.cs,SetInventory,The following statement contains a magic number: player.Inventory.Slots[idx++] = new BrushTool {BrushType = 2' Radius = 5};
Magic Number,MiNET.BuilderBase,BuilderBasePlugin,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\BuilderBasePlugin.cs,SetInventory,The following statement contains a magic number: player.Inventory.Slots[idx++] = new BrushTool {BrushType = 3' Radius = 5};
Magic Number,MiNET.BuilderBase,BuilderBasePlugin,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\BuilderBasePlugin.cs,SetInventory,The following statement contains a magic number: player.Inventory.Slots[idx++] = new BrushTool {BrushType = 3' Radius = 5};
Magic Number,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,GetBlockInLineOfSight,The following statement contains a magic number: Vector3 origin = knownPosition + new Vector3(0' 1.62f' 0);
Magic Number,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,GetBlockInLineOfSight,The following statement contains a magic number: velocity2 = Vector3.Normalize(velocity2)/2;
Magic Number,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,GetBlockInLineOfSight,The following statement contains a magic number: !limitHeight && coord.Y >= 255
Magic Number,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,GetBlockInLineOfSight,The following statement contains a magic number: bool lookingDownFromHeaven = (origin.Y > coord.Y && coord.Y > 255);
Magic Number,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,GetBlockInLineOfSight,The following statement contains a magic number: collided || lookingUpAtHeaven && coord.Y > 150
Magic Number,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,GetBlockInLineOfSight,The following statement contains a magic number: i < Math.Ceiling(distance)*2
Magic Number,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,GetDirectionVector,The following statement contains a magic number: switch (playerDirection)  				{  					case 1:  						dir = SelectionDirection.West;  						break;  					case 2:  						dir = SelectionDirection.North;  						break;  					case 3:  						dir = SelectionDirection.East;  						break;  					case 0:  						dir = SelectionDirection.South;  						break;  					default:  						throw new ArgumentOutOfRangeException();  				}
Magic Number,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,GetDirectionVector,The following statement contains a magic number: switch (playerDirection)  				{  					case 1:  						dir = SelectionDirection.West;  						break;  					case 2:  						dir = SelectionDirection.North;  						break;  					case 3:  						dir = SelectionDirection.East;  						break;  					case 0:  						dir = SelectionDirection.South;  						break;  					default:  						throw new ArgumentOutOfRangeException();  				}
Magic Number,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,Hypot,The following statement contains a magic number: sum += Math.Pow(d' 2);
Magic Number,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,MakeSphere,The following statement contains a magic number: radiusX += 0.5;
Magic Number,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,MakeSphere,The following statement contains a magic number: radiusY += 0.5;
Magic Number,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,MakeSphere,The following statement contains a magic number: radiusZ += 0.5;
Magic Number,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,MakeCylinder,The following statement contains a magic number: radiusX += 0.5;
Magic Number,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,MakeCylinder,The following statement contains a magic number: radiusZ += 0.5;
Magic Number,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,Naturalize,The following statement contains a magic number: depth = 4;
Magic Number,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,Naturalize,The following statement contains a magic number: switch (depth++)  						{  							case 0:  								SetBlock(new Grass() {Coordinates = coordinates});  								break;  							case 1:  							case 2:  							case 3:  								SetBlock(new Dirt() {Coordinates = coordinates});  								break;  							default:  								SetBlock(new Stone() {Coordinates = coordinates});  								break;  						}
Magic Number,MiNET.BuilderBase,EditHelper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\EditHelper.cs,Naturalize,The following statement contains a magic number: switch (depth++)  						{  							case 0:  								SetBlock(new Grass() {Coordinates = coordinates});  								break;  							case 1:  							case 2:  							case 3:  								SetBlock(new Dirt() {Coordinates = coordinates});  								break;  							default:  								SetBlock(new Stone() {Coordinates = coordinates});  								break;  						}
Magic Number,MiNET.BuilderBase,RegionSelector,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\RegionSelector.cs,DisplaySelection,The following statement contains a magic number: var numberOfParticles = box.Height*box.Width*2 + box.Height*box.Depth*2;
Magic Number,MiNET.BuilderBase,RegionSelector,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\RegionSelector.cs,DisplaySelection,The following statement contains a magic number: var numberOfParticles = box.Height*box.Width*2 + box.Height*box.Depth*2;
Magic Number,MiNET.BuilderBase,RegionSelector,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\RegionSelector.cs,DisplaySelection,The following statement contains a magic number: bool isBig = numberOfParticles > 500;
Magic Number,MiNET.BuilderBase,RegionSelector,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\RegionSelector.cs,DisplaySelection,The following statement contains a magic number: var maxY = Math.Min(255' Math.Max(box.Min.Y' box.Max.Y)) + 1;
Magic Number,MiNET.BuilderBase,RegionSelector,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\RegionSelector.cs,DisplaySelection,The following statement contains a magic number: particleEvent.eventId = (short)(0x4000 | 10);
Magic Number,MiNET.BuilderBase,RegionSelector,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\RegionSelector.cs,DisplaySelection,The following statement contains a magic number: particleEvent.eventId = (short)(0x4000 | 10);
Magic Number,MiNET.BuilderBase,RegionSelector,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\RegionSelector.cs,GetCenter,The following statement contains a magic number: return min + ((max - min)/2f);
Magic Number,MiNET.BuilderBase.Commands,BrushCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\BrushCommands.cs,BrushFill,The following statement contains a magic number: brush.BrushType = 3;
Magic Number,MiNET.BuilderBase.Commands,BrushCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\BrushCommands.cs,BrushMelt,The following statement contains a magic number: brush.BrushType = 2;
Magic Number,MiNET.BuilderBase.Commands,ClipboardCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\ClipboardCommands.cs,Rotate,The following statement contains a magic number: rotate *= Matrix4x4.CreateRotationY((float) (rotY*Math.PI/180d));
Magic Number,MiNET.BuilderBase.Commands,ClipboardCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\ClipboardCommands.cs,Rotate,The following statement contains a magic number: rotate *= Matrix4x4.CreateRotationX((float) (rotX*Math.PI/180d));
Magic Number,MiNET.BuilderBase.Commands,ClipboardCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\ClipboardCommands.cs,Rotate,The following statement contains a magic number: rotate *= Matrix4x4.CreateRotationZ((float) (rotZ*Math.PI/180d));
Magic Number,MiNET.BuilderBase.Commands,ClipboardCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\ClipboardCommands.cs,Flip,The following statement contains a magic number: rotate *= Matrix4x4.CreateScale(dir*-2 + BlockCoordinates.One);
Magic Number,MiNET.BuilderBase.Commands,MiscCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\MiscCommands.cs,Text,The following statement contains a magic number: color.A == 255
Magic Number,MiNET.BuilderBase.Commands,MiscCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\MiscCommands.cs,Speed,The following statement contains a magic number: player.MovementSpeed = speed/10f;
Magic Number,MiNET.BuilderBase.Commands,SchematicsCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SchematicsCommands.cs,Load,The following statement contains a magic number: blockId = 41;
Magic Number,MiNET.BuilderBase.Commands,SchematicsCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SchematicsCommands.cs,Load,The following statement contains a magic number: blockId > 255
Magic Number,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Chunk,The following statement contains a magic number: ChunkCoordinates chunk = new ChunkCoordinates(blockCoordinates.X >> 4' blockCoordinates.Z >> 4);
Magic Number,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Chunk,The following statement contains a magic number: ChunkCoordinates chunk = new ChunkCoordinates(blockCoordinates.X >> 4' blockCoordinates.Z >> 4);
Magic Number,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Chunk,The following statement contains a magic number: selector.Select(new BlockCoordinates(chunk.X << 4' 0' chunk.Z << 4)' new BlockCoordinates(16 + (chunk.X << 4)' 255' 16 + (chunk.Z << 4)));
Magic Number,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Chunk,The following statement contains a magic number: selector.Select(new BlockCoordinates(chunk.X << 4' 0' chunk.Z << 4)' new BlockCoordinates(16 + (chunk.X << 4)' 255' 16 + (chunk.Z << 4)));
Magic Number,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Chunk,The following statement contains a magic number: selector.Select(new BlockCoordinates(chunk.X << 4' 0' chunk.Z << 4)' new BlockCoordinates(16 + (chunk.X << 4)' 255' 16 + (chunk.Z << 4)));
Magic Number,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Chunk,The following statement contains a magic number: selector.Select(new BlockCoordinates(chunk.X << 4' 0' chunk.Z << 4)' new BlockCoordinates(16 + (chunk.X << 4)' 255' 16 + (chunk.Z << 4)));
Magic Number,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Chunk,The following statement contains a magic number: selector.Select(new BlockCoordinates(chunk.X << 4' 0' chunk.Z << 4)' new BlockCoordinates(16 + (chunk.X << 4)' 255' 16 + (chunk.Z << 4)));
Magic Number,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Chunk,The following statement contains a magic number: selector.Select(new BlockCoordinates(chunk.X << 4' 0' chunk.Z << 4)' new BlockCoordinates(16 + (chunk.X << 4)' 255' 16 + (chunk.Z << 4)));
Magic Number,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Chunk,The following statement contains a magic number: selector.Select(new BlockCoordinates(chunk.X << 4' 0' chunk.Z << 4)' new BlockCoordinates(16 + (chunk.X << 4)' 255' 16 + (chunk.Z << 4)));
Magic Number,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Expand,The following statement contains a magic number: selector.Select(new BlockCoordinates(selector.Position1.X' 0' selector.Position1.Z)' new BlockCoordinates(selector.Position2.X' 255' selector.Position2.Z));
Magic Number,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Expand,The following statement contains a magic number: switch (playerDirection)  				{  					case 1:  						direction = SelectionDirection.West;  						break;  					case 2:  						direction = SelectionDirection.North;  						break;  					case 3:  						direction = SelectionDirection.East;  						break;  					case 0:  						direction = SelectionDirection.South;  						break;  				}
Magic Number,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Expand,The following statement contains a magic number: switch (playerDirection)  				{  					case 1:  						direction = SelectionDirection.West;  						break;  					case 2:  						direction = SelectionDirection.North;  						break;  					case 3:  						direction = SelectionDirection.East;  						break;  					case 0:  						direction = SelectionDirection.South;  						break;  				}
Magic Number,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Contract,The following statement contains a magic number: switch (playerDirection)  				{  					case 1:  						direction = SelectionDirection.West;  						break;  					case 2:  						direction = SelectionDirection.North;  						break;  					case 3:  						direction = SelectionDirection.East;  						break;  					case 0:  						direction = SelectionDirection.South;  						break;  				}
Magic Number,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Contract,The following statement contains a magic number: switch (playerDirection)  				{  					case 1:  						direction = SelectionDirection.West;  						break;  					case 2:  						direction = SelectionDirection.North;  						break;  					case 3:  						direction = SelectionDirection.East;  						break;  					case 0:  						direction = SelectionDirection.South;  						break;  				}
Magic Number,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Distribution,The following statement contains a magic number: double pct = ((float) kvp.Value)/selection.Length*100f;
Magic Number,MiNET.BuilderBase.Masks,Mask,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Masks\Mask.cs,Deserialize,The following statement contains a magic number: blockInfos.Length == 2
Magic Number,MiNET.BuilderBase.Patterns,Pattern,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Patterns\Pattern.cs,Deserialize,The following statement contains a magic number: int weight = 100;
Magic Number,MiNET.BuilderBase.Patterns,Pattern,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Patterns\Pattern.cs,Deserialize,The following statement contains a magic number: weight = 100;
Magic Number,MiNET.BuilderBase.Patterns,Pattern,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Patterns\Pattern.cs,Deserialize,The following statement contains a magic number: weightedIn.Length == 2
Magic Number,MiNET.BuilderBase.Patterns,Pattern,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Patterns\Pattern.cs,Deserialize,The following statement contains a magic number: blockInfos.Length == 2
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,UpdateExtraData,The following statement contains a magic number: switch (BrushType)  			{  				case 0:  					s = "Sphere";  					break;  				case 1:  					s = "Cylinder";  					break;  				case 2:  					s = "Melt";  					break;  				case 3:  					s = "Fill";  					break;  			}
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,UpdateExtraData,The following statement contains a magic number: switch (BrushType)  			{  				case 0:  					s = "Sphere";  					break;  				case 1:  					s = "Cylinder";  					break;  				case 2:  					s = "Melt";  					break;  				case 3:  					s = "Fill";  					break;  			}
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,UseItem,The following statement contains a magic number: switch (BrushType)  				{  					case 0:  						editSession.MakeSphere(target.Coordinates' Pattern' Radius' Radius' Radius' Filled);  						break;  					case 1:  						editSession.MakeCylinder(target.Coordinates' Pattern' Radius' Radius' Height' Filled);  						break;  					case 2:    						// public ErosionParameters(final int erosionFaces' final int erosionRecursion' final int fillFaces' final int fillRecursion) {  						//MELT(new ErosionParameters(2' 1' 5' 1))'  						//FILL(new ErosionParameters(5' 1' 2' 1))'  						//SMOOTH(new ErosionParameters(3' 1' 3' 1))'  						//LIFT(new ErosionParameters(6' 0' 1' 1))'  						//FLOATCLEAN(new ErosionParameters(6' 1' 6' 1));    						Erosion(editSession' Radius' 2' 1' 5' 1' world' target.Coordinates); // melt  						break;  					case 3:    						Erosion(editSession' Radius' 5' 1' 2' 1' world' target.Coordinates); // fill  						break;  				}
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,UseItem,The following statement contains a magic number: switch (BrushType)  				{  					case 0:  						editSession.MakeSphere(target.Coordinates' Pattern' Radius' Radius' Radius' Filled);  						break;  					case 1:  						editSession.MakeCylinder(target.Coordinates' Pattern' Radius' Radius' Height' Filled);  						break;  					case 2:    						// public ErosionParameters(final int erosionFaces' final int erosionRecursion' final int fillFaces' final int fillRecursion) {  						//MELT(new ErosionParameters(2' 1' 5' 1))'  						//FILL(new ErosionParameters(5' 1' 2' 1))'  						//SMOOTH(new ErosionParameters(3' 1' 3' 1))'  						//LIFT(new ErosionParameters(6' 0' 1' 1))'  						//FLOATCLEAN(new ErosionParameters(6' 1' 6' 1));    						Erosion(editSession' Radius' 2' 1' 5' 1' world' target.Coordinates); // melt  						break;  					case 3:    						Erosion(editSession' Radius' 5' 1' 2' 1' world' target.Coordinates); // fill  						break;  				}
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,UseItem,The following statement contains a magic number: switch (BrushType)  				{  					case 0:  						editSession.MakeSphere(target.Coordinates' Pattern' Radius' Radius' Radius' Filled);  						break;  					case 1:  						editSession.MakeCylinder(target.Coordinates' Pattern' Radius' Radius' Height' Filled);  						break;  					case 2:    						// public ErosionParameters(final int erosionFaces' final int erosionRecursion' final int fillFaces' final int fillRecursion) {  						//MELT(new ErosionParameters(2' 1' 5' 1))'  						//FILL(new ErosionParameters(5' 1' 2' 1))'  						//SMOOTH(new ErosionParameters(3' 1' 3' 1))'  						//LIFT(new ErosionParameters(6' 0' 1' 1))'  						//FLOATCLEAN(new ErosionParameters(6' 1' 6' 1));    						Erosion(editSession' Radius' 2' 1' 5' 1' world' target.Coordinates); // melt  						break;  					case 3:    						Erosion(editSession' Radius' 5' 1' 2' 1' world' target.Coordinates); // fill  						break;  				}
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,UseItem,The following statement contains a magic number: switch (BrushType)  				{  					case 0:  						editSession.MakeSphere(target.Coordinates' Pattern' Radius' Radius' Radius' Filled);  						break;  					case 1:  						editSession.MakeCylinder(target.Coordinates' Pattern' Radius' Radius' Height' Filled);  						break;  					case 2:    						// public ErosionParameters(final int erosionFaces' final int erosionRecursion' final int fillFaces' final int fillRecursion) {  						//MELT(new ErosionParameters(2' 1' 5' 1))'  						//FILL(new ErosionParameters(5' 1' 2' 1))'  						//SMOOTH(new ErosionParameters(3' 1' 3' 1))'  						//LIFT(new ErosionParameters(6' 0' 1' 1))'  						//FLOATCLEAN(new ErosionParameters(6' 1' 6' 1));    						Erosion(editSession' Radius' 2' 1' 5' 1' world' target.Coordinates); // melt  						break;  					case 3:    						Erosion(editSession' Radius' 5' 1' 2' 1' world' target.Coordinates); // fill  						break;  				}
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,UseItem,The following statement contains a magic number: switch (BrushType)  				{  					case 0:  						editSession.MakeSphere(target.Coordinates' Pattern' Radius' Radius' Radius' Filled);  						break;  					case 1:  						editSession.MakeCylinder(target.Coordinates' Pattern' Radius' Radius' Height' Filled);  						break;  					case 2:    						// public ErosionParameters(final int erosionFaces' final int erosionRecursion' final int fillFaces' final int fillRecursion) {  						//MELT(new ErosionParameters(2' 1' 5' 1))'  						//FILL(new ErosionParameters(5' 1' 2' 1))'  						//SMOOTH(new ErosionParameters(3' 1' 3' 1))'  						//LIFT(new ErosionParameters(6' 0' 1' 1))'  						//FLOATCLEAN(new ErosionParameters(6' 1' 6' 1));    						Erosion(editSession' Radius' 2' 1' 5' 1' world' target.Coordinates); // melt  						break;  					case 3:    						Erosion(editSession' Radius' 5' 1' 2' 1' world' target.Coordinates); // fill  						break;  				}
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,UseItem,The following statement contains a magic number: switch (BrushType)  				{  					case 0:  						editSession.MakeSphere(target.Coordinates' Pattern' Radius' Radius' Radius' Filled);  						break;  					case 1:  						editSession.MakeCylinder(target.Coordinates' Pattern' Radius' Radius' Height' Filled);  						break;  					case 2:    						// public ErosionParameters(final int erosionFaces' final int erosionRecursion' final int fillFaces' final int fillRecursion) {  						//MELT(new ErosionParameters(2' 1' 5' 1))'  						//FILL(new ErosionParameters(5' 1' 2' 1))'  						//SMOOTH(new ErosionParameters(3' 1' 3' 1))'  						//LIFT(new ErosionParameters(6' 0' 1' 1))'  						//FLOATCLEAN(new ErosionParameters(6' 1' 6' 1));    						Erosion(editSession' Radius' 2' 1' 5' 1' world' target.Coordinates); // melt  						break;  					case 3:    						Erosion(editSession' Radius' 5' 1' 2' 1' world' target.Coordinates); // fill  						break;  				}
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,Animate,The following statement contains a magic number: switch (BrushType)  				{  					case 0:  						editSession.MakeSphere(target.Coordinates' Pattern' Radius' Radius' Radius' Filled);  						break;  					case 1:  						editSession.MakeCylinder(target.Coordinates' Pattern' Radius' Radius' Height' Filled);  						break;  					case 3:    						// public ErosionParameters(final int erosionFaces' final int erosionRecursion' final int fillFaces' final int fillRecursion) {  						//MELT(new ErosionParameters(2' 1' 5' 1))'  						//FILL(new ErosionParameters(5' 1' 2' 1))'  						//SMOOTH(new ErosionParameters(3' 1' 3' 1))'  						//LIFT(new ErosionParameters(6' 0' 1' 1))'  						//FLOATCLEAN(new ErosionParameters(6' 1' 6' 1));    						Erosion(editSession' Radius' 2' 1' 5' 1' world' target.Coordinates); // melt  						break;  					case 2:    						Erosion(editSession' Radius' 5' 1' 2' 1' world' target.Coordinates); // fill  						break;  				}
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,Animate,The following statement contains a magic number: switch (BrushType)  				{  					case 0:  						editSession.MakeSphere(target.Coordinates' Pattern' Radius' Radius' Radius' Filled);  						break;  					case 1:  						editSession.MakeCylinder(target.Coordinates' Pattern' Radius' Radius' Height' Filled);  						break;  					case 3:    						// public ErosionParameters(final int erosionFaces' final int erosionRecursion' final int fillFaces' final int fillRecursion) {  						//MELT(new ErosionParameters(2' 1' 5' 1))'  						//FILL(new ErosionParameters(5' 1' 2' 1))'  						//SMOOTH(new ErosionParameters(3' 1' 3' 1))'  						//LIFT(new ErosionParameters(6' 0' 1' 1))'  						//FLOATCLEAN(new ErosionParameters(6' 1' 6' 1));    						Erosion(editSession' Radius' 2' 1' 5' 1' world' target.Coordinates); // melt  						break;  					case 2:    						Erosion(editSession' Radius' 5' 1' 2' 1' world' target.Coordinates); // fill  						break;  				}
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,Animate,The following statement contains a magic number: switch (BrushType)  				{  					case 0:  						editSession.MakeSphere(target.Coordinates' Pattern' Radius' Radius' Radius' Filled);  						break;  					case 1:  						editSession.MakeCylinder(target.Coordinates' Pattern' Radius' Radius' Height' Filled);  						break;  					case 3:    						// public ErosionParameters(final int erosionFaces' final int erosionRecursion' final int fillFaces' final int fillRecursion) {  						//MELT(new ErosionParameters(2' 1' 5' 1))'  						//FILL(new ErosionParameters(5' 1' 2' 1))'  						//SMOOTH(new ErosionParameters(3' 1' 3' 1))'  						//LIFT(new ErosionParameters(6' 0' 1' 1))'  						//FLOATCLEAN(new ErosionParameters(6' 1' 6' 1));    						Erosion(editSession' Radius' 2' 1' 5' 1' world' target.Coordinates); // melt  						break;  					case 2:    						Erosion(editSession' Radius' 5' 1' 2' 1' world' target.Coordinates); // fill  						break;  				}
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,Animate,The following statement contains a magic number: switch (BrushType)  				{  					case 0:  						editSession.MakeSphere(target.Coordinates' Pattern' Radius' Radius' Radius' Filled);  						break;  					case 1:  						editSession.MakeCylinder(target.Coordinates' Pattern' Radius' Radius' Height' Filled);  						break;  					case 3:    						// public ErosionParameters(final int erosionFaces' final int erosionRecursion' final int fillFaces' final int fillRecursion) {  						//MELT(new ErosionParameters(2' 1' 5' 1))'  						//FILL(new ErosionParameters(5' 1' 2' 1))'  						//SMOOTH(new ErosionParameters(3' 1' 3' 1))'  						//LIFT(new ErosionParameters(6' 0' 1' 1))'  						//FLOATCLEAN(new ErosionParameters(6' 1' 6' 1));    						Erosion(editSession' Radius' 2' 1' 5' 1' world' target.Coordinates); // melt  						break;  					case 2:    						Erosion(editSession' Radius' 5' 1' 2' 1' world' target.Coordinates); // fill  						break;  				}
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,Animate,The following statement contains a magic number: switch (BrushType)  				{  					case 0:  						editSession.MakeSphere(target.Coordinates' Pattern' Radius' Radius' Radius' Filled);  						break;  					case 1:  						editSession.MakeCylinder(target.Coordinates' Pattern' Radius' Radius' Height' Filled);  						break;  					case 3:    						// public ErosionParameters(final int erosionFaces' final int erosionRecursion' final int fillFaces' final int fillRecursion) {  						//MELT(new ErosionParameters(2' 1' 5' 1))'  						//FILL(new ErosionParameters(5' 1' 2' 1))'  						//SMOOTH(new ErosionParameters(3' 1' 3' 1))'  						//LIFT(new ErosionParameters(6' 0' 1' 1))'  						//FLOATCLEAN(new ErosionParameters(6' 1' 6' 1));    						Erosion(editSession' Radius' 2' 1' 5' 1' world' target.Coordinates); // melt  						break;  					case 2:    						Erosion(editSession' Radius' 5' 1' 2' 1' world' target.Coordinates); // fill  						break;  				}
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,Animate,The following statement contains a magic number: switch (BrushType)  				{  					case 0:  						editSession.MakeSphere(target.Coordinates' Pattern' Radius' Radius' Radius' Filled);  						break;  					case 1:  						editSession.MakeCylinder(target.Coordinates' Pattern' Radius' Radius' Height' Filled);  						break;  					case 3:    						// public ErosionParameters(final int erosionFaces' final int erosionRecursion' final int fillFaces' final int fillRecursion) {  						//MELT(new ErosionParameters(2' 1' 5' 1))'  						//FILL(new ErosionParameters(5' 1' 2' 1))'  						//SMOOTH(new ErosionParameters(3' 1' 3' 1))'  						//LIFT(new ErosionParameters(6' 0' 1' 1))'  						//FLOATCLEAN(new ErosionParameters(6' 1' 6' 1));    						Erosion(editSession' Radius' 2' 1' 5' 1' world' target.Coordinates); // melt  						break;  					case 2:    						Erosion(editSession' Radius' 5' 1' 2' 1' world' target.Coordinates); // fill  						break;  				}
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,Erosion,The following statement contains a magic number: ErosionIteration(brushSize' erodeFaces' swap%2 == 0 ? buffer1 : buffer2' swap%2 == 1 ? buffer1 : buffer2);
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,Erosion,The following statement contains a magic number: ErosionIteration(brushSize' erodeFaces' swap%2 == 0 ? buffer1 : buffer2' swap%2 == 1 ? buffer1 : buffer2);
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,Erosion,The following statement contains a magic number: FillIteration(brushSize' fillFaces' swap%2 == 0 ? buffer1 : buffer2' swap%2 == 1 ? buffer1 : buffer2);
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,Erosion,The following statement contains a magic number: FillIteration(brushSize' fillFaces' swap%2 == 0 ? buffer1 : buffer2' swap%2 == 1 ? buffer1 : buffer2);
Magic Number,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,Erosion,The following statement contains a magic number: BlockBuffer finalBuffer = swap%2 == 0 ? buffer1 : buffer2;
Magic Number,MiNET.BuilderBase.Tools,DistanceWand,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\DistanceWand.cs,UseItem,The following statement contains a magic number: target.Coordinates.DistanceTo((BlockCoordinates) player.KnownPosition) < 6
Magic Number,MiNET.BuilderBase.Tools,DistanceWand,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\DistanceWand.cs,Animate,The following statement contains a magic number: target.Coordinates.DistanceTo((BlockCoordinates) player.KnownPosition) < 6
Magic Number,MiNET.BuilderBase.Tools,DistanceWand,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\DistanceWand.cs,SetPosition1,The following statement contains a magic number: pos.Y = (int) Math.Floor(player.KnownPosition.Y - 1.62f);
Magic Number,MiNET.BuilderBase.Tools,DistanceWand,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\DistanceWand.cs,SetPosition1,The following statement contains a magic number: selector.Position1.DistanceTo(pos) < 0.01
Magic Number,MiNET.BuilderBase.Tools,DistanceWand,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\DistanceWand.cs,SetPosition2,The following statement contains a magic number: pos.Y = (int) Math.Floor(player.KnownPosition.Y - 1.62f);
Magic Number,MiNET.BuilderBase.Tools,DistanceWand,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\DistanceWand.cs,SetPosition2,The following statement contains a magic number: selector.Position2.DistanceTo(pos) < 0.01
Magic Number,MiNET.BuilderBase.Tools,TeleportTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\TeleportTool.cs,Teleport,The following statement contains a magic number: var newPosition = new PlayerLocation(pos.X' stayOnY ? known.Y - 1.62f : pos.Y + 1.62f' pos.Z' known.HeadYaw' known.Yaw' known.Pitch);
Magic Number,MiNET.BuilderBase.Tools,TeleportTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\TeleportTool.cs,Teleport,The following statement contains a magic number: var newPosition = new PlayerLocation(pos.X' stayOnY ? known.Y - 1.62f : pos.Y + 1.62f' pos.Z' known.HeadYaw' known.Yaw' known.Pitch);
Missing Default,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Expand,The following switch statement is missing a default case: switch (playerDirection)  				{  					case 1:  						direction = SelectionDirection.West;  						break;  					case 2:  						direction = SelectionDirection.North;  						break;  					case 3:  						direction = SelectionDirection.East;  						break;  					case 0:  						direction = SelectionDirection.South;  						break;  				}
Missing Default,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Expand,The following switch statement is missing a default case: switch (direction)  			{  				case SelectionDirection.Up:  					if (position1.Y > position2.Y)  					{  						selector.SelectPrimary(position1 + (Level.Up*amount));  						if (reverseAmount != 0) selector.SelectSecondary(position2 + (Level.Down*reverseAmount));  					}  					else  					{  						selector.SelectSecondary(position2 + (Level.Up*amount));  						if (reverseAmount != 0) selector.SelectPrimary(position1 + (Level.Down*reverseAmount));  					}  					break;  				case SelectionDirection.Down:  					if (position1.Y < position2.Y)  					{  						selector.SelectPrimary(position1 + (Level.Down*amount));  						if (reverseAmount != 0) selector.SelectSecondary(position2 + (Level.Up*reverseAmount));  					}  					else  					{  						selector.SelectSecondary(position2 + (Level.Down*amount));  						if (reverseAmount != 0) selector.SelectPrimary(position1 + (Level.Up*reverseAmount));  					}  					break;  				case SelectionDirection.West:  					if (position1.Z > position2.Z)  					{  						selector.SelectPrimary(position1 + (Level.South*amount));  						if (reverseAmount != 0) selector.SelectSecondary(position2 + (Level.North*reverseAmount));  					}  					else  					{  						selector.SelectSecondary(position2 + (Level.South*amount));  						if (reverseAmount != 0) selector.SelectPrimary(position1 + (Level.North*reverseAmount));  					}  					break;  				case SelectionDirection.East:  					if (position1.Z < position2.Z)  					{  						selector.SelectPrimary(position1 + (Level.North*amount));  						if (reverseAmount != 0) selector.SelectSecondary(position2 + (Level.South*reverseAmount));  					}  					else  					{  						selector.SelectSecondary(position2 + (Level.North*amount));  						if (reverseAmount != 0) selector.SelectPrimary(position1 + (Level.South*reverseAmount));  					}  					break;  				case SelectionDirection.South:  					if (position1.X > position2.X)  					{  						selector.SelectPrimary(position1 + (Level.East*amount));  						if (reverseAmount != 0) selector.SelectSecondary(position2 + (Level.West*reverseAmount));  					}  					else  					{  						selector.SelectSecondary(position2 + (Level.East*amount));  						if (reverseAmount != 0) selector.SelectPrimary(position1 + (Level.West*reverseAmount));  					}  					break;  				case SelectionDirection.North:  					if (position1.X < position2.X)  					{  						selector.SelectPrimary(position1 + (Level.West*amount));  						if (reverseAmount != 0) selector.SelectSecondary(position2 + (Level.East*reverseAmount));  					}  					else  					{  						selector.SelectSecondary(position2 + (Level.West*amount));  						if (reverseAmount != 0) selector.SelectPrimary(position1 + (Level.East*reverseAmount));  					}  					break;  				case SelectionDirection.Vertical:  					Expand(player' "vertical");  					break;  			}
Missing Default,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Contract,The following switch statement is missing a default case: switch (playerDirection)  				{  					case 1:  						direction = SelectionDirection.West;  						break;  					case 2:  						direction = SelectionDirection.North;  						break;  					case 3:  						direction = SelectionDirection.East;  						break;  					case 0:  						direction = SelectionDirection.South;  						break;  				}
Missing Default,MiNET.BuilderBase.Commands,SelectionCommands,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Commands\SelectionCommands.cs,Contract,The following switch statement is missing a default case: switch (direction)  			{  				case SelectionDirection.Up:  					if (position1.Y < position2.Y)  					{  						selector.SelectPrimary(position1 + (Level.Up*amount));  						if (reverseAmount != 0) selector.SelectSecondary(position2 + (Level.Down*amount));  					}  					else  					{  						selector.SelectSecondary(position2 + (Level.Up*amount));  						if (reverseAmount != 0) selector.SelectPrimary(position1 + (Level.Down*amount));  					}  					break;  				case SelectionDirection.Down:  					if (position1.Y > position2.Y)  					{  						selector.SelectPrimary(position1 + (Level.Down*amount));  						if (reverseAmount != 0) selector.SelectSecondary(position2 + (Level.Up*amount));  					}  					else  					{  						selector.SelectSecondary(position2 + (Level.Down*amount));  						if (reverseAmount != 0) selector.SelectPrimary(position1 + (Level.Up*amount));  					}  					break;  				case SelectionDirection.West:  					if (position1.Z < position2.Z)  					{  						selector.SelectPrimary(position1 + (Level.South*amount));  						if (reverseAmount != 0) selector.SelectSecondary(position2 + (Level.North*amount));  					}  					else  					{  						selector.SelectSecondary(position2 + (Level.South*amount));  						if (reverseAmount != 0) selector.SelectPrimary(position1 + (Level.North*amount));  					}  					break;  				case SelectionDirection.East:  					if (position1.Z > position2.Z)  					{  						selector.SelectPrimary(position1 + (Level.North*amount));  						if (reverseAmount != 0) selector.SelectSecondary(position2 + (Level.South*amount));  					}  					else  					{  						selector.SelectSecondary(position2 + (Level.North*amount));  						if (reverseAmount != 0) selector.SelectPrimary(position1 + (Level.South*amount));  					}  					break;  				case SelectionDirection.South:  					if (position1.X < position2.X)  					{  						selector.SelectPrimary(position1 + (Level.East*amount));  						if (reverseAmount != 0) selector.SelectSecondary(position2 + (Level.West*amount));  					}  					else  					{  						selector.SelectSecondary(position2 + (Level.East*amount));  						if (reverseAmount != 0) selector.SelectPrimary(position1 + (Level.West*amount));  					}  					break;  				case SelectionDirection.North:  					if (position1.X > position2.X)  					{  						selector.SelectPrimary(position1 + (Level.West*amount));  						if (reverseAmount != 0) selector.SelectSecondary(position2 + (Level.East*amount));  					}  					else  					{  						selector.SelectSecondary(position2 + (Level.West*amount));  						if (reverseAmount != 0) selector.SelectPrimary(position1 + (Level.East*amount));  					}  					break;  			}
Missing Default,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,UpdateExtraData,The following switch statement is missing a default case: switch (BrushType)  			{  				case 0:  					s = "Sphere";  					break;  				case 1:  					s = "Cylinder";  					break;  				case 2:  					s = "Melt";  					break;  				case 3:  					s = "Fill";  					break;  			}
Missing Default,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,UseItem,The following switch statement is missing a default case: switch (BrushType)  				{  					case 0:  						editSession.MakeSphere(target.Coordinates' Pattern' Radius' Radius' Radius' Filled);  						break;  					case 1:  						editSession.MakeCylinder(target.Coordinates' Pattern' Radius' Radius' Height' Filled);  						break;  					case 2:    						// public ErosionParameters(final int erosionFaces' final int erosionRecursion' final int fillFaces' final int fillRecursion) {  						//MELT(new ErosionParameters(2' 1' 5' 1))'  						//FILL(new ErosionParameters(5' 1' 2' 1))'  						//SMOOTH(new ErosionParameters(3' 1' 3' 1))'  						//LIFT(new ErosionParameters(6' 0' 1' 1))'  						//FLOATCLEAN(new ErosionParameters(6' 1' 6' 1));    						Erosion(editSession' Radius' 2' 1' 5' 1' world' target.Coordinates); // melt  						break;  					case 3:    						Erosion(editSession' Radius' 5' 1' 2' 1' world' target.Coordinates); // fill  						break;  				}
Missing Default,MiNET.BuilderBase.Tools,BrushTool,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.BuilderBase\Tools\BrushTool.cs,Animate,The following switch statement is missing a default case: switch (BrushType)  				{  					case 0:  						editSession.MakeSphere(target.Coordinates' Pattern' Radius' Radius' Radius' Filled);  						break;  					case 1:  						editSession.MakeCylinder(target.Coordinates' Pattern' Radius' Radius' Height' Filled);  						break;  					case 3:    						// public ErosionParameters(final int erosionFaces' final int erosionRecursion' final int fillFaces' final int fillRecursion) {  						//MELT(new ErosionParameters(2' 1' 5' 1))'  						//FILL(new ErosionParameters(5' 1' 2' 1))'  						//SMOOTH(new ErosionParameters(3' 1' 3' 1))'  						//LIFT(new ErosionParameters(6' 0' 1' 1))'  						//FLOATCLEAN(new ErosionParameters(6' 1' 6' 1));    						Erosion(editSession' Radius' 2' 1' 5' 1' world' target.Coordinates); // melt  						break;  					case 2:    						Erosion(editSession' Radius' 5' 1' 2' 1' world' target.Coordinates); // fill  						break;  				}
