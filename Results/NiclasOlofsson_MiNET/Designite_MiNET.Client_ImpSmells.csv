Implementation smell,Namespace,Class,File,Method,Description
Long Method,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeStartGame,The method has 101 lines of code.
Long Method,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeAddEntity,The method has 116 lines of code.
Long Method,MiNET.Client,ObjectDumper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ObjectDumper.cs,WriteObject,The method has 101 lines of code.
Complex Method,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeAddEntity,Cyclomatic complexity of the method is 9
Complex Method,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeCraftingData,Cyclomatic complexity of the method is 11
Complex Method,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,DecocedChunkColumn,Cyclomatic complexity of the method is 13
Complex Method,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,CreateNbtFromChunkColumn,Cyclomatic complexity of the method is 13
Complex Method,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,ProcessMessage,Cyclomatic complexity of the method is 14
Complex Method,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,ProcessQueue,Cyclomatic complexity of the method is 11
Complex Method,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,HandlePacket,Cyclomatic complexity of the method is 9
Complex Method,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,MetadataToCode,Cyclomatic complexity of the method is 11
Complex Method,MiNET.Client,ObjectDumper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ObjectDumper.cs,WriteObject,Cyclomatic complexity of the method is 18
Long Identifier,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,,The length of the parameter FirstEncryptedPacketWaitHandle is 30.
Long Statement,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeStartGame,The length of the statement  "			Client.CurrentLocation = new PlayerLocation(Client.SpawnPoint' message.unknown1.X' message.unknown1.X' message.unknown1.Y); " is 123.
Long Statement,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeStartGame,The length of the statement  "				foreach (IGrouping<string' KeyValuePair<int' Blockstate>> blockstate in message.blockstates.OrderBy(kvp => kvp.Value.Name).ThenBy(kvp => kvp.Value.Data).GroupBy(kvp => kvp.Value.Name)) " is 184.
Long Statement,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeStartGame,The length of the statement  "							writer.WriteLine($"// runtime id: {enumerator.Current.Value.RuntimeId} 0x{enumerator.Current.Value.RuntimeId:X}' data: {enumerator.Current.Value.Data}"); " is 153.
Long Statement,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeSetEntityData,The length of the statement  "			Log.DebugFormat("McpeSetEntityData Entity ID: {0}' Metadata: {1}"' message.runtimeEntityId' Client.MetadataToCode(message.metadata)); " is 133.
Long Statement,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeCraftingData,The length of the statement  "					writer.WriteLine($"new ShapelessRecipe(new Item({shapelessRecipe.Result.Id}' {shapelessRecipe.Result.Metadata}' {shapelessRecipe.Result.Count})'"); " is 147.
Long Statement,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeCraftingData,The length of the statement  "					writer.WriteLine($"new ShapedRecipe({shapedRecipe.Width}' {shapedRecipe.Height}' new Item({shapedRecipe.Result.Id}' {shapedRecipe.Result.Metadata}' {shapedRecipe.Result.Count})'"); " is 180.
Long Statement,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeCraftingData,The length of the statement  "					writer.WriteLine($"new SmeltingRecipe(new Item({smeltingRecipe.Result.Id}' {smeltingRecipe.Result.Metadata}' {smeltingRecipe.Result.Count})' new Item({smeltingRecipe.Input.Id}' {smeltingRecipe.Input.Metadata})' {smeltingRecipe.Block})'"); " is 238.
Long Statement,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeLevelChunk,The length of the statement  "				Log.Debug($"Chunk X={message.chunkX}' Z={message.chunkZ}' size={message.chunkData.Length}' Count={Client._chunks.Count}"); " is 122.
Long Statement,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpePlayerList,The length of the statement  "				Log.Warn($"{playerRecord.GetType()} Player: {playerRecord.DisplayName}' {playerRecord.EntityId}' {playerRecord.ClientUuid}"); " is 125.
Long Statement,MiNET.Client,BotHelpers,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BotHelpers.cs,DoSendCommand,The length of the statement  "				////commandStep.commandInputJson = "{\n   \"tileName\" : \"dirt\"'\n   \"from\" : {\n      \"x\" : 0'\n      \"xrelative\" : false'\n      \"y\" : 10'\n      \"yrelative\" : false'\n      \"z\" : 0'\n      \"zrelative\" : false\n   }'\n   \"to\" : {\n      \"x\" : 10'\n      \"xrelative\" : false'\n      \"y\" : 10'\n      \"yrelative\" : false'\n      \"z\" : 10'\n      \"zrelative\" : false\n   }\n}\n"; " is 408.
Long Statement,MiNET.Client,BotHelpers,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BotHelpers.cs,DoSendCommand,The length of the statement  "				//commandStep.commandInputJson = "{\n   \"from\" : {\n      \"x\" : 0'\n      \"xrelative\" : false'\n      \"y\" : 10'\n      \"yrelative\" : false'\n      \"z\" : 0'\n      \"zrelative\" : false\n   }'\n   \"tileName\" : \"dirt\"'\n   \"to\" : {\n      \"x\" : 10'\n      \"xrelative\" : false'\n      \"y\" : 10'\n      \"yrelative\" : false'\n      \"z\" : 10'\n      \"zrelative\" : false\n   }\n}\n"; " is 406.
Long Statement,MiNET.Client,BotHelpers,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BotHelpers.cs,DoSendCommand,The length of the statement  "				////   "commandInputJson": "{\n   \"from\" : {\n      \"x\" : 0'\n      \"xrelative\" : false'\n      \"y\" : 10'\n      \"yrelative\" : false'\n      \"z\" : 0'\n      \"zrelative\" : false\n   }'\n   \"tileName\" : \"dirt\"'\n   \"to\" : {\n      \"x\" : 10'\n      \"xrelative\" : false'\n      \"y\" : 10'\n      \"yrelative\" : false'\n      \"z\" : 10'\n      \"zrelative\" : false\n   }\n}\n"' " is 400.
Long Statement,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,ProcessMessage,The length of the statement  "					//Log.Debug($"> Datagram #{header.datagramSequenceNumber}' {package._hasSplit}' {package._splitPacketId}' {package._reliability}' {package._reliableMessageNumber}' {package._sequencingIndex}' {package._orderingChannel}' {package._orderingIndex}"); " is 247.
Long Statement,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,ProcessQueue,The length of the statement  "						if (Log.IsDebugEnabled) Log.Warn($"{Username} - Wrong sequence. Expected {_lastSequenceNumber + 1}' but was {pair.Key}."); " is 122.
Long Statement,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,HandleSplitMessage,The length of the statement  "						Log.Debug($"Assembled split packet {newPacket._reliability} message #{newPacket._reliableMessageNumber}' Chan: #{newPacket._orderingChannel}' OrdIdx: #{newPacket._orderingIndex}"); " is 180.
Long Statement,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,HandlePacket,The length of the statement  "				if (Log.IsDebugEnabled) Log.Warn($"Unhandled packet 0x{message.Id:X2} {message.GetType().Name}\n{Packet.HexDump(message.Bytes)}"); " is 130.
Long Statement,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,SendLogin,The length of the statement  "			byte[] data = CryptoUtils.CompressJwtBytes(CryptoUtils.EncodeJwt(username' clientKey' IsEmulator)' CryptoUtils.EncodeSkinJwt(clientKey' username)' CompressionLevel.Fastest); " is 173.
Long Statement,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,InitiateEncryption,The length of the statement  "					secret = sha.ComputeHash(randomKeyToken.Concat(agreement.CalculateAgreement(remotePublicKey).ToByteArrayUnsigned()).ToArray()); " is 127.
Long Statement,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,WriteInventoryToFile,The length of the statement  "						writer.WriteLine($"new Item({slot.Id}' {slot.Metadata}' {slot.Count}){{ExtraData = new NbtCompound {{new NbtList(\"ench\") {{new NbtCompound {{new NbtShort(\"id\"' {id})' new NbtShort(\"lvl\"' {lvl}) }} }} }} }}'"); " is 215.
Long Statement,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,WriteInventoryToFile,The length of the statement  "							writer.WriteLine($"new Item({slot.Id}' {slot.Metadata}' {slot.Count}){{ExtraData = new NbtCompound {{ new NbtCompound(\"Fireworks\") {{ new NbtList(\"Explosions\") {{ new NbtCompound {{ new NbtByteArray(\"FireworkColor\"' new byte[]{{{fireworkColor[0]}}})' new NbtByteArray(\"FireworkFade\"' new byte[0])' new NbtByte(\"FireworkFlicker\"' {fireworkFlicker})' new NbtByte(\"FireworkTrail\"' {fireworkTrail})' new NbtByte(\"FireworkType\"' {fireworkType})  }} }}' new NbtByte(\"Flight\"' {flight}) }} }} }}'"); " is 508.
Long Statement,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,WriteInventoryToFile,The length of the statement  "							writer.WriteLine($"new Item({slot.Id}' {slot.Metadata}' {slot.Count}){{ExtraData = new NbtCompound {{new NbtCompound(\"Fireworks\") {{new NbtList(\"Explosions\"' NbtTagType.Compound)' new NbtByte(\"Flight\"' {flight}) }} }} }}'"); " is 230.
Long Statement,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,WriteInventoryToFile,The length of the statement  "			//var compound = new NbtCompound(string.Empty) { new NbtList("ench"' new NbtCompound()) {new NbtShort("id"' 0)'new NbtShort("lvl"' 0)'}' }; " is 139.
Long Statement,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,HandleBatch,The length of the statement  "							//if (!(package is McpeFullChunkData)) Log.Debug($"Batch: {package.GetType().Name} 0x{package.Id:x2} \n{Package.HexDump(internalBuffer)}"); " is 139.
Long Statement,MiNET.Client,Startup,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\Startup.cs,Main,The length of the statement  "			XmlConfigurator.Configure(logRepository' new FileInfo(Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)' "log4net.xml"))); " is 149.
Long Statement,MiNET.Client,Startup,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\Startup.cs,Main,The length of the statement  "			var client = new MiNetClient(new IPEndPoint(Dns.GetHostEntry("yodamine.com").AddressList[0]' 19132)' "TheGrey"' new DedicatedThreadPool(new DedicatedThreadPoolSettings(Environment.ProcessorCount))); " is 198.
Long Statement,MiNET.Client,Startup,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\Startup.cs,Main,The length of the statement  "			//var client = new MiNetClient(new IPEndPoint(IPAddress.Loopback' 19132)' "TheGrey"' new DedicatedThreadPool(new DedicatedThreadPoolSettings(Environment.ProcessorCount))); " is 171.
Long Statement,MiNET.Client,Startup,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\Startup.cs,Main,The length of the statement  "			Console.WriteLine($"... YEAH! FOUND SERVER! It's at {client.ServerEndpoint?.Address}' port {client.ServerEndpoint?.Port}"); " is 123.
Long Statement,MiNET.Client,Startup,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\Startup.cs,Main,The length of the statement  "				//.ContinueWith(t => BotHelpers.DoMoveTo(client)(t' new PlayerLocation(client.CurrentLocation.ToVector3() - new Vector3(0' 1' 0)' 180' 180' 180))) " is 146.
Magic Number,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeStartGame,The following statement contains a magic number: Client.LevelInfo.Version = 19133;
Magic Number,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeStartGame,The following statement contains a magic number: Client.ChunkRadius = 5;
Magic Number,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeAddEntity,The following statement contains a magic number: Log.Debug($"Bit-array datavalue: dec={dataValue} hex=0x{dataValue:x2}' bin={Convert.ToString(dataValue' 2)}b ");
Magic Number,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeAddEntity,The following statement contains a magic number: Task.Run(BotHelpers.DoWaitForSpawn(Client))  					.ContinueWith(t => Task.Delay(3000).Wait())  					//.ContinueWith(task =>  					//{  					//	Log.Warn("Sending jump for player");    					//	McpeInteract action = McpeInteract.CreateObject();  					//	action.targetRuntimeEntityId = id;  					//	action.actionId = (int) 3;  					//	SendPackage(action);  					//})  					//.ContinueWith(t => Task.Delay(2000).Wait())  					//.ContinueWith(task =>  					//{  					//	for (int i = 0; i < 10; i++)  					//	{  					//		Log.Warn("Mounting horse");    					//		McpeInventoryTransaction transaction = McpeInventoryTransaction.CreateObject();  					//		transaction.transaction = new Transaction()  					//		{  					//			TransactionType = McpeInventoryTransaction.TransactionType.ItemUseOnEntity'  					//			Transactions = new List<TransactionRecord>()'  					//			EntityId = id'  					//			ActionType = 0'  					//			Slot = 0'  					//			Item = new ItemAir()'  					//			//Item = new ItemBlock(new Cobblestone()) { Count = 64 }'  					//			Position = BlockCoordinates.Zero'  					//			FromPosition = CurrentLocation'  					//			ClickPosition = pos'  					//		};    					//		SendPackage(transaction);  					//		Thread.Sleep(4000);  					//	}    					//})  					.ContinueWith(task =>  					{  						Log.Warn("Sending sneak for player");    						McpePlayerAction action = McpePlayerAction.CreateObject();  						action.runtimeEntityId = Client.EntityId;  						action.actionId = (int) PlayerAction.StartSneak;  						Client.SendPacket(action);  					})  					.ContinueWith(t => Task.Delay(2000).Wait())  					.ContinueWith(task =>  					{  						Log.Warn("Sending transaction for horse");    						McpeInventoryTransaction transaction = McpeInventoryTransaction.CreateObject();  						transaction.transaction = new Transaction()  						{  							TransactionType = McpeInventoryTransaction.TransactionType.ItemUseOnEntity'  							Transactions = new List<TransactionRecord>()'  							EntityId = id'  							ActionType = 0'  							Slot = 0'  							Item = new ItemAir()'  							Position = BlockCoordinates.Zero'  							FromPosition = Client.CurrentLocation'  							ClickPosition = pos'  						};    						Client.SendPacket(transaction);  					});
Magic Number,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeAddEntity,The following statement contains a magic number: Task.Run(BotHelpers.DoWaitForSpawn(Client))  					.ContinueWith(t => Task.Delay(3000).Wait())  					//.ContinueWith(task =>  					//{  					//	Log.Warn("Sending jump for player");    					//	McpeInteract action = McpeInteract.CreateObject();  					//	action.targetRuntimeEntityId = id;  					//	action.actionId = (int) 3;  					//	SendPackage(action);  					//})  					//.ContinueWith(t => Task.Delay(2000).Wait())  					//.ContinueWith(task =>  					//{  					//	for (int i = 0; i < 10; i++)  					//	{  					//		Log.Warn("Mounting horse");    					//		McpeInventoryTransaction transaction = McpeInventoryTransaction.CreateObject();  					//		transaction.transaction = new Transaction()  					//		{  					//			TransactionType = McpeInventoryTransaction.TransactionType.ItemUseOnEntity'  					//			Transactions = new List<TransactionRecord>()'  					//			EntityId = id'  					//			ActionType = 0'  					//			Slot = 0'  					//			Item = new ItemAir()'  					//			//Item = new ItemBlock(new Cobblestone()) { Count = 64 }'  					//			Position = BlockCoordinates.Zero'  					//			FromPosition = CurrentLocation'  					//			ClickPosition = pos'  					//		};    					//		SendPackage(transaction);  					//		Thread.Sleep(4000);  					//	}    					//})  					.ContinueWith(task =>  					{  						Log.Warn("Sending sneak for player");    						McpePlayerAction action = McpePlayerAction.CreateObject();  						action.runtimeEntityId = Client.EntityId;  						action.actionId = (int) PlayerAction.StartSneak;  						Client.SendPacket(action);  					})  					.ContinueWith(t => Task.Delay(2000).Wait())  					.ContinueWith(task =>  					{  						Log.Warn("Sending transaction for horse");    						McpeInventoryTransaction transaction = McpeInventoryTransaction.CreateObject();  						transaction.transaction = new Transaction()  						{  							TransactionType = McpeInventoryTransaction.TransactionType.ItemUseOnEntity'  							Transactions = new List<TransactionRecord>()'  							EntityId = id'  							ActionType = 0'  							Slot = 0'  							Item = new ItemAir()'  							Position = BlockCoordinates.Zero'  							FromPosition = Client.CurrentLocation'  							ClickPosition = pos'  						};    						Client.SendPacket(transaction);  					});
Magic Number,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeLevelEvent,The following statement contains a magic number: int metadata = data >> 12;
Magic Number,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeLevelEvent,The following statement contains a magic number: message.eventId == 2001
Magic Number,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeCraftingData,The following statement contains a magic number: shapedRecipe.Result.Id == 5 && shapedRecipe.Result.Count == 4 && shapedRecipe.Result.Metadata == 0
Magic Number,MiNET.Client,BedrockTraceHandler,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BedrockTraceHandler.cs,HandleMcpeCraftingData,The following statement contains a magic number: shapedRecipe.Result.Id == 5 && shapedRecipe.Result.Count == 4 && shapedRecipe.Result.Metadata == 0
Magic Number,MiNET.Client,BotHelpers,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BotHelpers.cs,LookAt,The following statement contains a magic number: double tanOutput = 90 - RadianToDegree(Math.Atan(dx / (dz)));
Magic Number,MiNET.Client,BotHelpers,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BotHelpers.cs,LookAt,The following statement contains a magic number: double thetaOffset = 270d;
Magic Number,MiNET.Client,BotHelpers,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BotHelpers.cs,LookAt,The following statement contains a magic number: thetaOffset = 90;
Magic Number,MiNET.Client,BotHelpers,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BotHelpers.cs,RadianToDegree,The following statement contains a magic number: return angle * (180.0 / Math.PI);
Magic Number,MiNET.Client,BotHelpers,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BotHelpers.cs,DoWaitForSpawn,The following statement contains a magic number: return () =>  			{  				while (!client.HasSpawned)  				{  					Thread.Sleep(50);  				}  			};
Magic Number,MiNET.Client,BotHelpers,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BotHelpers.cs,DoMobEquipment,The following statement contains a magic number: Action<Task' Item' int> doMobEquipmentTask = (t' item' selectedSlot) =>  			{  				McpeMobEquipment message = new McpeMobEquipment();  				message.runtimeEntityId = client.EntityId;  				message.item = item;  				message.selectedSlot = (byte) selectedSlot;  				message.slot = (byte) (selectedSlot + 9);  				client.SendPacket(message);  			};
Magic Number,MiNET.Client,BotHelpers,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BotHelpers.cs,DoMoveTo,The following statement contains a magic number: Action<Task' PlayerLocation> doMoveTo = (t' loc) =>  			{  				Vector3 originalPosition = client.CurrentLocation.ToVector3();  				Vector3 targetPosition = loc.ToVector3();    				PlayerLocation lookAtPos = LookAt(originalPosition + new Vector3(0' 1.62f' 0)' targetPosition);    				{  					// First just rotate towards target pos  					McpeMovePlayer movePlayerPacket = McpeMovePlayer.CreateObject();  					movePlayerPacket.runtimeEntityId = client.EntityId;  					movePlayerPacket.x = client.CurrentLocation.X;  					movePlayerPacket.y = client.CurrentLocation.Y;  					movePlayerPacket.z = client.CurrentLocation.Z;  					movePlayerPacket.yaw = lookAtPos.Yaw;  					movePlayerPacket.pitch = lookAtPos.Pitch;  					movePlayerPacket.headYaw = lookAtPos.HeadYaw;  				}  				float lenght = Math.Abs((originalPosition - targetPosition).Length());    				float stepLen = 0.5f;  				float weight;    				while (true)  				{  					if (Math.Abs((targetPosition - client.CurrentLocation.ToVector3()).Length()) > stepLen)  					{  						float lenLeft = Math.Abs((client.CurrentLocation.ToVector3() - targetPosition).Length());  						weight = Math.Abs((float) ((lenLeft - stepLen) / lenght));    						client.CurrentLocation = new PlayerLocation(Vector3.Lerp(originalPosition' targetPosition' 1 - weight));    						McpeMovePlayer movePlayerPacket = McpeMovePlayer.CreateObject();  						movePlayerPacket.runtimeEntityId = client.EntityId;  						movePlayerPacket.x = client.CurrentLocation.X;  						movePlayerPacket.y = client.CurrentLocation.Y;  						movePlayerPacket.z = client.CurrentLocation.Z;  						movePlayerPacket.yaw = lookAtPos.Yaw;  						movePlayerPacket.pitch = lookAtPos.Pitch;  						movePlayerPacket.headYaw = lookAtPos.HeadYaw;    						client.SendPacket(movePlayerPacket);    						Thread.Sleep(50);  						continue;  					}  					{  						client.CurrentLocation = new PlayerLocation(targetPosition);    						McpeMovePlayer movePlayerPacket = McpeMovePlayer.CreateObject();  						movePlayerPacket.runtimeEntityId = client.EntityId;  						movePlayerPacket.x = client.CurrentLocation.X;  						movePlayerPacket.y = client.CurrentLocation.Y;  						movePlayerPacket.z = client.CurrentLocation.Z;  						movePlayerPacket.yaw = lookAtPos.Yaw;  						movePlayerPacket.pitch = lookAtPos.Pitch;  						movePlayerPacket.headYaw = lookAtPos.HeadYaw;    						client.SendPacket(movePlayerPacket);  					}  					break;  				}  			};
Magic Number,MiNET.Client,BotHelpers,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BotHelpers.cs,DoMoveTo,The following statement contains a magic number: Action<Task' PlayerLocation> doMoveTo = (t' loc) =>  			{  				Vector3 originalPosition = client.CurrentLocation.ToVector3();  				Vector3 targetPosition = loc.ToVector3();    				PlayerLocation lookAtPos = LookAt(originalPosition + new Vector3(0' 1.62f' 0)' targetPosition);    				{  					// First just rotate towards target pos  					McpeMovePlayer movePlayerPacket = McpeMovePlayer.CreateObject();  					movePlayerPacket.runtimeEntityId = client.EntityId;  					movePlayerPacket.x = client.CurrentLocation.X;  					movePlayerPacket.y = client.CurrentLocation.Y;  					movePlayerPacket.z = client.CurrentLocation.Z;  					movePlayerPacket.yaw = lookAtPos.Yaw;  					movePlayerPacket.pitch = lookAtPos.Pitch;  					movePlayerPacket.headYaw = lookAtPos.HeadYaw;  				}  				float lenght = Math.Abs((originalPosition - targetPosition).Length());    				float stepLen = 0.5f;  				float weight;    				while (true)  				{  					if (Math.Abs((targetPosition - client.CurrentLocation.ToVector3()).Length()) > stepLen)  					{  						float lenLeft = Math.Abs((client.CurrentLocation.ToVector3() - targetPosition).Length());  						weight = Math.Abs((float) ((lenLeft - stepLen) / lenght));    						client.CurrentLocation = new PlayerLocation(Vector3.Lerp(originalPosition' targetPosition' 1 - weight));    						McpeMovePlayer movePlayerPacket = McpeMovePlayer.CreateObject();  						movePlayerPacket.runtimeEntityId = client.EntityId;  						movePlayerPacket.x = client.CurrentLocation.X;  						movePlayerPacket.y = client.CurrentLocation.Y;  						movePlayerPacket.z = client.CurrentLocation.Z;  						movePlayerPacket.yaw = lookAtPos.Yaw;  						movePlayerPacket.pitch = lookAtPos.Pitch;  						movePlayerPacket.headYaw = lookAtPos.HeadYaw;    						client.SendPacket(movePlayerPacket);    						Thread.Sleep(50);  						continue;  					}  					{  						client.CurrentLocation = new PlayerLocation(targetPosition);    						McpeMovePlayer movePlayerPacket = McpeMovePlayer.CreateObject();  						movePlayerPacket.runtimeEntityId = client.EntityId;  						movePlayerPacket.x = client.CurrentLocation.X;  						movePlayerPacket.y = client.CurrentLocation.Y;  						movePlayerPacket.z = client.CurrentLocation.Z;  						movePlayerPacket.yaw = lookAtPos.Yaw;  						movePlayerPacket.pitch = lookAtPos.Pitch;  						movePlayerPacket.headYaw = lookAtPos.HeadYaw;    						client.SendPacket(movePlayerPacket);  					}  					break;  				}  			};
Magic Number,MiNET.Client,BotHelpers,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\BotHelpers.cs,DoMoveTo,The following statement contains a magic number: Action<Task' PlayerLocation> doMoveTo = (t' loc) =>  			{  				Vector3 originalPosition = client.CurrentLocation.ToVector3();  				Vector3 targetPosition = loc.ToVector3();    				PlayerLocation lookAtPos = LookAt(originalPosition + new Vector3(0' 1.62f' 0)' targetPosition);    				{  					// First just rotate towards target pos  					McpeMovePlayer movePlayerPacket = McpeMovePlayer.CreateObject();  					movePlayerPacket.runtimeEntityId = client.EntityId;  					movePlayerPacket.x = client.CurrentLocation.X;  					movePlayerPacket.y = client.CurrentLocation.Y;  					movePlayerPacket.z = client.CurrentLocation.Z;  					movePlayerPacket.yaw = lookAtPos.Yaw;  					movePlayerPacket.pitch = lookAtPos.Pitch;  					movePlayerPacket.headYaw = lookAtPos.HeadYaw;  				}  				float lenght = Math.Abs((originalPosition - targetPosition).Length());    				float stepLen = 0.5f;  				float weight;    				while (true)  				{  					if (Math.Abs((targetPosition - client.CurrentLocation.ToVector3()).Length()) > stepLen)  					{  						float lenLeft = Math.Abs((client.CurrentLocation.ToVector3() - targetPosition).Length());  						weight = Math.Abs((float) ((lenLeft - stepLen) / lenght));    						client.CurrentLocation = new PlayerLocation(Vector3.Lerp(originalPosition' targetPosition' 1 - weight));    						McpeMovePlayer movePlayerPacket = McpeMovePlayer.CreateObject();  						movePlayerPacket.runtimeEntityId = client.EntityId;  						movePlayerPacket.x = client.CurrentLocation.X;  						movePlayerPacket.y = client.CurrentLocation.Y;  						movePlayerPacket.z = client.CurrentLocation.Z;  						movePlayerPacket.yaw = lookAtPos.Yaw;  						movePlayerPacket.pitch = lookAtPos.Pitch;  						movePlayerPacket.headYaw = lookAtPos.HeadYaw;    						client.SendPacket(movePlayerPacket);    						Thread.Sleep(50);  						continue;  					}  					{  						client.CurrentLocation = new PlayerLocation(targetPosition);    						McpeMovePlayer movePlayerPacket = McpeMovePlayer.CreateObject();  						movePlayerPacket.runtimeEntityId = client.EntityId;  						movePlayerPacket.x = client.CurrentLocation.X;  						movePlayerPacket.y = client.CurrentLocation.Y;  						movePlayerPacket.z = client.CurrentLocation.Z;  						movePlayerPacket.yaw = lookAtPos.Yaw;  						movePlayerPacket.pitch = lookAtPos.Pitch;  						movePlayerPacket.headYaw = lookAtPos.HeadYaw;    						client.SendPacket(movePlayerPacket);  					}  					break;  				}  			};
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,DecocedChunkColumn,The following statement contains a magic number: int noBlocksPerWord = (int) Math.Floor(32f / bitsPerBlock);
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,DecocedChunkColumn,The following statement contains a magic number: int wordCount = (int) Math.Ceiling(4096f / noBlocksPerWord);
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,DecocedChunkColumn,The following statement contains a magic number: defStream.ReadBytes(wordCount * 4);
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,DecocedChunkColumn,The following statement contains a magic number: byte[] ba = new byte[512];
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,DecocedChunkColumn,The following statement contains a magic number: Buffer.BlockCopy(ba' 0' chunkColumn.height' 0' 512);
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,DecocedChunkColumn,The following statement contains a magic number: int x = (buf[i] & 0xf0) >> 4;
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,SetNibble4,The following statement contains a magic number: arr[index / 2] = (byte) ((value & 0x0F) | arr[index / 2]);
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,SetNibble4,The following statement contains a magic number: arr[index / 2] = (byte) ((value & 0x0F) | arr[index / 2]);
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,SetNibble4,The following statement contains a magic number: index % 2 == 0
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,CreateNbtFromChunkColumn,The following statement contains a magic number: int sy = i * 16;
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,CreateNbtFromChunkColumn,The following statement contains a magic number: byte[] blocks = new byte[4096];
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,CreateNbtFromChunkColumn,The following statement contains a magic number: byte[] data = new byte[2048];
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,CreateNbtFromChunkColumn,The following statement contains a magic number: byte[] blockLight = new byte[2048];
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,CreateNbtFromChunkColumn,The following statement contains a magic number: byte[] skyLight = new byte[2048];
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,CreateNbtFromChunkColumn,The following statement contains a magic number: yi < 0 || yi >= 256
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,CreateNbtFromChunkColumn,The following statement contains a magic number: int anvilIndex = (y + _waterOffsetY) * 16 * 16 + z * 16 + x;
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,CreateNbtFromChunkColumn,The following statement contains a magic number: int anvilIndex = (y + _waterOffsetY) * 16 * 16 + z * 16 + x;
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,CreateNbtFromChunkColumn,The following statement contains a magic number: int anvilIndex = (y + _waterOffsetY) * 16 * 16 + z * 16 + x;
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,CreateNbtFromChunkColumn,The following statement contains a magic number: blockId = 125;
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,CreateNbtFromChunkColumn,The following statement contains a magic number: blockId == 5
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,CreateNbtFromChunkColumn,The following statement contains a magic number: y < 16
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,CreateNbtFromChunkColumn,The following statement contains a magic number: z < 16
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,CreateNbtFromChunkColumn,The following statement contains a magic number: x < 16
Magic Number,MiNET.Client,ClientUtils,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ClientUtils.cs,CreateNbtFromChunkColumn,The following statement contains a magic number: i < 8
Magic Number,MiNET.Client,McpeClientMessageHandlerBase,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\McpeClientMessageHandlerBase.cs,HandleMcpePlayStatus,The following statement contains a magic number: Client.PlayerStatus == 3
Magic Number,MiNET.Client,McpeClientMessageHandlerBase,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\McpeClientMessageHandlerBase.cs,HandleMcpeResourcePacksInfo,The following statement contains a magic number: response.responseStatus = 2;
Magic Number,MiNET.Client,McpeClientMessageHandlerBase,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\McpeClientMessageHandlerBase.cs,HandleMcpeResourcePackStack,The following statement contains a magic number: response.responseStatus = 4;
Magic Number,MiNET.Client,McpeClientMessageHandlerBase,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\McpeClientMessageHandlerBase.cs,HandleMcpeChangeDimension,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,MiNET.Client,McpeClientMessageHandlerBase,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\McpeClientMessageHandlerBase.cs,HandleMcpeResourcePackChunkData,The following statement contains a magic number: response.responseStatus = 3;
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,MiNetClient,The following statement contains a magic number: _clientGuid = 1111111 + random.Next() + random.Next();
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,StartClient,The following statement contains a magic number: uint SIO_UDP_CONNRESET = IOC_IN | IOC_VENDOR | 12;
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,ProcessQueue,The following statement contains a magic number: WaitHandle.SignalAndWait(_mainWaitEvent' _waitEvent' TimeSpan.FromMilliseconds(50)' true);
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,OnOpenConnectionReply2,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,SendLogin,The following statement contains a magic number: McpeLogin loginPacket = new McpeLogin  			{  				protocolVersion = Config.GetProperty("EnableEdu"' false) ? 111 : McpeProtocolInfo.ProtocolVersion'  				payload = data  			};
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,InitiateEncryption,The following statement contains a magic number: decryptor.Init(false' new ParametersWithIV(new KeyParameter(secret)' secret.Take(16).ToArray()));
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,InitiateEncryption,The following statement contains a magic number: encryptor.Init(true' new ParametersWithIV(new KeyParameter(secret)' secret.Take(16).ToArray()));
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,InitiateEncryption,The following statement contains a magic number: Thread.Sleep(1250);
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,SendCraftingEvent2,The following statement contains a magic number: eq.slot = 9;
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,SendCraftingEvent,The following statement contains a magic number: eq.slot = 9;
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,SendCraftingEvent,The following statement contains a magic number: eq.item = new ItemBlock(new Block(17)' 0) {Count = 1};
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,SendCraftingEvent,The following statement contains a magic number: ItemStacks slotData = new ItemStacks {new ItemBlock(new Block(17)' 0) {Count = 1}};
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,SendCraftingEvent,The following statement contains a magic number: ItemStacks slotData = new ItemStacks {new ItemBlock(new Block(5)' 0) {Count = 1}};
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,SendCraftingEvent,The following statement contains a magic number: eq.slot = 10;
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,SendCraftingEvent,The following statement contains a magic number: eq.item = new ItemBlock(new Block(5)' 0) {Count = 1};
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,MetadataToCode,The following statement contains a magic number: switch (entry.Identifier)  				{  					case 0:  					{  						var e = (MetadataByte) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 1:  					{  						var e = (MetadataShort) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 2:  					{  						var e = (MetadataInt) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 3:  					{  						var e = (MetadataFloat) entry;  						sb.Append($"{e.GetType().Name}({e.Value.ToString(NumberFormatInfo.InvariantInfo)}f);");  						break;  					}  					case 4:  					{  						var e = (MetadataString) entry;  						sb.Append($"{e.GetType().Name}(\"{e.Value}\");");  						break;  					}  					case 5:  					{  						var e = (MetadataSlot) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 6:  					{  						var e = (MetadataIntCoordinates) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 7:  					{  						var e = (MetadataLong) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						if (idx == 0)  						{  							sb.Append($" // {Convert.ToString((long) e.Value' 2)}; {FlagsToString(e.Value)}");  						}  						break;  					}  					case 8:  					{  						var e = (MetadataVector3) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  				}
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,MetadataToCode,The following statement contains a magic number: switch (entry.Identifier)  				{  					case 0:  					{  						var e = (MetadataByte) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 1:  					{  						var e = (MetadataShort) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 2:  					{  						var e = (MetadataInt) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 3:  					{  						var e = (MetadataFloat) entry;  						sb.Append($"{e.GetType().Name}({e.Value.ToString(NumberFormatInfo.InvariantInfo)}f);");  						break;  					}  					case 4:  					{  						var e = (MetadataString) entry;  						sb.Append($"{e.GetType().Name}(\"{e.Value}\");");  						break;  					}  					case 5:  					{  						var e = (MetadataSlot) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 6:  					{  						var e = (MetadataIntCoordinates) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 7:  					{  						var e = (MetadataLong) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						if (idx == 0)  						{  							sb.Append($" // {Convert.ToString((long) e.Value' 2)}; {FlagsToString(e.Value)}");  						}  						break;  					}  					case 8:  					{  						var e = (MetadataVector3) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  				}
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,MetadataToCode,The following statement contains a magic number: switch (entry.Identifier)  				{  					case 0:  					{  						var e = (MetadataByte) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 1:  					{  						var e = (MetadataShort) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 2:  					{  						var e = (MetadataInt) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 3:  					{  						var e = (MetadataFloat) entry;  						sb.Append($"{e.GetType().Name}({e.Value.ToString(NumberFormatInfo.InvariantInfo)}f);");  						break;  					}  					case 4:  					{  						var e = (MetadataString) entry;  						sb.Append($"{e.GetType().Name}(\"{e.Value}\");");  						break;  					}  					case 5:  					{  						var e = (MetadataSlot) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 6:  					{  						var e = (MetadataIntCoordinates) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 7:  					{  						var e = (MetadataLong) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						if (idx == 0)  						{  							sb.Append($" // {Convert.ToString((long) e.Value' 2)}; {FlagsToString(e.Value)}");  						}  						break;  					}  					case 8:  					{  						var e = (MetadataVector3) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  				}
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,MetadataToCode,The following statement contains a magic number: switch (entry.Identifier)  				{  					case 0:  					{  						var e = (MetadataByte) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 1:  					{  						var e = (MetadataShort) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 2:  					{  						var e = (MetadataInt) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 3:  					{  						var e = (MetadataFloat) entry;  						sb.Append($"{e.GetType().Name}({e.Value.ToString(NumberFormatInfo.InvariantInfo)}f);");  						break;  					}  					case 4:  					{  						var e = (MetadataString) entry;  						sb.Append($"{e.GetType().Name}(\"{e.Value}\");");  						break;  					}  					case 5:  					{  						var e = (MetadataSlot) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 6:  					{  						var e = (MetadataIntCoordinates) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 7:  					{  						var e = (MetadataLong) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						if (idx == 0)  						{  							sb.Append($" // {Convert.ToString((long) e.Value' 2)}; {FlagsToString(e.Value)}");  						}  						break;  					}  					case 8:  					{  						var e = (MetadataVector3) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  				}
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,MetadataToCode,The following statement contains a magic number: switch (entry.Identifier)  				{  					case 0:  					{  						var e = (MetadataByte) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 1:  					{  						var e = (MetadataShort) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 2:  					{  						var e = (MetadataInt) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 3:  					{  						var e = (MetadataFloat) entry;  						sb.Append($"{e.GetType().Name}({e.Value.ToString(NumberFormatInfo.InvariantInfo)}f);");  						break;  					}  					case 4:  					{  						var e = (MetadataString) entry;  						sb.Append($"{e.GetType().Name}(\"{e.Value}\");");  						break;  					}  					case 5:  					{  						var e = (MetadataSlot) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 6:  					{  						var e = (MetadataIntCoordinates) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 7:  					{  						var e = (MetadataLong) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						if (idx == 0)  						{  							sb.Append($" // {Convert.ToString((long) e.Value' 2)}; {FlagsToString(e.Value)}");  						}  						break;  					}  					case 8:  					{  						var e = (MetadataVector3) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  				}
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,MetadataToCode,The following statement contains a magic number: switch (entry.Identifier)  				{  					case 0:  					{  						var e = (MetadataByte) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 1:  					{  						var e = (MetadataShort) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 2:  					{  						var e = (MetadataInt) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 3:  					{  						var e = (MetadataFloat) entry;  						sb.Append($"{e.GetType().Name}({e.Value.ToString(NumberFormatInfo.InvariantInfo)}f);");  						break;  					}  					case 4:  					{  						var e = (MetadataString) entry;  						sb.Append($"{e.GetType().Name}(\"{e.Value}\");");  						break;  					}  					case 5:  					{  						var e = (MetadataSlot) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 6:  					{  						var e = (MetadataIntCoordinates) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 7:  					{  						var e = (MetadataLong) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						if (idx == 0)  						{  							sb.Append($" // {Convert.ToString((long) e.Value' 2)}; {FlagsToString(e.Value)}");  						}  						break;  					}  					case 8:  					{  						var e = (MetadataVector3) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  				}
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,MetadataToCode,The following statement contains a magic number: switch (entry.Identifier)  				{  					case 0:  					{  						var e = (MetadataByte) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 1:  					{  						var e = (MetadataShort) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 2:  					{  						var e = (MetadataInt) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 3:  					{  						var e = (MetadataFloat) entry;  						sb.Append($"{e.GetType().Name}({e.Value.ToString(NumberFormatInfo.InvariantInfo)}f);");  						break;  					}  					case 4:  					{  						var e = (MetadataString) entry;  						sb.Append($"{e.GetType().Name}(\"{e.Value}\");");  						break;  					}  					case 5:  					{  						var e = (MetadataSlot) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 6:  					{  						var e = (MetadataIntCoordinates) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 7:  					{  						var e = (MetadataLong) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						if (idx == 0)  						{  							sb.Append($" // {Convert.ToString((long) e.Value' 2)}; {FlagsToString(e.Value)}");  						}  						break;  					}  					case 8:  					{  						var e = (MetadataVector3) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  				}
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,MetadataToCode,The following statement contains a magic number: switch (entry.Identifier)  				{  					case 0:  					{  						var e = (MetadataByte) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 1:  					{  						var e = (MetadataShort) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 2:  					{  						var e = (MetadataInt) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 3:  					{  						var e = (MetadataFloat) entry;  						sb.Append($"{e.GetType().Name}({e.Value.ToString(NumberFormatInfo.InvariantInfo)}f);");  						break;  					}  					case 4:  					{  						var e = (MetadataString) entry;  						sb.Append($"{e.GetType().Name}(\"{e.Value}\");");  						break;  					}  					case 5:  					{  						var e = (MetadataSlot) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 6:  					{  						var e = (MetadataIntCoordinates) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 7:  					{  						var e = (MetadataLong) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						if (idx == 0)  						{  							sb.Append($" // {Convert.ToString((long) e.Value' 2)}; {FlagsToString(e.Value)}");  						}  						break;  					}  					case 8:  					{  						var e = (MetadataVector3) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  				}
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,FlagsToString,The following statement contains a magic number: byte[] bytes = new byte[8];
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,OnConnectionRequestAccepted,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,OnConnectionRequestAccepted,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,SendData,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,SendConnectedPong,The following statement contains a magic number: var packet = new ConnectedPong  			{  				sendpingtime = sendpingtime'  				sendpongtime = sendpingtime + 200  			};
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,SendOpenConnectionRequest1,The following statement contains a magic number: var packet = new OpenConnectionRequest1()  			{  				raknetProtocolVersion = 9'  				mtuSize = _mtuSize  			};
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,SendOpenConnectionRequest1,The following statement contains a magic number: byte[] data2 = new byte[_mtuSize - data.Length - 10];
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,SendNewIncomingConnection,The following statement contains a magic number: packet.systemAddresses = new IPEndPoint[20];
Magic Number,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,SendNewIncomingConnection,The following statement contains a magic number: i < 20
Magic Number,MiNET.Client,ObjectDumper,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\ObjectDumper.cs,WriteTab,The following statement contains a magic number: pos % 8 != 0
Magic Number,MiNET.Client,Startup,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\Startup.cs,Main,The following statement contains a magic number: var client = new MiNetClient(new IPEndPoint(Dns.GetHostEntry("yodamine.com").AddressList[0]' 19132)' "TheGrey"' new DedicatedThreadPool(new DedicatedThreadPoolSettings(Environment.ProcessorCount)));
Magic Number,MiNET.Client,Startup,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\Startup.cs,Main,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,MiNET.Client,Startup,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\Startup.cs,Main,The following statement contains a magic number: Task.Run(BotHelpers.DoWaitForSpawn(client))  				.ContinueWith(t => doSendCommand(t' $"/me says \"I spawned at {client.CurrentLocation}\""))  				//.ContinueWith(t => BotHelpers.DoMobEquipment(client)(t' new ItemBlock(new Cobblestone()' 0) {Count = 64}' 0))  				//.ContinueWith(t => BotHelpers.DoMoveTo(client)(t' new PlayerLocation(client.CurrentLocation.ToVector3() - new Vector3(0' 1' 0)' 180' 180' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(40' 5.62f' -20' 180' 180' 180)))  				.ContinueWith(t => doMoveTo(t' new PlayerLocation(0' 5.62' 0' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(0' 5.62' 0' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(22' 5.62' 40' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(50' 5.62f' 17' 180' 180' 180)))  				.ContinueWith(t => doSendCommand(t' "/me says \"Hi guys! It is I!!\""))  				//.ContinueWith(t => Task.Delay(500).Wait())  				//.ContinueWith(t => doSendCommand(t' "/summon sheep"))  				//.ContinueWith(t => Task.Delay(500).Wait())  				//.ContinueWith(t => doSendCommand(t' "/kill @e[type=sheep]"))  				.ContinueWith(t => Task.Delay(5000).Wait())  				//.ContinueWith(t =>  				//{  				//	Random rnd = new Random();  				//	while (true)  				//	{  				//		doMoveTo(t' new PlayerLocation(rnd.Next(10' 40)' 5.62f' rnd.Next(-50' -10)' 180' 180' 180));  				//		//doMoveTo(t' new PlayerLocation(50' 5.62f' 17' 180' 180' 180));  				//		doMoveTo(t' new PlayerLocation(rnd.Next(40' 50)' 5.62f' rnd.Next(0' 20)' 180' 180' 180));  				//	}  				//})  				;
Magic Number,MiNET.Client,Startup,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\Startup.cs,Main,The following statement contains a magic number: Task.Run(BotHelpers.DoWaitForSpawn(client))  				.ContinueWith(t => doSendCommand(t' $"/me says \"I spawned at {client.CurrentLocation}\""))  				//.ContinueWith(t => BotHelpers.DoMobEquipment(client)(t' new ItemBlock(new Cobblestone()' 0) {Count = 64}' 0))  				//.ContinueWith(t => BotHelpers.DoMoveTo(client)(t' new PlayerLocation(client.CurrentLocation.ToVector3() - new Vector3(0' 1' 0)' 180' 180' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(40' 5.62f' -20' 180' 180' 180)))  				.ContinueWith(t => doMoveTo(t' new PlayerLocation(0' 5.62' 0' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(0' 5.62' 0' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(22' 5.62' 40' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(50' 5.62f' 17' 180' 180' 180)))  				.ContinueWith(t => doSendCommand(t' "/me says \"Hi guys! It is I!!\""))  				//.ContinueWith(t => Task.Delay(500).Wait())  				//.ContinueWith(t => doSendCommand(t' "/summon sheep"))  				//.ContinueWith(t => Task.Delay(500).Wait())  				//.ContinueWith(t => doSendCommand(t' "/kill @e[type=sheep]"))  				.ContinueWith(t => Task.Delay(5000).Wait())  				//.ContinueWith(t =>  				//{  				//	Random rnd = new Random();  				//	while (true)  				//	{  				//		doMoveTo(t' new PlayerLocation(rnd.Next(10' 40)' 5.62f' rnd.Next(-50' -10)' 180' 180' 180));  				//		//doMoveTo(t' new PlayerLocation(50' 5.62f' 17' 180' 180' 180));  				//		doMoveTo(t' new PlayerLocation(rnd.Next(40' 50)' 5.62f' rnd.Next(0' 20)' 180' 180' 180));  				//	}  				//})  				;
Magic Number,MiNET.Client,Startup,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\Startup.cs,Main,The following statement contains a magic number: Task.Run(BotHelpers.DoWaitForSpawn(client))  				.ContinueWith(t => doSendCommand(t' $"/me says \"I spawned at {client.CurrentLocation}\""))  				//.ContinueWith(t => BotHelpers.DoMobEquipment(client)(t' new ItemBlock(new Cobblestone()' 0) {Count = 64}' 0))  				//.ContinueWith(t => BotHelpers.DoMoveTo(client)(t' new PlayerLocation(client.CurrentLocation.ToVector3() - new Vector3(0' 1' 0)' 180' 180' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(40' 5.62f' -20' 180' 180' 180)))  				.ContinueWith(t => doMoveTo(t' new PlayerLocation(0' 5.62' 0' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(0' 5.62' 0' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(22' 5.62' 40' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(50' 5.62f' 17' 180' 180' 180)))  				.ContinueWith(t => doSendCommand(t' "/me says \"Hi guys! It is I!!\""))  				//.ContinueWith(t => Task.Delay(500).Wait())  				//.ContinueWith(t => doSendCommand(t' "/summon sheep"))  				//.ContinueWith(t => Task.Delay(500).Wait())  				//.ContinueWith(t => doSendCommand(t' "/kill @e[type=sheep]"))  				.ContinueWith(t => Task.Delay(5000).Wait())  				//.ContinueWith(t =>  				//{  				//	Random rnd = new Random();  				//	while (true)  				//	{  				//		doMoveTo(t' new PlayerLocation(rnd.Next(10' 40)' 5.62f' rnd.Next(-50' -10)' 180' 180' 180));  				//		//doMoveTo(t' new PlayerLocation(50' 5.62f' 17' 180' 180' 180));  				//		doMoveTo(t' new PlayerLocation(rnd.Next(40' 50)' 5.62f' rnd.Next(0' 20)' 180' 180' 180));  				//	}  				//})  				;
Magic Number,MiNET.Client,Startup,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\Startup.cs,Main,The following statement contains a magic number: Task.Run(BotHelpers.DoWaitForSpawn(client))  				.ContinueWith(t => doSendCommand(t' $"/me says \"I spawned at {client.CurrentLocation}\""))  				//.ContinueWith(t => BotHelpers.DoMobEquipment(client)(t' new ItemBlock(new Cobblestone()' 0) {Count = 64}' 0))  				//.ContinueWith(t => BotHelpers.DoMoveTo(client)(t' new PlayerLocation(client.CurrentLocation.ToVector3() - new Vector3(0' 1' 0)' 180' 180' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(40' 5.62f' -20' 180' 180' 180)))  				.ContinueWith(t => doMoveTo(t' new PlayerLocation(0' 5.62' 0' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(0' 5.62' 0' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(22' 5.62' 40' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(50' 5.62f' 17' 180' 180' 180)))  				.ContinueWith(t => doSendCommand(t' "/me says \"Hi guys! It is I!!\""))  				//.ContinueWith(t => Task.Delay(500).Wait())  				//.ContinueWith(t => doSendCommand(t' "/summon sheep"))  				//.ContinueWith(t => Task.Delay(500).Wait())  				//.ContinueWith(t => doSendCommand(t' "/kill @e[type=sheep]"))  				.ContinueWith(t => Task.Delay(5000).Wait())  				//.ContinueWith(t =>  				//{  				//	Random rnd = new Random();  				//	while (true)  				//	{  				//		doMoveTo(t' new PlayerLocation(rnd.Next(10' 40)' 5.62f' rnd.Next(-50' -10)' 180' 180' 180));  				//		//doMoveTo(t' new PlayerLocation(50' 5.62f' 17' 180' 180' 180));  				//		doMoveTo(t' new PlayerLocation(rnd.Next(40' 50)' 5.62f' rnd.Next(0' 20)' 180' 180' 180));  				//	}  				//})  				;
Magic Number,MiNET.Client,Startup,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\Startup.cs,Main,The following statement contains a magic number: Task.Run(BotHelpers.DoWaitForSpawn(client))  				.ContinueWith(t => doSendCommand(t' $"/me says \"I spawned at {client.CurrentLocation}\""))  				//.ContinueWith(t => BotHelpers.DoMobEquipment(client)(t' new ItemBlock(new Cobblestone()' 0) {Count = 64}' 0))  				//.ContinueWith(t => BotHelpers.DoMoveTo(client)(t' new PlayerLocation(client.CurrentLocation.ToVector3() - new Vector3(0' 1' 0)' 180' 180' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(40' 5.62f' -20' 180' 180' 180)))  				.ContinueWith(t => doMoveTo(t' new PlayerLocation(0' 5.62' 0' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(0' 5.62' 0' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(22' 5.62' 40' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(50' 5.62f' 17' 180' 180' 180)))  				.ContinueWith(t => doSendCommand(t' "/me says \"Hi guys! It is I!!\""))  				//.ContinueWith(t => Task.Delay(500).Wait())  				//.ContinueWith(t => doSendCommand(t' "/summon sheep"))  				//.ContinueWith(t => Task.Delay(500).Wait())  				//.ContinueWith(t => doSendCommand(t' "/kill @e[type=sheep]"))  				.ContinueWith(t => Task.Delay(5000).Wait())  				//.ContinueWith(t =>  				//{  				//	Random rnd = new Random();  				//	while (true)  				//	{  				//		doMoveTo(t' new PlayerLocation(rnd.Next(10' 40)' 5.62f' rnd.Next(-50' -10)' 180' 180' 180));  				//		//doMoveTo(t' new PlayerLocation(50' 5.62f' 17' 180' 180' 180));  				//		doMoveTo(t' new PlayerLocation(rnd.Next(40' 50)' 5.62f' rnd.Next(0' 20)' 180' 180' 180));  				//	}  				//})  				;
Magic Number,MiNET.Client,Startup,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\Startup.cs,Main,The following statement contains a magic number: Task.Run(BotHelpers.DoWaitForSpawn(client))  				.ContinueWith(t => doSendCommand(t' $"/me says \"I spawned at {client.CurrentLocation}\""))  				//.ContinueWith(t => BotHelpers.DoMobEquipment(client)(t' new ItemBlock(new Cobblestone()' 0) {Count = 64}' 0))  				//.ContinueWith(t => BotHelpers.DoMoveTo(client)(t' new PlayerLocation(client.CurrentLocation.ToVector3() - new Vector3(0' 1' 0)' 180' 180' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(40' 5.62f' -20' 180' 180' 180)))  				.ContinueWith(t => doMoveTo(t' new PlayerLocation(0' 5.62' 0' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(0' 5.62' 0' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(22' 5.62' 40' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(50' 5.62f' 17' 180' 180' 180)))  				.ContinueWith(t => doSendCommand(t' "/me says \"Hi guys! It is I!!\""))  				//.ContinueWith(t => Task.Delay(500).Wait())  				//.ContinueWith(t => doSendCommand(t' "/summon sheep"))  				//.ContinueWith(t => Task.Delay(500).Wait())  				//.ContinueWith(t => doSendCommand(t' "/kill @e[type=sheep]"))  				.ContinueWith(t => Task.Delay(5000).Wait())  				//.ContinueWith(t =>  				//{  				//	Random rnd = new Random();  				//	while (true)  				//	{  				//		doMoveTo(t' new PlayerLocation(rnd.Next(10' 40)' 5.62f' rnd.Next(-50' -10)' 180' 180' 180));  				//		//doMoveTo(t' new PlayerLocation(50' 5.62f' 17' 180' 180' 180));  				//		doMoveTo(t' new PlayerLocation(rnd.Next(40' 50)' 5.62f' rnd.Next(0' 20)' 180' 180' 180));  				//	}  				//})  				;
Magic Number,MiNET.Client,Startup,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\Startup.cs,Main,The following statement contains a magic number: Task.Run(BotHelpers.DoWaitForSpawn(client))  				.ContinueWith(t => doSendCommand(t' $"/me says \"I spawned at {client.CurrentLocation}\""))  				//.ContinueWith(t => BotHelpers.DoMobEquipment(client)(t' new ItemBlock(new Cobblestone()' 0) {Count = 64}' 0))  				//.ContinueWith(t => BotHelpers.DoMoveTo(client)(t' new PlayerLocation(client.CurrentLocation.ToVector3() - new Vector3(0' 1' 0)' 180' 180' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(40' 5.62f' -20' 180' 180' 180)))  				.ContinueWith(t => doMoveTo(t' new PlayerLocation(0' 5.62' 0' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(0' 5.62' 0' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(22' 5.62' 40' 180 + 45' 180 + 45' 180)))  				//.ContinueWith(t => doMoveTo(t' new PlayerLocation(50' 5.62f' 17' 180' 180' 180)))  				.ContinueWith(t => doSendCommand(t' "/me says \"Hi guys! It is I!!\""))  				//.ContinueWith(t => Task.Delay(500).Wait())  				//.ContinueWith(t => doSendCommand(t' "/summon sheep"))  				//.ContinueWith(t => Task.Delay(500).Wait())  				//.ContinueWith(t => doSendCommand(t' "/kill @e[type=sheep]"))  				.ContinueWith(t => Task.Delay(5000).Wait())  				//.ContinueWith(t =>  				//{  				//	Random rnd = new Random();  				//	while (true)  				//	{  				//		doMoveTo(t' new PlayerLocation(rnd.Next(10' 40)' 5.62f' rnd.Next(-50' -10)' 180' 180' 180));  				//		//doMoveTo(t' new PlayerLocation(50' 5.62f' 17' 180' 180' 180));  				//		doMoveTo(t' new PlayerLocation(rnd.Next(40' 50)' 5.62f' rnd.Next(0' 20)' 180' 180' 180));  				//	}  				//})  				;
Magic Number,MiNET.Client,Startup,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\Startup.cs,Main,The following statement contains a magic number: Thread.Sleep(2000);
Missing Default,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,ProcessMessage,The following switch statement is missing a default case: switch (msgIdType)  				{  					case DefaultMessageIdTypes.ID_UNCONNECTED_PONG:  					{  						UnconnectedPong incoming = (UnconnectedPong) message;  						OnUnconnectedPong(incoming' senderEndpoint);    						break;  					}  					case DefaultMessageIdTypes.ID_OPEN_CONNECTION_REPLY_1:  					{  						OpenConnectionReply1 incoming = (OpenConnectionReply1) message;  						if (incoming.mtuSize != _mtuSize) Log.Warn("Error' mtu differ from what we sent:" + incoming.mtuSize);  						Log.Warn($"Server with ID {incoming.serverGuid} security={incoming.serverHasSecurity}");  						_mtuSize = incoming.mtuSize;  						SendOpenConnectionRequest2();  						break;  					}  					case DefaultMessageIdTypes.ID_OPEN_CONNECTION_REPLY_2:  					{  						OnOpenConnectionReply2((OpenConnectionReply2) message);  						break;  					}  					case DefaultMessageIdTypes.ID_NO_FREE_INCOMING_CONNECTIONS:  					{  						OnNoFreeIncomingConnections((NoFreeIncomingConnections) message);  						break;  					}  				}
Missing Default,MiNET.Client,MiNetClient,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Client\MiNetClient.cs,MetadataToCode,The following switch statement is missing a default case: switch (entry.Identifier)  				{  					case 0:  					{  						var e = (MetadataByte) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 1:  					{  						var e = (MetadataShort) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 2:  					{  						var e = (MetadataInt) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 3:  					{  						var e = (MetadataFloat) entry;  						sb.Append($"{e.GetType().Name}({e.Value.ToString(NumberFormatInfo.InvariantInfo)}f);");  						break;  					}  					case 4:  					{  						var e = (MetadataString) entry;  						sb.Append($"{e.GetType().Name}(\"{e.Value}\");");  						break;  					}  					case 5:  					{  						var e = (MetadataSlot) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 6:  					{  						var e = (MetadataIntCoordinates) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  					case 7:  					{  						var e = (MetadataLong) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						if (idx == 0)  						{  							sb.Append($" // {Convert.ToString((long) e.Value' 2)}; {FlagsToString(e.Value)}");  						}  						break;  					}  					case 8:  					{  						var e = (MetadataVector3) entry;  						sb.Append($"{e.GetType().Name}({e.Value});");  						break;  					}  				}
