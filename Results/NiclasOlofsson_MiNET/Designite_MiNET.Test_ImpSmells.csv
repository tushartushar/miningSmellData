Implementation smell,Namespace,Class,File,Method,Description
Long Method,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The method has 115 lines of code.
Complex Method,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,Cyclomatic complexity of the method is 13
Complex Method,MiNET.Test,GenerateMobsTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GenerateMobsTests.cs,CreateEntity,Cyclomatic complexity of the method is 8
Complex Method,MiNET.Test,GenerateMobsTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GenerateMobsTests.cs,AutoPropertyFromJToken,Cyclomatic complexity of the method is 13
Long Statement,MiNET.Test,ClientTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\ClientTests.cs,GenerateBlockstates,The length of the statement  "			var client = new MiNetClient(endpoint' username' new DedicatedThreadPool(new DedicatedThreadPoolSettings(Environment.ProcessorCount))); " is 135.
Long Statement,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The length of the statement  "			byte[] signature = "BZGlTUCpCGPOymtkgnq57fs0Is71CDixo8vMYvXtifJys47R1M3vcuJu7cDVo63sm3CAiCoeK5ysQYra1eAXYLQbZGrb5wbSeyp60UEQLQKkB5etWiq1Qzs4WFk4QvJX".DecodeBase64Url(); " is 168.
Long Statement,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The length of the statement  "			byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59}; " is 577.
Long Statement,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetX5u,The length of the statement  "			string rawGomint = "eyJ4NXUiOiJNSFl3RUFZSEtvWkl6ajBDQVFZRks0RUVBQ0lEWWdBRWVUMWdtalVYUTZVdHdsZUVWbVFFcEhQa1lOczhXMVBqbVBBVmFkNDJnaWdxdG1PdTZaUkU5ZVZJYnROUU10ZDc2WE1NK3ozaUZyWEpvb0dZUUVnNUhTeFpZb3p5XC9EZ1wvY3hSTXdVbWo4RU5kK2FEeW1qQVZjQ1VRajM4bGFzY1EiLCJhbGciOiJFUzM4NCJ9.eyJuYmYiOjE1MzAzODE0MTksInBheWxvYWQiOiJkeWxhbiBsb3ZlcyBwaHAuIHBzc3N0dHR0dHR0dHQiLCJpc3MiOiJzZWxmIiwiZXhwIjoxNTMwNDY3ODIwLCJpYXQiOjE1MzA0Njc4MjAsImNlcnRpZmljYXRlQXV0aG9yaXR5Ijp0cnVlLCJpZGVudGl0eVB1YmxpY0tleSI6Ik1IWXdFQVlIS29aSXpqMENBUVlGSzRFRUFDSURZZ0FFZVQxZ21qVVhRNlV0d2xlRVZtUUVwSFBrWU5zOFcxUGptUEFWYWQ0MmdpZ3F0bU91NlpSRTllVklidE5RTXRkNzZYTU0rejNpRnJYSm9vR1lRRWc1SFN4WllvenlcL0RnXC9jeFJNd1VtajhFTmQrYUR5bWpBVmNDVVFqMzhsYXNjUSJ9.F_8cdmLiQFJi4HWdJi3Ifj5VIhUH-DYti4pgpIqajUR6jYUAPnRmzL2XL3YB5TLGaPWrqwzHFMm9Pr5N6hQgZhMs-7knMAkeNPBK7v_XP0VpvMlZqMLoldHZofHj5ONW"; " is 828.
Long Statement,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetX5u,The length of the statement  "			string x5uGomint = "MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEeT1gmjUXQ6UtwleEVmQEpHPkYNs8W1PjmPAVad42gigqtmOu6ZRE9eVIbtNQMtd76XMM+z3iFrXJooGYQEg5HSxZYozy/Dg/cxRMwUmj8ENd+aDymjAVcCUQj38lascQ"; " is 182.
Long Statement,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetX5u,The length of the statement  "			string rawMinet = "ew0KICAiYWxnIjogIkVTMzg0IiwNCiAgIng1dSI6ICJNSFl3RUFZSEtvWkl6ajBDQVFZRks0RUVBQ0lEWWdBRXpUT2d6MHBad2JIK1VFdDRxcTY2ZVQydlhqNEtxb0lrQUlIdm5paEZwaG1yeUFtczNTYkdmQ3MzcWJHNjlvVm9TVWhwT01MK3VvY3d3N1VieWE4M2R6Tkp2QkpvMXNVbGJmbHdlOTRnN3hIclAwT1huU1pRSCtwL3ZJSnFYMWVHIg0KfQ.ew0KICAibmJmIjogMTUzMDM3Mzg1OCwNCiAgImV4dHJhRGF0YSI6IHsNCiAgICAiaWRlbnRpdHkiOiAiOGQxMzZmZDItZjViNy00Yzc2LThlOTItN2M3YWQwNjhkM2M1IiwNCiAgICAiZGlzcGxheU5hbWUiOiAiVGhlR3JleTAwMSINCiAgfSwNCiAgInJhbmRvbU5vbmNlIjogMjAwNDg3NDg5NywNCiAgImlzcyI6ICJzZWxmIiwNCiAgImV4cCI6IDE1MzA0NjAyNTgsDQogICJpYXQiOiAxNTMwMzczODU4LA0KICAiY2VydGlmaWNhdGVBdXRob3JpdHkiOiB0cnVlLA0KICAiaWRlbnRpdHlQdWJsaWNLZXkiOiAiTUhZd0VBWUhLb1pJemowQ0FRWUZLNEVFQUNJRFlnQUV6VE9nejBwWndiSCtVRXQ0cXE2NmVUMnZYajRLcW9Ja0FJSHZuaWhGcGhtcnlBbXMzU2JHZkNzM3FiRzY5b1ZvU1VocE9NTCt1b2N3dzdVYnlhODNkek5KdkJKbzFzVWxiZmx3ZTk0Zzd4SHJQME9YblNaUUgrcC92SUpxWDFlRyINCn0.eXGlCHYQ6-cXhcoo-raaKl-kR8xLz4F5xAgr1hQs6JCEVVlTRRPmFtS7GbRL_r1XbbyTbSvYaIVDGggVMqqN5ayalRfbluVB1zVVxbPclXXb6rZVuLgKMevNYJYGqKEx"; " is 1016.
Long Statement,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetX5u,The length of the statement  "			string x5uMinet = "MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEzTOgz0pZwbH+UEt4qq66eT2vXj4KqoIkAIHvnihFphmryAms3SbGfCs3qbG69oVoSUhpOML+uocww7Ubya83dzNJvBJo1sUlbflwe94g7xHrP0OXnSZQH+p/vIJqX1eG"; " is 181.
Long Statement,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetX5u,The length of the statement  "			string rawVanilla = "eyJ4NXUiOiJNSFl3RUFZSEtvWkl6ajBDQVFZRks0RUVBQ0lEWWdBRUpqV0JCR2VqWDY0STc0UDN6c0M4SElIUFRsek1mczYwdGcrbFV5ZjZsSEpuc2FGMnJUSVRkNGhSb1NMSlROQTMxT1FVSlFRUnFPZWNJSVBiQ0NRTzhvb0FyMkpXZ21zazNtU2FSdzlLQ1wvXC9EUXFuV3JZU21TYjlVUWRKT2FlemMiLCJhbGciOiJFUzM4NCJ9.eyJuYmYiOjE1MzAzNzY4NTEsImV4dHJhRGF0YSI6eyJYVUlEIjoiMjUzNTQxMDUxMjM3MjIxOCIsImlkZW50aXR5IjoiNmNkZmVjODItNDViNi0zMzIyLTkxMTEtMDg0Y2Q3NGUzMmYwIiwiZGlzcGxheU5hbWUiOiJndXJ1bngifSwicmFuZG9tTm9uY2UiOi03MzE5MDQzODAxMjcwMTE2MDM3LCJpc3MiOiJNb2phbmciLCJleHAiOjE1MzA0NjMzMTEsImlhdCI6MTUzMDM3NjkxMSwiaWRlbnRpdHlQdWJsaWNLZXkiOiJNSFl3RUFZSEtvWkl6ajBDQVFZRks0RUVBQ0lEWWdBRTZUdCtjQlJpbE8zbERTaG54anhVdDBObkNuZjZBblNPK3NBN25Lc0pUSGltZVp6MU12SEJrYVM0M0N1SVRRdEordlNUNVJcL2NtS1Fad0tNVmF5SnJvcFNYaXFrWlRsZjhXMUpWOWlRQ09BbFREcUJqXC94b1k3XC9iRzlxRndzSWJwIn0.m8qIpAT2DgjJxbOulK1Vu-A4jyF9ksD9MWxoNJOLRlyVsWlp8-xb8McmEdhSNqPTTDJjlS7Nqfy-rWLngwu-t0fGM5ISO5YIliIbB_uGqjV3jnX4HSt1OLVIl41_SHcp"; " is 936.
Long Statement,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetX5u,The length of the statement  "			string x5uVanilla = "MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEJjWBBGejX64I74P3zsC8HIHPTlzMfs60tg+lUyf6lHJnsaF2rTITd4hRoSLJTNA31OQUJQQRqOecIIPbCCQO8ooAr2JWgmsk3mSaRw9KC//DQqnWrYSmSb9UQdJOaezc"; " is 183.
Long Statement,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,DecodeBytes,The length of the statement  "			Ensure.IsNotEmpty(token' "Incoming token expected to be in compact serialization form' not empty' whitespace or null."' Array.Empty<object>()); " is 143.
Long Statement,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,DecodeBytes,The length of the statement  "			//string headerValue = (string)settings1.JsonMapper.Parse<Dictionary<string' object>>(Encoding.UTF8.GetString(bytes1))["alg"]; " is 126.
Long Statement,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,DecodeBytes,The length of the statement  "			//		throw new InvalidAlgorithmException("The algorithm type passed to the Decode method did not match the algorithm type in the header."); " is 138.
Long Statement,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestMethod1,The length of the statement  "			string b64InputKey = "MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEVQxN/wFsMiYihwv1psUgKRIhgX02OPBQl0aKYNtKXoCk67hE/lsR8UC77Fqm1HPuMALWG8RcihSHoZwx2HfOz11QkwvlKEf8UuMrbp0yt/mQNJx6QQm6CiZ7e63sYqdV"; " is 184.
Long Statement,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestMethod1,The length of the statement  "			string val = JWT.Encode(handshakeJson' signKey' JwsAlgorithm.ES384' new Dictionary<string' object> {{"x5u"' b64PublicKey}}); " is 124.
Long Statement,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,GenerateClassesForBlocks,The length of the statement  "				foreach (IGrouping<string' KeyValuePair<int' Blockstate>> blockstate in blockstates.OrderBy(kvp => kvp.Value.Name).ThenBy(kvp => kvp.Value.Data).GroupBy(kvp => kvp.Value.Name)) " is 176.
Long Statement,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,GenerateClassesForBlocks,The length of the statement  "							writer.WriteLine($"// runtime id: {enumerator.Current.Value.RuntimeId} 0x{enumerator.Current.Value.RuntimeId:X}' data: {enumerator.Current.Value.Data}"); " is 153.
Long Statement,MiNET.Test,GenerateMobsTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GenerateMobsTests.cs,ReadMobDataFromJson,The length of the statement  "			var files = Directory.EnumerateFileSystemEntries(@"D:\Downloads\bedrock-server-1.11.4.2\behavior_packs\vanilla\entities\"' "*.json"); " is 133.
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] data = new byte[] {0' 1' 2' 3' 4' 5' 6' 7' 8};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] data = new byte[] {0' 1' 2' 3' 4' 5' 6' 7' 8};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] data = new byte[] {0' 1' 2' 3' 4' 5' 6' 7' 8};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] data = new byte[] {0' 1' 2' 3' 4' 5' 6' 7' 8};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] data = new byte[] {0' 1' 2' 3' 4' 5' 6' 7' 8};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] data = new byte[] {0' 1' 2' 3' 4' 5' 6' 7' 8};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] data = new byte[] {0' 1' 2' 3' 4' 5' 6' 7' 8};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetSigning,The following statement contains a magic number: byte[] keybytes = (byte[]) (Array) new sbyte[] {48' 118' 48' 16' 6' 7' 42' -122' 72' -50' 61' 2' 1' 6' 5' 43' -127' 4' 0' 34' 3' 98' 0' 4' 84' -22' 24' 17' 115' 88' 119' -3' 113' -103' -40' 3' -34' -59' 3' 51' 109' 19' 40' 6' -43' 41' 59' 46' 75' 65' 111' 15' 56' 112' 79' 121' 92' 38' 127' -14' 11' 114' 104' -75' 61' -123' -2' -103' 107' -75' -5' -77' 78' -127' -26' -62' -38' -24' 55' -34' 59' -4' -107' -72' 97' -47' 116' -83' -16' 21' -17' 44' -77' -85' -82' -102' 43' 92' 120' 8' -73' -10' 59' -64' 27' 28' 122' 57' 102' -87' -75' -27' 39' 56' -64' 20' 59' 16' -54' -59};
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestGoMinetX5u,The following statement contains a magic number: Assert.AreEqual(384' key.KeySize);
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,DecodeBytes,The following statement contains a magic number: byte[] signature = parts[2];
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestMethod0,The following statement contains a magic number: int metadataMax = 5;
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestMethod0,The following statement contains a magic number: Assert.AreEqual(7' metadataMax);
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestMethod1,The following statement contains a magic number: decryptor.Init(false' new ParametersWithIV(new KeyParameter(secret)' secret.Take(16).ToArray()));
Magic Number,MiNET.Test,CryptoTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\CryptoTests.cs,TestMethod1,The following statement contains a magic number: encryptor.Init(true' new ParametersWithIV(new KeyParameter(secret)' secret.Take(16).ToArray()));
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,DeltaEncodeTest,The following statement contains a magic number: float curr = 0.34453f;
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,DeltaEncodeTest,The following statement contains a magic number: float prev = -3.7989f;
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,DeltaEncodeTest,The following statement contains a magic number: float result = BitConverter.Int32BitsToSingle(BitConverter.SingleToInt32Bits((float) Math.Round(prev' 2)) + delta);
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,DeltaEncodeTest,The following statement contains a magic number: Assert.AreEqual(Math.Round(curr' 2)' Math.Round(result' 2));
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,DeltaEncodeTest,The following statement contains a magic number: Assert.AreEqual(Math.Round(curr' 2)' Math.Round(result' 2));
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: short[] blocks = new short[4096];
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: blocks[i] = (short) random.Next(8);
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: byte[] metas = new byte[4096];
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: uint hash = (uint) blocks[i] << 4 | metas[i];
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: i < 4096
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: int bitsPerBlock = (int) Math.Ceiling(Math.Log(palette.Count' 2));
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: switch (bitsPerBlock)  					{  						case 1:  						case 2:  						case 3:  						case 4:  						case 5:  						case 6:  							//Paletted1 = 1'   // 32 blocks per word  							//Paletted2 = 2'   // 16 blocks per word  							//Paletted3 = 3'   // 10 blocks and 2 bits of padding per word  							//Paletted4 = 4'   // 8 blocks per word  							//Paletted5 = 5'   // 6 blocks and 2 bits of padding per word  							//Paletted6 = 6'   // 5 blocks and 2 bits of padding per word  							break;  						case 7:  						case 8:  							//Paletted8 = 8'  // 4 blocks per word  							bitsPerBlock = 8;  							break;  						case int i when i > 8:  							//Paletted16 = 16' // 2 blocks per word  							bitsPerBlock = 16;  							break;  						default:  							break;  					}
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: switch (bitsPerBlock)  					{  						case 1:  						case 2:  						case 3:  						case 4:  						case 5:  						case 6:  							//Paletted1 = 1'   // 32 blocks per word  							//Paletted2 = 2'   // 16 blocks per word  							//Paletted3 = 3'   // 10 blocks and 2 bits of padding per word  							//Paletted4 = 4'   // 8 blocks per word  							//Paletted5 = 5'   // 6 blocks and 2 bits of padding per word  							//Paletted6 = 6'   // 5 blocks and 2 bits of padding per word  							break;  						case 7:  						case 8:  							//Paletted8 = 8'  // 4 blocks per word  							bitsPerBlock = 8;  							break;  						case int i when i > 8:  							//Paletted16 = 16' // 2 blocks per word  							bitsPerBlock = 16;  							break;  						default:  							break;  					}
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: switch (bitsPerBlock)  					{  						case 1:  						case 2:  						case 3:  						case 4:  						case 5:  						case 6:  							//Paletted1 = 1'   // 32 blocks per word  							//Paletted2 = 2'   // 16 blocks per word  							//Paletted3 = 3'   // 10 blocks and 2 bits of padding per word  							//Paletted4 = 4'   // 8 blocks per word  							//Paletted5 = 5'   // 6 blocks and 2 bits of padding per word  							//Paletted6 = 6'   // 5 blocks and 2 bits of padding per word  							break;  						case 7:  						case 8:  							//Paletted8 = 8'  // 4 blocks per word  							bitsPerBlock = 8;  							break;  						case int i when i > 8:  							//Paletted16 = 16' // 2 blocks per word  							bitsPerBlock = 16;  							break;  						default:  							break;  					}
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: switch (bitsPerBlock)  					{  						case 1:  						case 2:  						case 3:  						case 4:  						case 5:  						case 6:  							//Paletted1 = 1'   // 32 blocks per word  							//Paletted2 = 2'   // 16 blocks per word  							//Paletted3 = 3'   // 10 blocks and 2 bits of padding per word  							//Paletted4 = 4'   // 8 blocks per word  							//Paletted5 = 5'   // 6 blocks and 2 bits of padding per word  							//Paletted6 = 6'   // 5 blocks and 2 bits of padding per word  							break;  						case 7:  						case 8:  							//Paletted8 = 8'  // 4 blocks per word  							bitsPerBlock = 8;  							break;  						case int i when i > 8:  							//Paletted16 = 16' // 2 blocks per word  							bitsPerBlock = 16;  							break;  						default:  							break;  					}
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: switch (bitsPerBlock)  					{  						case 1:  						case 2:  						case 3:  						case 4:  						case 5:  						case 6:  							//Paletted1 = 1'   // 32 blocks per word  							//Paletted2 = 2'   // 16 blocks per word  							//Paletted3 = 3'   // 10 blocks and 2 bits of padding per word  							//Paletted4 = 4'   // 8 blocks per word  							//Paletted5 = 5'   // 6 blocks and 2 bits of padding per word  							//Paletted6 = 6'   // 5 blocks and 2 bits of padding per word  							break;  						case 7:  						case 8:  							//Paletted8 = 8'  // 4 blocks per word  							bitsPerBlock = 8;  							break;  						case int i when i > 8:  							//Paletted16 = 16' // 2 blocks per word  							bitsPerBlock = 16;  							break;  						default:  							break;  					}
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: switch (bitsPerBlock)  					{  						case 1:  						case 2:  						case 3:  						case 4:  						case 5:  						case 6:  							//Paletted1 = 1'   // 32 blocks per word  							//Paletted2 = 2'   // 16 blocks per word  							//Paletted3 = 3'   // 10 blocks and 2 bits of padding per word  							//Paletted4 = 4'   // 8 blocks per word  							//Paletted5 = 5'   // 6 blocks and 2 bits of padding per word  							//Paletted6 = 6'   // 5 blocks and 2 bits of padding per word  							break;  						case 7:  						case 8:  							//Paletted8 = 8'  // 4 blocks per word  							bitsPerBlock = 8;  							break;  						case int i when i > 8:  							//Paletted16 = 16' // 2 blocks per word  							bitsPerBlock = 16;  							break;  						default:  							break;  					}
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: switch (bitsPerBlock)  					{  						case 1:  						case 2:  						case 3:  						case 4:  						case 5:  						case 6:  							//Paletted1 = 1'   // 32 blocks per word  							//Paletted2 = 2'   // 16 blocks per word  							//Paletted3 = 3'   // 10 blocks and 2 bits of padding per word  							//Paletted4 = 4'   // 8 blocks per word  							//Paletted5 = 5'   // 6 blocks and 2 bits of padding per word  							//Paletted6 = 6'   // 5 blocks and 2 bits of padding per word  							break;  						case 7:  						case 8:  							//Paletted8 = 8'  // 4 blocks per word  							bitsPerBlock = 8;  							break;  						case int i when i > 8:  							//Paletted16 = 16' // 2 blocks per word  							bitsPerBlock = 16;  							break;  						default:  							break;  					}
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: switch (bitsPerBlock)  					{  						case 1:  						case 2:  						case 3:  						case 4:  						case 5:  						case 6:  							//Paletted1 = 1'   // 32 blocks per word  							//Paletted2 = 2'   // 16 blocks per word  							//Paletted3 = 3'   // 10 blocks and 2 bits of padding per word  							//Paletted4 = 4'   // 8 blocks per word  							//Paletted5 = 5'   // 6 blocks and 2 bits of padding per word  							//Paletted6 = 6'   // 5 blocks and 2 bits of padding per word  							break;  						case 7:  						case 8:  							//Paletted8 = 8'  // 4 blocks per word  							bitsPerBlock = 8;  							break;  						case int i when i > 8:  							//Paletted16 = 16' // 2 blocks per word  							bitsPerBlock = 16;  							break;  						default:  							break;  					}
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: switch (bitsPerBlock)  					{  						case 1:  						case 2:  						case 3:  						case 4:  						case 5:  						case 6:  							//Paletted1 = 1'   // 32 blocks per word  							//Paletted2 = 2'   // 16 blocks per word  							//Paletted3 = 3'   // 10 blocks and 2 bits of padding per word  							//Paletted4 = 4'   // 8 blocks per word  							//Paletted5 = 5'   // 6 blocks and 2 bits of padding per word  							//Paletted6 = 6'   // 5 blocks and 2 bits of padding per word  							break;  						case 7:  						case 8:  							//Paletted8 = 8'  // 4 blocks per word  							bitsPerBlock = 8;  							break;  						case int i when i > 8:  							//Paletted16 = 16' // 2 blocks per word  							bitsPerBlock = 16;  							break;  						default:  							break;  					}
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: switch (bitsPerBlock)  					{  						case 1:  						case 2:  						case 3:  						case 4:  						case 5:  						case 6:  							//Paletted1 = 1'   // 32 blocks per word  							//Paletted2 = 2'   // 16 blocks per word  							//Paletted3 = 3'   // 10 blocks and 2 bits of padding per word  							//Paletted4 = 4'   // 8 blocks per word  							//Paletted5 = 5'   // 6 blocks and 2 bits of padding per word  							//Paletted6 = 6'   // 5 blocks and 2 bits of padding per word  							break;  						case 7:  						case 8:  							//Paletted8 = 8'  // 4 blocks per word  							bitsPerBlock = 8;  							break;  						case int i when i > 8:  							//Paletted16 = 16' // 2 blocks per word  							bitsPerBlock = 16;  							break;  						default:  							break;  					}
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: int blocksPerWord = (int) Math.Floor(32f / bitsPerBlock);
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: int wordsPerChunk = (int) Math.Ceiling(4096f / blocksPerWord);
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: Assert.AreEqual(10' blocksPerWord);
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: position >= 4096
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: uint state = palette[(uint) blocks[position] << 4 | metas[position]];
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,EncodePalettedChunk,The following statement contains a magic number: sc < 8
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,IndexShiftTest,The following statement contains a magic number: byte bx = 15;
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,IndexShiftTest,The following statement contains a magic number: byte bz = 15;
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,IndexShiftTest,The following statement contains a magic number: byte by = 15;
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,IndexShiftTest,The following statement contains a magic number: int a = (bx * 256) + (bz * 16) + by;
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,IndexShiftTest,The following statement contains a magic number: int a = (bx * 256) + (bz * 16) + by;
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,IndexShiftTest,The following statement contains a magic number: int b = (bx << 8) | (bz << 4) | by;
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,IndexShiftTest,The following statement contains a magic number: int b = (bx << 8) | (bz << 4) | by;
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,IndexShiftTest,The following statement contains a magic number: int c = by - 16 * (by >> 4);
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,IndexShiftTest,The following statement contains a magic number: int c = by - 16 * (by >> 4);
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,NbtCheckPerformanceTests,The following statement contains a magic number: firework.ExtraData = ItemFireworks.ToNbt(new ItemFireworks.FireworksData()  			{  				Explosions = new List<ItemFireworks.FireworksExplosion>()  				{  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 0}'  						FireworkFade = new[] {(byte) 1}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 0'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 1}'  						FireworkFade = new[] {(byte) 2}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 1'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 2}'  						FireworkFade = new[] {(byte) 3}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 2'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 3}'  						FireworkFade = new[] {(byte) 4}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 3'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 4}'  						FireworkFade = new[] {(byte) 5}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 4'  					}  				}'  				Flight = 2  			});
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,NbtCheckPerformanceTests,The following statement contains a magic number: firework.ExtraData = ItemFireworks.ToNbt(new ItemFireworks.FireworksData()  			{  				Explosions = new List<ItemFireworks.FireworksExplosion>()  				{  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 0}'  						FireworkFade = new[] {(byte) 1}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 0'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 1}'  						FireworkFade = new[] {(byte) 2}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 1'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 2}'  						FireworkFade = new[] {(byte) 3}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 2'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 3}'  						FireworkFade = new[] {(byte) 4}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 3'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 4}'  						FireworkFade = new[] {(byte) 5}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 4'  					}  				}'  				Flight = 2  			});
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,NbtCheckPerformanceTests,The following statement contains a magic number: firework.ExtraData = ItemFireworks.ToNbt(new ItemFireworks.FireworksData()  			{  				Explosions = new List<ItemFireworks.FireworksExplosion>()  				{  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 0}'  						FireworkFade = new[] {(byte) 1}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 0'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 1}'  						FireworkFade = new[] {(byte) 2}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 1'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 2}'  						FireworkFade = new[] {(byte) 3}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 2'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 3}'  						FireworkFade = new[] {(byte) 4}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 3'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 4}'  						FireworkFade = new[] {(byte) 5}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 4'  					}  				}'  				Flight = 2  			});
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,NbtCheckPerformanceTests,The following statement contains a magic number: firework.ExtraData = ItemFireworks.ToNbt(new ItemFireworks.FireworksData()  			{  				Explosions = new List<ItemFireworks.FireworksExplosion>()  				{  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 0}'  						FireworkFade = new[] {(byte) 1}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 0'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 1}'  						FireworkFade = new[] {(byte) 2}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 1'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 2}'  						FireworkFade = new[] {(byte) 3}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 2'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 3}'  						FireworkFade = new[] {(byte) 4}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 3'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 4}'  						FireworkFade = new[] {(byte) 5}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 4'  					}  				}'  				Flight = 2  			});
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,NbtCheckPerformanceTests,The following statement contains a magic number: firework.ExtraData = ItemFireworks.ToNbt(new ItemFireworks.FireworksData()  			{  				Explosions = new List<ItemFireworks.FireworksExplosion>()  				{  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 0}'  						FireworkFade = new[] {(byte) 1}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 0'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 1}'  						FireworkFade = new[] {(byte) 2}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 1'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 2}'  						FireworkFade = new[] {(byte) 3}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 2'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 3}'  						FireworkFade = new[] {(byte) 4}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 3'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 4}'  						FireworkFade = new[] {(byte) 5}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 4'  					}  				}'  				Flight = 2  			});
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,NbtCheckPerformanceTests,The following statement contains a magic number: firework.ExtraData = ItemFireworks.ToNbt(new ItemFireworks.FireworksData()  			{  				Explosions = new List<ItemFireworks.FireworksExplosion>()  				{  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 0}'  						FireworkFade = new[] {(byte) 1}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 0'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 1}'  						FireworkFade = new[] {(byte) 2}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 1'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 2}'  						FireworkFade = new[] {(byte) 3}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 2'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 3}'  						FireworkFade = new[] {(byte) 4}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 3'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 4}'  						FireworkFade = new[] {(byte) 5}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 4'  					}  				}'  				Flight = 2  			});
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,NbtCheckPerformanceTests,The following statement contains a magic number: firework.ExtraData = ItemFireworks.ToNbt(new ItemFireworks.FireworksData()  			{  				Explosions = new List<ItemFireworks.FireworksExplosion>()  				{  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 0}'  						FireworkFade = new[] {(byte) 1}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 0'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 1}'  						FireworkFade = new[] {(byte) 2}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 1'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 2}'  						FireworkFade = new[] {(byte) 3}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 2'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 3}'  						FireworkFade = new[] {(byte) 4}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 3'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 4}'  						FireworkFade = new[] {(byte) 5}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 4'  					}  				}'  				Flight = 2  			});
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,NbtCheckPerformanceTests,The following statement contains a magic number: firework.ExtraData = ItemFireworks.ToNbt(new ItemFireworks.FireworksData()  			{  				Explosions = new List<ItemFireworks.FireworksExplosion>()  				{  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 0}'  						FireworkFade = new[] {(byte) 1}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 0'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 1}'  						FireworkFade = new[] {(byte) 2}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 1'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 2}'  						FireworkFade = new[] {(byte) 3}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 2'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 3}'  						FireworkFade = new[] {(byte) 4}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 3'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 4}'  						FireworkFade = new[] {(byte) 5}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 4'  					}  				}'  				Flight = 2  			});
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,NbtCheckPerformanceTests,The following statement contains a magic number: firework.ExtraData = ItemFireworks.ToNbt(new ItemFireworks.FireworksData()  			{  				Explosions = new List<ItemFireworks.FireworksExplosion>()  				{  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 0}'  						FireworkFade = new[] {(byte) 1}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 0'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 1}'  						FireworkFade = new[] {(byte) 2}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 1'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 2}'  						FireworkFade = new[] {(byte) 3}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 2'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 3}'  						FireworkFade = new[] {(byte) 4}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 3'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 4}'  						FireworkFade = new[] {(byte) 5}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 4'  					}  				}'  				Flight = 2  			});
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,NbtCheckPerformanceTests,The following statement contains a magic number: firework.ExtraData = ItemFireworks.ToNbt(new ItemFireworks.FireworksData()  			{  				Explosions = new List<ItemFireworks.FireworksExplosion>()  				{  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 0}'  						FireworkFade = new[] {(byte) 1}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 0'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 1}'  						FireworkFade = new[] {(byte) 2}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 1'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 2}'  						FireworkFade = new[] {(byte) 3}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 2'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 3}'  						FireworkFade = new[] {(byte) 4}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 3'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 4}'  						FireworkFade = new[] {(byte) 5}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 4'  					}  				}'  				Flight = 2  			});
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,NbtCheckPerformanceTests,The following statement contains a magic number: firework.ExtraData = ItemFireworks.ToNbt(new ItemFireworks.FireworksData()  			{  				Explosions = new List<ItemFireworks.FireworksExplosion>()  				{  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 0}'  						FireworkFade = new[] {(byte) 1}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 0'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 1}'  						FireworkFade = new[] {(byte) 2}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 1'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 2}'  						FireworkFade = new[] {(byte) 3}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 2'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 3}'  						FireworkFade = new[] {(byte) 4}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 3'  					}'  					new ItemFireworks.FireworksExplosion()  					{  						FireworkColor = new[] {(byte) 4}'  						FireworkFade = new[] {(byte) 5}'  						FireworkFlicker = true'  						FireworkTrail = false'  						FireworkType = 4'  					}  				}'  				Flight = 2  			});
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,NbtCheckPerformanceTests,The following statement contains a magic number: i < 10000
Magic Number,MiNET.Test,GeneralTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GeneralTests.cs,ArrayFillPerformanceTests,The following statement contains a magic number: byte[] array = new byte[1000000000];
Magic Number,MiNET.Test,GenerateMobsTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\GenerateMobsTests.cs,CodeTypeName,The following statement contains a magic number: name = name.Substring(3);
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: inventory.Slots[0] = new ItemBlock(new Cobblestone()) {Count = 64};
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: inventory.Slots[1] = new ItemBlock(new Stone()) {Count = 64};
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: inventory.Slots[2] = new ItemBlock(new Stone()) {Count = 64};
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: inventory.Slots[2] = new ItemBlock(new Stone()) {Count = 64};
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: inventory.Slots[3] = new ItemBlock(new Stone()) {Count = 64};
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: inventory.Slots[3] = new ItemBlock(new Stone()) {Count = 64};
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: inventory.RemoveItems((short) new Stone().Id' 2);
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: Assert.AreEqual(64' inventory.Slots[0].Count);
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: Assert.AreEqual(62' inventory.Slots[1].Count);
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: Assert.AreEqual(64' inventory.Slots[2].Count);
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: Assert.AreEqual(64' inventory.Slots[2].Count);
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: Assert.AreEqual(64' inventory.Slots[3].Count);
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: Assert.AreEqual(64' inventory.Slots[3].Count);
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: inventory.RemoveItems((short) new Stone().Id' 64);
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: Assert.AreEqual(64' inventory.Slots[0].Count);
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: Assert.AreEqual(62' inventory.Slots[2].Count);
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: Assert.AreEqual(62' inventory.Slots[2].Count);
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: Assert.AreEqual(64' inventory.Slots[3].Count);
Magic Number,MiNET.Test,InventoryTests,C:\research\architectureSmells\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Test\InventoryTests.cs,RemoveItemsFromInventoryTest,The following statement contains a magic number: Assert.AreEqual(64' inventory.Slots[3].Count);
