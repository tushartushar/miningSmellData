Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,GenerateChunkColumn,Cyclomatic complexity of the method is 18
Long Statement,MiNET.Plotter,PlotCommands,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotCommands.cs,PlotAuto,The length of the statement  "			if (PlotWorldGenerator.IsXRoad(coords.X' true) || PlotWorldGenerator.IsZRoad(coords.Z' true)) return "Not able to claim plot at this position."; " is 144.
Long Statement,MiNET.Plotter,PlotManager,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotManager.cs,TryClaim,The length of the statement  "			player.Level.SetBlock(new GoldBlock {Coordinates = new BlockCoordinates(xOffset' PlotWorldGenerator.PlotHeight + 2' zOffset)}); " is 127.
Long Statement,MiNET.Plotter,PlotManager,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotManager.cs,TryClaim,The length of the statement  "				Coordinates = new BlockCoordinates(xOffset' PlotWorldGenerator.PlotHeight + 2' zOffset) + new BlockCoordinates(PlotWorldGenerator.PlotWidth - 1' 1' PlotWorldGenerator.PlotDepth - 1) " is 181.
Long Statement,MiNET.Plotter,PlotManager,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotManager.cs,TryClaim,The length of the statement  "			Vector3 to = (Vector3) offset + (Vector3) new BlockCoordinates(PlotWorldGenerator.PlotWidth - 1' 256' PlotWorldGenerator.PlotDepth - 1); " is 136.
Long Statement,MiNET.Plotter,PlotManager,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotManager.cs,GetBoundingBoxForPlot,The length of the statement  "			Vector3 to = (Vector3) offset + (Vector3) new BlockCoordinates(PlotWorldGenerator.PlotWidth - 1' 1' PlotWorldGenerator.PlotDepth - 1); " is 134.
Long Statement,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,GenerateChunkColumn,The length of the statement  "					if ((x - RoadWidth + 1)%PlotAreaWidth == 0 && !IsZRoad(z)) chunk.SetBlock(x - xOffset' PlotHeight' z - zOffset' leaves.Id); " is 123.
Long Statement,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,GenerateChunkColumn,The length of the statement  "					if ((z - RoadWidth + 1)%PlotAreaDepth == 0 && !IsXRoad(x)) chunk.SetBlock(x - xOffset' PlotHeight' z - zOffset' leaves.Id); " is 123.
Long Statement,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,GenerateChunkColumn,The length of the statement  "					if (x%PlotAreaWidth == 0 && z%PlotAreaDepth == 0) chunk.SetBlock(x - xOffset' PlotHeight + 1' z - zOffset' new RedstoneBlock().Id); " is 131.
Long Statement,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,GenerateChunkColumn,The length of the statement  "					if (x%PlotAreaWidth == PlotAreaWidth - 1 && z%PlotAreaDepth == PlotAreaDepth - 1) chunk.SetBlock(x - xOffset' PlotHeight + 1' z - zOffset' new LapisBlock().Id); // stone " is 169.
Magic Number,MiNET.Plotter,PlotCommands,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotCommands.cs,PlotTeleport,The following statement contains a magic number: int x = (Math.Abs(plotX) - 1)*PlotWorldGenerator.PlotAreaWidth + PlotWorldGenerator.PlotWidth/2;
Magic Number,MiNET.Plotter,PlotCommands,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotCommands.cs,PlotTeleport,The following statement contains a magic number: int z = (Math.Abs(plotZ) - 1)*PlotWorldGenerator.PlotAreaDepth + PlotWorldGenerator.PlotDepth/2;
Magic Number,MiNET.Plotter,PlotCoordinates,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotCoordinates.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				return (X*397) ^ Z;  			}
Magic Number,MiNET.Plotter,PlotManager,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotManager.cs,TryClaim,The following statement contains a magic number: player.Level.SetBlock(new GoldBlock {Coordinates = new BlockCoordinates(xOffset' PlotWorldGenerator.PlotHeight + 2' zOffset)});
Magic Number,MiNET.Plotter,PlotManager,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotManager.cs,TryClaim,The following statement contains a magic number: player.Level.SetBlock(new EmeraldBlock  			{  				Coordinates = new BlockCoordinates(xOffset' PlotWorldGenerator.PlotHeight + 2' zOffset) + new BlockCoordinates(PlotWorldGenerator.PlotWidth - 1' 1' PlotWorldGenerator.PlotDepth - 1)  			});
Magic Number,MiNET.Plotter,PlotManager,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotManager.cs,TryClaim,The following statement contains a magic number: Vector3 to = (Vector3) offset + (Vector3) new BlockCoordinates(PlotWorldGenerator.PlotWidth - 1' 256' PlotWorldGenerator.PlotDepth - 1);
Magic Number,MiNET.Plotter,PlotterLevelManager,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotterLevelManager.cs,GetLevel,The following statement contains a magic number: if (level == null)  			{  				int viewDistance = Config.GetProperty("ViewDistance"' 11);    				string basePath = Config.GetProperty("PCWorldFolder"' "World").Trim();    				var worldProvider = new AnvilWorldProvider(basePath)  				{  					MissingChunkProvider = new PlotWorldGenerator()'  					ReadSkyLight = !Config.GetProperty("CalculateLights"' false)'  					ReadBlockLight = !Config.GetProperty("CalculateLights"' false)'  				};    				level = new Level(this' name' worldProvider' EntityManager' GameMode.Creative' Difficulty.Normal' viewDistance)  				{  					EnableBlockTicking = Config.GetProperty("EnableBlockTicking"' false)'  					EnableChunkTicking = Config.GetProperty("EnableChunkTicking"' false)'  					DrowningDamage = Config.GetProperty("GameRule.DrowningDamage"' true)'  					CommandblockOutput = Config.GetProperty("GameRule.CommandblockOutput"' true)'  					DoTiledrops = Config.GetProperty("GameRule.DoTiledrops"' true)'  					DoMobloot = Config.GetProperty("GameRule.DoMobloot"' true)'  					KeepInventory = Config.GetProperty("GameRule.KeepInventory"' true)'  					DoDaylightcycle = Config.GetProperty("GameRule.DoDaylightcycle"' true)'  					DoMobspawning = Config.GetProperty("GameRule.DoMobspawning"' true)'  					DoEntitydrops = Config.GetProperty("GameRule.DoEntitydrops"' true)'  					DoFiretick = Config.GetProperty("GameRule.DoFiretick"' true)'  					DoWeathercycle = Config.GetProperty("GameRule.DoWeathercycle"' true)'  					Pvp = Config.GetProperty("GameRule.Pvp"' true)'  					Falldamage = Config.GetProperty("GameRule.Falldamage"' true)'  					Firedamage = Config.GetProperty("GameRule.Firedamage"' true)'  					Mobgriefing = Config.GetProperty("GameRule.Mobgriefing"' true)'  					ShowCoordinates = Config.GetProperty("GameRule.ShowCoordinates"' true)'  					NaturalRegeneration = Config.GetProperty("GameRule.NaturalRegeneration"' true)'  					TntExplodes = Config.GetProperty("GameRule.TntExploads"' true)'  					SendCommandfeedback = Config.GetProperty("GameRule.SendCommandfeedback"' true)'  					RandomTickSpeed = Config.GetProperty("GameRule.RandomTickSpeed"' 3)'  				};  				level.Initialize();    				Levels.Add(level);  				OnLevelCreated(new LevelEventArgs(null' level));  			}
Magic Number,MiNET.Plotter,PlotterLevelManager,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotterLevelManager.cs,GetLevel,The following statement contains a magic number: if (level == null)  			{  				int viewDistance = Config.GetProperty("ViewDistance"' 11);    				string basePath = Config.GetProperty("PCWorldFolder"' "World").Trim();    				var worldProvider = new AnvilWorldProvider(basePath)  				{  					MissingChunkProvider = new PlotWorldGenerator()'  					ReadSkyLight = !Config.GetProperty("CalculateLights"' false)'  					ReadBlockLight = !Config.GetProperty("CalculateLights"' false)'  				};    				level = new Level(this' name' worldProvider' EntityManager' GameMode.Creative' Difficulty.Normal' viewDistance)  				{  					EnableBlockTicking = Config.GetProperty("EnableBlockTicking"' false)'  					EnableChunkTicking = Config.GetProperty("EnableChunkTicking"' false)'  					DrowningDamage = Config.GetProperty("GameRule.DrowningDamage"' true)'  					CommandblockOutput = Config.GetProperty("GameRule.CommandblockOutput"' true)'  					DoTiledrops = Config.GetProperty("GameRule.DoTiledrops"' true)'  					DoMobloot = Config.GetProperty("GameRule.DoMobloot"' true)'  					KeepInventory = Config.GetProperty("GameRule.KeepInventory"' true)'  					DoDaylightcycle = Config.GetProperty("GameRule.DoDaylightcycle"' true)'  					DoMobspawning = Config.GetProperty("GameRule.DoMobspawning"' true)'  					DoEntitydrops = Config.GetProperty("GameRule.DoEntitydrops"' true)'  					DoFiretick = Config.GetProperty("GameRule.DoFiretick"' true)'  					DoWeathercycle = Config.GetProperty("GameRule.DoWeathercycle"' true)'  					Pvp = Config.GetProperty("GameRule.Pvp"' true)'  					Falldamage = Config.GetProperty("GameRule.Falldamage"' true)'  					Firedamage = Config.GetProperty("GameRule.Firedamage"' true)'  					Mobgriefing = Config.GetProperty("GameRule.Mobgriefing"' true)'  					ShowCoordinates = Config.GetProperty("GameRule.ShowCoordinates"' true)'  					NaturalRegeneration = Config.GetProperty("GameRule.NaturalRegeneration"' true)'  					TntExplodes = Config.GetProperty("GameRule.TntExploads"' true)'  					SendCommandfeedback = Config.GetProperty("GameRule.SendCommandfeedback"' true)'  					RandomTickSpeed = Config.GetProperty("GameRule.RandomTickSpeed"' 3)'  				};  				level.Initialize();    				Levels.Add(level);  				OnLevelCreated(new LevelEventArgs(null' level));  			}
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,PlotWorldGenerator,The following statement contains a magic number: var andesite = new Stone() {Metadata = 5};
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,PlotWorldGenerator,The following statement contains a magic number: RoadPattern.BlockList.Add(new Pattern.BlockDataEntry() {Weight = 20' Id = gravel.Id' Metadata = gravel.Metadata});
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,PlotWorldGenerator,The following statement contains a magic number: RoadPattern.BlockList.Add(new Pattern.BlockDataEntry() {Weight = 10' Id = dirt.Id' Metadata = dirt.Metadata});
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,PlotWorldGenerator,The following statement contains a magic number: RoadPattern.BlockList.Add(new Pattern.BlockDataEntry() {Weight = 10' Id = andesite.Id' Metadata = andesite.Metadata});
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,PlotWorldGenerator,The following statement contains a magic number: RoadPattern.BlockList.Add(new Pattern.BlockDataEntry() {Weight = 20' Id = stone.Id' Metadata = stone.Metadata});
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,PlotWorldGenerator,The following statement contains a magic number: RoadPattern.BlockList.Add(new Pattern.BlockDataEntry() {Weight = 40' Id = grass.Id' Metadata = grass.Metadata});
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,PlotWorldGenerator,The following statement contains a magic number: PlotPattern.BlockList.Add(new Pattern.BlockDataEntry() {Weight = 70' Id = 0' Metadata = 0});
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,PlotWorldGenerator,The following statement contains a magic number: PlotPattern.BlockList.Add(new Pattern.BlockDataEntry() {Weight = 27' Id = 31' Metadata = 1});
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,PlotWorldGenerator,The following statement contains a magic number: PlotPattern.BlockList.Add(new Pattern.BlockDataEntry() {Weight = 27' Id = 31' Metadata = 1});
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,PlotWorldGenerator,The following statement contains a magic number: PlotPattern.BlockList.Add(new Pattern.BlockDataEntry() {Weight = 1' Id = 37' Metadata = 0});
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,PlotWorldGenerator,The following statement contains a magic number: PlotPattern.BlockList.Add(new Pattern.BlockDataEntry() {Weight = 1' Id = 38' Metadata = 0});
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,PlotWorldGenerator,The following statement contains a magic number: PlotPattern.BlockList.Add(new Pattern.BlockDataEntry() {Weight = 1' Id = 38' Metadata = 8});
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,PlotWorldGenerator,The following statement contains a magic number: PlotPattern.BlockList.Add(new Pattern.BlockDataEntry() {Weight = 1' Id = 38' Metadata = 8});
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,GenerateChunkColumn,The following statement contains a magic number: int xOffset = chunk.x << 4;
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,GenerateChunkColumn,The following statement contains a magic number: int zOffset = chunk.z << 4;
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,GenerateChunkColumn,The following statement contains a magic number: for (int x = 0; x < 16; x++)  			{  				for (int z = 0; z < 16; z++)  				{  					for (int y = 0; y < PlotHeight + 1; y++)  					{  						if (y == 0) chunk.SetBlock(x' y' z' 7); // Bedrock  						else if (y == PlotHeight - 1) chunk.SetBlock(x' y' z' 2); // grass  						else if (y == PlotHeight)  						{  							if (!IsZRoad(z + zOffset' true) && !IsXRoad(x + xOffset' true))  							{  								var block = PlotPattern.Next(new BlockCoordinates(x' PlotHeight' z));  								chunk.SetBlock(x' y' z' block.Id); // grass  								if (block.Metadata != 0)  								{  									chunk.SetMetadata(x' y' z' block.Metadata); // grass  								}  							}  						}  						else if (y > PlotHeight - 4) chunk.SetBlock(x' y' z' 3); // dirt  						else chunk.SetBlock(x' y' z' 1); // stone  					}  					chunk.SetHeight(x' z' PlotHeight);  				}  			}
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,GenerateChunkColumn,The following statement contains a magic number: for (int x = 0; x < 16; x++)  			{  				for (int z = 0; z < 16; z++)  				{  					for (int y = 0; y < PlotHeight + 1; y++)  					{  						if (y == 0) chunk.SetBlock(x' y' z' 7); // Bedrock  						else if (y == PlotHeight - 1) chunk.SetBlock(x' y' z' 2); // grass  						else if (y == PlotHeight)  						{  							if (!IsZRoad(z + zOffset' true) && !IsXRoad(x + xOffset' true))  							{  								var block = PlotPattern.Next(new BlockCoordinates(x' PlotHeight' z));  								chunk.SetBlock(x' y' z' block.Id); // grass  								if (block.Metadata != 0)  								{  									chunk.SetMetadata(x' y' z' block.Metadata); // grass  								}  							}  						}  						else if (y > PlotHeight - 4) chunk.SetBlock(x' y' z' 3); // dirt  						else chunk.SetBlock(x' y' z' 1); // stone  					}  					chunk.SetHeight(x' z' PlotHeight);  				}  			}
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,GenerateChunkColumn,The following statement contains a magic number: for (int x = 0; x < 16; x++)  			{  				for (int z = 0; z < 16; z++)  				{  					for (int y = 0; y < PlotHeight + 1; y++)  					{  						if (y == 0) chunk.SetBlock(x' y' z' 7); // Bedrock  						else if (y == PlotHeight - 1) chunk.SetBlock(x' y' z' 2); // grass  						else if (y == PlotHeight)  						{  							if (!IsZRoad(z + zOffset' true) && !IsXRoad(x + xOffset' true))  							{  								var block = PlotPattern.Next(new BlockCoordinates(x' PlotHeight' z));  								chunk.SetBlock(x' y' z' block.Id); // grass  								if (block.Metadata != 0)  								{  									chunk.SetMetadata(x' y' z' block.Metadata); // grass  								}  							}  						}  						else if (y > PlotHeight - 4) chunk.SetBlock(x' y' z' 3); // dirt  						else chunk.SetBlock(x' y' z' 1); // stone  					}  					chunk.SetHeight(x' z' PlotHeight);  				}  			}
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,GenerateChunkColumn,The following statement contains a magic number: for (int x = 0; x < 16; x++)  			{  				for (int z = 0; z < 16; z++)  				{  					for (int y = 0; y < PlotHeight + 1; y++)  					{  						if (y == 0) chunk.SetBlock(x' y' z' 7); // Bedrock  						else if (y == PlotHeight - 1) chunk.SetBlock(x' y' z' 2); // grass  						else if (y == PlotHeight)  						{  							if (!IsZRoad(z + zOffset' true) && !IsXRoad(x + xOffset' true))  							{  								var block = PlotPattern.Next(new BlockCoordinates(x' PlotHeight' z));  								chunk.SetBlock(x' y' z' block.Id); // grass  								if (block.Metadata != 0)  								{  									chunk.SetMetadata(x' y' z' block.Metadata); // grass  								}  							}  						}  						else if (y > PlotHeight - 4) chunk.SetBlock(x' y' z' 3); // dirt  						else chunk.SetBlock(x' y' z' 1); // stone  					}  					chunk.SetHeight(x' z' PlotHeight);  				}  			}
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,GenerateChunkColumn,The following statement contains a magic number: for (int x = 0; x < 16; x++)  			{  				for (int z = 0; z < 16; z++)  				{  					for (int y = 0; y < PlotHeight + 1; y++)  					{  						if (y == 0) chunk.SetBlock(x' y' z' 7); // Bedrock  						else if (y == PlotHeight - 1) chunk.SetBlock(x' y' z' 2); // grass  						else if (y == PlotHeight)  						{  							if (!IsZRoad(z + zOffset' true) && !IsXRoad(x + xOffset' true))  							{  								var block = PlotPattern.Next(new BlockCoordinates(x' PlotHeight' z));  								chunk.SetBlock(x' y' z' block.Id); // grass  								if (block.Metadata != 0)  								{  									chunk.SetMetadata(x' y' z' block.Metadata); // grass  								}  							}  						}  						else if (y > PlotHeight - 4) chunk.SetBlock(x' y' z' 3); // dirt  						else chunk.SetBlock(x' y' z' 1); // stone  					}  					chunk.SetHeight(x' z' PlotHeight);  				}  			}
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,GenerateChunkColumn,The following statement contains a magic number: for (int x = 0; x < 16; x++)  			{  				for (int z = 0; z < 16; z++)  				{  					for (int y = 0; y < PlotHeight + 1; y++)  					{  						if (y == 0) chunk.SetBlock(x' y' z' 7); // Bedrock  						else if (y == PlotHeight - 1) chunk.SetBlock(x' y' z' 2); // grass  						else if (y == PlotHeight)  						{  							if (!IsZRoad(z + zOffset' true) && !IsXRoad(x + xOffset' true))  							{  								var block = PlotPattern.Next(new BlockCoordinates(x' PlotHeight' z));  								chunk.SetBlock(x' y' z' block.Id); // grass  								if (block.Metadata != 0)  								{  									chunk.SetMetadata(x' y' z' block.Metadata); // grass  								}  							}  						}  						else if (y > PlotHeight - 4) chunk.SetBlock(x' y' z' 3); // dirt  						else chunk.SetBlock(x' y' z' 1); // stone  					}  					chunk.SetHeight(x' z' PlotHeight);  				}  			}
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,GenerateChunkColumn,The following statement contains a magic number: for (int x = xOffset; x < xOffset + 16; x++)  			{  				for (int z = zOffset; z < zOffset + 16; z++)  				{  					for (int i = 1; i < RoadWidth - 1; i++)  					{  						var block = RoadPattern.Next(new BlockCoordinates(x' PlotHeight' z));  						if ((x - i)%PlotAreaWidth == 0)  						{  							chunk.SetBlock(x - xOffset' PlotHeight - 1' z - zOffset' block.Id);  							if (block.Metadata != 0)  								chunk.SetMetadata(x - xOffset' PlotHeight - 1' z - zOffset' block.Metadata);  						}  						if ((z - i)%PlotAreaDepth == 0)  						{  							chunk.SetBlock(x - xOffset' PlotHeight - 1' z - zOffset' block.Id);  							if (block.Metadata != 0)  								chunk.SetMetadata(x - xOffset' PlotHeight - 1' z - zOffset' block.Metadata);  						}  					}    					if (x%PlotAreaWidth == 0 && !IsZRoad(z)) chunk.SetBlock(x - xOffset' PlotHeight' z - zOffset' leaves.Id);  					if ((x - RoadWidth + 1)%PlotAreaWidth == 0 && !IsZRoad(z)) chunk.SetBlock(x - xOffset' PlotHeight' z - zOffset' leaves.Id);    					if (z%PlotAreaDepth == 0 && !IsXRoad(x)) chunk.SetBlock(x - xOffset' PlotHeight' z - zOffset' leaves.Id);  					if ((z - RoadWidth + 1)%PlotAreaDepth == 0 && !IsXRoad(x)) chunk.SetBlock(x - xOffset' PlotHeight' z - zOffset' leaves.Id);    					if (x%PlotAreaWidth == 0 && z%PlotAreaDepth == 0) chunk.SetBlock(x - xOffset' PlotHeight + 1' z - zOffset' new RedstoneBlock().Id);  					if (x%PlotAreaWidth == PlotAreaWidth - 1 && z%PlotAreaDepth == PlotAreaDepth - 1) chunk.SetBlock(x - xOffset' PlotHeight + 1' z - zOffset' new LapisBlock().Id); // stone  				}  			}
Magic Number,MiNET.Plotter,PlotWorldGenerator,C:\repos\NiclasOlofsson_MiNET\src\MiNET\MiNET.Plotter\PlotWorldGenerator.cs,GenerateChunkColumn,The following statement contains a magic number: for (int x = xOffset; x < xOffset + 16; x++)  			{  				for (int z = zOffset; z < zOffset + 16; z++)  				{  					for (int i = 1; i < RoadWidth - 1; i++)  					{  						var block = RoadPattern.Next(new BlockCoordinates(x' PlotHeight' z));  						if ((x - i)%PlotAreaWidth == 0)  						{  							chunk.SetBlock(x - xOffset' PlotHeight - 1' z - zOffset' block.Id);  							if (block.Metadata != 0)  								chunk.SetMetadata(x - xOffset' PlotHeight - 1' z - zOffset' block.Metadata);  						}  						if ((z - i)%PlotAreaDepth == 0)  						{  							chunk.SetBlock(x - xOffset' PlotHeight - 1' z - zOffset' block.Id);  							if (block.Metadata != 0)  								chunk.SetMetadata(x - xOffset' PlotHeight - 1' z - zOffset' block.Metadata);  						}  					}    					if (x%PlotAreaWidth == 0 && !IsZRoad(z)) chunk.SetBlock(x - xOffset' PlotHeight' z - zOffset' leaves.Id);  					if ((x - RoadWidth + 1)%PlotAreaWidth == 0 && !IsZRoad(z)) chunk.SetBlock(x - xOffset' PlotHeight' z - zOffset' leaves.Id);    					if (z%PlotAreaDepth == 0 && !IsXRoad(x)) chunk.SetBlock(x - xOffset' PlotHeight' z - zOffset' leaves.Id);  					if ((z - RoadWidth + 1)%PlotAreaDepth == 0 && !IsXRoad(x)) chunk.SetBlock(x - xOffset' PlotHeight' z - zOffset' leaves.Id);    					if (x%PlotAreaWidth == 0 && z%PlotAreaDepth == 0) chunk.SetBlock(x - xOffset' PlotHeight + 1' z - zOffset' new RedstoneBlock().Id);  					if (x%PlotAreaWidth == PlotAreaWidth - 1 && z%PlotAreaDepth == PlotAreaDepth - 1) chunk.SetBlock(x - xOffset' PlotHeight + 1' z - zOffset' new LapisBlock().Id); // stone  				}  			}
