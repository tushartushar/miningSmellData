Implementation smell,Namespace,Class,File,Method,Description
Complex Method,System,StringHtmlExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\StringHtmlExtensions.cs,TruncateHtml,Cyclomatic complexity of the method is 13
Long Parameter List,System.Web,CacheExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\CacheExtensions.cs,Data,The method has 4 parameters.
Long Statement,System,StringHtmlExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\StringHtmlExtensions.cs,TruncateHtml,The length of the statement  "	var matches = Regex.Matches (trunc.ToString ()' @"<((?<tag>[^\s/>]+)|/(?<closeTag>[^\s>]+)).*?(?<selfClose>/)?\s*>"' RegexOptions.IgnoreCase | RegexOptions.Compiled | RegexOptions.Multiline); " is 191.
Long Statement,System,StringHtmlExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\StringHtmlExtensions.cs,TruncateWords,The length of the statement  "	return Regex.Replace (text.Truncate (maxCharacters)' @"\s+[^\s]+$"' string.Empty' RegexOptions.IgnoreCase | RegexOptions.Compiled) + trailingText; " is 146.
Long Statement,Helpers.Net,QueryString,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\QueryStringBuilder.cs,ToString,The length of the statement  "				builder.Append ((builder.Length == 0) ? "?" : "&").Append (HttpUtility.UrlEncodeUnicode (base.Keys [i])).Append ("=").Append (val); " is 131.
Long Statement,Helpers.Net,StringEnumExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\StringEnum.cs,GetStringValue,The length of the statement  "	StringValueAttribute[] attribs = fieldInfo.GetCustomAttributes (typeof(StringValueAttribute)' false) as StringValueAttribute[]; " is 127.
Magic Number,System,AlphaID,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\AlphaID.cs,AlphaNumericString,The following statement contains a magic number: return rand.AlphaNumericString (5);  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalSeconds < 60)  	return message (elapsed.TotalSeconds' "second");  else if (elapsed.TotalMinutes < 60)  	return message (elapsed.TotalMinutes' "minute");  else if (elapsed.TotalHours < 24)  	return message (elapsed.TotalHours' "hour");  else if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalSeconds < 60)  	return message (elapsed.TotalSeconds' "second");  else if (elapsed.TotalMinutes < 60)  	return message (elapsed.TotalMinutes' "minute");  else if (elapsed.TotalHours < 24)  	return message (elapsed.TotalHours' "hour");  else if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalSeconds < 60)  	return message (elapsed.TotalSeconds' "second");  else if (elapsed.TotalMinutes < 60)  	return message (elapsed.TotalMinutes' "minute");  else if (elapsed.TotalHours < 24)  	return message (elapsed.TotalHours' "hour");  else if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalSeconds < 60)  	return message (elapsed.TotalSeconds' "second");  else if (elapsed.TotalMinutes < 60)  	return message (elapsed.TotalMinutes' "minute");  else if (elapsed.TotalHours < 24)  	return message (elapsed.TotalHours' "hour");  else if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalSeconds < 60)  	return message (elapsed.TotalSeconds' "second");  else if (elapsed.TotalMinutes < 60)  	return message (elapsed.TotalMinutes' "minute");  else if (elapsed.TotalHours < 24)  	return message (elapsed.TotalHours' "hour");  else if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalSeconds < 60)  	return message (elapsed.TotalSeconds' "second");  else if (elapsed.TotalMinutes < 60)  	return message (elapsed.TotalMinutes' "minute");  else if (elapsed.TotalHours < 24)  	return message (elapsed.TotalHours' "hour");  else if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalSeconds < 60)  	return message (elapsed.TotalSeconds' "second");  else if (elapsed.TotalMinutes < 60)  	return message (elapsed.TotalMinutes' "minute");  else if (elapsed.TotalHours < 24)  	return message (elapsed.TotalHours' "hour");  else if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalMinutes < 60)  	return message (elapsed.TotalMinutes' "minute");  else if (elapsed.TotalHours < 24)  	return message (elapsed.TotalHours' "hour");  else if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalMinutes < 60)  	return message (elapsed.TotalMinutes' "minute");  else if (elapsed.TotalHours < 24)  	return message (elapsed.TotalHours' "hour");  else if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalMinutes < 60)  	return message (elapsed.TotalMinutes' "minute");  else if (elapsed.TotalHours < 24)  	return message (elapsed.TotalHours' "hour");  else if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalMinutes < 60)  	return message (elapsed.TotalMinutes' "minute");  else if (elapsed.TotalHours < 24)  	return message (elapsed.TotalHours' "hour");  else if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalMinutes < 60)  	return message (elapsed.TotalMinutes' "minute");  else if (elapsed.TotalHours < 24)  	return message (elapsed.TotalHours' "hour");  else if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalMinutes < 60)  	return message (elapsed.TotalMinutes' "minute");  else if (elapsed.TotalHours < 24)  	return message (elapsed.TotalHours' "hour");  else if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalHours < 24)  	return message (elapsed.TotalHours' "hour");  else if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalHours < 24)  	return message (elapsed.TotalHours' "hour");  else if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalHours < 24)  	return message (elapsed.TotalHours' "hour");  else if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalHours < 24)  	return message (elapsed.TotalHours' "hour");  else if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalHours < 24)  	return message (elapsed.TotalHours' "hour");  else if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalDays < 30)  	return message (elapsed.TotalDays' "day");  else if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: if (elapsed.TotalDays < 365)  	return message (elapsed.TotalDays / 30' "month");  // assume 30 days in a month  else  	return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: return message (elapsed.TotalDays / 30' "month");  
Magic Number,System,DateTimeExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\DateTimeExtensions.cs,ToElapsedString,The following statement contains a magic number: return message (elapsed.TotalDays / 365' "year");  
Magic Number,System,StringExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\StringExtensions.cs,ToAbbreviatedString,The following statement contains a magic number: if (number > 1000000)  	return "{0:#'0.0}M".Format (number / 1000000.0);  else if (number > 1000)  	return "{0}k".Format (number / 1000);  else  	return number.ToString ();  
Magic Number,System,StringExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\StringExtensions.cs,ToAbbreviatedString,The following statement contains a magic number: if (number > 1000000)  	return "{0:#'0.0}M".Format (number / 1000000.0);  else if (number > 1000)  	return "{0}k".Format (number / 1000);  else  	return number.ToString ();  
Magic Number,System,StringExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\StringExtensions.cs,ToAbbreviatedString,The following statement contains a magic number: if (number > 1000000)  	return "{0:#'0.0}M".Format (number / 1000000.0);  else if (number > 1000)  	return "{0}k".Format (number / 1000);  else  	return number.ToString ();  
Magic Number,System,StringExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\StringExtensions.cs,ToAbbreviatedString,The following statement contains a magic number: if (number > 1000000)  	return "{0:#'0.0}M".Format (number / 1000000.0);  else if (number > 1000)  	return "{0}k".Format (number / 1000);  else  	return number.ToString ();  
Magic Number,System,StringExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\StringExtensions.cs,ToAbbreviatedString,The following statement contains a magic number: return "{0:#'0.0}M".Format (number / 1000000.0);  
Magic Number,System,StringExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\StringExtensions.cs,ToAbbreviatedString,The following statement contains a magic number: if (number > 1000)  	return "{0}k".Format (number / 1000);  else  	return number.ToString ();  
Magic Number,System,StringExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\StringExtensions.cs,ToAbbreviatedString,The following statement contains a magic number: if (number > 1000)  	return "{0}k".Format (number / 1000);  else  	return number.ToString ();  
Magic Number,System,StringExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\StringExtensions.cs,ToAbbreviatedString,The following statement contains a magic number: return "{0}k".Format (number / 1000);  
Magic Number,System.Web,HttpContextExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\HttpContextExtensions.cs,PermanentRedirect,The following statement contains a magic number: response.StatusCode = 301;  
Magic Number,Helpers.Math,MathExtensions,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\MathExtensions.cs,HalfLife,The following statement contains a magic number: return number * System.Math.Pow (0.5' time / halfLife);  
Magic Number,System.Threading,ParallelProcessor,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\ParallelProcessor.cs,EachParallel,The following statement contains a magic number: if (count == 0) {  	return;  } else if (count == 1) {  	// if there's only one element' just execute it  	action (list.First ());  } else {  	// Launch each method in it's own thread  	const int MaxHandles = 64;  	for (var offset = 0; offset <= count / MaxHandles; offset++) {  		// break up the list into 64-item chunks because of a limitiation in WaitHandle  		var chunk = list.Skip (offset * MaxHandles).Take (MaxHandles);  		// Initialize the reset events to keep track of completed threads  		var resetEvents = new ManualResetEvent[chunk.Count ()];  		// spawn a thread for each item in the chunk  		int i = 0;  		foreach (var item in chunk) {  			resetEvents [i] = new ManualResetEvent (false);  			ThreadPool.QueueUserWorkItem (new WaitCallback ((object data) => {  				int methodIndex = (int)((object[])data) [0];  				// Execute the method and pass in the enumerated item  				action ((T)((object[])data) [1]);  				// Tell the calling thread that we're done  				resetEvents [methodIndex].Set ();  			})' new object[] {  				i'  				item  			});  			i++;  		}  		// Wait for all threads to execute  		WaitHandle.WaitAll (resetEvents);  	}  }  
Magic Number,System.Threading,ParallelProcessor,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\ParallelProcessor.cs,EachParallel,The following statement contains a magic number: if (count == 1) {  	// if there's only one element' just execute it  	action (list.First ());  } else {  	// Launch each method in it's own thread  	const int MaxHandles = 64;  	for (var offset = 0; offset <= count / MaxHandles; offset++) {  		// break up the list into 64-item chunks because of a limitiation in WaitHandle  		var chunk = list.Skip (offset * MaxHandles).Take (MaxHandles);  		// Initialize the reset events to keep track of completed threads  		var resetEvents = new ManualResetEvent[chunk.Count ()];  		// spawn a thread for each item in the chunk  		int i = 0;  		foreach (var item in chunk) {  			resetEvents [i] = new ManualResetEvent (false);  			ThreadPool.QueueUserWorkItem (new WaitCallback ((object data) => {  				int methodIndex = (int)((object[])data) [0];  				// Execute the method and pass in the enumerated item  				action ((T)((object[])data) [1]);  				// Tell the calling thread that we're done  				resetEvents [methodIndex].Set ();  			})' new object[] {  				i'  				item  			});  			i++;  		}  		// Wait for all threads to execute  		WaitHandle.WaitAll (resetEvents);  	}  }  
Magic Number,Helpers.Net,QueryString,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\QueryStringBuilder.cs,FillFromString,The following statement contains a magic number: foreach (string keyValuePair in ExtractQuerystring (s).Split ('&')) {  	if (string.IsNullOrEmpty (keyValuePair))  		continue;  	string[] split = keyValuePair.Split ('=');  	base.Add (split [0]' split.Length == 2 ? split [1] : "");  }  
Magic Number,Helpers.Net,QueryString,D:\newReposJune17\robvolk_Helpers.Net\Src\Helpers.Net\QueryStringBuilder.cs,FillFromString,The following statement contains a magic number: base.Add (split [0]' split.Length == 2 ? split [1] : "");  
