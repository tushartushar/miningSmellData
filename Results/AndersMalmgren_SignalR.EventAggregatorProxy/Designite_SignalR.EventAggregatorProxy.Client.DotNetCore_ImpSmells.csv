Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,SignalR.EventAggregatorProxy.Client.DotNetCore.Bootstrap.Factories,HubProxyFactory,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Client.DotNetCore\Bootstrap\Factories\HubProxyFactory.cs,Create,The method has 6 parameters. Parameters: hubUrl' configureConnection' onStarted' reconnected' faulted' connected
Long Parameter List,SignalR.EventAggregatorProxy.Client.DotNetCore.Bootstrap.Factories,IHubProxyFactory,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Client.DotNetCore\Bootstrap\Factories\IHubProxyFactory.cs,Create,The method has 6 parameters. Parameters: hubUrl' configureConnection' onStarted' reconnected' faulted' connected
Long Parameter List,SignalR.EventAggregatorProxy.Client.DotNetCore.EventAggregation,EventProxy,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Client.DotNetCore\EventAggregation\EventProxy.cs,Init,The method has 6 parameters. Parameters: hubUrl' eventAggregator' configureConnection' faultedConnectingAction' faultedSubscriptionAction' connectedAction
Long Statement,SignalR.EventAggregatorProxy.Client.DotNetCore.Bootstrap.Factories,HubProxyFactory,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Client.DotNetCore\Bootstrap\Factories\HubProxyFactory.cs,Create,The length of the statement  "            connection.Closed += async (error) => await delayedStart(new Random().Next(0' 5) * 1000); //Best practice acccording to demo :P " is 127.
Long Statement,SignalR.EventAggregatorProxy.Client.DotNetCore.Bootstrap.Options,OptionsBuilder,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Client.DotNetCore\Bootstrap\Options\OptionsBuilder.cs,ConfigureProxy,The length of the statement  "            Task.Run(() => eventProxy.Init(hubUrl' eventAggregator' configureConnection' faultedConnectingAction' faultedSubscriptionAction' connectedAction)); " is 147.
Long Statement,SignalR.EventAggregatorProxy.Client.DotNetCore.EventAggregation,EventProxy,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Client.DotNetCore\EventAggregation\EventProxy.cs,Unsubscribe,The length of the statement  "            var unsubsscriptions = subscriptions.Select(s => new { type = s.EventType.GetFullNameWihoutGenerics()' genericArguments = s.EventType.GetGenericArguments().Select(ga => ga.FullName)' id = s.ConstraintId }).ToList(); " is 215.
Long Statement,SignalR.EventAggregatorProxy.Client.DotNetCore.Event,TypeFinder,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Client.DotNetCore\Event\TypeFinder.cs,GetSubscriberEventTypes,The length of the statement  "                    .Where(i => i.IsGenericType && i.GetGenericTypeDefinition() == handleType && eventTypes.Any(t => t.IsAssignableFrom(i.GetGenericArguments()[0]))) " is 145.
Magic Number,SignalR.EventAggregatorProxy.Client.DotNetCore.Bootstrap.Factories,HubProxyFactory,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Client.DotNetCore\Bootstrap\Factories\HubProxyFactory.cs,Create,The following statement contains a magic number: Func<Task> start = async () =>              {                  try                  {                      await connection.StartAsync();                      if (isConnected)                          await reconnected();                      else                      {                          isConnected = true;                          await onStarted(hub);                          connected();                      }                  }                  catch (Exception ex)                  {                      faulted(ex);                      await delayedStart(5000);                  }              };
Magic Number,SignalR.EventAggregatorProxy.Client.DotNetCore.Bootstrap.Factories,HubProxyFactory,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Client.DotNetCore\Bootstrap\Factories\HubProxyFactory.cs,Create,The following statement contains a magic number: connection.Closed += async (error) => await delayedStart(new Random().Next(0' 5) * 1000);
Magic Number,SignalR.EventAggregatorProxy.Client.DotNetCore.Bootstrap.Factories,HubProxyFactory,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Client.DotNetCore\Bootstrap\Factories\HubProxyFactory.cs,Create,The following statement contains a magic number: connection.Closed += async (error) => await delayedStart(new Random().Next(0' 5) * 1000);
Magic Number,SignalR.EventAggregatorProxy.Client.DotNetCore.EventAggregation,SubscriptionThrottleHandler,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Client.DotNetCore\EventAggregation\SubscriptionThrottleHandler.cs,SubscriptionThrottleHandler,The following statement contains a magic number: throttleTimer = new Timer(32) { AutoReset = false };
