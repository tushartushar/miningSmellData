Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,SignalR.EventAggregatorProxy.EventAggregation,EventProxy,C:\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy\EventAggregation\EventProxy.cs,Subscribe,The method has 5 parameters. Parameters: context' typeName' genericArguments' constraint' constraintId
Long Parameter List,SignalR.EventAggregatorProxy.Model,Subscription,C:\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy\Model\Subscription.cs,Subscription,The method has 6 parameters. Parameters: eventType' connectionId' username' constraint' constraintId' genericArguments
Long Statement,SignalR.EventAggregatorProxy.Extensions,AssemblyExtensions,C:\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy\Extensions\AssemblyExtensions.cs,RetrieveLinkerTimestamp,The length of the statement  "            var dt = new System.DateTime(1970' 1' 1' 0' 0' 0).AddSeconds(System.BitConverter.ToInt32(b' System.BitConverter.ToInt32(b' peHeaderOffset) + linkerTimestampOffset)); " is 165.
Long Statement,SignalR.EventAggregatorProxy.EventAggregation,EventProxy,C:\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy\EventAggregation\EventProxy.cs,Subscribe,The length of the statement  "                userSubscriptions[context.ConnectionId] = new List<Subscription>(userSubscriptions[context.ConnectionId]) { subscription }; " is 123.
Long Statement,SignalR.EventAggregatorProxy.EventAggregation,EventProxy,C:\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy\EventAggregation\EventProxy.cs,Unsubscribe,The length of the statement  "                            new List<Subscription>(userSubscriptions[connectionId].Where(s => !(s.EventType.GUID == type.Type.GUID && GenericArgumentsCorrect(s' type.ClientData.GenericArguments) && ConstraintIdCorrect(s' type.ClientData.ConstraintId)))); " is 226.
Long Statement,SignalR.EventAggregatorProxy.EventAggregation,EventProxy,C:\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy\EventAggregation\EventProxy.cs,Unsubscribe,The length of the statement  "                        new List<Subscription>(subscriptions[type.Type.GUID].Where(s => !(s.ConnectionId == connectionId && GenericArgumentsCorrect(s' type.ClientData.GenericArguments) && GenericArgumentsCorrect(s' type.ClientData.GenericArguments) && ConstraintIdCorrect(s' type.ClientData.ConstraintId)))); " is 284.
Long Statement,SignalR.EventAggregatorProxy.EventAggregation,EventProxy,C:\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy\EventAggregation\EventProxy.cs,Handle,The length of the statement  "            var constraintHandlers = (hasHandlerTypes ? constraintHandlerTypes.Select(t => GlobalHost.DependencyResolver.GetService(t) as IEventConstraintHandler).ToList() : Enumerable.Empty<IEventConstraintHandler>()); " is 207.
Long Statement,SignalR.EventAggregatorProxy.EventAggregation,EventProxy,C:\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy\EventAggregation\EventProxy.cs,Handle,The length of the statement  "                throw new Exception(string.Format("Constraint(s) {0} not registered correctly with the DependencyResolver"' string.Join("; "'constraintHandlerTypes.Select(t=> t.Name)))); " is 170.
Long Statement,SignalR.EventAggregatorProxy.EventAggregation,EventProxy,C:\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy\EventAggregation\EventProxy.cs,Handle,The length of the statement  "                if (hasHandlerTypes && constraintHandlers.Any(handler => !handler.Allow(message' new ConstraintContext(subscription.ConnectionId' subscription.Username)' subscription.Constraint))) " is 180.
Long Statement,SignalR.EventAggregatorProxy.EventAggregation,EventProxy,C:\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy\EventAggregation\EventProxy.cs,Handle,The length of the statement  "                client.onEvent(new Message(eventType.GetFullNameWihoutGenerics()' message' genericArguments' subscription.ConstraintId)); " is 121.
Long Statement,SignalR.EventAggregatorProxy.Hubs,EventAggregatorProxyHub,C:\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy\Hubs\EventAggregatorProxyHub.cs,Subscribe,The length of the statement  "                .ForEach(s => eventProxy.Subscribe(Context' s.Type' s.GenericArguments ?? new string[0]' s.Constraint' s.ConstraintId)); " is 120.
Magic Number,SignalR.EventAggregatorProxy.Extensions,AssemblyExtensions,C:\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy\Extensions\AssemblyExtensions.cs,RetrieveLinkerTimestamp,The following statement contains a magic number: const int peHeaderOffset = 60;
Magic Number,SignalR.EventAggregatorProxy.Extensions,AssemblyExtensions,C:\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy\Extensions\AssemblyExtensions.cs,RetrieveLinkerTimestamp,The following statement contains a magic number: const int linkerTimestampOffset = 8;
Magic Number,SignalR.EventAggregatorProxy.Extensions,AssemblyExtensions,C:\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy\Extensions\AssemblyExtensions.cs,RetrieveLinkerTimestamp,The following statement contains a magic number: var b = new byte[2048];
Magic Number,SignalR.EventAggregatorProxy.Extensions,AssemblyExtensions,C:\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy\Extensions\AssemblyExtensions.cs,RetrieveLinkerTimestamp,The following statement contains a magic number: try              {                  s = new System.IO.FileStream(filePath' System.IO.FileMode.Open' System.IO.FileAccess.Read);                  s.Read(b' 0' 2048);              }              finally              {                  if (s != null)                      s.Close();              }
Magic Number,SignalR.EventAggregatorProxy.Extensions,AssemblyExtensions,C:\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy\Extensions\AssemblyExtensions.cs,RetrieveLinkerTimestamp,The following statement contains a magic number: var dt = new System.DateTime(1970' 1' 1' 0' 0' 0).AddSeconds(System.BitConverter.ToInt32(b' System.BitConverter.ToInt32(b' peHeaderOffset) + linkerTimestampOffset));
