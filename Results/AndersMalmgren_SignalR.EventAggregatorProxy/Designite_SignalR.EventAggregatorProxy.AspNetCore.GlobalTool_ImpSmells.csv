Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SignalR.EventAggregatorProxy.AspNetCore.GlobalTool,Parser,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.AspNetCore.GlobalTool\Parser.cs,Parse,The length of the statement  " * Content generated by a tool' do not edit. See https://github.com/AndersMalmgren/SignalR.EventAggregatorProxy/wiki/Donet-CLI " is 125.
Long Statement,SignalR.EventAggregatorProxy.AspNetCore.GlobalTool,Program,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.AspNetCore.GlobalTool\Program.cs,Main,The length of the statement  "            if(args.Length < 2) throw new ArgumentException("dotnet signalreventproxy [Path_to_event_type_finder_dll] [Path_to_output_js] [Event_type_finder_type(optional)]"); " is 163.
Long Statement,SignalR.EventAggregatorProxy.AspNetCore.GlobalTool,Program,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.AspNetCore.GlobalTool\Program.cs,Main,The length of the statement  "            var typeFinderType = args.Length > 2 ? eventTypeFinderAssembly.GetType(args[2]) : eventTypeFinderAssembly.GetExportedTypes().First(t => !t.IsAbstract && lookup.IsAssignableFrom(t)); " is 181.
Long Statement,SignalR.EventAggregatorProxy.AspNetCore.GlobalTool,AssemblyLoader,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.AspNetCore.GlobalTool\Program.cs,LoadFromAssemblyPath,The length of the statement  "                var inCompileLibraries = DependencyContext.Default.CompileLibraries.Any(l => l.Name.Equals(fileNameWithOutExtension' StringComparison.OrdinalIgnoreCase)); " is 154.
Long Statement,SignalR.EventAggregatorProxy.AspNetCore.GlobalTool,AssemblyLoader,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.AspNetCore.GlobalTool\Program.cs,LoadFromAssemblyPath,The length of the statement  "                var inRuntimeLibraries = DependencyContext.Default.RuntimeLibraries.Any(l => l.Name.Equals(fileNameWithOutExtension' StringComparison.OrdinalIgnoreCase)); " is 154.
Long Statement,SignalR.EventAggregatorProxy.AspNetCore.GlobalTool,AssemblyLoader,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.AspNetCore.GlobalTool\Program.cs,LoadReferencedAssemblies,The length of the statement  "                var filesInDirectory = Directory.GetFiles(directory).Where(x => x != fileName).Select(x => Path.GetFileNameWithoutExtension(x)).ToList(); " is 137.
Empty Catch Block,SignalR.EventAggregatorProxy.AspNetCore.GlobalTool,AssemblyLoader,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.AspNetCore.GlobalTool\Program.cs,LoadReferencedAssemblies,The method has an empty catch block.
Magic Number,SignalR.EventAggregatorProxy.AspNetCore.GlobalTool,Program,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.AspNetCore.GlobalTool\Program.cs,Main,The following statement contains a magic number: args.Length < 2
Magic Number,SignalR.EventAggregatorProxy.AspNetCore.GlobalTool,Program,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.AspNetCore.GlobalTool\Program.cs,Main,The following statement contains a magic number: var typeFinderType = args.Length > 2 ? eventTypeFinderAssembly.GetType(args[2]) : eventTypeFinderAssembly.GetExportedTypes().First(t => !t.IsAbstract && lookup.IsAssignableFrom(t));
Magic Number,SignalR.EventAggregatorProxy.AspNetCore.GlobalTool,Program,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.AspNetCore.GlobalTool\Program.cs,Main,The following statement contains a magic number: var typeFinderType = args.Length > 2 ? eventTypeFinderAssembly.GetType(args[2]) : eventTypeFinderAssembly.GetExportedTypes().First(t => !t.IsAbstract && lookup.IsAssignableFrom(t));
