Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SignalR.EventAggregatorProxy.Tests.Server,EventProxyTest,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Tests.Server\EventProxyTest.cs,SetupProxy,The length of the statement  "                mock.Setup(x => x.GetConstraintHandlerTypes(It.IsAny<Type>())).Returns(constraintHandlerTypes ?? Enumerable.Empty<Type>()); " is 123.
Long Statement,SignalR.EventAggregatorProxy.Tests.Server,EventProxyTest,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Tests.Server\EventProxyTest.cs,SetupProxy,The length of the statement  "            .MockSingleton<IEventAggregator>(mock => mock.Setup(x => x.Subscribe(It.IsAny<Func<object' Task>>())).Callback((Func<object' Task> h) => handler = h)) " is 150.
Long Statement,SignalR.EventAggregatorProxy.Tests.Server,EventProxyTest,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Tests.Server\EventProxyTest.cs,SetupProxy,The length of the statement  "            .MockSingleton<IHubContext<EventAggregatorProxyHub>>(mock => mock.Setup(x => x.Clients.Client(It.IsAny<string>()).SendCoreAsync("onEvent"' It.IsAny<object[]>()' It.IsAny<CancellationToken>())).Callback((string method' object[] obj' CancellationToken cancel) => events.Add(obj[0])).Returns(Task.CompletedTask)) " is 309.
Long Statement,SignalR.EventAggregatorProxy.Tests.Server,EventProxyTest,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Tests.Server\EventProxyTest.cs,SetupProxy,The length of the statement  "            //WhenAccessing<IHubContext' IHubConnectionContext<dynamic>>(x => x.Clients).Return(Get<IHubConnectionContext<dynamic>>()); " is 123.
Long Statement,SignalR.EventAggregatorProxy.Tests.Server,ProxyScriptMiddlewareTest,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Tests.Server\ScriptHandlerTest.cs,ConfigureCollection,The length of the statement  "                .MockSingleton<IEventTypeFinder>(mock => mock.Setup(x => x.ListEventsTypes()).Returns(new[] { typeof(NoMembersEvent)' typeof(MembersEvent) })); " is 143.
Long Statement,SignalR.EventAggregatorProxy.Tests.Server,TypeFinderTest<TEvent>,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Tests.Server\TypeFinderTests.cs,MockTypeFinder,The length of the statement  "            serviceCollection.MockSingleton<IAssemblyLocator>(mock => mock.Setup(x => x.GetAssemblies()).Returns(new[] { Assembly.GetExecutingAssembly() })) " is 144.
Long Statement,SignalR.EventAggregatorProxy.Tests.Server,When_trying_to_find_a_constraint_handler_for_a_base_class_with_multiple_constraint_handlers,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Tests.Server\TypeFinderTests.cs,Context,The length of the statement  "            handlerTypes = Get<TypeFinder>().GetConstraintHandlerTypes(typeof(MySub)).Where(t => new[] { typeof(Handler)' typeof(HandlerTwo) }.Contains(t)); " is 144.
Magic Number,SignalR.EventAggregatorProxy.Tests.Server,When_concurrent_operations_are_performed_on_proxy_event,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Tests.Server\ConcurrencyTests.cs,Context,The following statement contains a magic number: FailIfThreadCrashes(() =>                  {                      if (ids.Count < 100) return;                        string id;                      if (ids.TryTake(out id))                      {                          Unsubscribe(id);                      }                    });
Magic Number,SignalR.EventAggregatorProxy.Tests.Server,When_concurrent_operations_are_performed_on_proxy_event,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Tests.Server\ConcurrencyTests.cs,Context,The following statement contains a magic number: FailIfThreadCrashes(() =>                  {                      if (ids.Count < 100) return;                        string id;                      if (ids.TryTake(out id))                      {                          UnsubscribeConnection(id);                      }                  });
Magic Number,SignalR.EventAggregatorProxy.Tests.Server,When_having_multiple_constraint_handlers_for_an_even_type_which_disallows_event_on_second_handler,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Tests.Server\EventProxyTests.cs,It_should_invoke_both_base_and_sub_implementaion_of_constraint_handers,The following statement contains a magic number: Assert.AreEqual(2' called.Count);
Magic Number,SignalR.EventAggregatorProxy.Tests.Server,When_having_multiple_constraint_handlers_for_an_even_type_which_allows_event,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Tests.Server\EventProxyTests.cs,It_should_only_invoke_both_allow_method,The following statement contains a magic number: Assert.AreEqual(2' called.Count);
Magic Number,SignalR.EventAggregatorProxy.Tests.Server,When_trying_to_find_a_constraint_handler_from_multiple_threads_issue_32,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Tests.Server\TypeFinderTests.cs,Context,The following statement contains a magic number: var work = Enumerable.Range(0' 1000).Select(async i =>              {                  var provider = new ServiceCollection();                  MockTypeFinder(provider);                  var service = provider.BuildServiceProvider();                    var typeFinder = service.GetService<TypeFinder>();                  var tasks = Enumerable.Range(0' Environment.ProcessorCount)                      .Select(cpu => Task.Run(() => typeFinder.GetConstraintHandlerTypes(type))).ToList();                  await Task.WhenAll(tasks);              });
Magic Number,SignalR.EventAggregatorProxy.Tests.Server,When_trying_to_find_a_constraint_handler_for_a_base_class_with_multiple_constraint_handlers,D:\research\architectureSmells\repos\AndersMalmgren_SignalR.EventAggregatorProxy\SignalR.EventAggregatorProxy.Tests.Server\TypeFinderTests.cs,It_should_invoke_correct_handler,The following statement contains a magic number: Assert.AreEqual(2' handlerTypes.Count());
