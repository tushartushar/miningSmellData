Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,NewsBoard.Categorizer,Categorize,C:\repos\tiagoalmeidagit_newsboard\NewsBoard.Categorizer\Categorizer.cs,AssociateNewsWithCategories,The method has 7 parameters.
Long Parameter List,NewsBoard.Categorizer,Categorize,C:\repos\tiagoalmeidagit_newsboard\NewsBoard.Categorizer\Categorizer.cs,CalculateCategoryProbilities,The method has 12 parameters.
Long Parameter List,NewsBoard.Categorizer,Categorize,C:\repos\tiagoalmeidagit_newsboard\NewsBoard.Categorizer\Categorizer.cs,Manual,The method has 5 parameters.
Long Statement,NewsBoard.Categorizer,Categorize,C:\repos\tiagoalmeidagit_newsboard\NewsBoard.Categorizer\Categorizer.cs,AssociateNewsWithCategories,The length of the statement  "			if (percentage.Count (item => item.CategoryProbability >= Constants.Constants.PERCENTAGE_LIMIT_TO_CONDITION_TO_ASSOCIATE) > 1) { " is 128.
Long Statement,NewsBoard.Categorizer,Categorize,C:\repos\tiagoalmeidagit_newsboard\NewsBoard.Categorizer\Categorizer.cs,AssociateNewsWithCategories,The length of the statement  "				final = percentage.First (item => item.CategoryProbability >= Constants.Constants.PERCENTAGE_LIMIT_TO_CONDITION_TO_ASSOCIATE); " is 126.
Long Statement,NewsBoard.Categorizer,Categorize,C:\repos\tiagoalmeidagit_newsboard\NewsBoard.Categorizer\Categorizer.cs,AssociateNewsWithCategories,The length of the statement  "			if (final.CategoryProbability >= Constants.Constants.PERCENTAGE_WHEN_ASSOCIATE_CATEGORY_TO_NEWS || CountRssCategoryOnWords (final) > 1 || final.RssCategory.Equals (final.Category' StringComparison.InvariantCultureIgnoreCase)) { " is 227.
Long Statement,NewsBoard.Categorizer,Categorize,C:\repos\tiagoalmeidagit_newsboard\NewsBoard.Categorizer\Categorizer.cs,CalculateCategoryProbilities,The length of the statement  "	Dictionary<String' NewsPercentages> articleTopWordDictPerNews = _indexerManual.GetTopWordsPerNewsLink (Constants.Constants.ARTICLE_FIELD' Constants.Constants.MANUAL_CATEGORY_FIELD' Constants.Constants.DEFAULTMANUALCATEGORY); " is 224.
Long Statement,NewsBoard.Categorizer,Categorize,C:\repos\tiagoalmeidagit_newsboard\NewsBoard.Categorizer\Categorizer.cs,CalculateCategoryProbilities,The length of the statement  "	Dictionary<String' NewsPercentages> titleTopWordDictPerNews = _indexerManual.GetTopWordsPerNewsLink (Constants.Constants.TITLE_FIELD' Constants.Constants.MANUAL_CATEGORY_FIELD' Constants.Constants.DEFAULTMANUALCATEGORY); " is 220.
Long Statement,NewsBoard.Categorizer,Categorize,C:\repos\tiagoalmeidagit_newsboard\NewsBoard.Categorizer\Categorizer.cs,CalculateCategoryProbilities,The length of the statement  "	IEnumerable<IGrouping<string' KeyValuePair<string' NewsPercentages>>> dict4 = articleTopWordDictPerNews.Union (titleTopWordDictPerNews).GroupBy (kvp => kvp.Key); " is 161.
Long Statement,NewsBoard.Categorizer,Categorize,C:\repos\tiagoalmeidagit_newsboard\NewsBoard.Categorizer\Categorizer.cs,CalculateCategoryProbilities,The length of the statement  "		List<String> adminWords = _indexerManual.GetWords (Constants.Constants.ADMINSUBJECTS_FIELD' Constants.Constants.MANUAL_CATEGORY_FIELD' manualCategory.Name); " is 156.
Long Statement,NewsBoard.Categorizer,Categorize,C:\repos\tiagoalmeidagit_newsboard\NewsBoard.Categorizer\Categorizer.cs,CalculateCategoryProbilities,The length of the statement  "		List<String> titleWords = _indexerManual.GetWords (Constants.Constants.TITLE_FIELD' Constants.Constants.MANUAL_CATEGORY_FIELD' manualCategory.Name); " is 148.
Long Statement,NewsBoard.Categorizer,Categorize,C:\repos\tiagoalmeidagit_newsboard\NewsBoard.Categorizer\Categorizer.cs,CalculateCategoryProbilities,The length of the statement  "		List<String> articleWords = _indexerManual.GetWords (Constants.Constants.ARTICLE_FIELD' Constants.Constants.MANUAL_CATEGORY_FIELD' manualCategory.Name); " is 152.
Long Statement,NewsBoard.Categorizer,Categorize,C:\repos\tiagoalmeidagit_newsboard\NewsBoard.Categorizer\Categorizer.cs,CalculateCategoryProbilities,The length of the statement  "		List<NewsPercentages> newList = probabilities.OrderByDescending (item => item.CategoryProbability).Where (news => news.Category.Equals (manualCategory.Name) && news.CategoryProbability >= Constants.Constants.PERCENTAGE_LIMIT_TO_CONDITION_TO_ASSOCIATE).ToList (); " is 262.
Long Statement,NewsBoard.Categorizer,Categorize,C:\repos\tiagoalmeidagit_newsboard\NewsBoard.Categorizer\Categorizer.cs,CalculateCategoryProbilities,The length of the statement  "	return probabilities.GroupBy (comp => comp.Link).Where (news => news.Count (item => item.CategoryProbability >= Constants.Constants.PERCENTAGE_LIMIT_TO_CONDITION_TO_ASSOCIATE) > 0).ToList (); " is 191.
Long Statement,NewsBoard.Categorizer,Categorize,C:\repos\tiagoalmeidagit_newsboard\NewsBoard.Categorizer\Categorizer.cs,CalculateCategoryProbability,The length of the statement  "	return (adminPercentage * Constants.Constants.PERCENTAGE_CATEGORY_ADMINWORDS) + (titlePercentage * Constants.Constants.PERCENTAGE_CATEGORY_TITLEWORDS) + (articlePercetage * Constants.Constants.PERCENTAGE_CATEGORY_ARTICLEWORDS); " is 227.
Long Statement,NewsBoard.Categorizer,Categorize,C:\repos\tiagoalmeidagit_newsboard\NewsBoard.Categorizer\Categorizer.cs,Manual,The length of the statement  "		NewsCategory tuple = manualCategories.FirstOrDefault (category => category.SubCategories.Any (rssCateg => aux.RssCategory.Contains (rssCateg.Name) || (categoryNAccents != null && categoryNAccents.Contains (rssCateg.Name)))); " is 224.
Magic Number,NewsBoard.Categorizer,Categorize,C:\repos\tiagoalmeidagit_newsboard\NewsBoard.Categorizer\Categorizer.cs,Manual,The following statement contains a magic number: if (manualCategories.Any (tuple => tuple.Name.Equals (aux.RssCategory' StringComparison.InvariantCultureIgnoreCase)))  	newsItem.CategoryName = newsItem.RssCategory;  else {  	string urlEncode = HttpUtility.UrlEncode (aux.RssCategory' Encoding.GetEncoding (28597));  	string categoryNAccents = null;  	if (urlEncode != null) {  		categoryNAccents = urlEncode.Replace ("+"' " ");  	}  	NewsCategory tuple = manualCategories.FirstOrDefault (category => category.SubCategories.Any (rssCateg => aux.RssCategory.Contains (rssCateg.Name) || (categoryNAccents != null && categoryNAccents.Contains (rssCateg.Name))));  	newsItem.CategoryName = tuple != null ? tuple.Name : Constants.Constants.DEFAULTMANUALCATEGORY;  }  
