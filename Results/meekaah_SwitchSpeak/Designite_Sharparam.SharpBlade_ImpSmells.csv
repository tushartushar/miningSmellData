Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Sharparam.SharpBlade.Razer,RazerManager,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\RazerManager.cs,RazerManager,Cyclomatic complexity of the method is 9
Complex Method,Sharparam.SharpBlade.Razer,RazerManager,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\RazerManager.cs,HandleKeyboardEvent,Cyclomatic complexity of the method is 13
Complex Method,Sharparam.SharpBlade.Razer,Touchpad,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\Touchpad.cs,SetGesture,Cyclomatic complexity of the method is 10
Complex Method,Sharparam.SharpBlade.Razer,Touchpad,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\Touchpad.cs,HandleTouchpadGesture,Cyclomatic complexity of the method is 40
Long Parameter List,Sharparam.SharpBlade.Razer,RazerManager,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\RazerManager.cs,EnableDynamicKey,The method has 5 parameters.
Long Parameter List,Sharparam.SharpBlade.Razer,Touchpad,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\Touchpad.cs,OnGesture,The method has 5 parameters.
Long Parameter List,Sharparam.SharpBlade.Razer,Touchpad,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\Touchpad.cs,HandleTouchpadGesture,The method has 5 parameters.
Long Parameter List,Sharparam.SharpBlade.Razer.Events,GestureEventArgs,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\Events\GestureEvent.cs,GestureEventArgs,The method has 5 parameters.
Long Statement,Sharparam.SharpBlade.Integration,KeyboardControl,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Integration\KeyboardControl.cs,SendWPFKeyDown,The length of the statement  "	_wpfControl.RaiseEvent (new KeyEventArgs (Keyboard.PrimaryDevice' PresentationSource.FromVisual (_wpfControl)' 0' wpfKey) { " is 123.
Long Statement,Sharparam.SharpBlade.Integration,KeyboardControl,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Integration\KeyboardControl.cs,SendWPFKeyDown,The length of the statement  "	_wpfControl.RaiseEvent (new KeyEventArgs (Keyboard.PrimaryDevice' PresentationSource.FromVisual (_wpfControl)' 1' wpfKey) { " is 123.
Long Statement,Sharparam.SharpBlade.Integration,KeyboardControl,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Integration\KeyboardControl.cs,SendWPFKeyUp,The length of the statement  "	_wpfControl.RaiseEvent (new KeyEventArgs (Keyboard.PrimaryDevice' PresentationSource.FromVisual (_wpfControl)' 0' wpfKey) { " is 123.
Long Statement,Sharparam.SharpBlade.Integration,KeyboardControl,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Integration\KeyboardControl.cs,SendWPFKeyUp,The length of the statement  "	_wpfControl.RaiseEvent (new KeyEventArgs (Keyboard.PrimaryDevice' PresentationSource.FromVisual (_wpfControl)' 1' wpfKey) { " is 123.
Long Statement,Sharparam.SharpBlade.Integration,KeyboardControl,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Integration\KeyboardControl.cs,SendWPFChar,The length of the statement  "	_wpfControl.RaiseEvent (new TextCompositionEventArgs (InputManager.Current.PrimaryKeyboardDevice' new TextComposition (InputManager.Current' _wpfControl' str)) { " is 161.
Long Statement,Sharparam.SharpBlade.Razer,DynamicKey,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\DynamicKey.cs,UpdateState,The length of the statement  "	if (State == RazerAPI.DynamicKeyState.Up && (PreviousState == RazerAPI.DynamicKeyState.Down || PreviousState == RazerAPI.DynamicKeyState.None)) " is 143.
Long Statement,Sharparam.SharpBlade.Razer,RazerManager,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\RazerManager.cs,EnableDynamicKey,The length of the statement  "		throw new RazerDynamicKeyException (String.Format ("Failed to enable dynamic key {0} due to a native call exception."' keyType)' ex); " is 133.
Long Statement,Sharparam.SharpBlade.Razer,Touchpad,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\Touchpad.cs,SetGesture,The length of the statement  "		if (_activeGesturesType.Has (gestureType) && !(_activeGesturesType == RazerAPI.GestureType.All && !_allGestureEnabled)) { " is 121.
Long Statement,Sharparam.SharpBlade.Razer,Touchpad,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\Touchpad.cs,SetOSGesture,The length of the statement  "		if (_activeOSGesturesType.Has (gestureType) || !(_activeOSGesturesType == RazerAPI.GestureType.All && !_allOSGestureEnabled)) " is 125.
Long Statement,Sharparam.SharpBlade.Razer,Touchpad,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\Touchpad.cs,DrawBitmap,The length of the statement  "	var data = bitmap.LockBits (new Rectangle (0' 0' bitmap.Width' bitmap.Height)' ImageLockMode.ReadOnly' PixelFormat.Format16bppRgb565); " is 134.
Long Statement,Sharparam.SharpBlade.Razer,Touchpad,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\Touchpad.cs,DrawWindow,The length of the statement  "	var rtb = new RenderTargetBitmap (RazerAPI.TouchpadWidth' RazerAPI.TouchpadHeight' 96' 96' System.Windows.Media.PixelFormats.Pbgra32); " is 134.
Empty Catch Block,Sharparam.SharpBlade.Razer,DynamicKey,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\DynamicKey.cs,OnPressed,The method has an empty catch block.
Empty Catch Block,Sharparam.SharpBlade.Razer,RazerManager,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\RazerManager.cs,CreateControlFile,The method has an empty catch block.
Empty Catch Block,Sharparam.SharpBlade.Razer,RazerManager,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\RazerManager.cs,DeleteControlFile,The method has an empty catch block.
Magic Number,Sharparam.SharpBlade.Native,HRESULT,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Native\HRESULT.cs,HRESULT,The following statement contains a magic number: dirCodes = new DirCodes (1324);  
Magic Number,Sharparam.SharpBlade.Razer,Touchpad,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\Touchpad.cs,SetWindow,The following statement contains a magic number: SetWindow (window' method' new TimeSpan (0' 0' 0' 0' 42));  
Magic Number,Sharparam.SharpBlade.Razer,Touchpad,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\Touchpad.cs,HandleTouchpadGesture,The following statement contains a magic number: switch (gestureType) {  case RazerAPI.GestureType.Press:  	OnPress (dwParameters' wXPos' wYPos);  	break;  case RazerAPI.GestureType.Tap:  	OnTap (wXPos' wYPos);  	break;  case RazerAPI.GestureType.Flick: {  	var direction = (RazerAPI.Direction)wZPos;  	OnFlick (dwParameters' direction);  	break;  }  case RazerAPI.GestureType.Zoom: {  	ZoomDirection direction;  	switch (dwParameters) {  	case 1:  		direction = ZoomDirection.In;  		break;  	case 2:  		direction = ZoomDirection.Out;  		break;  	default:  		direction = ZoomDirection.Invalid;  		break;  	}  	OnZoom (direction);  	break;  }  case RazerAPI.GestureType.Rotate: {  	RotateDirection direction;  	switch (dwParameters) {  	case 1:  		direction = RotateDirection.Clockwise;  		break;  	case 2:  		direction = RotateDirection.CounterClockwise;  		break;  	default:  		direction = RotateDirection.Invalid;  		break;  	}  	OnRotate (direction);  	break;  }  case RazerAPI.GestureType.Move:  	OnMove (wXPos' wYPos);  	break;  case RazerAPI.GestureType.Hold:  	OnHold (dwParameters' wXPos' wYPos' wZPos);  	break;  case RazerAPI.GestureType.Release:  	OnRelease (dwParameters' wXPos' wYPos);  	break;  case RazerAPI.GestureType.Scroll:  	OnScroll (dwParameters' wXPos' wYPos' wZPos);  	break;  }  
Magic Number,Sharparam.SharpBlade.Razer,Touchpad,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\Touchpad.cs,HandleTouchpadGesture,The following statement contains a magic number: switch (gestureType) {  case RazerAPI.GestureType.Press:  	OnPress (dwParameters' wXPos' wYPos);  	break;  case RazerAPI.GestureType.Tap:  	OnTap (wXPos' wYPos);  	break;  case RazerAPI.GestureType.Flick: {  	var direction = (RazerAPI.Direction)wZPos;  	OnFlick (dwParameters' direction);  	break;  }  case RazerAPI.GestureType.Zoom: {  	ZoomDirection direction;  	switch (dwParameters) {  	case 1:  		direction = ZoomDirection.In;  		break;  	case 2:  		direction = ZoomDirection.Out;  		break;  	default:  		direction = ZoomDirection.Invalid;  		break;  	}  	OnZoom (direction);  	break;  }  case RazerAPI.GestureType.Rotate: {  	RotateDirection direction;  	switch (dwParameters) {  	case 1:  		direction = RotateDirection.Clockwise;  		break;  	case 2:  		direction = RotateDirection.CounterClockwise;  		break;  	default:  		direction = RotateDirection.Invalid;  		break;  	}  	OnRotate (direction);  	break;  }  case RazerAPI.GestureType.Move:  	OnMove (wXPos' wYPos);  	break;  case RazerAPI.GestureType.Hold:  	OnHold (dwParameters' wXPos' wYPos' wZPos);  	break;  case RazerAPI.GestureType.Release:  	OnRelease (dwParameters' wXPos' wYPos);  	break;  case RazerAPI.GestureType.Scroll:  	OnScroll (dwParameters' wXPos' wYPos' wZPos);  	break;  }  
Magic Number,Sharparam.SharpBlade.Razer,Touchpad,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\Touchpad.cs,HandleTouchpadGesture,The following statement contains a magic number: switch (dwParameters) {  case 1:  	direction = ZoomDirection.In;  	break;  case 2:  	direction = ZoomDirection.Out;  	break;  default:  	direction = ZoomDirection.Invalid;  	break;  }  
Magic Number,Sharparam.SharpBlade.Razer,Touchpad,C:\repos\meekaah_SwitchSpeak\Sharparam.SharpBlade\Razer\Touchpad.cs,HandleTouchpadGesture,The following statement contains a magic number: switch (dwParameters) {  case 1:  	direction = RotateDirection.Clockwise;  	break;  case 2:  	direction = RotateDirection.CounterClockwise;  	break;  default:  	direction = RotateDirection.Invalid;  	break;  }  
