Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SwitchSpeak,MainWindow,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\MainWindow.xaml.cs,TouchpadOnGesture,Cyclomatic complexity of the method is 17
Complex Method,SwitchSpeak,MainWindow,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\MainWindow.xaml.cs,GetClientList,Cyclomatic complexity of the method is 8
Complex Method,SwitchSpeak,MainWindow,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\MainWindow.xaml.cs,Disconnect,Cyclomatic complexity of the method is 22
Long Statement,SwitchSpeak,RazerProvider,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\RazerProvider.cs,OnAppEvent,The length of the statement  "	//_razer.Touchpad.SetWindow(Application.Current.MainWindow' Touchpad.RenderMethod.Polling' new TimeSpan(0' 0' 0' 0' 42)); " is 121.
Long Statement,SwitchSpeak,MainWindow,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\MainWindow.xaml.cs,QueryDispatcher_ReadyForSendingCommands,The length of the statement  "	AsyncServerQueryRunner.Notifications.ClientMovedByTemporaryChannelCreate += Notifications_ClientMovedByTemporaryChannelCreate; " is 126.
Long Statement,SwitchSpeak,MainWindow,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\MainWindow.xaml.cs,QueryDispatcher_ReadyForSendingCommands,The length of the statement  "	AsyncServerQueryRunner.RegisterForNotifications (TS3QueryLib.Core.Server.Entities.ServerNotifyRegisterEvent.Server | TS3QueryLib.Core.Server.Entities.ServerNotifyRegisterEvent.Channel); " is 185.
Long Statement,SwitchSpeak,MainWindow,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\MainWindow.xaml.cs,GetChannelList,The length of the statement  "					channels.Values [j].Subchannels = new ObservableCollection<ChannelListEntry> (channels.Values [j].Subchannels.OrderBy (c => c.Order)); " is 134.
Long Statement,SwitchSpeak,MainWindow,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\MainWindow.xaml.cs,RefreshChannelsAndClients,The length of the statement  "		Debug.WriteLine ("An error occured while refreshing channels and clients: " + ex.Message + Environment.NewLine + ex.StackTrace); " is 128.
Long Statement,SwitchSpeak,MainWindow,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\MainWindow.xaml.cs,QueryDispatcher_BanDetected,The length of the statement  "	Debug.WriteLine (string.Format ("You're account was banned!\nError-Message: {0}\nBan-Message:{1}"' e.Value.ErrorMessage' e.Value.BanExtraMessage)); " is 147.
Long Statement,SwitchSpeak,MainWindow,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\MainWindow.xaml.cs,Disconnect,The length of the statement  "		AsyncServerQueryRunner.Notifications.ClientMovedByTemporaryChannelCreate -= Notifications_ClientMovedByTemporaryChannelCreate; " is 126.
Long Statement,SwitchSpeak,MainWindow,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\MainWindow.xaml.cs,UpdateClientTalkStatus,The length of the statement  "					channels [i].Clients [j].IsClientTalking = talkStatus == TS3QueryLib.Core.Client.Notification.Enums.TalkStatus.TalkStarted; " is 123.
Magic Number,SwitchSpeak,DragScrollViewerAdaptor,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\DragScrollViewerAdaptor.cs,DragScroll,The following statement contains a magic number: if (this._dragScrollTimer == null) {  	this._dragScrollTimer = new DispatcherTimer ();  	this._dragScrollTimer.Tick += this.TickDragScroll;  	this._dragScrollTimer.Interval = new TimeSpan (0' 0' 0' 0' 10);  	this._dragScrollTimer.Start ();  }  
Magic Number,SwitchSpeak,DragScrollViewerAdaptor,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\DragScrollViewerAdaptor.cs,DragScroll,The following statement contains a magic number: this._dragScrollTimer.Interval = new TimeSpan (0' 0' 0' 0' 10);  
Magic Number,SwitchSpeak,DragScrollViewerAdaptor,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\DragScrollViewerAdaptor.cs,TickDragScroll,The following statement contains a magic number: if (this._isDragging) {  	Point point = this._wrappedScrollViewer.TransformToVisual (this._wrappedScrollViewer).Transform (new Point (0.0' 0.0));  	Rect rect = new Rect (point' this._wrappedScrollViewer.RenderSize);  	if (rect.Contains (this._currentPoint)) {  		this.PerformScroll (this.PreviousVelocity);  	}  	if (!this._mouseDown) {  		this.CancelDrag (this.Velocity);  	}  	this._previousPreviousPoint = this._previousPoint;  	this._previousPoint = this._currentPoint;  }  else if (this.Momentum.Length > 0.0) {  	this.Momentum = (Vector)(this.Momentum * (1.0 - (this._friction / 4.0)));  	this.PerformScroll (this.Momentum);  }  else if (this._dragScrollTimer != null) {  	this._dragScrollTimer.Tick -= this.TickDragScroll;  	this._dragScrollTimer.Stop ();  	this._dragScrollTimer = null;  }  
Magic Number,SwitchSpeak,DragScrollViewerAdaptor,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\DragScrollViewerAdaptor.cs,TickDragScroll,The following statement contains a magic number: if (this.Momentum.Length > 0.0) {  	this.Momentum = (Vector)(this.Momentum * (1.0 - (this._friction / 4.0)));  	this.PerformScroll (this.Momentum);  }  else if (this._dragScrollTimer != null) {  	this._dragScrollTimer.Tick -= this.TickDragScroll;  	this._dragScrollTimer.Stop ();  	this._dragScrollTimer = null;  }  
Magic Number,SwitchSpeak,DragScrollViewerAdaptor,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\DragScrollViewerAdaptor.cs,TickDragScroll,The following statement contains a magic number: this.Momentum = (Vector)(this.Momentum * (1.0 - (this._friction / 4.0)));  
Magic Number,SwitchSpeak,WindowHelper,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\WindowHelper.cs,SetWindowLong,The following statement contains a magic number: if (IntPtr.Size == 4) {  	// use SetWindowLong  	Int32 tempResult = IntSetWindowLong (hWnd' nIndex' IntPtrToInt32 (dwNewLong));  	error = Marshal.GetLastWin32Error ();  	result = new IntPtr (tempResult);  }  else {  	// use SetWindowLongPtr  	result = IntSetWindowLongPtr (hWnd' nIndex' dwNewLong);  	error = Marshal.GetLastWin32Error ();  }  
Magic Number,SwitchSpeak,MainWindow,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\MainWindow.xaml.cs,Window_Loaded,The following statement contains a magic number: RazerProvider.Razer.Touchpad.SetWindow (this' Touchpad.RenderMethod.Polling' new TimeSpan (0' 0' 0' 0' 42));  
Magic Number,SwitchSpeak,MainWindow,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\MainWindow.xaml.cs,Connect,The following statement contains a magic number: try {  	Disconnect ();  	SyncQueryDispatcher = new SyncTcpDispatcher ("localhost"' 25639);  	SyncQueryRunner = new QueryRunner (SyncQueryDispatcher);  	me = SyncQueryRunner.SendWhoAmI ();  	if (me.IsErroneous) {  		Debug.WriteLine ("Not a TS3 client!");  		Disconnect ();  		return;  	}  	GetChannelList ();  	treeSpeak.ItemsSource = Channels;  	AsyncQueryDispatcher = new AsyncTcpDispatcher ("localhost"' 25639);  	AsyncQueryDispatcher.BanDetected += QueryDispatcher_BanDetected;  	AsyncQueryDispatcher.ReadyForSendingCommands += QueryDispatcher_ReadyForSendingCommands;  	AsyncQueryDispatcher.ServerClosedConnection += QueryDispatcher_ServerClosedConnection;  	AsyncQueryDispatcher.SocketError += QueryDispatcher_SocketError;  	AsyncQueryDispatcher.NotificationReceived += QueryDispatcher_NotificationReceived;  	AsyncQueryDispatcher.Connect ();  }  catch (Exception ex) {  	Debug.WriteLine (ex);  	Disconnect ();  }  
Magic Number,SwitchSpeak,MainWindow,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\MainWindow.xaml.cs,Connect,The following statement contains a magic number: try {  	Disconnect ();  	SyncQueryDispatcher = new SyncTcpDispatcher ("localhost"' 25639);  	SyncQueryRunner = new QueryRunner (SyncQueryDispatcher);  	me = SyncQueryRunner.SendWhoAmI ();  	if (me.IsErroneous) {  		Debug.WriteLine ("Not a TS3 client!");  		Disconnect ();  		return;  	}  	GetChannelList ();  	treeSpeak.ItemsSource = Channels;  	AsyncQueryDispatcher = new AsyncTcpDispatcher ("localhost"' 25639);  	AsyncQueryDispatcher.BanDetected += QueryDispatcher_BanDetected;  	AsyncQueryDispatcher.ReadyForSendingCommands += QueryDispatcher_ReadyForSendingCommands;  	AsyncQueryDispatcher.ServerClosedConnection += QueryDispatcher_ServerClosedConnection;  	AsyncQueryDispatcher.SocketError += QueryDispatcher_SocketError;  	AsyncQueryDispatcher.NotificationReceived += QueryDispatcher_NotificationReceived;  	AsyncQueryDispatcher.Connect ();  }  catch (Exception ex) {  	Debug.WriteLine (ex);  	Disconnect ();  }  
Magic Number,SwitchSpeak,MainWindow,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\MainWindow.xaml.cs,Connect,The following statement contains a magic number: SyncQueryDispatcher = new SyncTcpDispatcher ("localhost"' 25639);  
Magic Number,SwitchSpeak,MainWindow,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\MainWindow.xaml.cs,Connect,The following statement contains a magic number: AsyncQueryDispatcher = new AsyncTcpDispatcher ("localhost"' 25639);  
Missing Default,SwitchSpeak,RazerProvider,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\RazerProvider.cs,OnAppEvent,The following switch statement is missing a default case: switch (e.Type) {  //case RazerAPI.AppEventType.Activated:  //_razer.Touchpad.ClearWindow();  //_razer.Touchpad.SetWindow(Application.Current.MainWindow' Touchpad.RenderMethod.Polling' new TimeSpan(0' 0' 0' 0' 42));  //break;  case RazerAPI.AppEventType.Deactivated:  //_razer.Touchpad.ClearWindow();  //break;  case RazerAPI.AppEventType.Close:  case RazerAPI.AppEventType.Exit:  	Application.Current.Shutdown ();  	break;  }  
Missing Default,SwitchSpeak,MainWindow,C:\repos\meekaah_SwitchSpeak\SwitchSpeak\MainWindow.xaml.cs,TouchpadOnGesture,The following switch statement is missing a default case: switch (args.GestureType) {  case RazerAPI.GestureType.Move:  	scrollViewerAdaptor.MouseMove (pos);  	break;  case RazerAPI.GestureType.Press:  	scrollViewerAdaptor.MouseLeftButtonDown (pos);  	break;  case RazerAPI.GestureType.Release:  	scrollViewerAdaptor.MouseLeftButtonUp ();  	break;  case RazerAPI.GestureType.Tap:  	HitTestResult result = VisualTreeHelper.HitTest (treeSpeak' pos);  	if (result != null) {  		TreeViewItem tvi = result.VisualHit.FindParent<TreeViewItem> ();  		if (tvi != null) {  			if (tvi.DataContext is TS3QueryLib.Core.Server.Entities.ClientListEntry) {  				//we tapped on a client  				var client = (TS3QueryLib.Core.Server.Entities.ClientListEntry)tvi.DataContext;  				Debug.WriteLine (string.Format ("Tapped on client : {0}"' client.Nickname));  			}  			if (tvi.DataContext is ChannelListEntry) {  				//we tapped on a channel  				var channel = (ChannelListEntry)tvi.DataContext;  				Debug.WriteLine (string.Format ("Tapped on channel : {0}"' channel.Name));  				AsyncServerQueryRunner.MoveClient (me.ClientId' channel.ChannelId);  			}  		}  	}  	break;  }  
