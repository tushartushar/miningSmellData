Implementation smell,Namespace,Class,File,Method,Description
Long Method,NuGetGallery,EntitiesContext,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Entities\EntitiesContext.cs,OnModelCreating,The method has 170 lines of code.
Long Method,NuGetGallery.Packaging,ManifestValidator,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Packaging\ManifestValidator.cs,ValidateCore,The method has 119 lines of code.
Complex Method,NuGetGallery,CorePackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Services\CorePackageService.cs,UpdateIsLatestAsync,Cyclomatic complexity of the method is 10
Complex Method,NuGetGallery.Packaging,ManifestValidator,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Packaging\ManifestValidator.cs,ValidateCore,Cyclomatic complexity of the method is 18
Long Parameter List,NuGetGallery.Auditing,AuditActor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Auditing\AuditActor.cs,AuditActor,The method has 6 parameters. Parameters: machineName' machineIP' userName' authenticationType' credentialKey' timeStampUtc
Long Parameter List,NuGetGallery.Auditing,AuditActor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Auditing\AuditActor.cs,AuditActor,The method has 7 parameters. Parameters: machineName' machineIP' userName' authenticationType' credentialKey' timeStampUtc' onBehalfOf
Long Parameter List,NuGetGallery.Auditing,AuditingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Auditing\AuditingService.cs,SaveAuditRecordAsync,The method has 5 parameters. Parameters: auditData' resourceType' filePath' action' timestamp
Long Parameter List,NuGetGallery.Auditing,NullAuditingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Auditing\AuditingService.cs,SaveAuditRecordAsync,The method has 5 parameters. Parameters: auditData' resourceType' filePath' action' timestamp
Long Parameter List,NuGetGallery.Auditing,UserSecurityPolicyAuditRecord,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Auditing\UserSecurityPolicyAuditRecord.cs,UserSecurityPolicyAuditRecord,The method has 5 parameters. Parameters: username' action' affectedPolicies' success' errorMessage
Long Parameter List,NuGetGallery.Auditing,FileSystemAuditingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Auditing\FileSystemAuditingService.cs,SaveAuditRecordAsync,The method has 5 parameters. Parameters: auditData' resourceType' filePath' action' timestamp
Long Parameter List,NuGetGallery.Auditing,CloudAuditingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Auditing\CloudAuditingService.cs,SaveAuditRecordAsync,The method has 5 parameters. Parameters: auditData' resourceType' filePath' action' timestamp
Long Parameter List,NuGetGallery.Auditing,PackageAuditRecord,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Auditing\PackageAuditRecord.cs,PackageAuditRecord,The method has 7 parameters. Parameters: id' version' hash' packageRecord' registrationRecord' action' reason
Long Parameter List,NuGetGallery,DontRetryOnNotModifiedPolicy,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Services\CloudBlobWrapper.cs,ShouldRetry,The method has 5 parameters. Parameters: currentRetryCount' statusCode' lastException' retryInterval' operationContext
Long Parameter List,NuGetGallery.Diagnostics,IDiagnosticsSource,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Diagnostics\IDiagnosticsSource.cs,TraceEvent,The method has 6 parameters. Parameters: type' id' message' member' file' line
Long Parameter List,NuGetGallery.Packaging,NupkgRewriter,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Packaging\NupkgRewriter.cs,WriteToMetadata,The method has 5 parameters. Parameters: metadataElement' elementName' oldValue' newValue' canBeRemoved
Long Parameter List,NuGetGallery.Packaging,PackageMetadata,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Packaging\PackageMetadata.cs,PackageMetadata,The method has 5 parameters. Parameters: metadata' dependencyGroups' frameworkGroups' packageTypes' minClientVersion
Long Statement,NuGetGallery.Auditing,AuditingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Auditing\AuditingService.cs,SaveAuditRecordAsync,The length of the statement  "            await SaveAuditRecordAsync(rendered' record.GetResourceType()' record.GetPath()' record.GetAction()' entry.Actor.TimestampUtc); " is 127.
Long Statement,NuGetGallery,CredentialTypes,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\CredentialTypes.cs,IsViewSupportedCredential,The length of the statement  "            return SupportedCredentialTypes.Any(credType => string.Compare(credential.Type' credType' StringComparison.OrdinalIgnoreCase) == 0) " is 131.
Long Statement,NuGetGallery,EntitiesContext,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Entities\EntitiesContext.cs,SaveChangesAsync,The length of the statement  "                throw new ReadOnlyModeException("Save changes unavailable: the gallery is currently in read only mode' with limited service. Please try again later."); " is 151.
Long Statement,NuGetGallery,EntitiesContext,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Entities\EntitiesContext.cs,OnModelCreating,The length of the statement  "                .WillCascadeOnDelete(true); // Pending PackageEdits get deleted with their package' since hey' there's no way to apply them without the package anyway. " is 151.
Long Statement,NuGetGallery,CloudBlobCoreFileStorageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Services\CloudBlobCoreFileStorageService.cs,GetFileReadUriAsync,The length of the statement  "                throw new ArgumentNullException(nameof(endOfAccess)' $"{nameof(endOfAccess)} must not be null for non-public containers"); " is 122.
Long Statement,NuGetGallery,CorePackageFileService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Services\CorePackageFileService.cs,SavePackageFileAsync,The length of the statement  "            var fileName = BuildFileName(package' CoreConstants.PackageFileSavePathTemplate' CoreConstants.NuGetPackageFileExtension); " is 122.
Long Statement,NuGetGallery,CorePackageFileService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Services\CorePackageFileService.cs,DownloadPackageFileAsync,The length of the statement  "            var fileName = BuildFileName(package' CoreConstants.PackageFileSavePathTemplate' CoreConstants.NuGetPackageFileExtension); " is 122.
Long Statement,NuGetGallery,CorePackageFileService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Services\CorePackageFileService.cs,GetPackageReadUriAsync,The length of the statement  "            var fileName = BuildFileName(package' CoreConstants.PackageFileSavePathTemplate' CoreConstants.NuGetPackageFileExtension); " is 122.
Long Statement,NuGetGallery,CorePackageFileService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Services\CorePackageFileService.cs,DoesPackageFileExistAsync,The length of the statement  "            var fileName = BuildFileName(package' CoreConstants.PackageFileSavePathTemplate' CoreConstants.NuGetPackageFileExtension); " is 122.
Long Statement,NuGetGallery,CorePackageFileService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Services\CorePackageFileService.cs,DeletePackageFileAsync,The length of the statement  "            var fileName = BuildFileName(id' normalizedVersion' CoreConstants.PackageFileSavePathTemplate' CoreConstants.NuGetPackageFileExtension); " is 136.
Long Statement,NuGetGallery,CorePackageFileService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Services\CorePackageFileService.cs,DoesValidationPackageFileExistAsync,The length of the statement  "            var fileName = BuildFileName(package' CoreConstants.PackageFileSavePathTemplate' CoreConstants.NuGetPackageFileExtension); " is 122.
Long Statement,NuGetGallery,CorePackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Services\CorePackageService.cs,UpdatePackageStatusAsync,The length of the statement  "                throw new ArgumentException($"The {nameof(Package.PackageRegistration)} property must populated on the provided package."' nameof(package)); " is 140.
Long Statement,NuGetGallery,CorePackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Services\CorePackageService.cs,UpdateIsLatestAsync,The length of the statement  "            foreach (var pv in packageRegistration.Packages.Where(p => p.IsLatest || p.IsLatestStable || p.IsLatestSemVer2 || p.IsLatestStableSemVer2)) " is 139.
Long Statement,NuGetGallery.Packaging,NupkgRewriter,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Packaging\NupkgRewriter.cs,RewriteNupkgManifest,The length of the statement  "                // Defined by spec here: https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Packaging/compiler/resources/nuspec.xsd " is 132.
Long Statement,NuGetGallery.Packaging,NupkgRewriter,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Packaging\NupkgRewriter.cs,RewriteNupkgManifest,The length of the statement  "                WriteToMetadata(metadataNode' PackageMetadataStrings.Title' originalManifestElements.Title' editableManifestElements.Title' canBeRemoved: true); " is 144.
Long Statement,NuGetGallery.Packaging,NupkgRewriter,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Packaging\NupkgRewriter.cs,RewriteNupkgManifest,The length of the statement  "                WriteToMetadata(metadataNode' PackageMetadataStrings.Authors' originalManifestElements.Authors' editableManifestElements.Authors); " is 130.
Long Statement,NuGetGallery.Packaging,NupkgRewriter,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Packaging\NupkgRewriter.cs,RewriteNupkgManifest,The length of the statement  "                WriteToMetadata(metadataNode' PackageMetadataStrings.Copyright' originalManifestElements.Copyright' editableManifestElements.Copyright' canBeRemoved: true); " is 156.
Long Statement,NuGetGallery.Packaging,NupkgRewriter,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Packaging\NupkgRewriter.cs,RewriteNupkgManifest,The length of the statement  "                WriteToMetadata(metadataNode' PackageMetadataStrings.Description' originalManifestElements.Description' editableManifestElements.Description); " is 142.
Long Statement,NuGetGallery.Packaging,NupkgRewriter,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Packaging\NupkgRewriter.cs,RewriteNupkgManifest,The length of the statement  "                WriteToMetadata(metadataNode' PackageMetadataStrings.IconUrl' originalManifestElements.IconUrl' editableManifestElements.IconUrl' canBeRemoved: true); " is 150.
Long Statement,NuGetGallery.Packaging,NupkgRewriter,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Packaging\NupkgRewriter.cs,RewriteNupkgManifest,The length of the statement  "                WriteToMetadata(metadataNode' PackageMetadataStrings.LicenseUrl' originalManifestElements.LicenseUrl' editableManifestElements.LicenseUrl' canBeRemoved: true); " is 159.
Long Statement,NuGetGallery.Packaging,NupkgRewriter,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Packaging\NupkgRewriter.cs,RewriteNupkgManifest,The length of the statement  "                WriteToMetadata(metadataNode' PackageMetadataStrings.ProjectUrl' originalManifestElements.ProjectUrl' editableManifestElements.ProjectUrl' canBeRemoved: true); " is 159.
Long Statement,NuGetGallery.Packaging,NupkgRewriter,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Packaging\NupkgRewriter.cs,RewriteNupkgManifest,The length of the statement  "                WriteToMetadata(metadataNode' PackageMetadataStrings.ReleaseNotes' originalManifestElements.ReleaseNotes' editableManifestElements.ReleaseNotes' canBeRemoved: true); " is 165.
Long Statement,NuGetGallery.Packaging,NupkgRewriter,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Packaging\NupkgRewriter.cs,RewriteNupkgManifest,The length of the statement  "                WriteToMetadata(metadataNode' PackageMetadataStrings.Summary' originalManifestElements.Summary' editableManifestElements.Summary' canBeRemoved: true); " is 150.
Long Statement,NuGetGallery.Packaging,NupkgRewriter,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Packaging\NupkgRewriter.cs,RewriteNupkgManifest,The length of the statement  "                WriteToMetadata(metadataNode' PackageMetadataStrings.Tags' originalManifestElements.Tags' editableManifestElements.Tags' canBeRemoved: true); " is 141.
Long Statement,NuGetGallery.Packaging,NupkgRewriter,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Packaging\NupkgRewriter.cs,WriteToMetadata,The length of the statement  "                metadataElement.Add(new XElement(XName.Get(elementName' metadataElement.GetDefaultNamespace().NamespaceName)' newValue)); " is 121.
Long Statement,NuGetGallery.Packaging,PackageIdValidator,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Packaging\PackageIdValidator.cs,ValidatePackageId,The length of the statement  "                    "The package ID '{0}' contains invalid characters. Examples of valid package IDs include 'MyPackage' and 'MyPackage.Sample'."' " is 126.
Complex Conditional,NuGetGallery,SemVerLevelKey,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\SemVerLevelKey.cs,ForPackage,The conditional expression  "(dependencyVersionRange.MinVersion != null && dependencyVersionRange.MinVersion.IsSemVer2)                              || (dependencyVersionRange.MaxVersion != null && dependencyVersionRange.MaxVersion.IsSemVer2)"  is complex.
Complex Conditional,NuGetGallery,CorePackageFileService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Services\CorePackageFileService.cs,BuildFileName,The conditional expression  "package.PackageRegistration == null ||                  String.IsNullOrWhiteSpace(package.PackageRegistration.Id) ||                  (String.IsNullOrWhiteSpace(package.NormalizedVersion) && String.IsNullOrWhiteSpace(package.Version))"  is complex.
Complex Conditional,NuGetGallery,CorePackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Services\CorePackageService.cs,UpdatePackageStatusAsync,The conditional expression  "newPackageStatus == PackageStatus.Available ||                      package.IsLatest ||                      package.IsLatestStable ||                      package.IsLatestSemVer2 ||                      package.IsLatestStableSemVer2"  is complex.
Magic Number,NuGetGallery.Auditing,AuditingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Auditing\AuditingService.cs,AuditingService,The following statement contains a magic number: var settings = new JsonSerializerSettings              {                  DateFormatHandling = DateFormatHandling.IsoDateFormat'                  DateTimeZoneHandling = DateTimeZoneHandling.Utc'                  DefaultValueHandling = DefaultValueHandling.Include'                  Formatting = Formatting.Indented'                  MaxDepth = 10'                  MissingMemberHandling = MissingMemberHandling.Ignore'                  NullValueHandling = NullValueHandling.Include'                  TypeNameHandling = TypeNameHandling.None              };
Magic Number,NuGetGallery.Auditing,AuditRecord,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Auditing\AuditRecord.cs,InferResourceType,The following statement contains a magic number: if (type.EndsWith("AuditRecord"' StringComparison.OrdinalIgnoreCase))              {                  return type.Substring(0' type.Length - 11);              }
Magic Number,NuGetGallery.Auditing,CloudAuditingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Auditing\CloudAuditingService.cs,WriteBlob,The following statement contains a magic number: try              {                  var strm = await Task.Factory.FromAsync(                      (cb' s) => blob.BeginOpenWrite(                          AccessCondition.GenerateIfNoneMatchCondition("*")'                          new BlobRequestOptions()'                          new OperationContext()'                          cb' s)'                      ar => blob.EndOpenWrite(ar)'                      null);                  using (var writer = new StreamWriter(strm))                  {                      await writer.WriteAsync(auditData);                  }              }              catch (StorageException ex)              {                  if (ex.RequestInformation != null && ex.RequestInformation.HttpStatusCode == 409)                  {                      // Blob already existed!                      throw new InvalidOperationException(String.Format(                          CultureInfo.CurrentCulture'                          CoreStrings.CloudAuditingService_DuplicateAuditRecord'                          fullPath)' ex);                  }                  throw;              }
Magic Number,NuGetGallery.Infrastructure,AzureEntityList<T>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Infrastructure\AzureEntityList.cs,AzureEntityList,The following statement contains a magic number: if (!newTable)              {                  var indexResult = _tableRef.Execute(                      TableOperation.Retrieve<Index>(IndexPartitionKey' IndexRowKey));                    needsIndex = (indexResult.HttpStatusCode == 404);              }
Magic Number,NuGetGallery.Infrastructure,AzureEntityList<T>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Infrastructure\AzureEntityList.cs,Add,The following statement contains a magic number: InsertIfNotExistsWithRetry(() =>              {                  pos = LongCount; // retrieve fresh count each retry                  long page = pos / 1000;                  long row = pos % 1000;                  entity.PartitionKey = FormatPartitionKey(page);                  entity.RowKey = FormatRowKey(row);                  return entity;              });
Magic Number,NuGetGallery.Infrastructure,AzureEntityList<T>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Infrastructure\AzureEntityList.cs,Add,The following statement contains a magic number: InsertIfNotExistsWithRetry(() =>              {                  pos = LongCount; // retrieve fresh count each retry                  long page = pos / 1000;                  long row = pos % 1000;                  entity.PartitionKey = FormatPartitionKey(page);                  entity.RowKey = FormatRowKey(row);                  return entity;              });
Magic Number,NuGetGallery.Infrastructure,AzureEntityList<T>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Infrastructure\AzureEntityList.cs,GetEnumerator,The following statement contains a magic number: for (long page = 0;; page++)              {                  string partitionKey = FormatPartitionKey(page);                  var chunkQuery = new TableQuery<T>().Where(                      TableQuery.GenerateFilterCondition("PartitionKey"' QueryComparisons.Equal' partitionKey));                    var chunk = _tableRef.ExecuteQuery(chunkQuery).ToArray();                    foreach (var item in chunk)                  {                      yield return item;                  }                    if (chunk.Length < 1000)                  {                      break;                  }              }
Magic Number,NuGetGallery.Infrastructure,AzureEntityList<T>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Infrastructure\AzureEntityList.cs,GetRange,The following statement contains a magic number: long page = pos / 1000;
Magic Number,NuGetGallery.Infrastructure,AzureEntityList<T>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Infrastructure\AzureEntityList.cs,GetRange,The following statement contains a magic number: long offset = pos % 1000;
Magic Number,NuGetGallery.Infrastructure,AzureEntityList<T>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Infrastructure\AzureEntityList.cs,GetLogicalIndex,The following statement contains a magic number: long page = Int64.Parse(entity.PartitionKey.Substring(5)' CultureInfo.InvariantCulture);
Magic Number,NuGetGallery.Infrastructure,AzureEntityList<T>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Infrastructure\AzureEntityList.cs,GetLogicalIndex,The following statement contains a magic number: return (1000 * page) + offset;
Magic Number,NuGetGallery.Infrastructure,AzureEntityList<T>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Infrastructure\AzureEntityList.cs,InsertIfNotExistsWithRetry,The following statement contains a magic number: do              {                  var entity = valueGenerator();                    // 1) Create a dummy entry to ensure an ETAG exists for the given table partition+row key                  // - the dummy MERGES with existing data instead of overwriting it' so no data loss.                  // 2) Use its ETAG to conditionally replace the item                  // 3) return true if success' false to allow retry on failure                  var dummyResult = _tableRef.Execute(                      TableOperation.InsertOrMerge(new HazardEntry                      {                          PartitionKey = entity.PartitionKey'                          RowKey = entity.RowKey'                      }));                    if (!IsSuccess(dummyResult.HttpStatusCode))                  {                      throw new HttpException(dummyResult.HttpStatusCode' "wrong status code");                  }                    entity.ETag = dummyResult.Etag;                  storeResult = _tableRef.Execute(TableOperation.Replace(entity));              }              while (storeResult.HttpStatusCode == 412);
Magic Number,NuGetGallery.Infrastructure,AzureEntityList<T>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Infrastructure\AzureEntityList.cs,DoReplaceWithRetry,The following statement contains a magic number: do              {                  storeResult = _tableRef.Execute(TableOperation.Replace(valueGenerator.Invoke()));              }              while (storeResult.HttpStatusCode == 412);
Magic Number,NuGetGallery.Infrastructure,AzureEntityList<T>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Infrastructure\AzureEntityList.cs,FormatRowKey,The following statement contains a magic number: Debug.Assert(pageRow < 1000);
Magic Number,NuGetGallery.Infrastructure,AzureEntityList<T>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Infrastructure\AzureEntityList.cs,IsSuccess,The following statement contains a magic number: return statusCode >= 200 && statusCode < 300;
Magic Number,NuGetGallery.Infrastructure,AzureEntityList<T>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Infrastructure\AzureEntityList.cs,IsSuccess,The following statement contains a magic number: return statusCode >= 200 && statusCode < 300;
Magic Number,NuGetGallery.Infrastructure,ErrorEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Infrastructure\TableErrorLog.cs,ReadEntity,The following statement contains a magic number: if (properties.TryGetValue("SerializedError"' out value))                  {                      Error = ErrorXml.DecodeString(value.StringValue);                  }                  else                  {                      Error = new Error                      {                          ApplicationName = "TableErrorLog"'                          StatusCode = 999'                          HostName = Environment.MachineName'                          Time = DateTime.UtcNow'                          Type = typeof(Exception).FullName'                          Detail = "Error Log Entry is Corrupted/Missing in Table Store"                      };                        return;                  }
Magic Number,NuGetGallery.Infrastructure,ErrorEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Infrastructure\TableErrorLog.cs,WriteEntity,The following statement contains a magic number: const int MaxChars = 32 * 1000;
Magic Number,NuGetGallery.Infrastructure,ErrorEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Infrastructure\TableErrorLog.cs,WriteEntity,The following statement contains a magic number: const int MaxChars = 32 * 1000;
Magic Number,NuGetGallery.Infrastructure,ErrorEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Infrastructure\TableErrorLog.cs,WriteEntity,The following statement contains a magic number: if (serializedError.Length > MaxChars)                  {                      serializedError = ErrorXml.EncodeString(                          new Error                          {                              ApplicationName = "TableErrorLog"'                              StatusCode = 888'                              HostName = Environment.MachineName'                              Time = DateTime.UtcNow'                              Detail = "Error Log Entry Will Not Fit In Table Store: " + serializedError.Substring(0' 4000)                          });                  }
Magic Number,NuGetGallery.Infrastructure,ErrorEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery.Core\Infrastructure\TableErrorLog.cs,WriteEntity,The following statement contains a magic number: if (serializedError.Length > MaxChars)                  {                      serializedError = ErrorXml.EncodeString(                          new Error                          {                              ApplicationName = "TableErrorLog"'                              StatusCode = 888'                              HostName = Environment.MachineName'                              Time = DateTime.UtcNow'                              Detail = "Error Log Entry Will Not Fit In Table Store: " + serializedError.Substring(0' 4000)                          });                  }
