Implementation smell,Namespace,Class,File,Method,Description
Long Method,NuGetGallery,OwinStartup,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\OwinStartup.cs,Configuration,The method has 129 lines of code.
Long Method,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The method has 126 lines of code.
Long Method,NuGetGallery,ApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ApiController.cs,CreatePackageInternal,The method has 176 lines of code.
Long Method,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The method has 164 lines of code.
Long Method,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,VerifyPackage,The method has 131 lines of code.
Long Method,NuGetGallery,Routes,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\Routes.cs,RegisterUIRoutes,The method has 326 lines of code.
Long Method,NuGetGallery,DefaultDependenciesModule,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\DefaultDependenciesModule.cs,Load,The method has 253 lines of code.
Long Method,NuGetGallery.Migrations,Initial,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201110060711357_Initial.cs,Up,The method has 134 lines of code.
Long Method,NuGetGallery.OData,SearchAdaptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptor.cs,TryReadSearchFilter,The method has 114 lines of code.
Long Method,NuGetGallery.WebApi,QueryResult<TModel>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\WebApi\QueryResult.cs,GetInnerResult,The method has 168 lines of code.
Complex Method,NuGetGallery,StatisticsController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\StatisticsController.cs,ProcessReport,Cyclomatic complexity of the method is 13
Complex Method,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,Cyclomatic complexity of the method is 8
Complex Method,NuGetGallery,JsonApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\JsonApiController.cs,TryGetManagePackageOwnerModel,Cyclomatic complexity of the method is 10
Complex Method,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,DisplayPackage,Cyclomatic complexity of the method is 9
Complex Method,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,ValidateReportMyPackageViewModel,Cyclomatic complexity of the method is 9
Complex Method,NuGetGallery,AuthenticationController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\AuthenticationController.cs,SignIn,Cyclomatic complexity of the method is 8
Complex Method,NuGetGallery,AuthenticationController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\AuthenticationController.cs,Register,Cyclomatic complexity of the method is 8
Complex Method,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,FindPackageByIdAndVersion,Cyclomatic complexity of the method is 10
Complex Method,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,ValidateNuGetPackageMetadata,Cyclomatic complexity of the method is 18
Complex Method,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,Decode,Cyclomatic complexity of the method is 8
Complex Method,NuGetGallery.OData,SearchAdaptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptor.cs,TryReadSearchFilter,Cyclomatic complexity of the method is 13
Complex Method,NuGetGallery.OData,SearchAdaptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptor.cs,GetNextLink,Cyclomatic complexity of the method is 13
Complex Method,NuGetGallery.WebApi,QueryResult<TModel>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\WebApi\QueryResult.cs,GetInnerResult,Cyclomatic complexity of the method is 8
Long Parameter List,NuGetGallery,StorageDependent,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\StorageDependent.cs,StorageDependent,The method has 5 parameters. Parameters: bindingKey' azureStorageConnectionString' implementationType' interfaceType' isSingleInstance
Long Parameter List,NuGetGallery,DeleteAccountService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\DeleteAccountService.cs,DeleteAccountService,The method has 8 parameters. Parameters: accountDeleteRepository' userRepository' entitiesContext' packageService' packageOwnershipManagementService' reservedNamespaceService' securityPolicyService' authService
Long Parameter List,NuGetGallery,DeleteAccountService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\DeleteAccountService.cs,DeleteGalleryUserAccountAsync,The method has 5 parameters. Parameters: userToBeDeleted' admin' signature' unlistOrphanPackages' commitAsTransaction
Long Parameter List,NuGetGallery,IDeleteAccountService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\IDeleteAccountService.cs,DeleteGalleryUserAccountAsync,The method has 5 parameters. Parameters: userToBeDeleted' admin' signature' unsignOrphanPackages' commitAsTransaction
Long Parameter List,NuGetGallery,PackageOwnershipManagementService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageOwnershipManagementService.cs,PackageOwnershipManagementService,The method has 5 parameters. Parameters: entitiesContext' packageService' reservedNamespaceService' packageOwnerRequestService' auditingService
Long Parameter List,NuGetGallery,PackageUploadService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageUploadService.cs,PackageUploadService,The method has 5 parameters. Parameters: packageService' packageFileService' entitiesContext' reservedNamespaceService' validationService
Long Parameter List,NuGetGallery,ReservedNamespaceService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReservedNamespaceService.cs,ReservedNamespaceService,The method has 5 parameters. Parameters: entitiesContext' reservedNamespaceRepository' userService' packageService' auditing
Long Parameter List,NuGetGallery,StatisticsController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\StatisticsController.cs,CheckGroupBy,The method has 5 parameters. Parameters: groupby' name' pivot' dimension' report
Long Parameter List,NuGetGallery,ApplicationVersion,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\ApplicationVersionHelper.cs,ApplicationVersion,The method has 5 parameters. Parameters: repositoryBase' version' branch' commit' buildDateUtc
Long Parameter List,NuGetGallery,LuceneIndexingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\LuceneIndexingService.cs,LuceneIndexingService,The method has 5 parameters. Parameters: packageSource' curatedPackageSource' directory' diagnostics' config
Long Parameter List,NuGetGallery,ITelemetryService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ITelemetryService.cs,TrackVerifyPackageKeyEvent,The method has 5 parameters. Parameters: packageId' packageVersion' user' identity' statusCode
Long Parameter List,NuGetGallery,TelemetryService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\TelemetryService.cs,TrackVerifyPackageKeyEvent,The method has 5 parameters. Parameters: packageId' packageVersion' user' identity' statusCode
Long Parameter List,NuGetGallery,TelemetryService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\TelemetryService.cs,TrackPackageForEvent,The method has 5 parameters. Parameters: eventValue' packageId' packageVersion' user' identity
Long Parameter List,NuGetGallery,PackageOwnersResultViewModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ViewModels\PackageOwnersResultViewModel.cs,PackageOwnersResultViewModel,The method has 5 parameters. Parameters: user' currentUser' url' isPending' isNamespaceOwner
Long Parameter List,NuGetGallery,CuratedFeedService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\CuratedFeedService.cs,CreatedCuratedPackageAsync,The method has 6 parameters. Parameters: curatedFeed' packageRegistration' included' automaticallyCurated' notes' commitChanges
Long Parameter List,NuGetGallery,ICuratedFeedService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ICuratedFeedService.cs,CreatedCuratedPackageAsync,The method has 6 parameters. Parameters: curatedFeed' packageRegistration' included' automaticallyCurated' notes' commitChanges
Long Parameter List,NuGetGallery,IPackageDeleteService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\IPackageDeleteService.cs,HardDeletePackagesAsync,The method has 5 parameters. Parameters: packages' deletedBy' reason' signature' deleteEmptyPackageRegistration
Long Parameter List,NuGetGallery,PackageDeleteService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageDeleteService.cs,PackageDeleteService,The method has 8 parameters. Parameters: packageRepository' packageRegistrationRepository' packageDeletesRepository' entitiesContext' packageService' indexingService' packageFileService' auditingService
Long Parameter List,NuGetGallery,PackageDeleteService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageDeleteService.cs,HardDeletePackagesAsync,The method has 5 parameters. Parameters: packages' deletedBy' reason' signature' deleteEmptyPackageRegistration
Long Parameter List,NuGetGallery,ApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ApiController.cs,ApiController,The method has 19 parameters. Parameters: entitiesContext' packageService' packageFileService' userService' nugetExeDownloaderService' contentService' indexingService' searchService' autoCuratePackage' statusService' messageService' auditingService' configurationService' telemetryService' authenticationService' credentialBuilder' securityPolicies' reservedNamespaceService' packageUploadService
Long Parameter List,NuGetGallery,ApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ApiController.cs,ApiController,The method has 20 parameters. Parameters: entitiesContext' packageService' packageFileService' userService' nugetExeDownloaderService' contentService' indexingService' searchService' autoCuratePackage' statusService' statisticsService' messageService' auditingService' configurationService' telemetryService' authenticationService' credentialBuilder' securityPolicies' reservedNamespaceService' packageUploadService
Long Parameter List,NuGetGallery,JsonApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\JsonApiController.cs,JsonApiController,The method has 6 parameters. Parameters: packageService' userService' messageService' appConfiguration' policyService' packageOwnershipManagementService
Long Parameter List,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,PackagesController,The method has 22 parameters. Parameters: packageService' uploadFileService' userService' messageService' searchService' autoCuratedPackageCmd' packageFileService' entitiesContext' config' indexingService' cacheService' editPackageService' packageDeleteService' supportRequestService' auditingService' telemetryService' securityPolicyService' reservedNamespaceService' packageUploadService' readMeService' validationService' packageOwnershipManagementService
Long Parameter List,NuGetGallery,UsersController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\UsersController.cs,UsersController,The method has 10 parameters. Parameters: feedsQuery' userService' packageService' packageOwnerRequestService' messageService' config' authService' credentialBuilder' deleteAccountService' supportRequestService
Long Parameter List,NuGetGallery,UsersController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\UsersController.cs,GenerateApiKey,The method has 5 parameters. Parameters: description' owner' scopes' subjects' expirationInDays
Long Parameter List,NuGetGallery,IMessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\IMessageService.cs,SendContactOwnersMessage,The method has 5 parameters. Parameters: fromAddress' packageRegistration' message' emailSettingsUrl' copyFromAddress
Long Parameter List,NuGetGallery,IMessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\IMessageService.cs,SendPackageOwnerRequest,The method has 8 parameters. Parameters: fromUser' toUser' package' packageUrl' confirmationUrl' rejectionUrl' message' policyMessage
Long Parameter List,NuGetGallery,IMessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\IMessageService.cs,SendPackageOwnerAddedNotice,The method has 5 parameters. Parameters: toUser' newOwner' package' packageUrl' policyMessage
Long Parameter List,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendContactOwnersMessage,The method has 5 parameters. Parameters: fromAddress' packageRegistration' message' emailSettingsUrl' copySender
Long Parameter List,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageOwnerRequest,The method has 8 parameters. Parameters: fromUser' toUser' package' packageUrl' confirmationUrl' rejectionUrl' message' policyMessage
Long Parameter List,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageOwnerAddedNotice,The method has 5 parameters. Parameters: toUser' newOwner' package' packageUrl' policyMessage
Long Parameter List,NuGetGallery,IPackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\IPackageService.cs,EnrichPackageFromNuGetPackage,The method has 5 parameters. Parameters: package' packageArchive' packageMetadata' packageStreamMetadata' user
Long Parameter List,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,CreatePackageFromNuGetPackage,The method has 5 parameters. Parameters: packageRegistration' nugetPackage' packageMetadata' packageStreamMetadata' user
Long Parameter List,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,EnrichPackageFromNuGetPackage,The method has 5 parameters. Parameters: package' packageArchive' packageMetadata' packageStreamMetadata' user
Long Parameter List,NuGetGallery,UrlExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\UrlExtensions.cs,PackageList,The method has 5 parameters. Parameters: url' page' q' includePrerelease' relativeUrl
Long Parameter List,NuGetGallery,UrlExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\UrlExtensions.cs,CuratedPackageList,The method has 5 parameters. Parameters: url' page' q' curatedFeedName' relativeUrl
Long Parameter List,NuGetGallery,UrlExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\UrlExtensions.cs,PackageDownload,The method has 5 parameters. Parameters: url' feedVersion' id' version' relativeUrl
Long Parameter List,NuGetGallery,UrlExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\UrlExtensions.cs,ConfirmPendingOwnershipRequest,The method has 5 parameters. Parameters: url' packageId' username' confirmationCode' relativeUrl
Long Parameter List,NuGetGallery,UrlExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\UrlExtensions.cs,RejectPendingOwnershipRequest,The method has 5 parameters. Parameters: url' packageId' username' confirmationCode' relativeUrl
Long Parameter List,NuGetGallery,UrlExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\UrlExtensions.cs,CancelPendingOwnershipRequest,The method has 5 parameters. Parameters: url' packageId' requestingUsername' pendingUsername' relativeUrl
Long Parameter List,NuGetGallery,UrlExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\UrlExtensions.cs,ResetEmailOrPassword,The method has 5 parameters. Parameters: url' username' token' forgotPassword' relativeUrl
Long Parameter List,NuGetGallery,UrlExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\UrlExtensions.cs,GetActionLink,The method has 7 parameters. Parameters: url' actionName' controllerName' relativeUrl' routeValues' interceptReturnUrl' area
Long Parameter List,NuGetGallery,VersionRouteConstraint,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\VersionRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' parameterName' values' routeDirection
Long Parameter List,NuGetGallery,PackageListViewModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ViewModels\PackageListViewModel.cs,PackageListViewModel,The method has 8 parameters. Parameters: packages' indexTimestampUtc' searchTerm' totalCount' pageIndex' pageSize' url' includePrerelease
Long Parameter List,NuGetGallery,PackageListViewModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ViewModels\PackageListViewModel.cs,PackageListViewModel,The method has 9 parameters. Parameters: packages' indexTimestampUtc' searchTerm' totalCount' pageIndex' pageSize' url' curatedFeed' includePrerelease
Long Parameter List,NuGetGallery,UserProfileModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ViewModels\UserProfileModel.cs,UserProfileModel,The method has 5 parameters. Parameters: user' allPackages' pageIndex' pageSize' url
Long Parameter List,NuGetGallery,LuceneSearchService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\LuceneSearchService.cs,BuildGeneralQuery,The method has 5 parameters. Parameters: doExactId' originalSearchText' analyzer' generalTerms' generalQueries
Long Parameter List,NuGetGallery.Areas.Admin.Controllers,SupportRequestController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\SupportRequestController.cs,Filter,The method has 5 parameters. Parameters: pageNumber' take' assignedToId' issueStatusId' reason
Long Parameter List,NuGetGallery.Areas.Admin.Controllers,SupportRequestController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\SupportRequestController.cs,Index,The method has 5 parameters. Parameters: pageNumber' take' assignedToId' issueStatusId' reason
Long Parameter List,NuGetGallery.Areas.Admin.Controllers,SupportRequestController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\SupportRequestController.cs,GetSupportRequestsAsync,The method has 5 parameters. Parameters: pageNumber' take' assignedTo' reason' issueStatusId
Long Parameter List,NuGetGallery.Areas.Admin,ISupportRequestService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Services\ISupportRequestService.cs,AddNewSupportRequestAsync,The method has 6 parameters. Parameters: subject' message' requestorEmailAddress' reason' user' package
Long Parameter List,NuGetGallery.Areas.Admin,ISupportRequestService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Services\ISupportRequestService.cs,UpdateIssueAsync,The method has 5 parameters. Parameters: issueId' assignedToId' issueStatusId' comment' editedBy
Long Parameter List,NuGetGallery.Areas.Admin,SupportRequestService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Services\SupportRequestService.cs,UpdateIssueAsync,The method has 5 parameters. Parameters: issueId' assignedToId' issueStatusId' comment' editedBy
Long Parameter List,NuGetGallery.Areas.Admin,SupportRequestService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Services\SupportRequestService.cs,AddNewSupportRequestAsync,The method has 6 parameters. Parameters: subject' message' requestorEmailAddress' reason' user' package
Long Parameter List,NuGetGallery.Authentication,AuthenticationService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AuthenticationService.cs,AuthenticationService,The method has 9 parameters. Parameters: entities' config' diagnostics' auditing' providers' credentialBuilder' credentialValidator' dateTimeProvider' telemetryService
Long Parameter List,NuGetGallery.Diagnostics,NullDiagnosticsSource,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\NullDiagnosticsSource.cs,TraceEvent,The method has 6 parameters. Parameters: type' id' message' member' file' line
Long Parameter List,NuGetGallery.Diagnostics,TraceDiagnosticsSource,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\TraceDiagnosticsSource.cs,TraceEvent,The method has 6 parameters. Parameters: type' id' message' member' file' line
Long Parameter List,NuGetGallery.Diagnostics,DiagnosticsSourceExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\DiagnosticsSourceExtensions.cs,Critical,The method has 5 parameters. Parameters: self' message' member' file' line
Long Parameter List,NuGetGallery.Diagnostics,DiagnosticsSourceExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\DiagnosticsSourceExtensions.cs,Critical,The method has 6 parameters. Parameters: self' message' id' member' file' line
Long Parameter List,NuGetGallery.Diagnostics,DiagnosticsSourceExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\DiagnosticsSourceExtensions.cs,Critical,The method has 6 parameters. Parameters: self' ex' context' member' file' line
Long Parameter List,NuGetGallery.Diagnostics,DiagnosticsSourceExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\DiagnosticsSourceExtensions.cs,Error,The method has 5 parameters. Parameters: self' message' member' file' line
Long Parameter List,NuGetGallery.Diagnostics,DiagnosticsSourceExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\DiagnosticsSourceExtensions.cs,Error,The method has 6 parameters. Parameters: self' message' id' member' file' line
Long Parameter List,NuGetGallery.Diagnostics,DiagnosticsSourceExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\DiagnosticsSourceExtensions.cs,Error,The method has 6 parameters. Parameters: self' ex' context' member' file' line
Long Parameter List,NuGetGallery.Diagnostics,DiagnosticsSourceExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\DiagnosticsSourceExtensions.cs,Warning,The method has 5 parameters. Parameters: self' message' member' file' line
Long Parameter List,NuGetGallery.Diagnostics,DiagnosticsSourceExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\DiagnosticsSourceExtensions.cs,Warning,The method has 6 parameters. Parameters: self' message' id' member' file' line
Long Parameter List,NuGetGallery.Diagnostics,DiagnosticsSourceExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\DiagnosticsSourceExtensions.cs,Warning,The method has 6 parameters. Parameters: self' ex' context' member' file' line
Long Parameter List,NuGetGallery.Diagnostics,DiagnosticsSourceExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\DiagnosticsSourceExtensions.cs,Information,The method has 5 parameters. Parameters: self' message' member' file' line
Long Parameter List,NuGetGallery.Diagnostics,DiagnosticsSourceExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\DiagnosticsSourceExtensions.cs,Information,The method has 6 parameters. Parameters: self' message' id' member' file' line
Long Parameter List,NuGetGallery.Diagnostics,DiagnosticsSourceExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\DiagnosticsSourceExtensions.cs,Information,The method has 6 parameters. Parameters: self' ex' context' member' file' line
Long Parameter List,NuGetGallery.Diagnostics,DiagnosticsSourceExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\DiagnosticsSourceExtensions.cs,Verbose,The method has 5 parameters. Parameters: self' message' member' file' line
Long Parameter List,NuGetGallery.Diagnostics,DiagnosticsSourceExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\DiagnosticsSourceExtensions.cs,Verbose,The method has 6 parameters. Parameters: self' message' id' member' file' line
Long Parameter List,NuGetGallery.Diagnostics,DiagnosticsSourceExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\DiagnosticsSourceExtensions.cs,Verbose,The method has 6 parameters. Parameters: self' ex' context' member' file' line
Long Parameter List,NuGetGallery.Diagnostics,DiagnosticsSourceExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\DiagnosticsSourceExtensions.cs,Activity,The method has 5 parameters. Parameters: self' name' member' file' line
Long Parameter List,NuGetGallery.Controllers,ODataV2CuratedFeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2CuratedFeedController.cs,GetCore,The method has 6 parameters. Parameters: options' curatedFeedName' id' normalizedVersion' return404NotFoundWhenNoResults' semVerLevel
Long Parameter List,NuGetGallery.Controllers,ODataV2CuratedFeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2CuratedFeedController.cs,Search,The method has 6 parameters. Parameters: options' curatedFeedName' searchTerm' targetFramework' includePrerelease' semVerLevel
Long Parameter List,NuGetGallery.Controllers,ODataV2CuratedFeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2CuratedFeedController.cs,SearchCount,The method has 6 parameters. Parameters: options' curatedFeedName' searchTerm' targetFramework' includePrerelease' semVerLevel
Long Parameter List,NuGetGallery.Controllers,ODataV2FeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2FeedController.cs,GetCore,The method has 5 parameters. Parameters: options' id' version' semVerLevel' return404NotFoundWhenNoResults
Long Parameter List,NuGetGallery.Controllers,ODataV2FeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2FeedController.cs,Search,The method has 5 parameters. Parameters: options' searchTerm' targetFramework' includePrerelease' semVerLevel
Long Parameter List,NuGetGallery.Controllers,ODataV2FeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2FeedController.cs,SearchCount,The method has 5 parameters. Parameters: options' searchTerm' targetFramework' includePrerelease' semVerLevel
Long Parameter List,NuGetGallery.Controllers,ODataV2FeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2FeedController.cs,GetUpdates,The method has 8 parameters. Parameters: options' packageIds' versions' includePrerelease' includeAllVersions' targetFrameworks' versionConstraints' semVerLevel
Long Parameter List,NuGetGallery.Controllers,ODataV2FeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2FeedController.cs,GetUpdatesCount,The method has 8 parameters. Parameters: options' packageIds' versions' includePrerelease' includeAllVersions' targetFrameworks' versionConstraints' semVerLevel
Long Parameter List,NuGetGallery.Controllers,ODataV2FeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2FeedController.cs,GetUpdates,The method has 5 parameters. Parameters: packages' versionLookup' targetFrameworkValues' includeAllVersions' semVerLevel
Long Parameter List,NuGetGallery.Helpers,HtmlExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Helpers\HtmlExtensions.cs,EnumDropDownListFor,The method has 5 parameters. Parameters: self' expression' values' emptyItemText' htmlAttributes
Long Parameter List,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,GenerateHashInternal,The method has 6 parameters. Parameters: input' rng' prf' iterCount' saltSize' numBytesRequested
Long Parameter List,NuGetGallery.Security,SecurityPolicyService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Security\SecurityPolicyService.cs,SecurityPolicyService,The method has 6 parameters. Parameters: entitiesContext' auditing' diagnostics' configuration' securePush' securePushForCoOwners
Long Parameter List,NuGetGallery.OData,SearchAdaptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptor.cs,GetSearchFilter,The method has 6 parameters. Parameters: q' page' includePrerelease' sortOrder' context' semVerLevel
Long Parameter List,NuGetGallery.OData,SearchAdaptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptor.cs,FindByIdAndVersionCore,The method has 7 parameters. Parameters: searchService' request' packages' id' version' curatedFeed' semVerLevel
Long Parameter List,NuGetGallery.OData,SearchAdaptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptor.cs,SearchCore,The method has 8 parameters. Parameters: searchService' request' packages' searchTerm' targetFramework' includePrerelease' curatedFeed' semVerLevel
Long Parameter List,NuGetGallery.OData,SearchAdaptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptor.cs,GetNextLink,The method has 5 parameters. Parameters: currentRequestUri' totalResultCount' queryParameters' options' settings
Long Parameter List,NuGetGallery.OData,NuGetODataController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\NuGetODataController.cs,QueryResult,The method has 5 parameters. Parameters: options' queryable' maxPageSize' totalResults' generateNextLink
Long Parameter List,NuGetGallery.AsyncFileUpload,AsyncFileUploadModule,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AsyncFileUpload\AsyncFileUploadModule.cs,ReadStream,The method has 5 parameters. Parameters: stream' request' username' progress' parser
Long Parameter List,NuGetGallery.WebApi,QueryResult<TModel>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\WebApi\QueryResult.cs,QueryResult,The method has 6 parameters. Parameters: queryOptions' queryable' controller' maxPageSize' totalResults' generateNextLink
Long Identifier,NuGetGallery,NuGetODataConfig,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\NuGetODataConfig.cs,,The length of the parameter GetByIdAndVersionCacheTimeInSeconds is 35.
Long Identifier,NuGetGallery,OwinStartup,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\OwinStartup.cs,Configuration,The length of the parameter telemetryProcessorChainBuilder is 30.
Long Identifier,NuGetGallery,OwinStartup,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\OwinStartup.cs,Configuration,The length of the parameter instrumentationSamplingPercentage is 33.
Long Identifier,NuGetGallery,DeleteAccountService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\DeleteAccountService.cs,DeleteAccountService,The length of the parameter packageOwnershipManagementService is 33.
Long Identifier,NuGetGallery,DeleteAccountService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\DeleteAccountService.cs,,The length of the parameter _packageOwnershipManagementService is 34.
Long Identifier,NuGetGallery,AccountActions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\AccountActions.cs,,The length of the parameter ManagePackageOwnershipOnBehalfOf is 32.
Long Identifier,NuGetGallery,PackageOwnershipManagementService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageOwnershipManagementService.cs,AddPackageOwnerAsync,The length of the parameter userOwnedMatchingNamespacesForId is 32.
Long Identifier,NuGetGallery,PackageOwnershipManagementService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageOwnershipManagementService.cs,RemovePackageOwnerImplAsync,The length of the parameter allMatchingNamespacesForRegistration is 36.
Long Identifier,NuGetGallery,PackageOwnerRequestService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageOwnerRequestService.cs,,The length of the parameter _packageOwnerRequestRepository is 30.
Long Identifier,NuGetGallery,ReservedNamespaceService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReservedNamespaceService.cs,DeleteReservedNamespaceAsync,The length of the parameter packageRegistrationsToMarkUnverified is 36.
Long Identifier,NuGetGallery,ReservedNamespaceService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReservedNamespaceService.cs,AddOwnerToReservedNamespaceAsync,The length of the parameter allPackageRegistrationsForUser is 30.
Long Identifier,NuGetGallery,ReservedNamespaceService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReservedNamespaceService.cs,AddOwnerToReservedNamespaceAsync,The length of the parameter packageRegistrationsMatchingNamespace is 37.
Long Identifier,NuGetGallery,ReservedNamespaceService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReservedNamespaceService.cs,DeleteOwnerFromReservedNamespaceAsync,The length of the parameter packageRegistrationsToMarkUnverified is 36.
Long Identifier,NuGetGallery,ReservedNamespaceService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReservedNamespaceService.cs,DeleteOwnerFromReservedNamespaceImplAsync,The length of the parameter packagesOwnedByUserMatchingPrefix is 33.
Long Identifier,NuGetGallery,ReservedNamespaceService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReservedNamespaceService.cs,DeleteOwnerFromReservedNamespaceImplAsync,The length of the parameter packageRegistrationsToMarkUnverified is 36.
Long Identifier,NuGetGallery,StatisticsController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\StatisticsController.cs,,The length of the parameter PackageDownloadsByVersionDimensions is 35.
Long Identifier,NuGetGallery,StatisticsController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\StatisticsController.cs,,The length of the parameter PackageDownloadsDetailDimensions is 32.
Long Identifier,NuGetGallery,LuceneIndexingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\LuceneIndexingService.cs,GetPackages,The length of the parameter curatedFeedsPerPackageRegistration is 34.
Long Identifier,NuGetGallery,AutoCompleteServiceQuery,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Queries\AutoCompleteServiceQuery.cs,,The length of the parameter _autocompleteServiceResourceType is 32.
Long Identifier,NuGetGallery,PackageOwnersResultViewModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ViewModels\PackageOwnersResultViewModel.cs,,The length of the parameter IsCurrentUserMemberOfOrganization is 33.
Long Identifier,NuGetGallery,CloudDownloadCountService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\CloudDownloadCountService.cs,,The length of the parameter TelemetryOriginForRefreshMethod is 31.
Long Identifier,NuGetGallery,IPackageDeleteService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\IPackageDeleteService.cs,HardDeletePackagesAsync,The length of the parameter deleteEmptyPackageRegistration is 30.
Long Identifier,NuGetGallery,JsonStatisticsService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\JsonStatisticsService.cs,,The length of the parameter RecentPopularityDetailBlobNameFormat is 36.
Long Identifier,NuGetGallery,JsonStatisticsService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\JsonStatisticsService.cs,,The length of the parameter _packageVersionDownloadsSummary is 31.
Long Identifier,NuGetGallery,JsonStatisticsService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\JsonStatisticsService.cs,,The length of the parameter _communityPackageDownloadsSummary is 33.
Long Identifier,NuGetGallery,JsonStatisticsService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\JsonStatisticsService.cs,,The length of the parameter _communityPackageVersionDownloads is 33.
Long Identifier,NuGetGallery,JsonStatisticsService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\JsonStatisticsService.cs,,The length of the parameter _communityPackageVersionDownloadsSummary is 40.
Long Identifier,NuGetGallery,PackageDeleteService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageDeleteService.cs,HardDeletePackagesAsync,The length of the parameter deleteEmptyPackageRegistration is 30.
Long Identifier,NuGetGallery,PackageDeleteService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageDeleteService.cs,,The length of the parameter DeletePackageRegistrationQuery is 30.
Long Identifier,NuGetGallery,PackageDeleteService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageDeleteService.cs,,The length of the parameter _packageRegistrationRepository is 30.
Long Identifier,NuGetGallery,PackageNamingConflictValidator,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageNamingConflictValidator.cs,,The length of the parameter _packageRegistrationRepository is 30.
Long Identifier,NuGetGallery,StatusService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\StatusService.cs,StatusService,The length of the parameter cloudStorageAvailabilityChecks is 30.
Long Identifier,NuGetGallery,StatusService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\StatusService.cs,,The length of the parameter _cloudStorageAvailabilityChecks is 31.
Long Identifier,NuGetGallery,EditPackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\EditPackageService.cs,EditPackageService,The length of the parameter packageNamingConflictValidator is 30.
Long Identifier,NuGetGallery,RegisterViewModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ViewModels\LogOnViewModel.cs,,The length of the parameter UsernameValidationErrorMessage is 30.
Long Identifier,NuGetGallery,JsonApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\JsonApiController.cs,JsonApiController,The length of the parameter packageOwnershipManagementService is 33.
Long Identifier,NuGetGallery,JsonApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\JsonApiController.cs,GetPackageOwners,The length of the parameter packageAndReservedNamespaceOwners is 33.
Long Identifier,NuGetGallery,JsonApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\JsonApiController.cs,GetPackageOwners,The length of the parameter packageOwnersOnlyResultViewModel is 32.
Long Identifier,NuGetGallery,JsonApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\JsonApiController.cs,,The length of the parameter _packageOwnershipManagementService is 34.
Long Identifier,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,PackagesController,The length of the parameter packageOwnershipManagementService is 33.
Long Identifier,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,,The length of the parameter _packageOwnershipManagementService is 34.
Long Identifier,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,PackageService,The length of the parameter packageNamingConflictValidator is 30.
Long Identifier,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,,The length of the parameter _packageRegistrationRepository is 30.
Long Identifier,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,,The length of the parameter _packageNamingConflictValidator is 31.
Long Identifier,NuGetGallery,Constants,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Constants.cs,,The length of the parameter PasswordResetTokenExpirationHours is 33.
Long Identifier,NuGetGallery,Constants,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Constants.cs,,The length of the parameter AccountLockoutMultiplierInMinutes is 33.
Long Identifier,NuGetGallery,Constants,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Constants.cs,,The length of the parameter PackageFileDownloadUriTemplate is 30.
Long Identifier,NuGetGallery,Constants,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Constants.cs,,The length of the parameter ReadMeFileSavePathTemplateActive is 32.
Long Identifier,NuGetGallery,Constants,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Constants.cs,,The length of the parameter ReadMeFileSavePathTemplatePending is 33.
Long Identifier,NuGetGallery,Constants,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Constants.cs,,The length of the parameter PackageFileBackupSavePathTemplate is 33.
Long Identifier,NuGetGallery,RouteName,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\RouteNames.cs,,The length of the parameter StatisticsPackageDownloadsByVersion is 35.
Long Identifier,NuGetGallery,RouteName,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\RouteNames.cs,,The length of the parameter StatisticsPackageDownloadsByVersionReport is 41.
Long Identifier,NuGetGallery,RouteName,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\RouteNames.cs,,The length of the parameter StatisticsPackageDownloadsDetail is 32.
Long Identifier,NuGetGallery,RouteName,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\RouteNames.cs,,The length of the parameter StatisticsPackageDownloadsDetailReport is 38.
Long Identifier,NuGetGallery,RouteName,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\RouteNames.cs,,The length of the parameter ExternalAuthenticationCallback is 30.
Long Identifier,NuGetGallery.Areas.Admin.Controllers,SupportRequestController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\SupportRequestController.cs,,The length of the parameter _defaultJsonSerializerSettings is 30.
Long Identifier,NuGetGallery.Configuration.SecretReader,SecretReaderFactory,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Configuration\SecretReader\SecretReaderFactory.cs,,The length of the parameter CertificateThumbprintConfigurationKey is 37.
Long Identifier,NuGetGallery.Controllers,ODataV1FeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV1FeedController.cs,GetCore,The length of the parameter return404NotFoundWhenNoResults is 30.
Long Identifier,NuGetGallery.Controllers,ODataV2CuratedFeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2CuratedFeedController.cs,GetCore,The length of the parameter return404NotFoundWhenNoResults is 30.
Long Identifier,NuGetGallery.Controllers,ODataV2FeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2FeedController.cs,GetCore,The length of the parameter return404NotFoundWhenNoResults is 30.
Long Identifier,NuGetGallery.OData,SearchAdaptorResult,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptorResult.cs,SearchAdaptorResult,The length of the parameter resultsAreProvidedBySearchService is 33.
Long Identifier,NuGetGallery.Infrastructure.Lucene,ExternalSearchService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\ExternalSearchService.cs,,The length of the parameter SearchRoundtripTimePerfCounter is 30.
Long Statement,NuGetGallery,NuGetODataV1FeedConfig,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\NuGetODataV1FeedConfig.cs,Register,The length of the statement  "                new CountODataPathHandler()' conventions' new ODataServiceVersionHeaderPropagatingBatchHandler(GlobalConfiguration.DefaultServer)); " is 131.
Long Statement,NuGetGallery,NuGetODataV1FeedConfig,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\NuGetODataV1FeedConfig.cs,Register,The length of the statement  "                new CountODataPathHandler()' conventions' new ODataServiceVersionHeaderPropagatingBatchHandler(GlobalConfiguration.DefaultServer)); " is 131.
Long Statement,NuGetGallery,NuGetODataV1FeedConfig,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\NuGetODataV1FeedConfig.cs,Register,The length of the statement  "                new CountODataPathHandler()' conventions' new ODataServiceVersionHeaderPropagatingBatchHandler(GlobalConfiguration.DefaultServer)); " is 131.
Long Statement,NuGetGallery,NuGetODataConfig,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\NuGetODataConfig.cs,Register,The length of the statement  "                .Where(f => !f.SupportedMediaTypes.Any(m => m.MediaType.Equals("application/atomsvc+xml"' StringComparison.OrdinalIgnoreCase) " is 125.
Long Statement,NuGetGallery,StorageDependent,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\StorageDependent.cs,GetAll,The length of the statement  "                Create<NuGetExeDownloaderService' INuGetExeDownloaderService>(configuration.AzureStorage_NuGetExe_ConnectionString' isSingleInstance: false)' " is 141.
Long Statement,NuGetGallery,StorageDependent,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\StorageDependent.cs,GetAll,The length of the statement  "                Create<PackageFileService' IPackageFileService>(configuration.AzureStorage_Packages_ConnectionString' isSingleInstance: false)' " is 127.
Long Statement,NuGetGallery,StorageDependent,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\StorageDependent.cs,GetAll,The length of the statement  "                Create<UploadFileService' IUploadFileService>(configuration.AzureStorage_Uploads_ConnectionString' isSingleInstance: false)' " is 124.
Long Statement,NuGetGallery,OwinStartup,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\OwinStartup.cs,Configuration,The length of the statement  "            // (based on http://social.technet.microsoft.com/Forums/en-US/windowsazuredata/thread/d84ba34b-b0e0-4961-a167-bbe7618beb83 and https://msdn.microsoft.com/en-us/library/system.net.servicepointmanager.aspx) " is 204.
Long Statement,NuGetGallery,DeleteAccountService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\DeleteAccountService.cs,RemoveReservedNamespaces,The length of the statement  "                await _reservedNamespaceService.DeleteOwnerFromReservedNamespaceAsync(rn.Value' user.Username' commitAsTransaction:false); " is 122.
Long Statement,NuGetGallery,DeleteAccountService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\DeleteAccountService.cs,RemoveOwnership,The length of the statement  "                await _packageOwnershipManagementService.RemovePackageOwnerAsync(package.PackageRegistration' admin' user' commitAsTransaction:false); " is 134.
Long Statement,NuGetGallery,PackageOwnershipManagementService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageOwnershipManagementService.cs,AddPackageOwnerAsync,The length of the statement  "                        await _packageService.UpdatePackageVerifiedStatusAsync(new List<PackageRegistration> { packageRegistration }' isVerified: true); " is 128.
Long Statement,NuGetGallery,PackageOwnershipManagementService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageOwnershipManagementService.cs,RemovePackageOwnerAsync,The length of the statement  "                    new PackageRegistrationAuditRecord(packageRegistration' AuditedPackageRegistrationAction.RemoveOwner' ownerToBeRemoved.Username)); " is 130.
Long Statement,NuGetGallery,PackageOwnershipManagementService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageOwnershipManagementService.cs,RemovePackageOwnerAsync,The length of the statement  "                throw new InvalidOperationException(string.Format(Strings.RemoveOwner_NotAllowed' requestingOwner.Username' ownerToBeRemoved.Username)); " is 136.
Long Statement,NuGetGallery,PackageOwnershipManagementService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageOwnershipManagementService.cs,RemovePackageOwnerImplAsync,The length of the statement  "            // 1. Remove this package registration from the namespaces owned by this user if he is the only package owner in the set of matching namespaces " is 143.
Long Statement,NuGetGallery,PackageOwnershipManagementService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageOwnershipManagementService.cs,RemovePackageOwnerImplAsync,The length of the statement  "            // 2. Remove the IsVerified flag from package registration if all the matching namespaces are owned by this user alone (no other package owner owns a matching namespace for this PR) " is 181.
Long Statement,NuGetGallery,PackageOwnershipManagementService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageOwnershipManagementService.cs,RemovePackageOwnerImplAsync,The length of the statement  "                    // The package will lose its 'IsVerified' flag if the user is the only package owner who owns all the namespaces that match this registration " is 141.
Long Statement,NuGetGallery,PackageOwnershipManagementService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageOwnershipManagementService.cs,RemovePackageOwnerImplAsync,The length of the statement  "                        await _packageService.UpdatePackageVerifiedStatusAsync(new List<PackageRegistration> { packageRegistration }' isVerified: false); " is 129.
Long Statement,NuGetGallery,PackageOwnershipManagementService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageOwnershipManagementService.cs,DeletePackageOwnershipRequestAsync,The length of the statement  "            var request = _packageOwnerRequestService.GetPackageOwnershipRequests(package: packageRegistration' newOwner: newOwner).FirstOrDefault(); " is 137.
Long Statement,NuGetGallery,PackageUploadService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageUploadService.cs,GeneratePackageAsync,The length of the statement  "            var isPushAllowed = _reservedNamespaceService.IsPushAllowed(id' user' out IReadOnlyCollection<ReservedNamespace> userOwnedNamespaces); " is 134.
Long Statement,NuGetGallery,PackageUploadService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageUploadService.cs,CommitPackageAsync,The length of the statement  "                     * 1       | version should not exist in DB                 | gallery          | TRUE    | 1st duplicate check (catches most cases over time) " is 140.
Long Statement,NuGetGallery,PackageUploadService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageUploadService.cs,CommitPackageAsync,The length of the statement  "                     * 1       | upload to validation container                 | gallery          | TRUE    | 2nd duplicate check (relevant with high concurrency) " is 142.
Long Statement,NuGetGallery,PackageUploadService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageUploadService.cs,CommitPackageAsync,The length of the statement  "                     * 1       | version should not exist in packages container | gallery          | TRUE    | 3rd duplicate check (relevant with fast validations) " is 142.
Long Statement,NuGetGallery,PackageUploadService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageUploadService.cs,CommitPackageAsync,The length of the statement  "                     * 2       | delete from validation (rollback)              | gallery          | TRUE    | Only occurs in the failure case' as a clean-up. " is 137.
Long Statement,NuGetGallery,ReservedNamespaceService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReservedNamespaceService.cs,AddReservedNamespaceAsync,The length of the statement  "            var matchingReservedNamespaces = FindAllReservedNamespacesForPrefix(prefix: newNamespace.Value' getExactMatches: !newNamespace.IsPrefix); " is 137.
Long Statement,NuGetGallery,ReservedNamespaceService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReservedNamespaceService.cs,AddOwnerToReservedNamespaceAsync,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.CurrentCulture' Strings.ReservedNamespace_UserAlreadyOwner' username)); " is 133.
Long Statement,NuGetGallery,ReservedNamespaceService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReservedNamespaceService.cs,AddOwnerToReservedNamespaceAsync,The length of the statement  "                    await PackageService.UpdatePackageVerifiedStatusAsync(packageRegistrationsMatchingNamespace.AsReadOnly()' isVerified: true); " is 124.
Long Statement,NuGetGallery,ReservedNamespaceService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReservedNamespaceService.cs,AddOwnerToReservedNamespaceAsync,The length of the statement  "                   new ReservedNamespaceAuditRecord(namespaceToModify' AuditedReservedNamespaceAction.AddOwner' username' packageRegistrationsMatchingNamespace)); " is 143.
Long Statement,NuGetGallery,ReservedNamespaceService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReservedNamespaceService.cs,DeleteOwnerFromReservedNamespaceAsync,The length of the statement  "                    packageRegistrationsToMarkUnverified = await DeleteOwnerFromReservedNamespaceImplAsync(prefix' username' namespaceToModify); " is 124.
Long Statement,NuGetGallery,ReservedNamespaceService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReservedNamespaceService.cs,DeleteOwnerFromReservedNamespaceAsync,The length of the statement  "                packageRegistrationsToMarkUnverified = await DeleteOwnerFromReservedNamespaceImplAsync(prefix' username' namespaceToModify); " is 124.
Long Statement,NuGetGallery,ReservedNamespaceService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReservedNamespaceService.cs,DeleteOwnerFromReservedNamespaceAsync,The length of the statement  "                  new ReservedNamespaceAuditRecord(namespaceToModify' AuditedReservedNamespaceAction.RemoveOwner' username' packageRegistrationsToMarkUnverified)); " is 145.
Long Statement,NuGetGallery,ReservedNamespaceService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReservedNamespaceService.cs,DeleteOwnerFromReservedNamespaceImplAsync,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.CurrentCulture' Strings.ReservedNamespace_UserNotAnOwner' username)); " is 131.
Long Statement,NuGetGallery,ReservedNamespaceService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReservedNamespaceService.cs,ValidateNamespace,The length of the statement  "            // Same restrictions as that of NuGetGallery.Core.Packaging.PackageIdValidator except for the regex change' a namespace could end in a '.' " is 138.
Long Statement,NuGetGallery,ReadMeService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReadMeService.cs,GetReadMeMdFromPostedFileAsync,The length of the statement  "            if (!Path.GetExtension(readMeMdPostedFile.FileName).Equals(Constants.MarkdownFileExtension' StringComparison.InvariantCulture)) " is 127.
Long Statement,NuGetGallery,UrlField,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\DynamicData\FieldTemplates\Url.ascx.cs,ProcessUrl,The length of the statement  "            if (url.StartsWith("http://"' StringComparison.OrdinalIgnoreCase) || url.StartsWith("https://"' StringComparison.OrdinalIgnoreCase)) { " is 134.
Long Statement,NuGetGallery,StatisticsController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\StatisticsController.cs,CheckGroupBy,The length of the statement  "                report.Dimensions.Add(new StatisticsDimension { Value = name' DisplayName = GetDimensionDisplayName(name)' IsChecked = true }); " is 127.
Long Statement,NuGetGallery,StatisticsController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\StatisticsController.cs,CheckGroupBy,The length of the statement  "                report.Dimensions.Add(new StatisticsDimension { Value = name' DisplayName = GetDimensionDisplayName(name)' IsChecked = false }); " is 128.
Long Statement,NuGetGallery,HttpContextBaseExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Helpers\HttpContextBaseExtensions.cs,GetConfirmationReturnUrl,The length of the statement  "            string json = Encoding.UTF8.GetString(MachineKey.Unprotect(Convert.FromBase64String(protectedJson)' "ConfirmationContext")); " is 124.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "            document.Add(new Field("Key"' Package.Key.ToString(CultureInfo.InvariantCulture)' Field.Store.YES' Field.Index.NOT_ANALYZED)); " is 126.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "                    document.Add(new Field("CuratedFeedKey"' feedKey.ToString(CultureInfo.InvariantCulture)' Field.Store.NO' Field.Index.NOT_ANALYZED)); " is 132.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "            var field = new Field("Id-Exact"' Package.PackageRegistration.Id.ToLowerInvariant()' Field.Store.NO' Field.Index.NOT_ANALYZED); " is 127.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "            document.Add(new Field("Created"' Package.Created.ToString(CultureInfo.InvariantCulture)' Field.Store.YES' Field.Index.NO)); " is 124.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "            document.Add(new Field("FlattenedDependencies"' Package.FlattenedDependencies.ToStringSafe()' Field.Store.YES' Field.Index.NO)); " is 128.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "            document.Add(new Field("FlattenedPackageTypes"' Package.FlattenedPackageTypes.ToStringSafe()' Field.Store.YES' Field.Index.NO)); " is 128.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "            document.Add(new Field("IsVerified-Original"' Package.PackageRegistration.IsVerified.ToString()' Field.Store.YES' Field.Index.NO)); " is 131.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "            document.Add(new Field("LastUpdated"' Package.LastUpdated.ToString(CultureInfo.InvariantCulture)' Field.Store.YES' Field.Index.NO)); " is 132.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "                document.Add(new Field("LastEdited"' Package.LastEdited.Value.ToString(CultureInfo.InvariantCulture)' Field.Store.YES' Field.Index.NO)); " is 136.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "            document.Add(new Field("VersionDownloadCount"' Package.DownloadCount.ToString(CultureInfo.InvariantCulture)' Field.Store.YES' Field.Index.NO)); " is 143.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "            document.Add(new Field("PackageFileSize"' Package.PackageFileSize.ToString(CultureInfo.InvariantCulture)' Field.Store.YES' Field.Index.NO)); " is 140.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "            document.Add(new Field("Published"' Package.Published.ToString(CultureInfo.InvariantCulture)' Field.Store.YES' Field.Index.NO)); " is 128.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "            document.Add(new Field("RequiresLicenseAcceptance"' Package.RequiresLicenseAcceptance.ToString()' Field.Store.YES' Field.Index.NO)); " is 132.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "            document.Add(new Field("HideLicenseReport"' Package.HideLicenseReport.ToStringSafe()' Field.Store.YES' Field.Index.NO)); " is 120.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "            document.Add(new Field("IsLatestStable"' Package.IsLatestStable.ToString()' Field.Store.YES' Field.Index.NOT_ANALYZED)); " is 120.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "            document.Add(new Field("IsLatestSemVer2"' Package.IsLatestSemVer2.ToString()' Field.Store.YES' Field.Index.NOT_ANALYZED)); " is 122.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "            document.Add(new Field("IsLatestStableSemVer2"' Package.IsLatestStableSemVer2.ToString()' Field.Store.YES' Field.Index.NOT_ANALYZED)); " is 134.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "            document.Add(new Field("PublishedDate"' Package.Published.Ticks.ToString(CultureInfo.InvariantCulture)' Field.Store.NO' Field.Index.NOT_ANALYZED)); " is 147.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "            document.Add(new Field("EditedDate"' (Package.LastEdited ?? Package.Published).Ticks.ToString(CultureInfo.InvariantCulture)' Field.Store.NO' Field.Index.NOT_ANALYZED)); " is 168.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "                 new Field("DownloadCount"' Package.PackageRegistration.DownloadCount.ToString(CultureInfo.InvariantCulture)' Field.Store.YES' Field.Index.NOT_ANALYZED)); " is 153.
Long Statement,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,ToDocument,The length of the statement  "            document.Add(new Field("DisplayName"' displayName.ToLower(CultureInfo.CurrentCulture)' Field.Store.NO' Field.Index.NOT_ANALYZED)); " is 130.
Long Statement,NuGetGallery,LuceneIndexingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\LuceneIndexingService.cs,UpdateIndex,The length of the statement  "                    // Reset the lastWriteTime to null. This will allow us to get a fresh copy of all the latest \ latest successful packages " is 121.
Long Statement,NuGetGallery,LuceneIndexingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\LuceneIndexingService.cs,UpdatePackage,The length of the statement  "                    // Someone passed us in a version which was e.g. just unlisted? Or just not the latest version which is what we want to index. Doesn't really matter. We'll find one to index. " is 174.
Long Statement,NuGetGallery,LuceneIndexingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\LuceneIndexingService.cs,UpdatePackage,The length of the statement  "                        Trace.Information(String.Format(CultureInfo.CurrentCulture' "Updating Lucene Index for: {0} {1} [PackageKey:{2}]"' package.PackageRegistration.Id' package.Version' package.Key)); " is 178.
Long Statement,NuGetGallery,LuceneIndexingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\LuceneIndexingService.cs,GetPackages,The length of the statement  "                // Retrieve the Latest' LatestStable' LatestSemVer2 and LatestStableSemVer2 version of packages if any package for that registration changed since we last updated the index. " is 173.
Long Statement,NuGetGallery,LuceneIndexingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\LuceneIndexingService.cs,GetPackages,The length of the statement  "                // We need to do this because some attributes that we index such as DownloadCount are values in the PackageRegistration table that may " is 134.
Long Statement,NuGetGallery,LuceneIndexingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\LuceneIndexingService.cs,GetPackages,The length of the statement  "                set = set.Where(p => p.IsLatest || p.IsLatestStable || p.IsLatestSemVer2 || p.IsLatestStableSemVer2);  // which implies that p.IsListed by the way! " is 147.
Long Statement,NuGetGallery,LuceneIndexingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\LuceneIndexingService.cs,AddPackagesCore,The length of the statement  "                // If this is not the first time we're creating the index' clear any package registrations for packages we are going to updating. " is 129.
Long Statement,NuGetGallery,LuceneIndexingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\LuceneIndexingService.cs,AddPackagesCore,The length of the statement  "            // As per http://stackoverflow.com/a/3894582. The IndexWriter is CPU bound' so we can try and write multiple packages in parallel. " is 130.
Long Statement,NuGetGallery,TitleAnalyzer,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\PerFieldAnalyzer.cs,TokenStream,The length of the statement  "                string partiallyTokenized = String.Join(" "' title.Split(PackageIndexEntity.IdSeparators' StringSplitOptions.RemoveEmptyEntries)); " is 130.
Long Statement,NuGetGallery,AutoCompleteDatabasePackageVersionsQuery,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Queries\AutoCompleteDatabasePackageVersionsQuery.cs,Execute,The length of the statement  "            return RunSqlQuery(string.Format(CultureInfo.InvariantCulture' _sqlFormat' semVerLevelSqlFilter' prereleaseFilter)' id); " is 120.
Long Statement,NuGetGallery,CloudDownloadCountService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\CloudDownloadCountService.cs,RefreshCore,The length of the statement  "                // The data in downloads.v1.json will be an array of Package records - which has Id' Array of Versions and download count. " is 122.
Long Statement,NuGetGallery,DownloadCountObjectMaterializedInterceptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\DownloadCountObjectMaterializedInterceptor.cs,InterceptPackageMaterialized,The length of the statement  "            if (_downloadCountService.TryGetDownloadCountForPackage(package.PackageRegistration.Id' packageNormalizedVersion' out downloadCount)) " is 133.
Long Statement,NuGetGallery,ContentService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ContentService.cs,GetContentItemAsync,The length of the statement  "                throw new ArgumentException(String.Format(CultureInfo.CurrentCulture' Strings.ParameterCannotBeNullOrEmpty' nameof(name))' nameof(name)); " is 137.
Long Statement,NuGetGallery,ContentService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ContentService.cs,GetContentItemAsync,The length of the statement  "                throw new ArgumentException(String.Format(CultureInfo.CurrentCulture' Strings.ParameterCannotBeNullOrEmpty' nameof(name))' nameof(name)); " is 137.
Long Statement,NuGetGallery,ContentService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ContentService.cs,GetContentItemAsync,The length of the statement  "                throw new ArgumentException(String.Format(CultureInfo.CurrentCulture' Strings.ParameterCannotBeNullOrEmpty' nameof(extension))' nameof(extension)); " is 147.
Long Statement,NuGetGallery,JsonStatisticsService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\JsonStatisticsService.cs,GetPackageDownloadsByVersion,The length of the statement  "                //do no logging and just return null. Since this exception will thrown for all packages which doesn't have downloads in last 6 weeks' we don't " is 142.
Long Statement,NuGetGallery,NuGetExeDownloaderService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\NuGetExeDownloaderService.cs,CreateNuGetExeDownloadActionResultAsync,The length of the statement  "            return _fileStorageService.CreateDownloadFileActionResultAsync(requestUrl' CoreConstants.DownloadsFolderName' "nuget.exe"); " is 123.
Long Statement,NuGetGallery,PackageDeleteService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageDeleteService.cs,SoftDeletePackagesAsync,The length of the statement  "                    await _auditingService.SaveAuditRecordAsync(CreateAuditRecord(package' package.PackageRegistration' AuditedPackageAction.SoftDelete' reason)); " is 142.
Long Statement,NuGetGallery,PackageDeleteService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageDeleteService.cs,HardDeletePackagesAsync,The length of the statement  "                var packageRegistrations = packages.GroupBy(p => p.PackageRegistration).Select(g => g.First().PackageRegistration).ToList(); " is 124.
Long Statement,NuGetGallery,PackageDeleteService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageDeleteService.cs,HardDeletePackagesAsync,The length of the statement  "                    await _auditingService.SaveAuditRecordAsync(CreateAuditRecord(package' package.PackageRegistration' AuditedPackageAction.Delete' reason)); " is 138.
Long Statement,NuGetGallery,PackageDeleteService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageDeleteService.cs,ReflowHardDeletedPackageAsync,The length of the statement  "                    throw new UserSafeException($"The package {id} {normalizedVersion} exists! You can only reflow hard-deleted packages that do not exist."); " is 138.
Long Statement,NuGetGallery,PackageFileService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageFileService.cs,CreateDownloadPackageActionResultAsync,The length of the statement  "            var fileName = BuildFileName(package' CoreConstants.PackageFileSavePathTemplate' CoreConstants.NuGetPackageFileExtension); " is 122.
Long Statement,NuGetGallery,PackageFileService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageFileService.cs,CreateDownloadPackageActionResultAsync,The length of the statement  "            var fileName = BuildFileName(id' version' CoreConstants.PackageFileSavePathTemplate' CoreConstants.NuGetPackageFileExtension); " is 126.
Long Statement,NuGetGallery,PackageFileService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageFileService.cs,SavePendingReadMeMdFileAsync,The length of the statement  "                await _fileStorageService.SaveFileAsync(CoreConstants.PackageReadMesFolderName' fileName' readMeMdStream' overwrite: true); " is 123.
Long Statement,NuGetGallery,SqlAggregateStatsService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\SqlAggregateStatsService.cs,GetAggregateStats,The length of the statement  "            using (var dbContext = new EntitiesContext(_configuration.SqlConnectionString' readOnly: true)) // true - set readonly but it is ignored anyway' as this class doesn't call EntitiesContext.SaveChanges() " is 201.
Long Statement,NuGetGallery,UploadFileService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\UploadFileService.cs,BuildFileName,The length of the statement  "            return String.Format(CultureInfo.InvariantCulture' Constants.UploadFileNameTemplate' userKey' CoreConstants.NuGetPackageFileExtension); " is 135.
Long Statement,NuGetGallery,EditPackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\EditPackageService.cs,StartEditPackageRequest,The length of the statement  "            if (PackageNamingConflictValidator.TitleConflictsWithExistingRegistrationId(p.PackageRegistration.Id' request.VersionTitle)) " is 124.
Long Statement,NuGetGallery,EditPackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\EditPackageService.cs,StartEditPackageRequest,The length of the statement  "                LicenseUrl = p.LicenseUrl' // Our current policy is not to allow editing the license URL' so just clone it from its previous value. " is 131.
Long Statement,NuGetGallery,StatisticsPivot,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ViewModels\StatisticsPivot.cs,GroupBy,The length of the statement  "            //  Secondly added the ordered list to each level (the pivot algorithm required dictionary lookups so this is a separate step) " is 126.
Long Statement,NuGetGallery,AppActivator,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\AppActivator.cs,PostStart,The length of the statement  "                throw new AppActivatorException("The OwinStartup module did not run. Make sure the application runs in an OWIN pipeline and Microsoft.Owin.Host.SystemWeb.dll is in the bin directory."); " is 185.
Long Statement,NuGetGallery,AppActivator,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\AppActivator.cs,BackgroundJobsPostStart,The length of the statement  "                var cloudDownloadCountService = DependencyResolver.Current.GetService<IDownloadCountService>() as CloudDownloadCountService; " is 124.
Long Statement,NuGetGallery,ApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ApiController.cs,GetPackage,The length of the statement  "                    return new HttpStatusCodeWithBodyResult(HttpStatusCode.BadRequest' "The package version is not a valid semantic version"); " is 122.
Long Statement,NuGetGallery,ApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ApiController.cs,GetPackage,The length of the statement  "                        return new HttpStatusCodeWithBodyResult(HttpStatusCode.NotFound' String.Format(CultureInfo.CurrentCulture' Strings.PackageWithIdAndVersionNotFound' id' version)); " is 162.
Long Statement,NuGetGallery,ApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ApiController.cs,GetPackage,The length of the statement  "                    return new HttpStatusCodeWithBodyResult(HttpStatusCode.ServiceUnavailable' Strings.DatabaseUnavailable_TrySpecificVersion); " is 123.
Long Statement,NuGetGallery,ApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ApiController.cs,GetPackage,The length of the statement  "                    return new HttpStatusCodeWithBodyResult(HttpStatusCode.ServiceUnavailable' Strings.DatabaseUnavailable_TrySpecificVersion); " is 123.
Long Statement,NuGetGallery,ApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ApiController.cs,VerifyPackageKeyInternalAsync,The length of the statement  "                    HttpStatusCode.NotFound' String.Format(CultureInfo.CurrentCulture' Strings.PackageWithIdAndVersionNotFound' id' version)); " is 122.
Long Statement,NuGetGallery,ApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ApiController.cs,DeletePackage,The length of the statement  "                    HttpStatusCode.NotFound' String.Format(CultureInfo.CurrentCulture' Strings.PackageWithIdAndVersionNotFound' id' version)); " is 122.
Long Statement,NuGetGallery,ApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ApiController.cs,PublishPackage,The length of the statement  "                    HttpStatusCode.NotFound' String.Format(CultureInfo.CurrentCulture' Strings.PackageWithIdAndVersionNotFound' id' version)); " is 122.
Long Statement,NuGetGallery,JsonApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\JsonApiController.cs,RemovePackageOwner,The length of the statement  "                var request = _packageOwnershipManagementService.GetPackageOwnershipRequests(package: model.Package' newOwner: model.User).FirstOrDefault(); " is 140.
Long Statement,NuGetGallery,JsonApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\JsonApiController.cs,RemovePackageOwner,The length of the statement  "                    await _packageOwnershipManagementService.RemovePackageOwnerAsync(model.Package' model.CurrentUser' model.User' commitAsTransaction:true); " is 137.
Long Statement,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The length of the statement  "            if (!Path.GetExtension(uploadFile.FileName).Equals(CoreConstants.NuGetPackageFileExtension' StringComparison.OrdinalIgnoreCase)) " is 128.
Long Statement,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The length of the statement  "                        string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_MinClientVersionOutOfRange' nuspec.GetMinClientVersion()) }); " is 125.
Long Statement,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The length of the statement  "                        return Json(409' new string[] { string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_IdNamespaceConflict) }); " is 120.
Long Statement,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The length of the statement  "                if (packageRegistration != null && !PermissionsService.IsActionAllowed(packageRegistration' currentUser' PackageActions.UploadNewVersion)) " is 138.
Long Statement,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The length of the statement  "                    return Json(409' new[] { string.Format(CultureInfo.CurrentCulture' Strings.PackageIdNotAvailable' packageRegistration.Id) }); " is 125.
Long Statement,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,ReportAbuse,The length of the statement  "            await _supportRequestService.AddNewSupportRequestAsync(subject' reportForm.Message' requestorEmailAddress' reason' user' package); " is 130.
Long Statement,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,ValidateReportMyPackageViewModel,The length of the statement  "                return RedirectToAction(nameof(ReportAbuse)' new { id = package.PackageRegistration.Id' version = package.NormalizedVersion }); " is 127.
Long Statement,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,Edit,The length of the statement  "                    await _auditingService.SaveAuditRecordAsync(new PackageAuditRecord(packageWithEditsApplied' AuditedPackageAction.Edit)); " is 120.
Long Statement,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,HandleOwnershipRequest,The length of the statement  "                return View("ConfirmOwner"' new PackageOwnerConfirmationModel(id' user.Username' ConfirmOwnershipResult.NotYourRequest)); " is 121.
Long Statement,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,CancelPendingOwnershipRequest,The length of the statement  "                return View("ConfirmOwner"' new PackageOwnerConfirmationModel(id' requestingUsername' ConfirmOwnershipResult.NotYourRequest)); " is 126.
Long Statement,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,CancelPendingOwnershipRequest,The length of the statement  "            var request = _packageOwnershipManagementService.GetPackageOwnershipRequests(package' requestingUser' pendingUser).FirstOrDefault(); " is 132.
Long Statement,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,SendAddPackageOwnerNotification,The length of the statement  "            propagators.ForEach(owner => _messageService.SendPackageOwnerAddedNotice(owner' newOwner' package' packageUrl' propagatorsPolicyMessage)); " is 138.
Long Statement,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,SendAddPackageOwnerNotification,The length of the statement  "                .ForEach(owner => _messageService.SendPackageOwnerAddedNotice(owner' newOwner' package' packageUrl' subscribedPolicyMessage)); " is 126.
Long Statement,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,SendAddPackageOwnerNotification,The length of the statement  "            notSubscribed.ForEach(owner => _messageService.SendPackageOwnerAddedNotice(owner' newOwner' package' packageUrl' string.Empty)); " is 128.
Long Statement,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,VerifyPackage,The length of the statement  "                        && String.Equals(packageMetadata.Version.OriginalVersion' formData.OriginalVersion' StringComparison.OrdinalIgnoreCase))) " is 121.
Long Statement,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,PreviewReadMe,The length of the statement  "                return Json(400' new[] { string.Format(CultureInfo.CurrentCulture' Strings.PreviewReadMe_ConversionFailed' ex.Message) }); " is 122.
Long Statement,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,SetLicenseReportVisibility,The length of the statement  "                "The license report for this package has been {0}. It may take several hours for this change to propagate through our system."' " is 127.
Long Statement,NuGetGallery,AuthenticationController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\AuthenticationController.cs,ShouldChallengeEnforcedProvider,The length of the statement  "                    && !providers.Any(p => string.Equals(CredentialTypes.ExternalPrefix + p' authenticatedUser.CredentialUsed.Type' StringComparison.OrdinalIgnoreCase))) " is 149.
Long Statement,NuGetGallery,UsersController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\UsersController.cs,DeleteRequest,The length of the statement  "            bool hasPendingRequest = _supportRequestService.GetIssues().Where((issue)=> string.Equals(issue.CreatedBy' user.Username) &&  " is 124.
Long Statement,NuGetGallery,UsersController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\UsersController.cs,Delete,The length of the statement  "                var status = await _deleteAccountService.DeleteGalleryUserAccountAsync(user' admin' model.Signature' model.ShouldUnlist' commitAsTransaction: true); " is 148.
Long Statement,NuGetGallery,UsersController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\UsersController.cs,ForgotPassword,The length of the statement  "                var result = await _authService.GeneratePasswordResetToken(model.Email' Constants.PasswordResetTokenExpirationHours * 60); " is 122.
Long Statement,NuGetGallery,UsersController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\UsersController.cs,ChangeEmail,The length of the statement  "                _messageService.SendEmailChangeConfirmationNotice(new MailAddress(user.UnconfirmedEmailAddress' user.Username)' confirmationUrl); " is 129.
Long Statement,NuGetGallery,UsersController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\UsersController.cs,ChangePassword,The length of the statement  "                var resetResultType = await _authService.GeneratePasswordResetToken(user' Constants.PasswordResetTokenExpirationHours * 60); " is 124.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendNewAccountEmail,The length of the statement  "                mailMessage.Subject = String.Format(CultureInfo.CurrentCulture' "[{0}] Please verify your account."' Config.GalleryOwner.DisplayName); " is 134.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendEmailChangeNoticeToPreviousEmailAddress,The length of the statement  "            string subject = String.Format(CultureInfo.CurrentCulture' "[{0}] Recent changes to your account."' Config.GalleryOwner.DisplayName); " is 133.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPasswordResetInstructions,The length of the statement  "                CultureInfo.CurrentCulture' forgotPassword ? Strings.Emails_ForgotPassword_Subject : Strings.Emails_SetPassword_Subject' " is 120.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageOwnerRequest,The length of the statement  "            string body = string.Format(CultureInfo.CurrentCulture' $@"The user '{fromUser.Username}' wants to add you as an owner of the package '{package.Id}'. " is 149.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageOwnerRequest,The length of the statement  "                body += Environment.NewLine + Environment.NewLine + string.Format(CultureInfo.CurrentCulture' $@"The user '{fromUser.Username}' added the following message for you: " is 164.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageOwnerRequest,The length of the statement  "                mailMessage.Subject = String.Format(CultureInfo.CurrentCulture' subject' Config.GalleryOwner.DisplayName' fromUser.Username' package.Id); " is 137.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageOwnerRequestRejectionNotice,The length of the statement  "            var subject = string.Format(CultureInfo.CurrentCulture' $"[{Config.GalleryOwner.DisplayName}] The user '{newOwner.Username}' has rejected your request to add them as an owner of the package '{package.Id}'."); " is 208.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageOwnerRequestRejectionNotice,The length of the statement  "            var body = string.Format(CultureInfo.CurrentCulture' $@"The user '{newOwner.Username}' has rejected your request to add them as an owner of the package '{package.Id}'. " is 167.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageOwnerRequestCancellationNotice,The length of the statement  "            var subject = string.Format(CultureInfo.CurrentCulture' $"[{Config.GalleryOwner.DisplayName}] The user '{requestingOwner.Username}' has cancelled their request for you to be added as an owner of the package '{package.Id}'."); " is 225.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageOwnerRequestCancellationNotice,The length of the statement  "            var body = string.Format(CultureInfo.CurrentCulture' $@"The user '{requestingOwner.Username}' has cancelled their request for you to be added as an owner of the package '{package.Id}'. " is 184.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageOwnerAddedNotice,The length of the statement  "            body = String.Format(CultureInfo.CurrentCulture' body' newOwner.Username' packageUrl' policyMessage' Config.GalleryOwner.DisplayName); " is 134.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageOwnerAddedNotice,The length of the statement  "                mailMessage.Subject = String.Format(CultureInfo.CurrentCulture' subject' Config.GalleryOwner.DisplayName' newOwner.Username' package.Id); " is 137.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageOwnerRemovedNotice,The length of the statement  "            body = String.Format(CultureInfo.CurrentCulture' body' fromUser.Username' package.Id' fromUser.EmailAddress' Config.GalleryOwner.DisplayName); " is 142.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageOwnerRemovedNotice,The length of the statement  "                mailMessage.Subject = String.Format(CultureInfo.CurrentCulture' subject' Config.GalleryOwner.DisplayName' fromUser.Username' package.Id); " is 137.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageAddedNotice,The length of the statement  "            string body = @"The package [{1} {2}]({3}) was just published on {0}. If this was not intended' please [contact support]({4}). " is 126.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageAddedNotice,The length of the statement  "            subject = String.Format(CultureInfo.CurrentCulture' subject' Config.GalleryOwner.DisplayName' package.PackageRegistration.Id' package.Version); " is 143.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageUploadedNotice,The length of the statement  "            string body = @"The package [{1} {2}]({3}) was just uploaded to {0}. If this was not intended' please [contact support]({4}). " is 125.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageUploadedNotice,The length of the statement  "Note: This package has not been published yet. It will appear in search results and will be available for install/restore after both validation and indexing are complete. Package validation and indexing may take up to an hour. " is 226.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageUploadedNotice,The length of the statement  "            subject = String.Format(CultureInfo.CurrentCulture' subject' Config.GalleryOwner.DisplayName' package.PackageRegistration.Id' package.Version); " is 143.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendAccountDeleteNotice,The length of the statement  "            string body = @"We received a request to delete your account {0}. If you did not initiate this request please contact the {1} team immediately. " is 143.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendAccountDeleteNotice,The length of the statement  " - remove your ownership from any ID prefix reservations and delete any ID prefix reservations that you were the only owner of  " is 125.
Long Statement,NuGetGallery,MessageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\MessageService.cs,SendPackageDeletedNotice,The length of the statement  "            string body = @"The package [{1} {2}]({3}) was just deleted from {0}. If this was not intended' please [contact support]({4}). " is 126.
Long Statement,NuGetGallery,Routes,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\Routes.cs,RegisterUIRoutes,The length of the statement  "            // TODO : Most of the routes are essentially of the format api/v{x}/*. We should refactor the code to vary them by the version. " is 127.
Long Statement,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,CreatePackageAsync,The length of the statement  "            var package = CreatePackageFromNuGetPackage(packageRegistration' nugetPackage' packageMetadata' packageStreamMetadata' user); " is 125.
Long Statement,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,MergeLatestStablePackagesByOwner,The length of the statement  "                // Use First() instead of Single() to get the latest package' in case there are multiple latest due to concurrency issue " is 120.
Long Statement,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,MergeLatestPackagesByOwner,The length of the statement  "            // Use First() instead of Single() to get the latest package' in case there are multiple latest due to concurrency issue " is 120.
Long Statement,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,CreateOrGetPackageRegistration,The length of the statement  "            if (packageRegistration != null && !PermissionsService.IsActionAllowed(packageRegistration' currentUser' PackageActions.UploadNewVersion)) " is 138.
Long Statement,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,CreatePackageFromNuGetPackage,The length of the statement  "            var package = packageRegistration.Packages.SingleOrDefault(pv => pv.Version == packageMetadata.Version.OriginalVersion); " is 120.
Long Statement,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,EnrichPackageFromNuGetPackage,The length of the statement  "#pragma warning disable 618 // TODO: remove Package.Authors completely once production services definitely no longer need it " is 124.
Long Statement,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,ValidatePackageTitle,The length of the statement  "            if (_packageNamingConflictValidator.TitleConflictsWithExistingRegistrationId(packageMetadata.Id' packageMetadata.Title)) " is 120.
Long Statement,NuGetGallery,DefaultDependenciesModule,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\DefaultDependenciesModule.cs,Load,The length of the statement  "            builder.Register(c => new EntitiesContext(configuration.Current.SqlConnectionString' readOnly: configuration.Current.ReadOnlyMode)) " is 131.
Long Statement,NuGetGallery,DefaultDependenciesModule,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\DefaultDependenciesModule.cs,ConfigureForAzureStorage,The length of the statement  "                    builder.RegisterInstance(new CloudBlobClientWrapper(dependent.AzureStorageConnectionString' configuration.Current.AzureStorageReadAccessGeoRedundant)) " is 150.
Long Statement,NuGetGallery,DefaultDependenciesModule,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\DefaultDependenciesModule.cs,ConfigureForAzureStorage,The length of the statement  "            builder.RegisterInstance(new JsonAggregateStatsService(configuration.Current.AzureStorage_Statistics_ConnectionString' configuration.Current.AzureStorageReadAccessGeoRedundant)) " is 177.
Long Statement,NuGetGallery,DefaultDependenciesModule,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\DefaultDependenciesModule.cs,ConfigureForAzureStorage,The length of the statement  "            builder.RegisterInstance(new CloudReportService(configuration.Current.AzureStorage_Statistics_ConnectionString' configuration.Current.AzureStorageReadAccessGeoRedundant)) " is 170.
Long Statement,NuGetGallery,DefaultDependenciesModule,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\DefaultDependenciesModule.cs,GetAuditingServiceForAzureStorage,The length of the statement  "            var service = new CloudAuditingService(instanceId' localIp' configuration.Current.AzureStorage_Auditing_ConnectionString' AuditActor.GetAspNetOnBehalfOfAsync); " is 159.
Long Statement,NuGetGallery,DefaultDependenciesModule,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\DefaultDependenciesModule.cs,RegisterCookieComplianceService,The length of the statement  "            HostingEnvironment.QueueBackgroundWorkItem(async cancellationToken => await service.InitializeAsync(siteName' diagnostics' cancellationToken)); " is 143.
Long Statement,NuGetGallery,ExtensionMethods,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ExtensionMethods.cs,Flatten,The length of the statement  "            return String.Join("|"' packageTypes.Select(d => String.Format(CultureInfo.InvariantCulture' "{0}:{1}"' d.Name' d.Version))); " is 125.
Long Statement,NuGetGallery,ExtensionMethods,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ExtensionMethods.cs,FlattenDependencies,The length of the statement  "                "|"' dependencies.Select(d => String.Format(CultureInfo.InvariantCulture' "{0}:{1}:{2}"' d.Id' d.VersionSpec' d.TargetFramework))); " is 131.
Long Statement,NuGetGallery,UserService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\UserService.cs,FindByUnconfirmedEmailAddress,The length of the statement  "                return UserRepository.GetAll().Where(u => u.UnconfirmedEmailAddress == unconfirmedEmailAddress && u.Username == optionalUsername).ToList(); " is 139.
Long Statement,NuGetGallery,UserService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\UserService.cs,CancelChangeEmailAddress,The length of the statement  "            await Auditing.SaveAuditRecordAsync(new UserAuditRecord(user' AuditedUserAction.CancelChangeEmail' user.UnconfirmedEmailAddress)); " is 130.
Long Statement,NuGetGallery,UserService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\UserService.cs,ConfirmEmailAddress,The length of the statement  "            await Auditing.SaveAuditRecordAsync(new UserAuditRecord(user' AuditedUserAction.ConfirmEmail' user.UnconfirmedEmailAddress)); " is 125.
Long Statement,NuGetGallery,UrlExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\UrlExtensions.cs,Package,The length of the statement  "            // Ensure trailing slashes for versionless package URLs' as a fix for package filenames that look like known file extensions " is 124.
Long Statement,NuGetGallery,UrlExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\UrlExtensions.cs,PackageDefaultIcon,The length of the statement  "                + VirtualPathUtility.ToAbsolute("~/Content/Images/packageDefaultIcon-50x50.png"' url.RequestContext.HttpContext.Request.ApplicationPath); " is 137.
Long Statement,NuGetGallery,UrlExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\UrlExtensions.cs,PackageDownload,The length of the statement  "            // Ensure trailing slashes for versionless package URLs' as a fix for package filenames that look like known file extensions " is 124.
Long Statement,NuGetGallery,UrlExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\UrlExtensions.cs,LogOff,The length of the statement  "            if (string.Equals(url.RequestContext.RouteData.DataTokens[Area].ToStringOrNull()' AdminAreaRegistration.Name' StringComparison.OrdinalIgnoreCase)) " is 146.
Long Statement,NuGetGallery,LuceneSearchService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\LuceneSearchService.cs,SearchCore,The length of the statement  "                var feedFilterQuery = new TermQuery(new Term("CuratedFeedKey"' searchFilter.CuratedFeed.Key.ToString(CultureInfo.InvariantCulture))); " is 133.
Long Statement,NuGetGallery.Areas.Admin.Controllers,DeleteController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\DeleteController.cs,Search,The length of the statement  "                    var resultingPackage = _packageService.FindPackageByIdAndVersionStrict(splitQueryPart[0].Trim()' splitQueryPart[1].Trim()); " is 123.
Long Statement,NuGetGallery.Areas.Admin.Controllers,DeleteController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\DeleteController.cs,ReflowBulk,The length of the statement  "                            $"Couldn't parse the list of hard-deleted packages to reflow in bulk: could not split \"{line}\" into ID and version!"); " is 120.
Long Statement,NuGetGallery.Areas.Admin.Controllers,ReservedNamespaceController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\ReservedNamespaceController.cs,SearchPrefix,The length of the statement  "            var notFoundPrefixes = notFoundPrefixQueries.Select(q => new ReservedNamespace(value: q' isSharedNamespace: false' isPrefix: true)); " is 132.
Long Statement,NuGetGallery.Areas.Admin.Controllers,ReservedNamespaceController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\ReservedNamespaceController.cs,SearchPrefix,The length of the statement  "            resultModel = resultModel.Concat(notFoundPrefixes.Select(nfp => new ReservedNamespaceResultModel(nfp' isExisting: false)).ToList()); " is 132.
Long Statement,NuGetGallery.Areas.Admin.Controllers,ReservedNamespaceController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\ReservedNamespaceController.cs,AddNamespace,The length of the statement  "                return Json(new { success = true' message = string.Format(Strings.ReservedNamespace_PrefixAdded' newNamespace.Value) }); " is 120.
Long Statement,NuGetGallery.Areas.Admin.Controllers,ReservedNamespaceController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\ReservedNamespaceController.cs,RemoveNamespace,The length of the statement  "                return Json(new { success = true' message = string.Format(Strings.ReservedNamespace_PrefixRemoved' existingNamespace.Value) }); " is 127.
Long Statement,NuGetGallery.Areas.Admin.Controllers,ReservedNamespaceController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\ReservedNamespaceController.cs,AddOwner,The length of the statement  "                return Json(new { success = true' message = string.Format(Strings.ReservedNamespace_OwnerAdded' owner' prefix.Value) }); " is 120.
Long Statement,NuGetGallery.Areas.Admin.Controllers,ReservedNamespaceController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\ReservedNamespaceController.cs,RemoveOwner,The length of the statement  "                return Json(new { success = true' message = string.Format(Strings.ReservedNamespace_OwnerRemoved' owner' prefix.Value) }); " is 122.
Long Statement,NuGetGallery.Areas.Admin.Controllers,SupportRequestController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\SupportRequestController.cs,Filter,The length of the statement  "            var issues = (await GetSupportRequestsAsync(pageNumber' take' assignedToId' reason' issueStatusId)).Take(take).ToList(); " is 120.
Long Statement,NuGetGallery.Areas.Admin.Controllers,SupportRequestController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\SupportRequestController.cs,GetSupportRequestsAsync,The length of the statement  "            var distinctUserKeys = enumerable.Select(i => i.UserKey).Where(i => i.HasValue).Select(i => i.Value).Distinct().ToList(); " is 121.
Long Statement,NuGetGallery.Areas.Admin.Controllers,SupportRequestController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\SupportRequestController.cs,GetListOfIssueStatuses,The length of the statement  "            items.Add(new SelectListItem { Text = "Unresolved"' Value = IssueStatusKeys.Unresolved.ToString(CultureInfo.InvariantCulture) }); " is 129.
Long Statement,NuGetGallery.Areas.Admin.Controllers,SupportRequestController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\SupportRequestController.cs,GetListOfAdmins,The length of the statement  "                var currentItem = new SelectListItem { Text = a.GalleryUsername' Value = a.Key.ToString(CultureInfo.InvariantCulture) }; " is 120.
Long Statement,NuGetGallery.Areas.Admin,SupportRequestService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Services\SupportRequestService.cs,AddNewSupportRequestAsync,The length of the statement  "                var errorMessage = $"Error while submitting support request at {DateTime.UtcNow}. User requesting support = {loggedInUser}. Support reason = {reason ?? "N/A"}. Package info = {packageInfo}"; " is 190.
Long Statement,NuGetGallery.Areas.Admin,SupportRequestService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Services\SupportRequestService.cs,GetFilteredIssuesQueryable,The length of the statement  "                    .ThenBy(i => i.IssueStatusId == IssueStatusKeys.New ? 1 : (i.IssueStatusId == IssueStatusKeys.Working ? 2 : (i.IssueStatusId == IssueStatusKeys.WaitingForCustomer ? 3 : 4))) " is 173.
Long Statement,NuGetGallery.Areas.Admin,SupportRequestService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Services\SupportRequestService.cs,GetFilteredIssuesQueryable,The length of the statement  "                    .OrderBy(i => i.IssueStatusId == IssueStatusKeys.New ? 1 : (i.IssueStatusId == IssueStatusKeys.Working ? 2 : (i.IssueStatusId == IssueStatusKeys.WaitingForCustomer ? 3 : 4))) " is 174.
Long Statement,NuGetGallery.Authentication,AuthenticationService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AuthenticationService.cs,Authenticate,The length of the statement  "                    !passwordCredentials.Any(c => string.Equals(c.Type' CredentialBuilder.LatestPasswordType' StringComparison.OrdinalIgnoreCase))) " is 127.
Long Statement,NuGetGallery.Authentication,AuthenticationService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AuthenticationService.cs,Authenticate,The length of the statement  "                return new PasswordAuthenticationResult(PasswordAuthenticationResult.AuthenticationResult.Success' new AuthenticatedUser(user' matched)); " is 137.
Long Statement,NuGetGallery.Authentication,AuthenticationService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AuthenticationService.cs,AuthenticateInternal,The length of the statement  "                    _trace.Verbose("Credential of type '" + matched.Type + "' for user '" + matched.User.Username + "' has expired on " + matched.Expires.Value.ToString("O"' CultureInfo.InvariantCulture)); " is 185.
Long Statement,NuGetGallery.Authentication,AuthenticationService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AuthenticationService.cs,ResetPasswordWithToken,The length of the statement  "            if (user != null && string.Equals(user.PasswordResetToken' token' StringComparison.Ordinal) && !user.PasswordResetTokenExpirationDate.IsInThePast()) " is 148.
Long Statement,NuGetGallery.Authentication,AuthenticationService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AuthenticationService.cs,DescribeCredential,The length of the statement  "                ExpirationDuration = credential.ExpirationTicks != null ? new TimeSpan?(new TimeSpan(credential.ExpirationTicks.Value)) : null " is 126.
Long Statement,NuGetGallery.Authentication,AuthenticationService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AuthenticationService.cs,ReadExternalLoginCredential,The length of the statement  "                Credential = _credentialBuilder.CreateExternalCredential(authenticationType' idClaim.Value' nameClaim.Value + emailSuffix) " is 122.
Long Statement,NuGetGallery.Authentication,AuthenticationService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AuthenticationService.cs,FindByUserNameOrEmail,The length of the statement  "                    _trace.Warning("Multiple user accounts with email address: " + userNameOrEmail + " found: " + String.Join("' "' allMatches.Select(u => u.Username))); " is 149.
Long Statement,NuGetGallery.Authentication,AuthenticationService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AuthenticationService.cs,CalculateAccountUnlockTime,The length of the statement  "            int lockoutPeriodInMinutes = (int)Math.Pow(AccountLockoutMultiplierInMinutes' (int) ((double)failedLoginCount/AllowedLoginAttempts) - 1); " is 137.
Long Statement,NuGetGallery.Configuration,ConfigurationService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Configuration\ConfigurationService.cs,ResolveConfigObject,The length of the statement  "                    throw new ConfigurationErrorsException(string.Format(CultureInfo.InvariantCulture' "Missing required configuration setting: '{0}'"' settingName)); " is 146.
Long Statement,NuGetGallery.Configuration,ConfigurationService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Configuration\ConfigurationService.cs,InitSecretInjector,The length of the statement  "            return _secretReaderFactory.CreateSecretInjector(_secretReaderFactory.CreateSecretReader(new ConfigurationService(new EmptySecretReaderFactory()))); " is 148.
Long Statement,NuGetGallery.Configuration.SecretReader,SecretReaderFactory,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Configuration\SecretReader\SecretReaderFactory.cs,CreateSecretReader,The length of the statement  "                    string.Format(CultureInfo.InvariantCulture' "{0}{1}"' KeyVaultConfigurationPrefix' CertificateThumbprintConfigurationKey)).Result; " is 130.
Long Statement,NuGetGallery.Configuration.SecretReader,SecretReaderFactory,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Configuration\SecretReader\SecretReaderFactory.cs,CreateSecretReader,The length of the statement  "                var keyVaultConfiguration = new KeyVaultConfiguration(vaultName' clientId' certificateThumbprint' validateCertificate: true); " is 125.
Long Statement,NuGetGallery.Diagnostics,DiagnosticsService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\DiagnosticsService.cs,GetSource,The length of the statement  "                throw new ArgumentException(String.Format(CultureInfo.CurrentCulture' Strings.ParameterCannotBeNullOrEmpty' "name")' nameof(name)); " is 131.
Long Statement,NuGetGallery.Diagnostics,TraceDiagnosticsSource,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\TraceDiagnosticsSource.cs,TraceEvent,The length of the statement  "                throw new ArgumentException(String.Format(CultureInfo.CurrentCulture' Strings.ParameterCannotBeNullOrEmpty' nameof(message))' nameof(message)); " is 143.
Long Statement,NuGetGallery.Diagnostics,TraceDiagnosticsSource,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\TraceDiagnosticsSource.cs,Dispose,The length of the statement  "            // We don't have a finalizer' but subclasses might. Those subclasses should have their Finalizer call Dispose' so suppress finalization " is 135.
Long Statement,NuGetGallery.Diagnostics,DiagnosticsSourceExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\DiagnosticsSourceExtensions.cs,Activity,The length of the statement  "                var stopMessage = String.Format(CultureInfo.CurrentCulture' "Finished {0}. Duration {1:0.00}ms"' name' diff.TotalMilliseconds); " is 127.
Long Statement,NuGetGallery.Controllers,ODataV1FeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV1FeedController.cs,Search,The length of the statement  "            string[] targetFrameworkList = (targetFramework ?? "").Split(new[] { '\''' '|' }' StringSplitOptions.RemoveEmptyEntries); " is 121.
Long Statement,NuGetGallery.Controllers,ODataV2CuratedFeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2CuratedFeedController.cs,Get,The length of the statement  "            var result = await GetCore(options' curatedFeedName' id' version' return404NotFoundWhenNoResults: true' semVerLevel: SemVerLevelKey.SemVerLevel2); " is 146.
Long Statement,NuGetGallery.Controllers,ODataV2CuratedFeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2CuratedFeedController.cs,FindPackagesById,The length of the statement  "            return await GetCore(options' curatedFeedName' id' normalizedVersion: null' return404NotFoundWhenNoResults: false' semVerLevel: semVerLevel); " is 141.
Long Statement,NuGetGallery.Controllers,ODataV2CuratedFeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2CuratedFeedController.cs,Search,The length of the statement  "            string[] targetFrameworkList = (targetFramework ?? "").Split(new[] { '\''' '|' }' StringSplitOptions.RemoveEmptyEntries); " is 121.
Long Statement,NuGetGallery.Controllers,ODataV2CuratedFeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2CuratedFeedController.cs,SearchCount,The length of the statement  "            var searchResults = await Search(options' curatedFeedName' searchTerm' targetFramework' includePrerelease' semVerLevel); " is 120.
Long Statement,NuGetGallery.Controllers,ODataV2FeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2FeedController.cs,Search,The length of the statement  "            string[] targetFrameworkList = (targetFramework ?? "").Split(new[] { '\''' '|' }' StringSplitOptions.RemoveEmptyEntries); " is 121.
Long Statement,NuGetGallery.Controllers,ODataV2FeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2FeedController.cs,Search,The length of the statement  "                        return SearchAdaptor.GetNextLink(Request.RequestUri' resultCount' new { searchTerm' targetFramework' includePrerelease }' o' s); " is 128.
Long Statement,NuGetGallery.Controllers,ODataV2FeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2FeedController.cs,GetUpdates,The length of the statement  "            // Note - it was URI un-escaping converting + to ' '' undoing that is actually a pretty conservative substitution because " is 121.
Long Statement,NuGetGallery.Controllers,ODataV2FeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2FeedController.cs,GetUpdates,The length of the statement  "            if (idValues.Length == 0 || idValues.Length != versionValues.Length || idValues.Length != versionConstraintValues.Length) " is 121.
Long Statement,NuGetGallery.Controllers,ODataV2FeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2FeedController.cs,GetUpdates,The length of the statement  "                                                || targetFrameworkValues.Any(s => supportedPackageFrameworks.Any(supported => NuGetFrameworkUtility.IsCompatibleWithFallbackCheck(s' supported))))  " is 146.
Long Statement,NuGetGallery.Areas.Admin.DynamicData,GridViewPager,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\DynamicData\Content\GridViewPager.ascx.cs,DropDownListPageSize_SelectedIndexChanged,The length of the statement  "                //if page index changed it means the previous page was not valid and was adjusted. Rebind to fill control with adjusted page " is 124.
Long Statement,NuGetGallery.Areas.Admin.DynamicData,_Default,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\DynamicData\Default.aspx.cs,Page_Load,The length of the statement  "                    "There are no accessible tables. Make sure that at least one data model is registered in Global.asax and scaffolding is enabled or implement custom pages."); " is 157.
Long Statement,NuGetGallery.Areas.Admin.DynamicData,DynamicDataManager,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\DynamicData\DynamicDataManager.cs,InitializeDynamicData,The length of the statement  "                        () => new EntitiesContext(configuration.SqlConnectionString' readOnly: false))' // DB Admins do not need to respect read-only mode. " is 131.
Long Statement,NuGetGallery.Authentication.Providers.ApiKey,ApiKeyAuthenticationHandler,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\Providers\ApiKey\ApiKeyAuthenticationHandler.cs,ApplyResponseChallengeAsync,The length of the statement  "            if (Response.StatusCode == 401 && (Helper.LookupChallenge(TheOptions.AuthenticationType' TheOptions.AuthenticationMode) != null)) " is 129.
Long Statement,NuGetGallery.Filters,ApiAuthorizeAttribute,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Filters\ApiAuthorizeAttribute.cs,OnAuthorization,The length of the statement  "            if (identity != null && identity.IsAuthenticated && identity.AuthenticationType == AuthenticationTypes.ApiKey && controller != null) " is 132.
Long Statement,NuGetGallery.Filters,ApiAuthorizeAttribute,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Filters\ApiAuthorizeAttribute.cs,OnAuthorization,The length of the statement  "                            string.Format(CultureInfo.InvariantCulture' Strings.WarningApiKeyAboutToExpire' Math.Round(expirationPeriod.TotalDays' 0)' accountUrl)); " is 136.
Long Statement,NuGetGallery.Helpers,GravatarHelper,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Helpers\GravatarHelper.cs,Image,The length of the statement  "            var gravatarHtml = email == null ? null : Gravatar.GetHtml(email' size' "retro"' GravatarRating.G' attributes: attributes); " is 123.
Long Statement,NuGetGallery.Helpers,FileHelper,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Helpers\FileHelper.cs,IsBinaryFile,The length of the statement  "            return String.IsNullOrEmpty(extension) || BinaryFileExtensions.Any(p => p.Equals(extension' StringComparison.OrdinalIgnoreCase)); " is 129.
Long Statement,NuGetGallery.Helpers,FileHelper,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Helpers\FileHelper.cs,IsImageFile,The length of the statement  "            return String.IsNullOrEmpty(extension) || ImageFileExtensions.Any(p => p.Equals(extension' StringComparison.OrdinalIgnoreCase)); " is 128.
Long Statement,NuGetGallery.Helpers,TreeView<T>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Helpers\TreeView.cs,ValidateSettings,The length of the statement  "                throw new InvalidOperationException("You must call the Children() method to tell the tree view how to find child items"); " is 121.
Long Statement,NuGetGallery.Infrastructure.Authentication,ApiKeyV4,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\ApiKeyV4.cs,Verify,The length of the statement  "            // The verification is not case sensitive. This is to maintain the existing behavior that ApiKey authentication is not case-sensitive. " is 134.
Long Statement,NuGetGallery.Migrations,AddIndexPackageRegistrationKeySemVer,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201704191802404_AddIndexPackageRegistrationKeySemVer.cs,Up,The length of the statement  "            Sql("IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'nci_wi_Packages_PackageRegKeySemVer' AND object_id = OBJECT_ID('Packages')) " + " is 138.
Long Statement,NuGetGallery.Migrations,AddIndexPackageRegistrationKeySemVer,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201704191802404_AddIndexPackageRegistrationKeySemVer.cs,Up,The length of the statement  "                "CREATE NONCLUSTERED INDEX [nci_wi_Packages_PackageRegKeySemVer] ON [dbo].[Packages]([PackageRegistrationKey] ASC' [SemVerLevelKey] ASC ) "); " is 141.
Long Statement,NuGetGallery.Migrations,AddIndexSemVerLevelKey,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201705031714183_AddIndexSemVerLevelKey.cs,Up,The length of the statement  "            Sql("IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'nci_wi_Packages_SemVerLevelKey' AND object_id = OBJECT_ID('Packages')) CREATE NONCLUSTERED INDEX [nci_wi_Packages_SemVerLevelKey] ON [dbo].[Packages] ([SemVerLevelKey]' [IsLatest]' [Deleted]) INCLUDE ([PackageRegistrationKey])"); " is 288.
Long Statement,NuGetGallery.Migrations,AddIndexIsLatestSemVer2,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201706080632469_AddIndexIsLatestSemVer2.cs,Up,The length of the statement  "            Sql("IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'nci_wi_Packages_IsLatestSemVer2' AND object_id = OBJECT_ID('Packages')) CREATE NONCLUSTERED INDEX [nci_wi_Packages_IsLatestSemVer2] ON [dbo].[Packages] ([SemVerLevelKey]'[Deleted]) INCLUDE ([IsLatest]'[IsLatestSemVer2])"); " is 281.
Long Statement,NuGetGallery.Migrations,AddIndexSemVerLevelKeyPackageRegistrationKey,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201706080930506_AddIndexSemVerLevelKeyPackageRegistrationKey.cs,Up,The length of the statement  "            Sql("IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'nci_wi_Packages_SemVerLevelKey_PackageRegistrationKey' AND object_id = OBJECT_ID('Packages')) CREATE NONCLUSTERED INDEX [nci_wi_Packages_SemVerLevelKey_PackageRegistrationKey] ON [dbo].[Packages] ([SemVerLevelKey]'[IsPrerelease]'[Deleted]) INCLUDE ([PackageRegistrationKey]'[Description]'[Tags])"); " is 357.
Long Statement,NuGetGallery.Migrations,AddPackageStatusKey,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201709111714021_AddPackageStatusKey.cs,Up,The length of the statement  "            Sql("IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'nci_wi_Packages_PackageStatusKeyListed' AND object_id = OBJECT_ID('Packages')) CREATE INDEX [nci_wi_Packages_PackageStatusKeyListed] ON [dbo].[Packages] ([PackageStatusKey] ASC' [Listed] ASC) INCLUDE ([Description]' [FlattenedDependencies]' [IsPrerelease]' [PackageRegistrationKey]' [Tags]' [Version])"); " is 363.
Long Statement,NuGetGallery.Migrations,AddPackageStatusKey,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201709111714021_AddPackageStatusKey.cs,Up,The length of the statement  "            Sql("IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'nci_wi_Packages_IsListedPackageStatusKey' AND object_id = OBJECT_ID('Packages')) CREATE INDEX [nci_wi_Packages_IsListedPackageStatusKey] ON [dbo].[Packages] ([IsLatest] ASC' [PackageStatusKey] ASC) INCLUDE ([PackageRegistrationKey]' [Tags]' [Title])"); " is 311.
Long Statement,NuGetGallery.Migrations,AddPackageStatusKey,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201709111714021_AddPackageStatusKey.cs,Up,The length of the statement  "            Sql("IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'nci_wi_Packages_IsLatestStablePackageStatusKey' AND object_id = OBJECT_ID('Packages')) CREATE INDEX [nci_wi_Packages_IsLatestStablePackageStatusKey] ON [dbo].[Packages] ([IsLatestStable] ASC' [PackageStatusKey] ASC) INCLUDE ([Description]' [FlattenedAuthors]' [Listed]' [PackageRegistrationKey]' [Published]' [Tags])"); " is 378.
Long Statement,NuGetGallery.Migrations,AddPackageStatusKey,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201709111714021_AddPackageStatusKey.cs,Up,The length of the statement  "            Sql("IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'nci_wi_Packages_SemVerLevelKeyIsLatestPackageStatusKey' AND object_id = OBJECT_ID('Packages')) CREATE INDEX [nci_wi_Packages_SemVerLevelKeyIsLatestPackageStatusKey] ON [dbo].[Packages] ([SemVerLevelKey] ASC' [IsLatest] ASC' [PackageStatusKey] ASC) INCLUDE ([PackageRegistrationKey])"); " is 344.
Long Statement,NuGetGallery.Migrations,AddPackageStatusKey,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201709111714021_AddPackageStatusKey.cs,Up,The length of the statement  "            Sql("IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'nci_wi_Packages_SemVerLevelKeyPackageStatusKey' AND object_id = OBJECT_ID('Packages')) CREATE INDEX [nci_wi_Packages_SemVerLevelKeyPackageStatusKey] ON [dbo].[Packages] ([SemVerLevelKey] ASC' [PackageStatusKey] ASC) INCLUDE ([IsLatest]' [IsLatestSemVer2])"); " is 317.
Long Statement,NuGetGallery.Migrations,AddPackageStatusKey,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201709111714021_AddPackageStatusKey.cs,Up,The length of the statement  "            Sql("IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'nci_wi_Packages_PackageStatusKeyIsPrereleasePackageStatusKey' AND object_id = OBJECT_ID('Packages')) CREATE INDEX [nci_wi_Packages_PackageStatusKeyIsPrereleasePackageStatusKey] ON [dbo].[Packages] ([SemVerLevelKey] ASC' [IsPrerelease] ASC' [PackageStatusKey] ASC) INCLUDE ([PackageRegistrationKey]' [Description]' [Tags])"); " is 383.
Long Statement,NuGetGallery.Migrations,AddPackageOwnershipRequestsPage,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201709202249402_AddPackageOwnershipRequestsPage.cs,Up,The length of the statement  "            AddForeignKey("dbo.PackageOwnerRequests"' "PackageRegistrationKey"' "dbo.PackageRegistrations"' "Key"' cascadeDelete: true); " is 124.
Long Statement,NuGetGallery.Migrations,AddIndexForPackageDeletes,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201603151731262_AddIndexForPackageDeletes.cs,Up,The length of the statement  "            Sql("IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'nci_wi_Packages_Deleted' AND object_id = OBJECT_ID('Packages')) CREATE NONCLUSTERED INDEX [nci_wi_Packages_Deleted] ON [dbo].[Packages] ([Deleted]' [Listed]) INCLUDE ([Description]' [FlattenedDependencies]' [IsPrerelease]' [PackageRegistrationKey]' [Tags]' [Version])"); " is 329.
Long Statement,NuGetGallery.Migrations,AddAdditionalIndexForPackageDeletes,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201605250728584_AddAdditionalIndexForPackageDeletes.cs,Up,The length of the statement  "            Sql("IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'nci_wi_Packages_IsListedDeleted' AND object_id = OBJECT_ID('Packages')) CREATE NONCLUSTERED INDEX [nci_wi_Packages_IsListedDeleted] ON [dbo].[Packages] ([IsLatest]' [Deleted]) INCLUDE ([PackageRegistrationKey]' [Tags]' [Title])"); " is 289.
Long Statement,NuGetGallery.Migrations,AddAdditionalIndexForPackageDeletes,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201605250728584_AddAdditionalIndexForPackageDeletes.cs,Up,The length of the statement  "            Sql("IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'nci_wi_Packages_IsLatestStableDeleted' AND object_id = OBJECT_ID('Packages')) CREATE NONCLUSTERED INDEX [nci_wi_Packages_IsLatestStableDeleted] ON [dbo].[Packages] ([IsLatestStable]' [Deleted]) INCLUDE ([Description]' [FlattenedAuthors]' [Listed]' [PackageRegistrationKey]' [Published]' [Tags])"); " is 356.
Long Statement,NuGetGallery.Migrations,AddIndexForUserEmailAddress,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201605250755294_AddIndexForUserEmailAddress.cs,Up,The length of the statement  "            Sql("IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'nci_wi_Users_EmailAddress' AND object_id = OBJECT_ID('Users')) CREATE NONCLUSTERED INDEX [nci_wi_Users_EmailAddress] ON [dbo].[Users] ([EmailAddress])"); " is 212.
Long Statement,NuGetGallery.Migrations,AddIndexForCredentialsUserKey,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201606012049351_AddIndexForCredentialsUserKey.cs,Up,The length of the statement  "            Sql("IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'nci_wi_Credentials_UserKey' AND object_id = OBJECT_ID('Credentials')) CREATE NONCLUSTERED INDEX [nci_wi_Credentials_UserKey] ON [dbo].[Credentials] ([UserKey]) INCLUDE ([Identity]' [Key]' [Type]' [Value])"); " is 266.
Long Statement,NuGetGallery.Migrations,AddIndexForPackageLicenseReportsPackageKey,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201606012058492_AddIndexForPackageLicenseReportsPackageKey.cs,Up,The length of the statement  "            Sql("IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'nci_wi_PackageLicenseReports_PackageKey' AND object_id = OBJECT_ID('PackageLicenseReports')) CREATE NONCLUSTERED INDEX [nci_wi_PackageLicenseReports_PackageKey] ON [dbo].[PackageLicenseReports] ([PackageKey]) INCLUDE ([Comment]' [CreatedUtc]' [Key]' [ReportUrl]' [Sequence])"); " is 336.
Long Statement,NuGetGallery.Migrations,CredentialExpires,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201606020741056_CredentialExpires.cs,Up,The length of the statement  "            Sql("UPDATE [dbo].[Credentials] SET [Created] =  GETUTCDATE()' [Expires] = DATEADD(Day' 95 + ABS(CHECKSUM(NewId())) % 20' GETUTCDATE()) WHERE [Type] = 'apikey.v1'"); " is 165.
Long Statement,NuGetGallery.Migrations,AddIndexCredentialExpires,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201609092252096_AddIndexCredentialExpires.cs,Up,The length of the statement  "            Sql("IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'nci_wi_Credentials_Type_Expires' AND object_id = OBJECT_ID('Credentials')) CREATE NONCLUSTERED INDEX [nci_wi_Credentials_Type_Expires] ON [dbo].[Credentials] ([Type]' [Expires]) INCLUDE ([Created]' [UserKey])"); " is 270.
Long Statement,NuGetGallery.Migrations,AddIndexUsersEmail,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201609092255576_AddIndexUsersEmail.cs,Up,The length of the statement  "            Sql("IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'nci_wi_Users_EmailAllowed' AND object_id = OBJECT_ID('Users')) CREATE NONCLUSTERED INDEX [nci_wi_Users_EmailAllowed] ON [dbo].[Users] ([EmailAllowed]' [EmailAddress]) INCLUDE ([Key]' [Username])"); " is 256.
Long Statement,NuGetGallery.Migrations,AddTriggerForPackagesLastEdited,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201611240011320_AddTriggerForPackagesLastEdited.cs,Up,The length of the statement  "            // Therefore' one source must generate all "LastEdited" timestamps because otherwise there will be slight discrepancies in "LastEdited" which can lead to packages being inserted out of order into the feed. " is 205.
Long Statement,NuGetGallery.Migrations,AddTriggerForPackagesLastEdited,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201611240011320_AddTriggerForPackagesLastEdited.cs,Up,The length of the statement  "            // Note that UPDATE(LastEdited) is true when a row is inserted for the first time' so we must add a INSERTED.LastEdited IS NOT NULL check to the UPDATE statement. " is 162.
Long Statement,NuGetGallery.Migrations,ListPackagesIndexes,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201111080239544_ListPackagesIndexes.cs,Up,The length of the statement  "            Sql("CREATE NONCLUSTERED INDEX [IX_PackageAuthors_PackageKey] ON [dbo].[PackageAuthors] ([PackageKey]) INCLUDE ([Key]'[Name])"); " is 128.
Long Statement,NuGetGallery.Migrations,MyPackagesIndexes,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201111081908453_MyPackagesIndexes.cs,Up,The length of the statement  "                "CREATE NONCLUSTERED INDEX [IX_PackageRegistrationOwners_UserKey] ON [dbo].[PackageRegistrationOwners] ([UserKey]) INCLUDE ([PackageRegistrationKey])"); " is 152.
Long Statement,NuGetGallery.Migrations,ExecuteELMAHSql,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201206250141447_ExecuteELMAHSql.cs,Up,The length of the statement  "            Stream stream = typeof(ExecuteELMAHSql).Assembly.GetManifestResourceStream("NuGetGallery.Infrastructure.Elmah.SqlServer.sql"); " is 126.
Long Statement,NuGetGallery.Migrations,PackageIndexes,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201208222227425_PackageIndexes.cs,Up,The length of the statement  "            Sql(@"Create NonClustered Index IX_Package_Search On [dbo].[Packages] ([IsLatestStable]'[IsLatest]'[Listed]'[IsPrerelease])  " is 123.
Long Statement,NuGetGallery.Migrations,PackageIndexes,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201208222227425_PackageIndexes.cs,Up,The length of the statement  "            CreateIndex(table: "Packages"' columns: new[] { "PackageRegistrationKey"' "Version" }' unique: true' name: "IX_Package_Version"); " is 129.
Long Statement,NuGetGallery.Migrations,PackageSortingIndexes,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201208230640333_PackageSortingIndexes.cs,Up,The length of the statement  "            CreateIndex(table: "Packages"' columns: new[] { "IsLatestStable"' "Listed"' "IsPrerelease" }' name: "IX_Package_IsLatestStable"); " is 129.
Long Statement,NuGetGallery.Migrations,CreateAggregateStatisticsSP,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201208302051344_CreateAggregateStatisticsSP.cs,Up,The length of the statement  "            // This migration is now a no-op. The script it used to reference has been updated to use a column that is added by a later migration. " is 134.
Long Statement,NuGetGallery.Migrations,AggregateStatsSp_ReduxLastUpdate,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201209181743161_AggregateStatsSp_ReduxLastUpdate.cs,Up,The length of the statement  "            // This migration is now a no-op. The script it used to reference has been updated to use a column that is added by a later migration. " is 134.
Long Statement,NuGetGallery.Migrations,Contract_UniqueCuratedPackages,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201304091828587_Contract_UniqueCuratedPackages.cs,Up,The length of the statement  "            // ADD uniqueness constraint - as an Index' since it seems reasonable to look up curated package entries by their feed + registration " is 133.
Long Statement,NuGetGallery.Migrations,Contract_UniqueCuratedPackages,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201304091828587_Contract_UniqueCuratedPackages.cs,Up,The length of the statement  "            CreateIndex("CuratedPackages"' new[] { "CuratedFeedKey"' "PackageRegistrationKey" }' unique: true' name: "IX_CuratedFeed_PackageRegistration"); " is 143.
Long Statement,NuGetGallery.Migrations,AdditionalIndexesForPerformance,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201507171324501_AdditionalIndexesForPerformance.cs,Up,The length of the statement  "            Sql("CREATE NONCLUSTERED INDEX [IX_PackageRegistrations_Id_DownloadCount_Key] ON [dbo].[PackageRegistrations] ([Id]) INCLUDE ([DownloadCount]' [Key])"); " is 152.
Long Statement,NuGetGallery.Migrations,AdditionalIndexesForPerformance,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201507171324501_AdditionalIndexesForPerformance.cs,Up,The length of the statement  "            Sql("CREATE NONCLUSTERED INDEX [IX_Packages_IsLatestStable_IsPrerelease] ON [dbo].[Packages] ([IsLatestStable]' [IsPrerelease]) INCLUDE ([Description]' [FlattenedAuthors]' [LastUpdated]' [Listed]' [PackageRegistrationKey]' [Published]' [Tags]' [Title])"); " is 255.
Long Statement,NuGetGallery.Migrations,AdditionalIndexesForPerformance,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201507171324501_AdditionalIndexesForPerformance.cs,Up,The length of the statement  "            Sql("CREATE NONCLUSTERED INDEX [IX_PackageStatistics_Timestamp] ON [dbo].[PackageStatistics] ([Timestamp]) INCLUDE ([Key])"); " is 125.
Long Statement,NuGetGallery.Migrations,IndexPackagesLastUpdatedWithIsListed,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201508031046581_IndexPackagesLastUpdatedWithIsListed.cs,Up,The length of the statement  "            Sql("CREATE NONCLUSTERED INDEX [IX_Packages_LastUpdatedWithIsListed] ON[dbo].[Packages] ([LastUpdated]) INCLUDE([Listed]' [Published])"); " is 137.
Long Statement,NuGetGallery.Security,RequireSecurePushForCoOwnersPolicy,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Security\RequireSecurePushForCoOwnersPolicy.cs,IsSubscribed,The length of the statement  "            return user.SecurityPolicies.Any(p => p.Name.Equals(RequireSecurePushForCoOwnersPolicy.PolicyName' StringComparison.OrdinalIgnoreCase)); " is 136.
Long Statement,NuGetGallery.Security,SecurityPolicyService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Security\SecurityPolicyService.cs,EvaluateInternalAsync,The length of the statement  "                        $"Security policy from subscription '{foundPolicies.First().Subscription}' - '{handler.Name}' failed for user '{user.Username}' with error '{result.ErrorMessage}'."); " is 166.
Long Statement,NuGetGallery.Security,SecurityPolicyService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Security\SecurityPolicyService.cs,IsSubscribed,The length of the statement  "            var subscription = UserSubscriptions.FirstOrDefault(s => s.SubscriptionName.Equals(subscriptionName' StringComparison.OrdinalIgnoreCase)); " is 138.
Long Statement,NuGetGallery.Security,SecurityPolicyService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Security\SecurityPolicyService.cs,SubscribeAsync,The length of the statement  "            var subscription = UserSubscriptions.FirstOrDefault(s => s.SubscriptionName.Equals(subscriptionName' StringComparison.OrdinalIgnoreCase)); " is 138.
Long Statement,NuGetGallery.Security,SecurityPolicyService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Security\SecurityPolicyService.cs,UnsubscribeAsync,The length of the statement  "            var subscription = UserSubscriptions.FirstOrDefault(s => s.SubscriptionName.Equals(subscriptionName' StringComparison.OrdinalIgnoreCase)); " is 138.
Long Statement,NuGetGallery.Security,SecurityPolicyService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Security\SecurityPolicyService.cs,FindPolicies,The length of the statement  "            return user.SecurityPolicies.Where(s => s.Subscription.Equals(subscription.SubscriptionName' StringComparison.OrdinalIgnoreCase)); " is 130.
Long Statement,NuGetGallery.OData.Conventions,EntitySetPropertyRoutingConvention,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\Conventions\EntitySetPropertyRoutingConvention.cs,SelectAction,The length of the statement  "            if (actionMap.Contains(actionName) && actionMap[actionName].Any(desc => MatchHttpMethod(desc' controllerContext.Request.Method))) " is 129.
Long Statement,NuGetGallery.OData.Conventions,ActionCountRoutingConvention,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\Conventions\ActionCountRoutingConvention.cs,SelectAction,The length of the statement  "            if (actionMap.Contains(actionName) && actionMap[actionName].Any(desc => MatchHttpMethod(desc' controllerContext.Request.Method))) " is 129.
Long Statement,NuGetGallery.OData.Conventions,MethodNameActionRoutingConvention,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\Conventions\MethodNameActionRoutingConvention.cs,SelectAction,The length of the statement  "            if (actionMap.Contains(action.Name) && actionMap[action.Name].Any(desc => MatchHttpMethod(desc' controllerContext.Request.Method))) " is 131.
Long Statement,NuGetGallery.OData,SearchAdaptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptor.cs,FormatResults,The length of the statement  "            // For count queries' we can ask the SearchService to not filter the source results. This would avoid hitting the database and consequently make it very fast. " is 158.
Long Statement,NuGetGallery.OData,SearchAdaptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptor.cs,FormatResults,The length of the statement  "                // At this point' we already know what the total count is. We can have it return this value very quickly without doing any SQL. " is 127.
Long Statement,NuGetGallery.OData,SearchAdaptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptor.cs,FormatResults,The length of the statement  "            // For relevance search' Lucene returns us a paged/sorted list. OData tries to apply default ordering and Take / Skip on top of this. " is 133.
Long Statement,NuGetGallery.OData,SearchAdaptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptor.cs,FindByIdAndVersionCore,The length of the statement  "            if (TryReadSearchFilter(searchService.ContainsAllVersions' request.RawUrl' searchService.ContainsAllVersions' out searchFilter) && !string.IsNullOrWhiteSpace(id)) " is 162.
Long Statement,NuGetGallery.OData,SearchAdaptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptor.cs,FindByIdAndVersionCore,The length of the statement  "                    searchTerm = string.Format(CultureInfo.CurrentCulture' "Id:\"{0}\" AND Version:\"{1}\""' normalizedRegistrationId' version); " is 124.
Long Statement,NuGetGallery.OData,SearchAdaptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptor.cs,TryReadSearchFilter,The length of the statement  "                // The way the default paging works is WCF attempts to read up to the MaxPageSize elements. If it finds as many' it'll assume there  " is 131.
Long Statement,NuGetGallery.OData,SearchAdaptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptor.cs,TryReadSearchFilter,The length of the statement  "                // are more elements to be paged and generate a continuation link. Consequently we'll always ask to pull MaxPageSize elements so WCF generates the  " is 146.
Long Statement,NuGetGallery.OData,SearchAdaptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptor.cs,TryReadSearchFilter,The length of the statement  "                // link for us and then allow it to do a Take on the results. Further down' we'll also parse $skiptoken as a custom IDataServicePagingProvider " is 142.
Long Statement,NuGetGallery.OData,SearchAdaptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptor.cs,TryReadSearchFilter,The length of the statement  "            // We'll only use the index if we the query searches for latest / latest-stable packages *or* the index contains all versions " is 125.
Long Statement,NuGetGallery.OData,SearchAdaptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptor.cs,GetNextLink,The length of the statement  "            var skipCount = (options.Skip != null ? options.Skip.Value : 0) + Math.Min(totalResultCount.Value' (settings.PageSize != null ? settings.PageSize.Value : SearchAdaptor.MaxPageSize)); " is 182.
Long Statement,NuGetGallery.OData.QueryInterceptors,ODataRemoveSorter,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\QueryInterceptors\ODataRemoveSorter.cs,VisitMethodCall,The length of the statement  "                // The expression is of the format Queryable.ThenBy(OrderBy(<Expression>' <Order-by-params>)' <Then-by-params>). To avoid performing the  " is 136.
Long Statement,NuGetGallery.OData.QueryInterceptors,MemberVisitor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\QueryInterceptors\ODataRemoveSorter.cs,VisitMember,The length of the statement  "                // Example using Version column: The expression can either be p => p.Version or p => p.ExpandedWrapper.Version where the  " is 120.
Long Statement,NuGetGallery.OData.QueryFilter,ODataQueryVerifier,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\QueryAllowed\ODataQueryVerifier.cs,GetValidationFailedMessage,The length of the statement  "            return $"A query with \"{ODataQueryFilter.ODataOptionsMap(options)}\" set of operators is not supported. Please refer to : https://github.com/NuGet/Home/wiki/Filter-OData-query-requests for additional information."; " is 215.
Long Statement,NuGetGallery.WebApi,QueryResult<TModel>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\WebApi\QueryResult.cs,GetInnerResult,The length of the statement  "                            || string.Equals(queryOptions.Filter.RawValue' ODataQueryFilter.IsAbsoluteLatestVersion' StringComparison.OrdinalIgnoreCase))) " is 126.
Long Statement,NuGetGallery.WebApi,QueryResult<TModel>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\WebApi\QueryResult.cs,GetInnerResult,The length of the statement  "                        // but also include IsLatest(Stable)SemVer2=true. These additional properties are not exposed on the OData entities however. " is 124.
Long Statement,NuGetGallery.WebApi,QueryResult<TModel>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\WebApi\QueryResult.cs,GetInnerResult,The length of the statement  "                                new PageResult<TModel>(modelQueryResults' _generateNextLink(_queryOptions' _querySettings' _totalResults)' _totalResults)); " is 123.
Long Statement,NuGetGallery.WebApi,QueryResult<TModel>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\WebApi\QueryResult.cs,GetInnerResult,The length of the statement  "                                new PageResult<IEdmEntityObject>(projectedQueryResults' _generateNextLink(_queryOptions' _querySettings' _totalResults)' _totalResults)); " is 137.
Long Statement,NuGetGallery.WebApi,QueryResult<TModel>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\WebApi\QueryResult.cs,GetInnerResult,The length of the statement  "            return BadRequest("Could not execute OData query. Executing the query returned neither a strong-typed model result nor a projection result."); " is 142.
Complex Conditional,NuGetGallery,SafeRedirectResult,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\SafeRedirectResult.cs,ExecuteResult,The conditional expression  "string.IsNullOrWhiteSpace(Url) ||                  !context.RequestContext.HttpContext.Request.IsUrlLocalToHost(Url) ||                  Url.Length <= 1 ||                  IsValidLocalUrl(Url)"  is complex.
Complex Conditional,NuGetGallery,PackageFileService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageFileService.cs,StorePackageFileInBackupLocationAsync,The conditional expression  "package.PackageRegistration == null ||                  string.IsNullOrWhiteSpace(package.PackageRegistration.Id) ||                  (string.IsNullOrWhiteSpace(package.NormalizedVersion) && string.IsNullOrWhiteSpace(package.Version))"  is complex.
Complex Conditional,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,DisplayPackage,The conditional expression  "package == null                  || ((package.PackageStatusKey == PackageStatus.Validating                       || package.PackageStatusKey == PackageStatus.FailedValidation)                      && !PermissionsService.IsActionAllowed(package' User' PackageActions.DisplayPrivatePackage))"  is complex.
Complex Conditional,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,ListPackages,The conditional expression  "q.ToLowerInvariant().Contains("char(")                  || q.ToLowerInvariant().Contains("union select")                  || q.ToLowerInvariant().Contains("/*")                  || q.ToLowerInvariant().Contains("--")"  is complex.
Complex Conditional,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,ValidateReportMyPackageViewModel,The conditional expression  "allowDelete                  && reportForm.Reason.HasValue                  && DeleteReasons.Contains(reportForm.Reason.Value)                  && !reportForm.DeleteDecision.HasValue"  is complex.
Complex Conditional,NuGetGallery.Areas.Admin.Controllers,DeleteAccountController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\DeleteAccountController.cs,Search,The conditional expression  "user !=  null && user.Username != null && !user.IsDeleted && !(user is Organization)"  is complex.
Complex Conditional,NuGetGallery.Filters,ApiAuthorizeAttribute,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Filters\ApiAuthorizeAttribute.cs,OnAuthorization,The conditional expression  "identity != null && identity.IsAuthenticated && identity.AuthenticationType == AuthenticationTypes.ApiKey && controller != null"  is complex.
Virtual Method Call from Constructor,NuGetGallery.Authentication.Providers,Authenticator,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\Providers\Authenticator.cs,Authenticator,The constructor "Authenticator" calls a virtual method "CreateConfigObject".
Empty Catch Block,NuGetGallery,OwinStartup,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\OwinStartup.cs,Configuration,The method has an empty catch block.
Empty Catch Block,NuGetGallery,OwinStartup,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\OwinStartup.cs,Configuration,The method has an empty catch block.
Empty Catch Block,NuGetGallery,TelemetryClientWrapper,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\TelemetryClientWrapper.cs,TrackEvent,The method has an empty catch block.
Empty Catch Block,NuGetGallery,TelemetryClientWrapper,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\TelemetryClientWrapper.cs,TrackException,The method has an empty catch block.
Empty Catch Block,NuGetGallery,HttpRequestExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Extensions\HttpRequestExtensions.cs,DetermineClientCulture,The method has an empty catch block.
Empty Catch Block,NuGetGallery,HttpRequestExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Extensions\HttpRequestExtensions.cs,DetermineClientCulture,The method has an empty catch block.
Empty Catch Block,NuGetGallery,StatisticsController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\StatisticsController.cs,GetPackageDownloadsByVersionReport,The method has an empty catch block.
Empty Catch Block,NuGetGallery,StatisticsController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\StatisticsController.cs,GetPackageDownloadsDetailReport,The method has an empty catch block.
Empty Catch Block,NuGetGallery,QuietLog,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Telemetry\QuietLog.cs,LogHandledExceptionCore,The method has an empty catch block.
Empty Catch Block,NuGetGallery,PackageDeleteService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageDeleteService.cs,TryDeleteReadMeMdFile,The method has an empty catch block.
Empty Catch Block,NuGetGallery,AppActivator,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\AppActivator.cs,PreStart,The method has an empty catch block.
Empty Catch Block,NuGetGallery,AppActivator,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\AppActivator.cs,CreateLogFlushJob,The method has an empty catch block.
Magic Number,NuGetGallery,NuGetODataV2CuratedFeedConfig,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\NuGetODataV2CuratedFeedConfig.cs,GetEdmModel,The following statement contains a magic number: builder.DataServiceVersion = new Version(2' 0);
Magic Number,NuGetGallery,NuGetODataV2CuratedFeedConfig,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\NuGetODataV2CuratedFeedConfig.cs,GetEdmModel,The following statement contains a magic number: builder.MaxDataServiceVersion = new Version(2' 0);
Magic Number,NuGetGallery,NuGetODataV2FeedConfig,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\NuGetODataV2FeedConfig.cs,GetEdmModel,The following statement contains a magic number: builder.DataServiceVersion = new Version(2' 0);
Magic Number,NuGetGallery,NuGetODataV2FeedConfig,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\NuGetODataV2FeedConfig.cs,GetEdmModel,The following statement contains a magic number: builder.MaxDataServiceVersion = new Version(2' 0);
Magic Number,NuGetGallery,NuGetODataV1FeedConfig,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\NuGetODataV1FeedConfig.cs,GetEdmModel,The following statement contains a magic number: builder.DataServiceVersion = new Version(2' 0);
Magic Number,NuGetGallery,NuGetODataV1FeedConfig,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\NuGetODataV1FeedConfig.cs,GetEdmModel,The following statement contains a magic number: builder.MaxDataServiceVersion = new Version(2' 0);
Magic Number,NuGetGallery,Url_EditField,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\DynamicData\FieldTemplates\Url_Edit.ascx.cs,Page_Load,The following statement contains a magic number: if (Column.MaxLength < 20)              {                  TextBox1.Columns = Column.MaxLength;              }
Magic Number,NuGetGallery,OwinStartup,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\OwinStartup.cs,Configuration,The following statement contains a magic number: ServicePointManager.DefaultConnectionLimit = 500;
Magic Number,NuGetGallery,OwinStartup,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\OwinStartup.cs,Configuration,The following statement contains a magic number: if (!string.IsNullOrEmpty(instrumentationKey))              {                  TelemetryConfiguration.Active.InstrumentationKey = instrumentationKey;                    // Add enrichers                  TelemetryConfiguration.Active.TelemetryInitializers.Add(new ClientInformationTelemetryEnricher());                    var telemetryProcessorChainBuilder = TelemetryConfiguration.Active.TelemetryProcessorChainBuilder;                    // Add processors                  telemetryProcessorChainBuilder.Use(next =>                  {                      var processor = new RequestTelemetryProcessor(next);                        processor.SuccessfulResponseCodes.Add(400);                      processor.SuccessfulResponseCodes.Add(404);                        return processor;                  });                                    var telemetry = dependencyResolver.GetService<TelemetryClientWrapper>();                  telemetryProcessorChainBuilder.Use(                      next => new ExceptionTelemetryProcessor(next' telemetry.UnderlyingClient));                    // Note: sampling rate must be a factor 100/N where N is a whole number                  // e.g.: 50 (= 100/2)' 33.33 (= 100/3)' 25 (= 100/4)' ...                  // https://azure.microsoft.com/en-us/documentation/articles/app-insights-sampling/                  var instrumentationSamplingPercentage = config.Current.AppInsightsSamplingPercentage;                  if (instrumentationSamplingPercentage > 0 && instrumentationSamplingPercentage < 100)                  {                      telemetryProcessorChainBuilder.UseSampling(instrumentationSamplingPercentage);                  }                    telemetryProcessorChainBuilder.Build();              }
Magic Number,NuGetGallery,OwinStartup,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\OwinStartup.cs,Configuration,The following statement contains a magic number: if (!string.IsNullOrEmpty(instrumentationKey))              {                  TelemetryConfiguration.Active.InstrumentationKey = instrumentationKey;                    // Add enrichers                  TelemetryConfiguration.Active.TelemetryInitializers.Add(new ClientInformationTelemetryEnricher());                    var telemetryProcessorChainBuilder = TelemetryConfiguration.Active.TelemetryProcessorChainBuilder;                    // Add processors                  telemetryProcessorChainBuilder.Use(next =>                  {                      var processor = new RequestTelemetryProcessor(next);                        processor.SuccessfulResponseCodes.Add(400);                      processor.SuccessfulResponseCodes.Add(404);                        return processor;                  });                                    var telemetry = dependencyResolver.GetService<TelemetryClientWrapper>();                  telemetryProcessorChainBuilder.Use(                      next => new ExceptionTelemetryProcessor(next' telemetry.UnderlyingClient));                    // Note: sampling rate must be a factor 100/N where N is a whole number                  // e.g.: 50 (= 100/2)' 33.33 (= 100/3)' 25 (= 100/4)' ...                  // https://azure.microsoft.com/en-us/documentation/articles/app-insights-sampling/                  var instrumentationSamplingPercentage = config.Current.AppInsightsSamplingPercentage;                  if (instrumentationSamplingPercentage > 0 && instrumentationSamplingPercentage < 100)                  {                      telemetryProcessorChainBuilder.UseSampling(instrumentationSamplingPercentage);                  }                    telemetryProcessorChainBuilder.Build();              }
Magic Number,NuGetGallery,OwinStartup,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\OwinStartup.cs,Configuration,The following statement contains a magic number: if (!string.IsNullOrEmpty(instrumentationKey))              {                  TelemetryConfiguration.Active.InstrumentationKey = instrumentationKey;                    // Add enrichers                  TelemetryConfiguration.Active.TelemetryInitializers.Add(new ClientInformationTelemetryEnricher());                    var telemetryProcessorChainBuilder = TelemetryConfiguration.Active.TelemetryProcessorChainBuilder;                    // Add processors                  telemetryProcessorChainBuilder.Use(next =>                  {                      var processor = new RequestTelemetryProcessor(next);                        processor.SuccessfulResponseCodes.Add(400);                      processor.SuccessfulResponseCodes.Add(404);                        return processor;                  });                                    var telemetry = dependencyResolver.GetService<TelemetryClientWrapper>();                  telemetryProcessorChainBuilder.Use(                      next => new ExceptionTelemetryProcessor(next' telemetry.UnderlyingClient));                    // Note: sampling rate must be a factor 100/N where N is a whole number                  // e.g.: 50 (= 100/2)' 33.33 (= 100/3)' 25 (= 100/4)' ...                  // https://azure.microsoft.com/en-us/documentation/articles/app-insights-sampling/                  var instrumentationSamplingPercentage = config.Current.AppInsightsSamplingPercentage;                  if (instrumentationSamplingPercentage > 0 && instrumentationSamplingPercentage < 100)                  {                      telemetryProcessorChainBuilder.UseSampling(instrumentationSamplingPercentage);                  }                    telemetryProcessorChainBuilder.Build();              }
Magic Number,NuGetGallery,OwinStartup,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\OwinStartup.cs,Configuration,The following statement contains a magic number: app.UseCookieAuthentication(new CookieAuthenticationOptions              {                  AuthenticationType = AuthenticationTypes.External'                  AuthenticationMode = AuthenticationMode.Passive'                  CookieName = ".AspNet." + AuthenticationTypes.External'                  ExpireTimeSpan = TimeSpan.FromMinutes(5)              });
Magic Number,NuGetGallery,AppController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\AppController.cs,Json,The following statement contains a magic number: if (statusCode >= 400)              {                  Response.TrySkipIisCustomErrors = true;              }
Magic Number,NuGetGallery,ReadMeService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReadMeService.cs,GetReadMeHtml,The following statement contains a magic number: foreach (var node in document.AsEnumerable())              {                  if (node.IsOpening)                  {                      var block = node.Block;                      if (block != null)                      {                          switch (block.Tag)                          {                              // Demote heading tags so they don't overpower expander headings.                              case BlockTag.AtxHeading:                              case BlockTag.SetextHeading:                                  var level = (byte)Math.Min(block.Heading.Level + 1' 6);                                  block.Heading = new HeadingData(level);                                  break;                                // Decode preformatted blocks to prevent double encoding.                              // Skip BlockTag.BlockQuote' which are partially decoded upfront.                              case BlockTag.FencedCode:                              case BlockTag.IndentedCode:                                  if (block.StringContent != null)                                  {                                      var content = block.StringContent.TakeFromStart(block.StringContent.Length);                                      var unencodedContent = HttpUtility.HtmlDecode(content);                                      block.StringContent.Replace(unencodedContent' 0' unencodedContent.Length);                                  }                                  break;                          }                      }                        var inline = node.Inline;                      if (inline != null && inline.Tag == InlineTag.Link)                      {                          // Allow only http or https links in markdown.                          Uri targetUri;                          if (! (Uri.TryCreate(inline.TargetUrl' UriKind.Absolute' out targetUri)                              && (targetUri.Scheme == Uri.UriSchemeHttp || targetUri.Scheme == Uri.UriSchemeHttps) ))                          {                              inline.TargetUrl = string.Empty;                          }                      }                  }              }
Magic Number,NuGetGallery,HttpRequestExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Extensions\HttpRequestExtensions.cs,DetermineClientCulture,The following statement contains a magic number: foreach (string language in languages)              {                  string lang = language.ToLowerInvariant().Trim();                  if (lang.Length > 2)                  {                      string lang2 = lang.Substring(0' 2);                      try                      {                          return CultureInfo.GetCultureInfo(lang2);                      }                      catch (CultureNotFoundException)                      {                      }                  }              }
Magic Number,NuGetGallery,HttpRequestExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Extensions\HttpRequestExtensions.cs,DetermineClientCulture,The following statement contains a magic number: foreach (string language in languages)              {                  string lang = language.ToLowerInvariant().Trim();                  if (lang.Length > 2)                  {                      string lang2 = lang.Substring(0' 2);                      try                      {                          return CultureInfo.GetCultureInfo(lang2);                      }                      catch (CultureNotFoundException)                      {                      }                  }              }
Magic Number,NuGetGallery,Text_EditField,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\DynamicData\FieldTemplates\Text_Edit.ascx.cs,Page_Load,The following statement contains a magic number: if (Column.MaxLength < 20) {                  TextBox1.Columns = Column.MaxLength;              }
Magic Number,NuGetGallery,CuratedFeedsController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\CuratedFeedsController.cs,CuratedFeed,The following statement contains a magic number: if (curatedFeed.Managers.All(manager => manager.Username != User.Identity.Name))              {                  return new HttpStatusCodeResult(403);              }
Magic Number,NuGetGallery,CuratedPackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\CuratedPackagesController.cs,GetCreateCuratedPackageForm,The following statement contains a magic number: if (curatedFeed.Managers.All(manager => manager.Username != User.Identity.Name))              {                  return new HttpStatusCodeResult(403);              }
Magic Number,NuGetGallery,CuratedPackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\CuratedPackagesController.cs,DeleteCuratedPackage,The following statement contains a magic number: if (curatedFeed.Managers.All(manager => manager.Username != User.Identity.Name))              {                  return new HttpStatusCodeResult(403);              }
Magic Number,NuGetGallery,CuratedPackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\CuratedPackagesController.cs,DeleteCuratedPackage,The following statement contains a magic number: return new HttpStatusCodeResult(204);
Magic Number,NuGetGallery,CuratedPackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\CuratedPackagesController.cs,PatchCuratedPackage,The following statement contains a magic number: if (curatedFeed.Managers.All(manager => manager.Username != User.Identity.Name))              {                  return new HttpStatusCodeResult(403);              }
Magic Number,NuGetGallery,CuratedPackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\CuratedPackagesController.cs,PatchCuratedPackage,The following statement contains a magic number: if (!ModelState.IsValid)              {                  return new HttpStatusCodeResult(400);              }
Magic Number,NuGetGallery,CuratedPackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\CuratedPackagesController.cs,PatchCuratedPackage,The following statement contains a magic number: return new HttpStatusCodeResult(204);
Magic Number,NuGetGallery,CuratedPackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\CuratedPackagesController.cs,PostCuratedPackages,The following statement contains a magic number: if (curatedFeed.Managers.All(manager => manager.Username != User.Identity.Name))              {                  return new HttpStatusCodeResult(403);              }
Magic Number,NuGetGallery,StatisticsController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\StatisticsController.cs,PackageDownloadsByVersionReport,The following statement contains a magic number: if (_statisticsService == NullStatisticsService.Instance)              {                  return Json(404' new[] {new object() }' JsonRequestBehavior.AllowGet);              }
Magic Number,NuGetGallery,StatisticsController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\StatisticsController.cs,PackageDownloadsByVersionReport,The following statement contains a magic number: if (packageStatisticsReport == null)              {                  return Json(404' new[] { Strings.PackageWithIdDoesNotExist }' JsonRequestBehavior.AllowGet);              }
Magic Number,NuGetGallery,StatisticsController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\StatisticsController.cs,PackageDownloadsByVersionReport,The following statement contains a magic number: return Json(200' packageStatisticsReport' JsonRequestBehavior.AllowGet);
Magic Number,NuGetGallery,StatisticsController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\StatisticsController.cs,ProcessReport,The following statement contains a magic number: var pivot = new string[4];
Magic Number,NuGetGallery,StatisticsController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\StatisticsController.cs,UseD3,The following statement contains a magic number: if (Request != null && Request.Browser != null && Request.Browser.Browser == "IE")              {                  float version;                  if (float.TryParse(Request.Browser.Version' out version))                  {                      f = version > 8.0;                  }              }
Magic Number,NuGetGallery,ApplicationVersion,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\ApplicationVersionHelper.cs,ApplicationVersion,The following statement contains a magic number: ShortCommit = String.IsNullOrEmpty(Commit) ? String.Empty : Commit.Substring(0' Math.Min(10' Commit.Length));
Magic Number,NuGetGallery,PackageIndexEntity,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\PackageIndexEntity.cs,CamelCaseTokenize,The following statement contains a magic number: const int minTokenLength = 3;
Magic Number,NuGetGallery,LuceneIndexingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\LuceneIndexingService.cs,RegisterBackgroundJobs,The following statement contains a magic number: if (_getShouldAutoUpdate())              {                  jobs.Add(                      new LuceneIndexingJob(                          frequence: TimeSpan.FromMinutes(10)'                          timeout: TimeSpan.FromMinutes(2)'                          indexingService: this));              }
Magic Number,NuGetGallery,LuceneIndexingService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\LuceneIndexingService.cs,RegisterBackgroundJobs,The following statement contains a magic number: if (_getShouldAutoUpdate())              {                  jobs.Add(                      new LuceneIndexingJob(                          frequence: TimeSpan.FromMinutes(10)'                          timeout: TimeSpan.FromMinutes(2)'                          indexingService: this));              }
Magic Number,NuGetGallery,WebMatrixPackageCurator,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\PackageCurators\WebMatrixPackageCurator.cs,ShouldCuratePackage,The following statement contains a magic number: return                  // Must have min client version of null or <= 2.2                  (nuspec.GetMinClientVersion() == null || nuspec.GetMinClientVersion() <= new NuGetVersion(2' 2' 0)) &&                    // Must be latest stable                  galleryPackage.IsLatestStable &&                    // Must support net40                  SupportsNet40(galleryPackage) &&                    (                      // Must have AspNetWebPages tag                      ContainsAspNetWebPagesTag(galleryPackage) ||                        // OR: Must not contain PowerShell or T4                      DoesNotContainUnsupportedFiles(packageArchiveReader)                  ) &&                    // Dependencies on the gallery must be curated                  DependenciesAreCurated(galleryPackage' curatedFeed);
Magic Number,NuGetGallery,WebMatrixPackageCurator,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\PackageCurators\WebMatrixPackageCurator.cs,ShouldCuratePackage,The following statement contains a magic number: return                  // Must have min client version of null or <= 2.2                  (nuspec.GetMinClientVersion() == null || nuspec.GetMinClientVersion() <= new NuGetVersion(2' 2' 0)) &&                    // Must be latest stable                  galleryPackage.IsLatestStable &&                    // Must support net40                  SupportsNet40(galleryPackage) &&                    (                      // Must have AspNetWebPages tag                      ContainsAspNetWebPagesTag(galleryPackage) ||                        // OR: Must not contain PowerShell or T4                      DoesNotContainUnsupportedFiles(packageArchiveReader)                  ) &&                    // Dependencies on the gallery must be curated                  DependenciesAreCurated(galleryPackage' curatedFeed);
Magic Number,NuGetGallery,WebMatrixPackageCurator,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\PackageCurators\WebMatrixPackageCurator.cs,SupportsNet40,The following statement contains a magic number: var net40Fx = new NuGetFramework(".NETFramework"' new Version(4' 0));
Magic Number,NuGetGallery,CloudDownloadCountService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\CloudDownloadCountService.cs,RefreshCore,The following statement contains a magic number: try              {                  var blob = GetBlobReference();                  if (blob == null)                  {                      return;                  }                    // The data in downloads.v1.json will be an array of Package records - which has Id' Array of Versions and download count.                  // Sample.json : [["AutofacContrib.NSubstitute"'["2.4.3.700"'406]'["2.5.0"'137]]'["Assman.Core"'["2.0.7"'138]]....                  using (var jsonReader = new JsonTextReader(new StreamReader(blob.OpenRead())))                  {                      try                      {                          jsonReader.Read();                            while (jsonReader.Read())                          {                              try                              {                                  if (jsonReader.TokenType == JsonToken.StartArray)                                  {                                      JToken record = JToken.ReadFrom(jsonReader);                                      string id = record[0].ToString().ToLowerInvariant();                                        // The second entry in each record should be an array of versions' if not move on to next entry.                                      // This is a check to safe guard against invalid entries.                                      if (record.Count() == 2 && record[1].Type != JTokenType.Array)                                      {                                          continue;                                      }                                        if (!_downloadCounts.ContainsKey(id))                                      {                                          _downloadCounts.Add(id' new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase));                                      }                                      var versions = _downloadCounts[id];                                        foreach (JToken token in record)                                      {                                          if (token != null && token.Count() == 2)                                          {                                              string version = token[0].ToString().ToLowerInvariant();                                              versions[version] = token[1].ToObject<int>();                                          }                                      }                                  }                              }                              catch (JsonReaderException ex)                              {                                  _telemetryClient.TrackException(ex' new Dictionary<string' string>                                  {                                      { "Origin"' TelemetryOriginForRefreshMethod }'                                      { "AdditionalInfo"' "Invalid entry found in downloads.v1.json." }                                  });                              }                          }                      }                      catch (JsonReaderException ex)                      {                          _telemetryClient.TrackException(ex' new Dictionary<string' string>                          {                              { "Origin"' TelemetryOriginForRefreshMethod }'                              { "AdditionalInfo"' "Data present in downloads.v1.json is invalid. Couldn't get download data." }                          });                      }                  }              }              catch (Exception ex)              {                  _telemetryClient.TrackException(ex' new Dictionary<string' string>                  {                      { "Origin"' TelemetryOriginForRefreshMethod }'                      { "AdditionalInfo"' "Unknown exception." }                  });              }
Magic Number,NuGetGallery,CloudDownloadCountService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\CloudDownloadCountService.cs,RefreshCore,The following statement contains a magic number: try              {                  var blob = GetBlobReference();                  if (blob == null)                  {                      return;                  }                    // The data in downloads.v1.json will be an array of Package records - which has Id' Array of Versions and download count.                  // Sample.json : [["AutofacContrib.NSubstitute"'["2.4.3.700"'406]'["2.5.0"'137]]'["Assman.Core"'["2.0.7"'138]]....                  using (var jsonReader = new JsonTextReader(new StreamReader(blob.OpenRead())))                  {                      try                      {                          jsonReader.Read();                            while (jsonReader.Read())                          {                              try                              {                                  if (jsonReader.TokenType == JsonToken.StartArray)                                  {                                      JToken record = JToken.ReadFrom(jsonReader);                                      string id = record[0].ToString().ToLowerInvariant();                                        // The second entry in each record should be an array of versions' if not move on to next entry.                                      // This is a check to safe guard against invalid entries.                                      if (record.Count() == 2 && record[1].Type != JTokenType.Array)                                      {                                          continue;                                      }                                        if (!_downloadCounts.ContainsKey(id))                                      {                                          _downloadCounts.Add(id' new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase));                                      }                                      var versions = _downloadCounts[id];                                        foreach (JToken token in record)                                      {                                          if (token != null && token.Count() == 2)                                          {                                              string version = token[0].ToString().ToLowerInvariant();                                              versions[version] = token[1].ToObject<int>();                                          }                                      }                                  }                              }                              catch (JsonReaderException ex)                              {                                  _telemetryClient.TrackException(ex' new Dictionary<string' string>                                  {                                      { "Origin"' TelemetryOriginForRefreshMethod }'                                      { "AdditionalInfo"' "Invalid entry found in downloads.v1.json." }                                  });                              }                          }                      }                      catch (JsonReaderException ex)                      {                          _telemetryClient.TrackException(ex' new Dictionary<string' string>                          {                              { "Origin"' TelemetryOriginForRefreshMethod }'                              { "AdditionalInfo"' "Data present in downloads.v1.json is invalid. Couldn't get download data." }                          });                      }                  }              }              catch (Exception ex)              {                  _telemetryClient.TrackException(ex' new Dictionary<string' string>                  {                      { "Origin"' TelemetryOriginForRefreshMethod }'                      { "AdditionalInfo"' "Unknown exception." }                  });              }
Magic Number,NuGetGallery,JsonStatisticsService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\JsonStatisticsService.cs,Refresh,The following statement contains a magic number: try              {                  if (!ShouldRefresh())                  {                      return;                  }                    var availablity = await Task.WhenAll(                      LoadDownloadPackages()'                      LoadDownloadPackageVersions()'                      LoadDownloadCommunityPackages()'                      LoadDownloadCommunityPackageVersions()'                      LoadNuGetClientVersion()'                      LoadLast6Weeks());                    PackageDownloadsResult = availablity[0];                  PackageVersionDownloadsResult = availablity[1];                  CommunityPackageDownloadsResult = availablity[2];                  CommunityPackageVersionDownloadsResult = availablity[3];                  NuGetClientVersionResult = availablity[4];                  Last6WeeksResult = availablity[5];                    LastUpdatedUtc = availablity                      .Where(r => r.LastUpdatedUtc.HasValue)                      .OrderByDescending(r => r.LastUpdatedUtc.Value)                      .Select(r => r.LastUpdatedUtc)                      .FirstOrDefault();                    _lastRefresh = DateTime.UtcNow;              }              finally              {                  _reportSemaphore.Release();              }
Magic Number,NuGetGallery,JsonStatisticsService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\JsonStatisticsService.cs,Refresh,The following statement contains a magic number: try              {                  if (!ShouldRefresh())                  {                      return;                  }                    var availablity = await Task.WhenAll(                      LoadDownloadPackages()'                      LoadDownloadPackageVersions()'                      LoadDownloadCommunityPackages()'                      LoadDownloadCommunityPackageVersions()'                      LoadNuGetClientVersion()'                      LoadLast6Weeks());                    PackageDownloadsResult = availablity[0];                  PackageVersionDownloadsResult = availablity[1];                  CommunityPackageDownloadsResult = availablity[2];                  CommunityPackageVersionDownloadsResult = availablity[3];                  NuGetClientVersionResult = availablity[4];                  Last6WeeksResult = availablity[5];                    LastUpdatedUtc = availablity                      .Where(r => r.LastUpdatedUtc.HasValue)                      .OrderByDescending(r => r.LastUpdatedUtc.Value)                      .Select(r => r.LastUpdatedUtc)                      .FirstOrDefault();                    _lastRefresh = DateTime.UtcNow;              }              finally              {                  _reportSemaphore.Release();              }
Magic Number,NuGetGallery,JsonStatisticsService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\JsonStatisticsService.cs,Refresh,The following statement contains a magic number: try              {                  if (!ShouldRefresh())                  {                      return;                  }                    var availablity = await Task.WhenAll(                      LoadDownloadPackages()'                      LoadDownloadPackageVersions()'                      LoadDownloadCommunityPackages()'                      LoadDownloadCommunityPackageVersions()'                      LoadNuGetClientVersion()'                      LoadLast6Weeks());                    PackageDownloadsResult = availablity[0];                  PackageVersionDownloadsResult = availablity[1];                  CommunityPackageDownloadsResult = availablity[2];                  CommunityPackageVersionDownloadsResult = availablity[3];                  NuGetClientVersionResult = availablity[4];                  Last6WeeksResult = availablity[5];                    LastUpdatedUtc = availablity                      .Where(r => r.LastUpdatedUtc.HasValue)                      .OrderByDescending(r => r.LastUpdatedUtc.Value)                      .Select(r => r.LastUpdatedUtc)                      .FirstOrDefault();                    _lastRefresh = DateTime.UtcNow;              }              finally              {                  _reportSemaphore.Release();              }
Magic Number,NuGetGallery,JsonStatisticsService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\JsonStatisticsService.cs,Refresh,The following statement contains a magic number: try              {                  if (!ShouldRefresh())                  {                      return;                  }                    var availablity = await Task.WhenAll(                      LoadDownloadPackages()'                      LoadDownloadPackageVersions()'                      LoadDownloadCommunityPackages()'                      LoadDownloadCommunityPackageVersions()'                      LoadNuGetClientVersion()'                      LoadLast6Weeks());                    PackageDownloadsResult = availablity[0];                  PackageVersionDownloadsResult = availablity[1];                  CommunityPackageDownloadsResult = availablity[2];                  CommunityPackageVersionDownloadsResult = availablity[3];                  NuGetClientVersionResult = availablity[4];                  Last6WeeksResult = availablity[5];                    LastUpdatedUtc = availablity                      .Where(r => r.LastUpdatedUtc.HasValue)                      .OrderByDescending(r => r.LastUpdatedUtc.Value)                      .Select(r => r.LastUpdatedUtc)                      .FirstOrDefault();                    _lastRefresh = DateTime.UtcNow;              }              finally              {                  _reportSemaphore.Release();              }
Magic Number,NuGetGallery,JsonStatisticsService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\JsonStatisticsService.cs,LoadDownloadPackages,The following statement contains a magic number: try              {                  var reportName = (statisticsReportName + ".json").ToLowerInvariant();                  var reportContent = await _reportService.Load(reportName);                  if (reportContent == null)                  {                      return StatisticsReportResult.Failed;                  }                    var results = JArray.Parse(reportContent.Content).Select(item =>                      new StatisticsPackagesItemViewModel                      {                          PackageId = item["PackageId"].ToString()'                          Downloads = item["Downloads"].Value<int>()                      }                  );                    packagesAll.Clear();                  packagesAll.AddRange(results);                    packagesSummary.Clear();                  packagesSummary.AddRange(packagesAll.Take(10));                    return StatisticsReportResult.Success(reportContent.LastUpdatedUtc);              }              catch (Exception e)              {                  QuietLog.LogHandledException(e);                  return StatisticsReportResult.Failed;              }
Magic Number,NuGetGallery,JsonStatisticsService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\JsonStatisticsService.cs,LoadDownloadPackageVersions,The following statement contains a magic number: try              {                  var reportName = (statisticsReportName + ".json").ToLowerInvariant();                  var reportContent = await _reportService.Load(reportName);                  if (reportContent == null)                  {                      return StatisticsReportResult.Failed;                  }                    var results = JArray.Parse(reportContent.Content).Select(item =>                      new StatisticsPackagesItemViewModel                      {                          PackageId = item["PackageId"].ToString()'                          PackageVersion = item["PackageVersion"].ToString()'                          Downloads = item["Downloads"].Value<int>()'                      }                  );                    packageVersionsAll.Clear();                  packageVersionsAll.AddRange(results);                    packageVersionsSummary.Clear();                  packageVersionsSummary.AddRange(packageVersionsAll.Take(10));                    return StatisticsReportResult.Success(reportContent.LastUpdatedUtc);              }              catch (Exception e)              {                  QuietLog.LogHandledException(e);                  return StatisticsReportResult.Failed;              }
Magic Number,NuGetGallery,PackageDeleteService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageDeleteService.cs,SoftDeletePackagesAsync,The following statement contains a magic number: using (var strategy = new SuspendDbExecutionStrategy())              using (var transaction = _entitiesContext.GetDatabase().BeginTransaction())              {                  // Increase command timeout                  _entitiesContext.SetCommandTimeout(seconds: 300);                    // Keep package registrations                  var packageRegistrations = packages                      .GroupBy(p => p.PackageRegistration)                      .Select(g => g.First().PackageRegistration)                      .ToList();                    // Backup the package binaries and remove from main storage                  // We're doing this early in the process as we need the metadata to still exist in the DB.                  await BackupPackageBinaries(packages);                    // Store the soft delete in the database                  var packageDelete = new PackageDelete                  {                      DeletedOn = DateTime.UtcNow'                      DeletedBy = deletedBy'                      Reason = reason'                      Signature = signature                  };                    foreach (var package in packages)                  {                      /// We do not call <see cref="IPackageService.MarkPackageUnlistedAsync(Package' bool)"/> here                      /// because that writes an audit entry. Additionally' the latest bits are already updated by                      /// the package status change.                      package.Listed = false;                        await _packageService.UpdatePackageStatusAsync(                          package'                          PackageStatus.Deleted'                          commitChanges: false);                        packageDelete.Packages.Add(package);                        await _auditingService.SaveAuditRecordAsync(CreateAuditRecord(package' package.PackageRegistration' AuditedPackageAction.SoftDelete' reason));                  }                    _packageDeletesRepository.InsertOnCommit(packageDelete);                    // Commit changes                  await _packageRepository.CommitChangesAsync();                  await _packageDeletesRepository.CommitChangesAsync();                  transaction.Commit();              }
Magic Number,NuGetGallery,PackageDeleteService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageDeleteService.cs,HardDeletePackagesAsync,The following statement contains a magic number: using (var strategy = new SuspendDbExecutionStrategy())              using (var transaction = _entitiesContext.GetDatabase().BeginTransaction())              {                  // Increase command timeout                  _entitiesContext.SetCommandTimeout(seconds: 300);                    // Keep package registrations                  var packageRegistrations = packages.GroupBy(p => p.PackageRegistration).Select(g => g.First().PackageRegistration).ToList();                    // Backup the package binaries and remove from main storage                  // We're doing this early in the process as we need the metadata to still exist in the DB.                  await BackupPackageBinaries(packages);                    // Remove the package and related entities from the database                  foreach (var package in packages)                  {                      await ExecuteSqlCommandAsync(_entitiesContext.GetDatabase()'                          "DELETE pa FROM PackageAuthors pa JOIN Packages p ON p.[Key] = pa.PackageKey WHERE p.[Key] = @key"'                          new SqlParameter("@key"' package.Key));                      await ExecuteSqlCommandAsync(_entitiesContext.GetDatabase()'                          "DELETE pd FROM PackageDependencies pd JOIN Packages p ON p.[Key] = pd.PackageKey WHERE p.[Key] = @key"'                          new SqlParameter("@key"' package.Key));                      await ExecuteSqlCommandAsync(_entitiesContext.GetDatabase()'                          "DELETE pf FROM PackageFrameworks pf JOIN Packages p ON p.[Key] = pf.Package_Key WHERE p.[Key] = @key"'                          new SqlParameter("@key"' package.Key));                        await _auditingService.SaveAuditRecordAsync(CreateAuditRecord(package' package.PackageRegistration' AuditedPackageAction.Delete' reason));                        package.PackageRegistration.Packages.Remove(package);                      _packageRepository.DeleteOnCommit(package);                  }                    // Update latest versions                  await UpdateIsLatestAsync(packageRegistrations);                    // Commit changes to package repository                  await _packageRepository.CommitChangesAsync();                    // Remove package registrations that have no more packages?                  if (deleteEmptyPackageRegistration)                  {                      await RemovePackageRegistrationsWithoutPackages(packageRegistrations);                  }                    // Commit transaction                  transaction.Commit();              }
Magic Number,NuGetGallery,StatisticsPackagesViewModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ViewModels\StatisticsPackagesViewModel.cs,DisplayWeek,The following statement contains a magic number: if (weekOfYear < 1 || weekOfYear > 53)              {                  return string.Empty;              }
Magic Number,NuGetGallery,StatisticsPackagesViewModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ViewModels\StatisticsPackagesViewModel.cs,DisplayWeek,The following statement contains a magic number: var startOfWeek = firstThursday.AddDays((weekOfYear - offsetWeek) * 7 - 3);
Magic Number,NuGetGallery,StatisticsPackagesViewModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ViewModels\StatisticsPackagesViewModel.cs,DisplayWeek,The following statement contains a magic number: var startOfWeek = firstThursday.AddDays((weekOfYear - offsetWeek) * 7 - 3);
Magic Number,NuGetGallery,StatisticsPackagesViewModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ViewModels\StatisticsPackagesViewModel.cs,DisplayWeek,The following statement contains a magic number: return string.Format(CultureInfo.CurrentCulture' outputStringTemplate' startOfWeek' startOfWeek.AddDays(7));
Magic Number,NuGetGallery,StatisticsPackagesViewModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ViewModels\StatisticsPackagesViewModel.cs,DisplayShortNumber,The following statement contains a magic number: while (number >= 1000)              {                  number = number / 1000;                  numDiv++;              }
Magic Number,NuGetGallery,StatisticsPackagesViewModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ViewModels\StatisticsPackagesViewModel.cs,DisplayShortNumber,The following statement contains a magic number: while (number >= 1000)              {                  number = number / 1000;                  numDiv++;              }
Magic Number,NuGetGallery,StatisticsPackagesViewModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ViewModels\StatisticsPackagesViewModel.cs,DisplayShortNumber,The following statement contains a magic number: if (numDiv >= _magnitudeAbbreviations.Length)              {                  return number + $"10^{numDiv*3}";              }
Magic Number,NuGetGallery,AppActivator,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\AppActivator.cs,PreStart,The following statement contains a magic number: MessageQueue.Enable(maxPerQueue: 1000);
Magic Number,NuGetGallery,AppActivator,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\AppActivator.cs,BackgroundJobsPostStart,The following statement contains a magic number: if (configuration.StorageType == StorageType.AzureStorage)              {                  var cloudDownloadCountService = DependencyResolver.Current.GetService<IDownloadCountService>() as CloudDownloadCountService;                  if (cloudDownloadCountService != null)                  {                      // Perform initial refresh + schedule new refreshes every 15 minutes                      HostingEnvironment.QueueBackgroundWorkItem(cancellationToken => cloudDownloadCountService.Refresh());                      jobs.Add(new CloudDownloadCountServiceRefreshJob(TimeSpan.FromMinutes(15)' cloudDownloadCountService));                  }              }
Magic Number,NuGetGallery,AppActivator,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\AppActivator.cs,CreateLogFlushJob,The following statement contains a magic number: return new ProcessPerfEvents(                  TimeSpan.FromSeconds(10)'                  logDirectory'                  new[] { "ExternalSearchService" }'                  timeout: TimeSpan.FromSeconds(10));
Magic Number,NuGetGallery,AppActivator,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\AppActivator.cs,CreateLogFlushJob,The following statement contains a magic number: return new ProcessPerfEvents(                  TimeSpan.FromSeconds(10)'                  logDirectory'                  new[] { "ExternalSearchService" }'                  timeout: TimeSpan.FromSeconds(10));
Magic Number,NuGetGallery,ApiController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ApiController.cs,VerifyPackageKeyAsync,The following statement contains a magic number: TelemetryService.TrackVerifyPackageKeyEvent(id' version' user' User.Identity' result?.StatusCode ?? 200);
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackageProgress,The following statement contains a magic number: if (progress == null)              {                  return Json(404' null' JsonRequestBehavior.AllowGet);              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The following statement contains a magic number: using (var existingUploadFile = await _uploadFileService.GetUploadFileAsync(currentUser.Key))              {                  if (existingUploadFile != null)                  {                      return Json(409' new[] { Strings.UploadPackage_UploadInProgress });                  }              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The following statement contains a magic number: if (uploadFile == null)              {                  ModelState.AddModelError(String.Empty' Strings.UploadFileIsRequired);                  return Json(400' new[] { Strings.UploadFileIsRequired });              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The following statement contains a magic number: if (!Path.GetExtension(uploadFile.FileName).Equals(CoreConstants.NuGetPackageFileExtension' StringComparison.OrdinalIgnoreCase))              {                  ModelState.AddModelError(String.Empty' Strings.UploadFileMustBeNuGetPackage);                  return Json(400' new[] { Strings.UploadFileMustBeNuGetPackage });              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The following statement contains a magic number: using (var uploadStream = uploadFile.InputStream)              {                  using (var archive = new ZipArchive(uploadStream' ZipArchiveMode.Read' leaveOpen: true))                  {                      var reference = DateTime.UtcNow.AddDays(1); // allow "some" clock skew                        var entryInTheFuture = archive.Entries.FirstOrDefault(                          e => e.LastWriteTime.UtcDateTime > reference);                        if (entryInTheFuture != null)                      {                          ModelState.AddModelError(String.Empty' string.Format(                             CultureInfo.CurrentCulture'                             Strings.PackageEntryFromTheFuture'                             entryInTheFuture.Name));                            return Json(400' new[] {                              string.Format(CultureInfo.CurrentCulture' Strings.PackageEntryFromTheFuture' entryInTheFuture.Name) });                      }                  }                    PackageArchiveReader packageArchiveReader;                  try                  {                      packageArchiveReader = CreatePackage(uploadStream);                        _packageService.EnsureValid(packageArchiveReader);                  }                  catch (Exception ex)                  {                      ex.Log();                        var message = Strings.FailedToReadUploadFile;                      if (ex is InvalidPackageException || ex is InvalidDataException || ex is EntityException)                      {                          message = ex.Message;                      }                        ModelState.AddModelError(String.Empty' message);                        return Json(400' new[] { message });                  }                  finally                  {                      _cacheService.RemoveProgress(currentUser.Username);                  }                    NuspecReader nuspec;                  var errors = ManifestValidator.Validate(packageArchiveReader.GetNuspec()' out nuspec).ToArray();                  if (errors.Length > 0)                  {                      var errorStrings = new List<string>();                      foreach (var error in errors)                      {                          errorStrings.Add(error.ErrorMessage);                          ModelState.AddModelError(String.Empty' error.ErrorMessage);                      }                        return Json(400' errorStrings);                  }                    // Check min client version                  if (nuspec.GetMinClientVersion() > Constants.MaxSupportedMinClientVersion)                  {                      ModelState.AddModelError(                          string.Empty'                          string.Format(                              CultureInfo.CurrentCulture'                              Strings.UploadPackage_MinClientVersionOutOfRange'                              nuspec.GetMinClientVersion()));                        return Json(400' new[] {                          string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_MinClientVersionOutOfRange' nuspec.GetMinClientVersion()) });                  }                    var id = nuspec.GetId();                  var packageRegistration = _packageService.FindPackageRegistrationById(id);                  // For a new package id verify if the user is allowed to use it.                  if (packageRegistration == null)                  {                      var isPushAllowed = _reservedNamespaceService                          .IsPushAllowed(id' currentUser' out IReadOnlyCollection<ReservedNamespace> matchingNamespaces);                        if (!isPushAllowed)                      {                          ModelState.AddModelError(                              string.Empty' string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_IdNamespaceConflict));                            var version = nuspec.GetVersion().ToNormalizedString();                          _telemetryService.TrackPackagePushNamespaceConflictEvent(id' version' currentUser' User.Identity);                            return Json(409' new string[] { string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_IdNamespaceConflict) });                      }                  }                    // For existing package id verify if it is owned by the current user                  if (packageRegistration != null && !PermissionsService.IsActionAllowed(packageRegistration' currentUser' PackageActions.UploadNewVersion))                  {                      ModelState.AddModelError(                          string.Empty' string.Format(CultureInfo.CurrentCulture' Strings.PackageIdNotAvailable' packageRegistration.Id));                        return Json(409' new[] { string.Format(CultureInfo.CurrentCulture' Strings.PackageIdNotAvailable' packageRegistration.Id) });                  }                    var nuspecVersion = nuspec.GetVersion();                  var existingPackage = _packageService.FindPackageByIdAndVersionStrict(nuspec.GetId()' nuspecVersion.ToStringSafe());                  if (existingPackage != null)                  {                      // Determine if the package versions only differ by metadata'                       // and provide the most optimal the user-facing error message.                      var existingPackageVersion = new NuGetVersion(existingPackage.Version);                      String message = string.Empty;                      if ((existingPackageVersion.HasMetadata || nuspecVersion.HasMetadata)                          && !string.Equals(existingPackageVersion.Metadata' nuspecVersion.Metadata))                      {                          message = string.Format(                                  CultureInfo.CurrentCulture'                                  Strings.PackageVersionDiffersOnlyByMetadataAndCannotBeModified'                                  existingPackage.PackageRegistration.Id'                                  existingPackage.Version);                      }                      else                      {                          message = string.Format(                                  CultureInfo.CurrentCulture'                                  Strings.PackageExistsAndCannotBeModified'                                  existingPackage.PackageRegistration.Id'                                  existingPackage.Version);                      }                        ModelState.AddModelError(                          string.Empty'                          message);                        return Json(409' new[] { message });                  }                    await _uploadFileService.SaveUploadFileAsync(currentUser.Key' uploadStream);              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The following statement contains a magic number: using (var uploadStream = uploadFile.InputStream)              {                  using (var archive = new ZipArchive(uploadStream' ZipArchiveMode.Read' leaveOpen: true))                  {                      var reference = DateTime.UtcNow.AddDays(1); // allow "some" clock skew                        var entryInTheFuture = archive.Entries.FirstOrDefault(                          e => e.LastWriteTime.UtcDateTime > reference);                        if (entryInTheFuture != null)                      {                          ModelState.AddModelError(String.Empty' string.Format(                             CultureInfo.CurrentCulture'                             Strings.PackageEntryFromTheFuture'                             entryInTheFuture.Name));                            return Json(400' new[] {                              string.Format(CultureInfo.CurrentCulture' Strings.PackageEntryFromTheFuture' entryInTheFuture.Name) });                      }                  }                    PackageArchiveReader packageArchiveReader;                  try                  {                      packageArchiveReader = CreatePackage(uploadStream);                        _packageService.EnsureValid(packageArchiveReader);                  }                  catch (Exception ex)                  {                      ex.Log();                        var message = Strings.FailedToReadUploadFile;                      if (ex is InvalidPackageException || ex is InvalidDataException || ex is EntityException)                      {                          message = ex.Message;                      }                        ModelState.AddModelError(String.Empty' message);                        return Json(400' new[] { message });                  }                  finally                  {                      _cacheService.RemoveProgress(currentUser.Username);                  }                    NuspecReader nuspec;                  var errors = ManifestValidator.Validate(packageArchiveReader.GetNuspec()' out nuspec).ToArray();                  if (errors.Length > 0)                  {                      var errorStrings = new List<string>();                      foreach (var error in errors)                      {                          errorStrings.Add(error.ErrorMessage);                          ModelState.AddModelError(String.Empty' error.ErrorMessage);                      }                        return Json(400' errorStrings);                  }                    // Check min client version                  if (nuspec.GetMinClientVersion() > Constants.MaxSupportedMinClientVersion)                  {                      ModelState.AddModelError(                          string.Empty'                          string.Format(                              CultureInfo.CurrentCulture'                              Strings.UploadPackage_MinClientVersionOutOfRange'                              nuspec.GetMinClientVersion()));                        return Json(400' new[] {                          string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_MinClientVersionOutOfRange' nuspec.GetMinClientVersion()) });                  }                    var id = nuspec.GetId();                  var packageRegistration = _packageService.FindPackageRegistrationById(id);                  // For a new package id verify if the user is allowed to use it.                  if (packageRegistration == null)                  {                      var isPushAllowed = _reservedNamespaceService                          .IsPushAllowed(id' currentUser' out IReadOnlyCollection<ReservedNamespace> matchingNamespaces);                        if (!isPushAllowed)                      {                          ModelState.AddModelError(                              string.Empty' string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_IdNamespaceConflict));                            var version = nuspec.GetVersion().ToNormalizedString();                          _telemetryService.TrackPackagePushNamespaceConflictEvent(id' version' currentUser' User.Identity);                            return Json(409' new string[] { string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_IdNamespaceConflict) });                      }                  }                    // For existing package id verify if it is owned by the current user                  if (packageRegistration != null && !PermissionsService.IsActionAllowed(packageRegistration' currentUser' PackageActions.UploadNewVersion))                  {                      ModelState.AddModelError(                          string.Empty' string.Format(CultureInfo.CurrentCulture' Strings.PackageIdNotAvailable' packageRegistration.Id));                        return Json(409' new[] { string.Format(CultureInfo.CurrentCulture' Strings.PackageIdNotAvailable' packageRegistration.Id) });                  }                    var nuspecVersion = nuspec.GetVersion();                  var existingPackage = _packageService.FindPackageByIdAndVersionStrict(nuspec.GetId()' nuspecVersion.ToStringSafe());                  if (existingPackage != null)                  {                      // Determine if the package versions only differ by metadata'                       // and provide the most optimal the user-facing error message.                      var existingPackageVersion = new NuGetVersion(existingPackage.Version);                      String message = string.Empty;                      if ((existingPackageVersion.HasMetadata || nuspecVersion.HasMetadata)                          && !string.Equals(existingPackageVersion.Metadata' nuspecVersion.Metadata))                      {                          message = string.Format(                                  CultureInfo.CurrentCulture'                                  Strings.PackageVersionDiffersOnlyByMetadataAndCannotBeModified'                                  existingPackage.PackageRegistration.Id'                                  existingPackage.Version);                      }                      else                      {                          message = string.Format(                                  CultureInfo.CurrentCulture'                                  Strings.PackageExistsAndCannotBeModified'                                  existingPackage.PackageRegistration.Id'                                  existingPackage.Version);                      }                        ModelState.AddModelError(                          string.Empty'                          message);                        return Json(409' new[] { message });                  }                    await _uploadFileService.SaveUploadFileAsync(currentUser.Key' uploadStream);              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The following statement contains a magic number: using (var uploadStream = uploadFile.InputStream)              {                  using (var archive = new ZipArchive(uploadStream' ZipArchiveMode.Read' leaveOpen: true))                  {                      var reference = DateTime.UtcNow.AddDays(1); // allow "some" clock skew                        var entryInTheFuture = archive.Entries.FirstOrDefault(                          e => e.LastWriteTime.UtcDateTime > reference);                        if (entryInTheFuture != null)                      {                          ModelState.AddModelError(String.Empty' string.Format(                             CultureInfo.CurrentCulture'                             Strings.PackageEntryFromTheFuture'                             entryInTheFuture.Name));                            return Json(400' new[] {                              string.Format(CultureInfo.CurrentCulture' Strings.PackageEntryFromTheFuture' entryInTheFuture.Name) });                      }                  }                    PackageArchiveReader packageArchiveReader;                  try                  {                      packageArchiveReader = CreatePackage(uploadStream);                        _packageService.EnsureValid(packageArchiveReader);                  }                  catch (Exception ex)                  {                      ex.Log();                        var message = Strings.FailedToReadUploadFile;                      if (ex is InvalidPackageException || ex is InvalidDataException || ex is EntityException)                      {                          message = ex.Message;                      }                        ModelState.AddModelError(String.Empty' message);                        return Json(400' new[] { message });                  }                  finally                  {                      _cacheService.RemoveProgress(currentUser.Username);                  }                    NuspecReader nuspec;                  var errors = ManifestValidator.Validate(packageArchiveReader.GetNuspec()' out nuspec).ToArray();                  if (errors.Length > 0)                  {                      var errorStrings = new List<string>();                      foreach (var error in errors)                      {                          errorStrings.Add(error.ErrorMessage);                          ModelState.AddModelError(String.Empty' error.ErrorMessage);                      }                        return Json(400' errorStrings);                  }                    // Check min client version                  if (nuspec.GetMinClientVersion() > Constants.MaxSupportedMinClientVersion)                  {                      ModelState.AddModelError(                          string.Empty'                          string.Format(                              CultureInfo.CurrentCulture'                              Strings.UploadPackage_MinClientVersionOutOfRange'                              nuspec.GetMinClientVersion()));                        return Json(400' new[] {                          string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_MinClientVersionOutOfRange' nuspec.GetMinClientVersion()) });                  }                    var id = nuspec.GetId();                  var packageRegistration = _packageService.FindPackageRegistrationById(id);                  // For a new package id verify if the user is allowed to use it.                  if (packageRegistration == null)                  {                      var isPushAllowed = _reservedNamespaceService                          .IsPushAllowed(id' currentUser' out IReadOnlyCollection<ReservedNamespace> matchingNamespaces);                        if (!isPushAllowed)                      {                          ModelState.AddModelError(                              string.Empty' string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_IdNamespaceConflict));                            var version = nuspec.GetVersion().ToNormalizedString();                          _telemetryService.TrackPackagePushNamespaceConflictEvent(id' version' currentUser' User.Identity);                            return Json(409' new string[] { string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_IdNamespaceConflict) });                      }                  }                    // For existing package id verify if it is owned by the current user                  if (packageRegistration != null && !PermissionsService.IsActionAllowed(packageRegistration' currentUser' PackageActions.UploadNewVersion))                  {                      ModelState.AddModelError(                          string.Empty' string.Format(CultureInfo.CurrentCulture' Strings.PackageIdNotAvailable' packageRegistration.Id));                        return Json(409' new[] { string.Format(CultureInfo.CurrentCulture' Strings.PackageIdNotAvailable' packageRegistration.Id) });                  }                    var nuspecVersion = nuspec.GetVersion();                  var existingPackage = _packageService.FindPackageByIdAndVersionStrict(nuspec.GetId()' nuspecVersion.ToStringSafe());                  if (existingPackage != null)                  {                      // Determine if the package versions only differ by metadata'                       // and provide the most optimal the user-facing error message.                      var existingPackageVersion = new NuGetVersion(existingPackage.Version);                      String message = string.Empty;                      if ((existingPackageVersion.HasMetadata || nuspecVersion.HasMetadata)                          && !string.Equals(existingPackageVersion.Metadata' nuspecVersion.Metadata))                      {                          message = string.Format(                                  CultureInfo.CurrentCulture'                                  Strings.PackageVersionDiffersOnlyByMetadataAndCannotBeModified'                                  existingPackage.PackageRegistration.Id'                                  existingPackage.Version);                      }                      else                      {                          message = string.Format(                                  CultureInfo.CurrentCulture'                                  Strings.PackageExistsAndCannotBeModified'                                  existingPackage.PackageRegistration.Id'                                  existingPackage.Version);                      }                        ModelState.AddModelError(                          string.Empty'                          message);                        return Json(409' new[] { message });                  }                    await _uploadFileService.SaveUploadFileAsync(currentUser.Key' uploadStream);              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The following statement contains a magic number: using (var uploadStream = uploadFile.InputStream)              {                  using (var archive = new ZipArchive(uploadStream' ZipArchiveMode.Read' leaveOpen: true))                  {                      var reference = DateTime.UtcNow.AddDays(1); // allow "some" clock skew                        var entryInTheFuture = archive.Entries.FirstOrDefault(                          e => e.LastWriteTime.UtcDateTime > reference);                        if (entryInTheFuture != null)                      {                          ModelState.AddModelError(String.Empty' string.Format(                             CultureInfo.CurrentCulture'                             Strings.PackageEntryFromTheFuture'                             entryInTheFuture.Name));                            return Json(400' new[] {                              string.Format(CultureInfo.CurrentCulture' Strings.PackageEntryFromTheFuture' entryInTheFuture.Name) });                      }                  }                    PackageArchiveReader packageArchiveReader;                  try                  {                      packageArchiveReader = CreatePackage(uploadStream);                        _packageService.EnsureValid(packageArchiveReader);                  }                  catch (Exception ex)                  {                      ex.Log();                        var message = Strings.FailedToReadUploadFile;                      if (ex is InvalidPackageException || ex is InvalidDataException || ex is EntityException)                      {                          message = ex.Message;                      }                        ModelState.AddModelError(String.Empty' message);                        return Json(400' new[] { message });                  }                  finally                  {                      _cacheService.RemoveProgress(currentUser.Username);                  }                    NuspecReader nuspec;                  var errors = ManifestValidator.Validate(packageArchiveReader.GetNuspec()' out nuspec).ToArray();                  if (errors.Length > 0)                  {                      var errorStrings = new List<string>();                      foreach (var error in errors)                      {                          errorStrings.Add(error.ErrorMessage);                          ModelState.AddModelError(String.Empty' error.ErrorMessage);                      }                        return Json(400' errorStrings);                  }                    // Check min client version                  if (nuspec.GetMinClientVersion() > Constants.MaxSupportedMinClientVersion)                  {                      ModelState.AddModelError(                          string.Empty'                          string.Format(                              CultureInfo.CurrentCulture'                              Strings.UploadPackage_MinClientVersionOutOfRange'                              nuspec.GetMinClientVersion()));                        return Json(400' new[] {                          string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_MinClientVersionOutOfRange' nuspec.GetMinClientVersion()) });                  }                    var id = nuspec.GetId();                  var packageRegistration = _packageService.FindPackageRegistrationById(id);                  // For a new package id verify if the user is allowed to use it.                  if (packageRegistration == null)                  {                      var isPushAllowed = _reservedNamespaceService                          .IsPushAllowed(id' currentUser' out IReadOnlyCollection<ReservedNamespace> matchingNamespaces);                        if (!isPushAllowed)                      {                          ModelState.AddModelError(                              string.Empty' string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_IdNamespaceConflict));                            var version = nuspec.GetVersion().ToNormalizedString();                          _telemetryService.TrackPackagePushNamespaceConflictEvent(id' version' currentUser' User.Identity);                            return Json(409' new string[] { string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_IdNamespaceConflict) });                      }                  }                    // For existing package id verify if it is owned by the current user                  if (packageRegistration != null && !PermissionsService.IsActionAllowed(packageRegistration' currentUser' PackageActions.UploadNewVersion))                  {                      ModelState.AddModelError(                          string.Empty' string.Format(CultureInfo.CurrentCulture' Strings.PackageIdNotAvailable' packageRegistration.Id));                        return Json(409' new[] { string.Format(CultureInfo.CurrentCulture' Strings.PackageIdNotAvailable' packageRegistration.Id) });                  }                    var nuspecVersion = nuspec.GetVersion();                  var existingPackage = _packageService.FindPackageByIdAndVersionStrict(nuspec.GetId()' nuspecVersion.ToStringSafe());                  if (existingPackage != null)                  {                      // Determine if the package versions only differ by metadata'                       // and provide the most optimal the user-facing error message.                      var existingPackageVersion = new NuGetVersion(existingPackage.Version);                      String message = string.Empty;                      if ((existingPackageVersion.HasMetadata || nuspecVersion.HasMetadata)                          && !string.Equals(existingPackageVersion.Metadata' nuspecVersion.Metadata))                      {                          message = string.Format(                                  CultureInfo.CurrentCulture'                                  Strings.PackageVersionDiffersOnlyByMetadataAndCannotBeModified'                                  existingPackage.PackageRegistration.Id'                                  existingPackage.Version);                      }                      else                      {                          message = string.Format(                                  CultureInfo.CurrentCulture'                                  Strings.PackageExistsAndCannotBeModified'                                  existingPackage.PackageRegistration.Id'                                  existingPackage.Version);                      }                        ModelState.AddModelError(                          string.Empty'                          message);                        return Json(409' new[] { message });                  }                    await _uploadFileService.SaveUploadFileAsync(currentUser.Key' uploadStream);              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The following statement contains a magic number: using (var uploadStream = uploadFile.InputStream)              {                  using (var archive = new ZipArchive(uploadStream' ZipArchiveMode.Read' leaveOpen: true))                  {                      var reference = DateTime.UtcNow.AddDays(1); // allow "some" clock skew                        var entryInTheFuture = archive.Entries.FirstOrDefault(                          e => e.LastWriteTime.UtcDateTime > reference);                        if (entryInTheFuture != null)                      {                          ModelState.AddModelError(String.Empty' string.Format(                             CultureInfo.CurrentCulture'                             Strings.PackageEntryFromTheFuture'                             entryInTheFuture.Name));                            return Json(400' new[] {                              string.Format(CultureInfo.CurrentCulture' Strings.PackageEntryFromTheFuture' entryInTheFuture.Name) });                      }                  }                    PackageArchiveReader packageArchiveReader;                  try                  {                      packageArchiveReader = CreatePackage(uploadStream);                        _packageService.EnsureValid(packageArchiveReader);                  }                  catch (Exception ex)                  {                      ex.Log();                        var message = Strings.FailedToReadUploadFile;                      if (ex is InvalidPackageException || ex is InvalidDataException || ex is EntityException)                      {                          message = ex.Message;                      }                        ModelState.AddModelError(String.Empty' message);                        return Json(400' new[] { message });                  }                  finally                  {                      _cacheService.RemoveProgress(currentUser.Username);                  }                    NuspecReader nuspec;                  var errors = ManifestValidator.Validate(packageArchiveReader.GetNuspec()' out nuspec).ToArray();                  if (errors.Length > 0)                  {                      var errorStrings = new List<string>();                      foreach (var error in errors)                      {                          errorStrings.Add(error.ErrorMessage);                          ModelState.AddModelError(String.Empty' error.ErrorMessage);                      }                        return Json(400' errorStrings);                  }                    // Check min client version                  if (nuspec.GetMinClientVersion() > Constants.MaxSupportedMinClientVersion)                  {                      ModelState.AddModelError(                          string.Empty'                          string.Format(                              CultureInfo.CurrentCulture'                              Strings.UploadPackage_MinClientVersionOutOfRange'                              nuspec.GetMinClientVersion()));                        return Json(400' new[] {                          string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_MinClientVersionOutOfRange' nuspec.GetMinClientVersion()) });                  }                    var id = nuspec.GetId();                  var packageRegistration = _packageService.FindPackageRegistrationById(id);                  // For a new package id verify if the user is allowed to use it.                  if (packageRegistration == null)                  {                      var isPushAllowed = _reservedNamespaceService                          .IsPushAllowed(id' currentUser' out IReadOnlyCollection<ReservedNamespace> matchingNamespaces);                        if (!isPushAllowed)                      {                          ModelState.AddModelError(                              string.Empty' string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_IdNamespaceConflict));                            var version = nuspec.GetVersion().ToNormalizedString();                          _telemetryService.TrackPackagePushNamespaceConflictEvent(id' version' currentUser' User.Identity);                            return Json(409' new string[] { string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_IdNamespaceConflict) });                      }                  }                    // For existing package id verify if it is owned by the current user                  if (packageRegistration != null && !PermissionsService.IsActionAllowed(packageRegistration' currentUser' PackageActions.UploadNewVersion))                  {                      ModelState.AddModelError(                          string.Empty' string.Format(CultureInfo.CurrentCulture' Strings.PackageIdNotAvailable' packageRegistration.Id));                        return Json(409' new[] { string.Format(CultureInfo.CurrentCulture' Strings.PackageIdNotAvailable' packageRegistration.Id) });                  }                    var nuspecVersion = nuspec.GetVersion();                  var existingPackage = _packageService.FindPackageByIdAndVersionStrict(nuspec.GetId()' nuspecVersion.ToStringSafe());                  if (existingPackage != null)                  {                      // Determine if the package versions only differ by metadata'                       // and provide the most optimal the user-facing error message.                      var existingPackageVersion = new NuGetVersion(existingPackage.Version);                      String message = string.Empty;                      if ((existingPackageVersion.HasMetadata || nuspecVersion.HasMetadata)                          && !string.Equals(existingPackageVersion.Metadata' nuspecVersion.Metadata))                      {                          message = string.Format(                                  CultureInfo.CurrentCulture'                                  Strings.PackageVersionDiffersOnlyByMetadataAndCannotBeModified'                                  existingPackage.PackageRegistration.Id'                                  existingPackage.Version);                      }                      else                      {                          message = string.Format(                                  CultureInfo.CurrentCulture'                                  Strings.PackageExistsAndCannotBeModified'                                  existingPackage.PackageRegistration.Id'                                  existingPackage.Version);                      }                        ModelState.AddModelError(                          string.Empty'                          message);                        return Json(409' new[] { message });                  }                    await _uploadFileService.SaveUploadFileAsync(currentUser.Key' uploadStream);              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The following statement contains a magic number: using (var uploadStream = uploadFile.InputStream)              {                  using (var archive = new ZipArchive(uploadStream' ZipArchiveMode.Read' leaveOpen: true))                  {                      var reference = DateTime.UtcNow.AddDays(1); // allow "some" clock skew                        var entryInTheFuture = archive.Entries.FirstOrDefault(                          e => e.LastWriteTime.UtcDateTime > reference);                        if (entryInTheFuture != null)                      {                          ModelState.AddModelError(String.Empty' string.Format(                             CultureInfo.CurrentCulture'                             Strings.PackageEntryFromTheFuture'                             entryInTheFuture.Name));                            return Json(400' new[] {                              string.Format(CultureInfo.CurrentCulture' Strings.PackageEntryFromTheFuture' entryInTheFuture.Name) });                      }                  }                    PackageArchiveReader packageArchiveReader;                  try                  {                      packageArchiveReader = CreatePackage(uploadStream);                        _packageService.EnsureValid(packageArchiveReader);                  }                  catch (Exception ex)                  {                      ex.Log();                        var message = Strings.FailedToReadUploadFile;                      if (ex is InvalidPackageException || ex is InvalidDataException || ex is EntityException)                      {                          message = ex.Message;                      }                        ModelState.AddModelError(String.Empty' message);                        return Json(400' new[] { message });                  }                  finally                  {                      _cacheService.RemoveProgress(currentUser.Username);                  }                    NuspecReader nuspec;                  var errors = ManifestValidator.Validate(packageArchiveReader.GetNuspec()' out nuspec).ToArray();                  if (errors.Length > 0)                  {                      var errorStrings = new List<string>();                      foreach (var error in errors)                      {                          errorStrings.Add(error.ErrorMessage);                          ModelState.AddModelError(String.Empty' error.ErrorMessage);                      }                        return Json(400' errorStrings);                  }                    // Check min client version                  if (nuspec.GetMinClientVersion() > Constants.MaxSupportedMinClientVersion)                  {                      ModelState.AddModelError(                          string.Empty'                          string.Format(                              CultureInfo.CurrentCulture'                              Strings.UploadPackage_MinClientVersionOutOfRange'                              nuspec.GetMinClientVersion()));                        return Json(400' new[] {                          string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_MinClientVersionOutOfRange' nuspec.GetMinClientVersion()) });                  }                    var id = nuspec.GetId();                  var packageRegistration = _packageService.FindPackageRegistrationById(id);                  // For a new package id verify if the user is allowed to use it.                  if (packageRegistration == null)                  {                      var isPushAllowed = _reservedNamespaceService                          .IsPushAllowed(id' currentUser' out IReadOnlyCollection<ReservedNamespace> matchingNamespaces);                        if (!isPushAllowed)                      {                          ModelState.AddModelError(                              string.Empty' string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_IdNamespaceConflict));                            var version = nuspec.GetVersion().ToNormalizedString();                          _telemetryService.TrackPackagePushNamespaceConflictEvent(id' version' currentUser' User.Identity);                            return Json(409' new string[] { string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_IdNamespaceConflict) });                      }                  }                    // For existing package id verify if it is owned by the current user                  if (packageRegistration != null && !PermissionsService.IsActionAllowed(packageRegistration' currentUser' PackageActions.UploadNewVersion))                  {                      ModelState.AddModelError(                          string.Empty' string.Format(CultureInfo.CurrentCulture' Strings.PackageIdNotAvailable' packageRegistration.Id));                        return Json(409' new[] { string.Format(CultureInfo.CurrentCulture' Strings.PackageIdNotAvailable' packageRegistration.Id) });                  }                    var nuspecVersion = nuspec.GetVersion();                  var existingPackage = _packageService.FindPackageByIdAndVersionStrict(nuspec.GetId()' nuspecVersion.ToStringSafe());                  if (existingPackage != null)                  {                      // Determine if the package versions only differ by metadata'                       // and provide the most optimal the user-facing error message.                      var existingPackageVersion = new NuGetVersion(existingPackage.Version);                      String message = string.Empty;                      if ((existingPackageVersion.HasMetadata || nuspecVersion.HasMetadata)                          && !string.Equals(existingPackageVersion.Metadata' nuspecVersion.Metadata))                      {                          message = string.Format(                                  CultureInfo.CurrentCulture'                                  Strings.PackageVersionDiffersOnlyByMetadataAndCannotBeModified'                                  existingPackage.PackageRegistration.Id'                                  existingPackage.Version);                      }                      else                      {                          message = string.Format(                                  CultureInfo.CurrentCulture'                                  Strings.PackageExistsAndCannotBeModified'                                  existingPackage.PackageRegistration.Id'                                  existingPackage.Version);                      }                        ModelState.AddModelError(                          string.Empty'                          message);                        return Json(409' new[] { message });                  }                    await _uploadFileService.SaveUploadFileAsync(currentUser.Key' uploadStream);              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The following statement contains a magic number: using (var uploadStream = uploadFile.InputStream)              {                  using (var archive = new ZipArchive(uploadStream' ZipArchiveMode.Read' leaveOpen: true))                  {                      var reference = DateTime.UtcNow.AddDays(1); // allow "some" clock skew                        var entryInTheFuture = archive.Entries.FirstOrDefault(                          e => e.LastWriteTime.UtcDateTime > reference);                        if (entryInTheFuture != null)                      {                          ModelState.AddModelError(String.Empty' string.Format(                             CultureInfo.CurrentCulture'                             Strings.PackageEntryFromTheFuture'                             entryInTheFuture.Name));                            return Json(400' new[] {                              string.Format(CultureInfo.CurrentCulture' Strings.PackageEntryFromTheFuture' entryInTheFuture.Name) });                      }                  }                    PackageArchiveReader packageArchiveReader;                  try                  {                      packageArchiveReader = CreatePackage(uploadStream);                        _packageService.EnsureValid(packageArchiveReader);                  }                  catch (Exception ex)                  {                      ex.Log();                        var message = Strings.FailedToReadUploadFile;                      if (ex is InvalidPackageException || ex is InvalidDataException || ex is EntityException)                      {                          message = ex.Message;                      }                        ModelState.AddModelError(String.Empty' message);                        return Json(400' new[] { message });                  }                  finally                  {                      _cacheService.RemoveProgress(currentUser.Username);                  }                    NuspecReader nuspec;                  var errors = ManifestValidator.Validate(packageArchiveReader.GetNuspec()' out nuspec).ToArray();                  if (errors.Length > 0)                  {                      var errorStrings = new List<string>();                      foreach (var error in errors)                      {                          errorStrings.Add(error.ErrorMessage);                          ModelState.AddModelError(String.Empty' error.ErrorMessage);                      }                        return Json(400' errorStrings);                  }                    // Check min client version                  if (nuspec.GetMinClientVersion() > Constants.MaxSupportedMinClientVersion)                  {                      ModelState.AddModelError(                          string.Empty'                          string.Format(                              CultureInfo.CurrentCulture'                              Strings.UploadPackage_MinClientVersionOutOfRange'                              nuspec.GetMinClientVersion()));                        return Json(400' new[] {                          string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_MinClientVersionOutOfRange' nuspec.GetMinClientVersion()) });                  }                    var id = nuspec.GetId();                  var packageRegistration = _packageService.FindPackageRegistrationById(id);                  // For a new package id verify if the user is allowed to use it.                  if (packageRegistration == null)                  {                      var isPushAllowed = _reservedNamespaceService                          .IsPushAllowed(id' currentUser' out IReadOnlyCollection<ReservedNamespace> matchingNamespaces);                        if (!isPushAllowed)                      {                          ModelState.AddModelError(                              string.Empty' string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_IdNamespaceConflict));                            var version = nuspec.GetVersion().ToNormalizedString();                          _telemetryService.TrackPackagePushNamespaceConflictEvent(id' version' currentUser' User.Identity);                            return Json(409' new string[] { string.Format(CultureInfo.CurrentCulture' Strings.UploadPackage_IdNamespaceConflict) });                      }                  }                    // For existing package id verify if it is owned by the current user                  if (packageRegistration != null && !PermissionsService.IsActionAllowed(packageRegistration' currentUser' PackageActions.UploadNewVersion))                  {                      ModelState.AddModelError(                          string.Empty' string.Format(CultureInfo.CurrentCulture' Strings.PackageIdNotAvailable' packageRegistration.Id));                        return Json(409' new[] { string.Format(CultureInfo.CurrentCulture' Strings.PackageIdNotAvailable' packageRegistration.Id) });                  }                    var nuspecVersion = nuspec.GetVersion();                  var existingPackage = _packageService.FindPackageByIdAndVersionStrict(nuspec.GetId()' nuspecVersion.ToStringSafe());                  if (existingPackage != null)                  {                      // Determine if the package versions only differ by metadata'                       // and provide the most optimal the user-facing error message.                      var existingPackageVersion = new NuGetVersion(existingPackage.Version);                      String message = string.Empty;                      if ((existingPackageVersion.HasMetadata || nuspecVersion.HasMetadata)                          && !string.Equals(existingPackageVersion.Metadata' nuspecVersion.Metadata))                      {                          message = string.Format(                                  CultureInfo.CurrentCulture'                                  Strings.PackageVersionDiffersOnlyByMetadataAndCannotBeModified'                                  existingPackage.PackageRegistration.Id'                                  existingPackage.Version);                      }                      else                      {                          message = string.Format(                                  CultureInfo.CurrentCulture'                                  Strings.PackageExistsAndCannotBeModified'                                  existingPackage.PackageRegistration.Id'                                  existingPackage.Version);                      }                        ModelState.AddModelError(                          string.Empty'                          message);                        return Json(409' new[] { message });                  }                    await _uploadFileService.SaveUploadFileAsync(currentUser.Key' uploadStream);              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The following statement contains a magic number: using (Stream uploadedFile = await _uploadFileService.GetUploadFileAsync(currentUser.Key))              {                  if (uploadedFile == null)                  {                      ModelState.AddModelError(String.Empty' Strings.UploadFileIsRequired);                      return Json(400' new[] { Strings.UploadFileIsRequired });                  }                    var package = await SafeCreatePackage(currentUser' uploadedFile);                  if (package == null)                  {                      return Json(400' new[] { Strings.UploadFileIsRequired });                  }                    try                  {                      packageMetadata = PackageMetadata.FromNuspecReader(                          package.GetNuspecReader());                  }                  catch (Exception ex)                  {                      _telemetryService.TraceException(ex);                        TempData["Message"] = ex.GetUserSafeMessage();                        return Json(400' new[] { ex.GetUserSafeMessage() });                  }              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The following statement contains a magic number: using (Stream uploadedFile = await _uploadFileService.GetUploadFileAsync(currentUser.Key))              {                  if (uploadedFile == null)                  {                      ModelState.AddModelError(String.Empty' Strings.UploadFileIsRequired);                      return Json(400' new[] { Strings.UploadFileIsRequired });                  }                    var package = await SafeCreatePackage(currentUser' uploadedFile);                  if (package == null)                  {                      return Json(400' new[] { Strings.UploadFileIsRequired });                  }                    try                  {                      packageMetadata = PackageMetadata.FromNuspecReader(                          package.GetNuspecReader());                  }                  catch (Exception ex)                  {                      _telemetryService.TraceException(ex);                        TempData["Message"] = ex.GetUserSafeMessage();                        return Json(400' new[] { ex.GetUserSafeMessage() });                  }              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,UploadPackage,The following statement contains a magic number: using (Stream uploadedFile = await _uploadFileService.GetUploadFileAsync(currentUser.Key))              {                  if (uploadedFile == null)                  {                      ModelState.AddModelError(String.Empty' Strings.UploadFileIsRequired);                      return Json(400' new[] { Strings.UploadFileIsRequired });                  }                    var package = await SafeCreatePackage(currentUser' uploadedFile);                  if (package == null)                  {                      return Json(400' new[] { Strings.UploadFileIsRequired });                  }                    try                  {                      packageMetadata = PackageMetadata.FromNuspecReader(                          package.GetNuspecReader());                  }                  catch (Exception ex)                  {                      _telemetryService.TraceException(ex);                        TempData["Message"] = ex.GetUserSafeMessage();                        return Json(400' new[] { ex.GetUserSafeMessage() });                  }              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,DisplayPackage,The following statement contains a magic number: if (_searchService.ContainsAllVersions && externalSearchService != null)              {                  var isIndexedCacheKey = $"IsIndexed_{package.PackageRegistration.Id}_{package.Version}";                  var isIndexed = HttpContext.Cache.Get(isIndexedCacheKey) as bool?;                  if (!isIndexed.HasValue)                  {                      var normalizedRegistrationId = package.PackageRegistration.Id                          .Normalize(NormalizationForm.FormC);                        var searchFilter = SearchAdaptor.GetSearchFilter(                              q: "id:\"" + normalizedRegistrationId + "\" AND version:\"" + package.Version + "\""'                          page: 1'                          includePrerelease: true'                          sortOrder: null'                          context: SearchFilter.ODataSearchContext'                          semVerLevel: SemVerLevelKey.SemVerLevel2);                        searchFilter.IncludeAllVersions = true;                        var results = await externalSearchService.RawSearch(searchFilter);                        isIndexed = results.Hits > 0;                        var expiration = Cache.NoAbsoluteExpiration;                      if (!isIndexed.Value)                      {                          expiration = DateTime.UtcNow.Add(TimeSpan.FromSeconds(30));                      }                        HttpContext.Cache.Add(isIndexedCacheKey'                          isIndexed'                          null'                          expiration'                          Cache.NoSlidingExpiration'                          CacheItemPriority.Default' null);                  }                    model.IsIndexed = isIndexed;              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,ListPackages,The following statement contains a magic number: if (string.IsNullOrEmpty(q) && page == 1 && includePrerelease)              {                  var cachedResults = HttpContext.Cache.Get("DefaultSearchResults");                  if (cachedResults == null)                  {                      var searchFilter = SearchAdaptor.GetSearchFilter(                          q'                          page'                          includePrerelease: includePrerelease'                          sortOrder: null'                          context: SearchFilter.UISearchContext'                          semVerLevel: SemVerLevelKey.SemVerLevel2);                        results = await _searchService.Search(searchFilter);                        // note: this is a per instance cache                      HttpContext.Cache.Add(                          "DefaultSearchResults"'                          results'                          null'                          DateTime.UtcNow.AddMinutes(10)'                          Cache.NoSlidingExpiration'                          CacheItemPriority.Default' null);                  }                  else                  {                      // default for /packages view                      results = (SearchResults)cachedResults;                  }              }              else              {                  var searchFilter = SearchAdaptor.GetSearchFilter(                      q'                      page'                      includePrerelease: includePrerelease'                      sortOrder: null'                      context: SearchFilter.UISearchContext'                      semVerLevel: SemVerLevelKey.SemVerLevel2);                    results = await _searchService.Search(searchFilter);              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,ManagePackageOwners,The following statement contains a magic number: if (!PermissionsService.IsActionAllowed(package' User' PackageActions.ManagePackageOwners))              {                  return new HttpStatusCodeResult(401' "Unauthorized");              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,Delete,The following statement contains a magic number: if (!PermissionsService.IsActionAllowed(package' User' PackageActions.Unlist))              {                  return new HttpStatusCodeResult(401' "Unauthorized");              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,Delete,The following statement contains a magic number: if (ModelState.IsValid)              {                  // Get the packages to delete                  foreach (var package in deletePackagesRequest.Packages)                  {                      var split = package.Split(new[] { '|' }' StringSplitOptions.RemoveEmptyEntries);                      if (split.Length == 2)                      {                          var packageToDelete = _packageService.FindPackageByIdAndVersionStrict(split[0]' split[1]);                          if (packageToDelete != null)                          {                              packagesToDelete.Add(packageToDelete);                          }                      }                  }                    // Perform delete                  if (deletePackagesRequest.SoftDelete)                  {                      await _packageDeleteService.SoftDeletePackagesAsync(                          packagesToDelete' GetCurrentUser()' EnumHelper.GetDescription(deletePackagesRequest.Reason.Value)'                          deletePackagesRequest.Signature);                  }                  else                  {                      await _packageDeleteService.HardDeletePackagesAsync(                          packagesToDelete' GetCurrentUser()' EnumHelper.GetDescription(deletePackagesRequest.Reason.Value)'                          deletePackagesRequest.Signature'                          deletePackagesRequest.DeleteEmptyPackageRegistration);                  }                    // Redirect out                  TempData["Message"] =                      "We're performing the package delete right now. It may take a while for this change to propagate through our system.";                    return Redirect("/");              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,Edit,The following statement contains a magic number: if (package == null)              {                  return Json(404' new[] { string.Format(Strings.PackageWithIdAndVersionNotFound' id' version) });              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,Edit,The following statement contains a magic number: if (!PermissionsService.IsActionAllowed(package' User' PackageActions.Edit))              {                  return Json(403' new[] { Strings.Unauthorized });              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,Edit,The following statement contains a magic number: if (package == null)              {                  return Json(404' new[] { string.Format(Strings.PackageWithIdAndVersionNotFound' id' version) });              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,Edit,The following statement contains a magic number: if (!PermissionsService.IsActionAllowed(package' User' PackageActions.Edit))              {                  return Json(403' new[] { Strings.Unauthorized });              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,Edit,The following statement contains a magic number: if (!ModelState.IsValid)              {                  var errorMessages = ModelState.Values.SelectMany(v => v.Errors.Select(e => e.ErrorMessage));                  return Json(400' errorMessages);              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,Edit,The following statement contains a magic number: if (formData.Edit != null)              {                  try                  {                      // Update pending readme.md file' if modified.                      var hasReadMe = await _readMeService.SavePendingReadMeMdIfChanged(package' formData.Edit' Request.ContentEncoding);                      if (hasReadMe)                      {                          _telemetryService.TrackPackageReadMeChangeEvent(package' formData.Edit.ReadMe.SourceType' formData.Edit.ReadMeState);                      }                        // Queue package edit in database for processing in background (HandlePackageEdits job).                      var user = GetCurrentUser();                      _editPackageService.StartEditPackageRequest(package' formData.Edit' user);                      await _entitiesContext.SaveChangesAsync();                        // Add an auditing record for the package edit. HasReadMe flag is updated in DB by background job.                      var packageWithEditsApplied = formData.Edit.ApplyTo(package);                      packageWithEditsApplied.HasReadMe = hasReadMe;                      await _auditingService.SaveAuditRecordAsync(new PackageAuditRecord(packageWithEditsApplied' AuditedPackageAction.Edit));                  }                  catch (EntityException ex)                  {                      ModelState.AddModelError("Edit.VersionTitle"' ex.Message);                      return Json(400' new[] { ex.Message });                  }              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,Edit,The following statement contains a magic number: if (!PermissionsService.IsActionAllowed(package' User' PackageActions.Edit))              {                  return new HttpStatusCodeResult(401' "Unauthorized");              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,VerifyPackage,The following statement contains a magic number: if (!ModelState.IsValid)              {                  var errorMessages = ModelState.Values.SelectMany(v => v.Errors.Select(e => e.ErrorMessage));                  return Json(400' errorMessages);              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,VerifyPackage,The following statement contains a magic number: using (Stream uploadFile = await _uploadFileService.GetUploadFileAsync(currentUser.Key))              {                  if (uploadFile == null)                  {                      TempData["Message"] = Strings.VerifyPackage_UploadNotFound;                        return Json(400' new[] { Strings.VerifyPackage_UploadNotFound });                  }                    var nugetPackage = await SafeCreatePackage(currentUser' uploadFile);                  if (nugetPackage == null)                  {                      // Send the user back                      return Json(400' new[] { Strings.VerifyPackage_UnexpectedError });                  }                    Debug.Assert(nugetPackage != null);                    var packageMetadata = PackageMetadata.FromNuspecReader(                      nugetPackage.GetNuspecReader());                    // Rule out problem scenario with multiple tabs - verification request (possibly with edits) was submitted by user                  // viewing a different package to what was actually most recently uploaded                  if (!(String.IsNullOrEmpty(formData.Id) || String.IsNullOrEmpty(formData.OriginalVersion)))                  {                      if (!(String.Equals(packageMetadata.Id' formData.Id' StringComparison.OrdinalIgnoreCase)                          && String.Equals(packageMetadata.Version.ToFullStringSafe()' formData.Version' StringComparison.OrdinalIgnoreCase)                          && String.Equals(packageMetadata.Version.OriginalVersion' formData.OriginalVersion' StringComparison.OrdinalIgnoreCase)))                      {                          TempData["Message"] = Strings.VerifyPackage_PackageFileModified;                            return Json(400' new[] { Strings.VerifyPackage_PackageFileModified });                      }                  }                    var packageStreamMetadata = new PackageStreamMetadata                  {                      HashAlgorithm = Constants.Sha512HashAlgorithmId'                      Hash = CryptographyService.GenerateHash(uploadFile.AsSeekableStream())'                      Size = uploadFile.Length'                  };                    // update relevant database tables                  try                  {                      package = await _packageUploadService.GeneratePackageAsync(                          packageMetadata.Id'                          nugetPackage'                          packageStreamMetadata'                          currentUser);                        Debug.Assert(package.PackageRegistration != null);                  }                  catch (InvalidPackageException ex)                  {                      _telemetryService.TraceException(ex);                        return Json(400' new[] { ex.Message });                  }                    var pendEdit = false;                  if (formData.Edit != null)                  {                      if (await _readMeService.SavePendingReadMeMdIfChanged(package' formData.Edit' Request.ContentEncoding))                      {                          pendEdit = true;                          _telemetryService.TrackPackageReadMeChangeEvent(package' formData.Edit.ReadMe.SourceType' formData.Edit.ReadMeState);                      }                                            pendEdit = pendEdit || formData.Edit.RequiresLicenseAcceptance != packageMetadata.RequireLicenseAcceptance;                        pendEdit = pendEdit || IsDifferent(formData.Edit.IconUrl' packageMetadata.IconUrl.ToEncodedUrlStringOrNull());                      pendEdit = pendEdit || IsDifferent(formData.Edit.ProjectUrl' packageMetadata.ProjectUrl.ToEncodedUrlStringOrNull());                        pendEdit = pendEdit || IsDifferent(formData.Edit.Authors' packageMetadata.Authors.Flatten());                      pendEdit = pendEdit || IsDifferent(formData.Edit.Copyright' packageMetadata.Copyright);                      pendEdit = pendEdit || IsDifferent(formData.Edit.Description' packageMetadata.Description);                      pendEdit = pendEdit || IsDifferent(formData.Edit.ReleaseNotes' packageMetadata.ReleaseNotes);                      pendEdit = pendEdit || IsDifferent(formData.Edit.Summary' packageMetadata.Summary);                      pendEdit = pendEdit || IsDifferent(formData.Edit.Tags' PackageHelper.ParseTags(packageMetadata.Tags));                      pendEdit = pendEdit || IsDifferent(formData.Edit.VersionTitle' packageMetadata.Title);                  }                    await _packageService.PublishPackageAsync(package' commitChanges: false);                    if (pendEdit)                  {                      try                      {                          _editPackageService.StartEditPackageRequest(package' formData.Edit' currentUser);                      }                      catch (EntityException ex)                      {                          _telemetryService.TraceException(ex);                            return Json(400' new[] { ex.Message });                      }                  }                    if (!formData.Listed)                  {                      await _packageService.MarkPackageUnlistedAsync(package' commitChanges: false);                  }                    await _autoCuratedPackageCmd.ExecuteAsync(package' nugetPackage' commitChanges: false);                    // Commit the package to storage and to the database.                  uploadFile.Position = 0;                  var commitResult = await _packageUploadService.CommitPackageAsync(                      package'                      uploadFile.AsSeekableStream());                    switch (commitResult)                  {                      case PackageCommitResult.Success:                          break;                      case PackageCommitResult.Conflict:                          TempData["Message"] = Strings.UploadPackage_IdVersionConflict;                          return Json(409' new[] { Strings.UploadPackage_IdVersionConflict });                      default:                          throw new NotImplementedException($"The package commit result {commitResult} is not supported.");                  }                    // tell Lucene to update index for the new package                  _indexingService.UpdateIndex();                    // write an audit record                  await _auditingService.SaveAuditRecordAsync(                      new PackageAuditRecord(package' AuditedPackageAction.Create' PackageCreatedVia.Web));                    // notify user                  _messageService.SendPackageUploadedNotice(package'                      Url.Package(package.PackageRegistration.Id' package.NormalizedVersion' relativeUrl: false)'                      Url.ReportPackage(package.PackageRegistration.Id' package.NormalizedVersion' relativeUrl: false)'                      Url.AccountSettings(relativeUrl: false));              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,VerifyPackage,The following statement contains a magic number: using (Stream uploadFile = await _uploadFileService.GetUploadFileAsync(currentUser.Key))              {                  if (uploadFile == null)                  {                      TempData["Message"] = Strings.VerifyPackage_UploadNotFound;                        return Json(400' new[] { Strings.VerifyPackage_UploadNotFound });                  }                    var nugetPackage = await SafeCreatePackage(currentUser' uploadFile);                  if (nugetPackage == null)                  {                      // Send the user back                      return Json(400' new[] { Strings.VerifyPackage_UnexpectedError });                  }                    Debug.Assert(nugetPackage != null);                    var packageMetadata = PackageMetadata.FromNuspecReader(                      nugetPackage.GetNuspecReader());                    // Rule out problem scenario with multiple tabs - verification request (possibly with edits) was submitted by user                  // viewing a different package to what was actually most recently uploaded                  if (!(String.IsNullOrEmpty(formData.Id) || String.IsNullOrEmpty(formData.OriginalVersion)))                  {                      if (!(String.Equals(packageMetadata.Id' formData.Id' StringComparison.OrdinalIgnoreCase)                          && String.Equals(packageMetadata.Version.ToFullStringSafe()' formData.Version' StringComparison.OrdinalIgnoreCase)                          && String.Equals(packageMetadata.Version.OriginalVersion' formData.OriginalVersion' StringComparison.OrdinalIgnoreCase)))                      {                          TempData["Message"] = Strings.VerifyPackage_PackageFileModified;                            return Json(400' new[] { Strings.VerifyPackage_PackageFileModified });                      }                  }                    var packageStreamMetadata = new PackageStreamMetadata                  {                      HashAlgorithm = Constants.Sha512HashAlgorithmId'                      Hash = CryptographyService.GenerateHash(uploadFile.AsSeekableStream())'                      Size = uploadFile.Length'                  };                    // update relevant database tables                  try                  {                      package = await _packageUploadService.GeneratePackageAsync(                          packageMetadata.Id'                          nugetPackage'                          packageStreamMetadata'                          currentUser);                        Debug.Assert(package.PackageRegistration != null);                  }                  catch (InvalidPackageException ex)                  {                      _telemetryService.TraceException(ex);                        return Json(400' new[] { ex.Message });                  }                    var pendEdit = false;                  if (formData.Edit != null)                  {                      if (await _readMeService.SavePendingReadMeMdIfChanged(package' formData.Edit' Request.ContentEncoding))                      {                          pendEdit = true;                          _telemetryService.TrackPackageReadMeChangeEvent(package' formData.Edit.ReadMe.SourceType' formData.Edit.ReadMeState);                      }                                            pendEdit = pendEdit || formData.Edit.RequiresLicenseAcceptance != packageMetadata.RequireLicenseAcceptance;                        pendEdit = pendEdit || IsDifferent(formData.Edit.IconUrl' packageMetadata.IconUrl.ToEncodedUrlStringOrNull());                      pendEdit = pendEdit || IsDifferent(formData.Edit.ProjectUrl' packageMetadata.ProjectUrl.ToEncodedUrlStringOrNull());                        pendEdit = pendEdit || IsDifferent(formData.Edit.Authors' packageMetadata.Authors.Flatten());                      pendEdit = pendEdit || IsDifferent(formData.Edit.Copyright' packageMetadata.Copyright);                      pendEdit = pendEdit || IsDifferent(formData.Edit.Description' packageMetadata.Description);                      pendEdit = pendEdit || IsDifferent(formData.Edit.ReleaseNotes' packageMetadata.ReleaseNotes);                      pendEdit = pendEdit || IsDifferent(formData.Edit.Summary' packageMetadata.Summary);                      pendEdit = pendEdit || IsDifferent(formData.Edit.Tags' PackageHelper.ParseTags(packageMetadata.Tags));                      pendEdit = pendEdit || IsDifferent(formData.Edit.VersionTitle' packageMetadata.Title);                  }                    await _packageService.PublishPackageAsync(package' commitChanges: false);                    if (pendEdit)                  {                      try                      {                          _editPackageService.StartEditPackageRequest(package' formData.Edit' currentUser);                      }                      catch (EntityException ex)                      {                          _telemetryService.TraceException(ex);                            return Json(400' new[] { ex.Message });                      }                  }                    if (!formData.Listed)                  {                      await _packageService.MarkPackageUnlistedAsync(package' commitChanges: false);                  }                    await _autoCuratedPackageCmd.ExecuteAsync(package' nugetPackage' commitChanges: false);                    // Commit the package to storage and to the database.                  uploadFile.Position = 0;                  var commitResult = await _packageUploadService.CommitPackageAsync(                      package'                      uploadFile.AsSeekableStream());                    switch (commitResult)                  {                      case PackageCommitResult.Success:                          break;                      case PackageCommitResult.Conflict:                          TempData["Message"] = Strings.UploadPackage_IdVersionConflict;                          return Json(409' new[] { Strings.UploadPackage_IdVersionConflict });                      default:                          throw new NotImplementedException($"The package commit result {commitResult} is not supported.");                  }                    // tell Lucene to update index for the new package                  _indexingService.UpdateIndex();                    // write an audit record                  await _auditingService.SaveAuditRecordAsync(                      new PackageAuditRecord(package' AuditedPackageAction.Create' PackageCreatedVia.Web));                    // notify user                  _messageService.SendPackageUploadedNotice(package'                      Url.Package(package.PackageRegistration.Id' package.NormalizedVersion' relativeUrl: false)'                      Url.ReportPackage(package.PackageRegistration.Id' package.NormalizedVersion' relativeUrl: false)'                      Url.AccountSettings(relativeUrl: false));              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,VerifyPackage,The following statement contains a magic number: using (Stream uploadFile = await _uploadFileService.GetUploadFileAsync(currentUser.Key))              {                  if (uploadFile == null)                  {                      TempData["Message"] = Strings.VerifyPackage_UploadNotFound;                        return Json(400' new[] { Strings.VerifyPackage_UploadNotFound });                  }                    var nugetPackage = await SafeCreatePackage(currentUser' uploadFile);                  if (nugetPackage == null)                  {                      // Send the user back                      return Json(400' new[] { Strings.VerifyPackage_UnexpectedError });                  }                    Debug.Assert(nugetPackage != null);                    var packageMetadata = PackageMetadata.FromNuspecReader(                      nugetPackage.GetNuspecReader());                    // Rule out problem scenario with multiple tabs - verification request (possibly with edits) was submitted by user                  // viewing a different package to what was actually most recently uploaded                  if (!(String.IsNullOrEmpty(formData.Id) || String.IsNullOrEmpty(formData.OriginalVersion)))                  {                      if (!(String.Equals(packageMetadata.Id' formData.Id' StringComparison.OrdinalIgnoreCase)                          && String.Equals(packageMetadata.Version.ToFullStringSafe()' formData.Version' StringComparison.OrdinalIgnoreCase)                          && String.Equals(packageMetadata.Version.OriginalVersion' formData.OriginalVersion' StringComparison.OrdinalIgnoreCase)))                      {                          TempData["Message"] = Strings.VerifyPackage_PackageFileModified;                            return Json(400' new[] { Strings.VerifyPackage_PackageFileModified });                      }                  }                    var packageStreamMetadata = new PackageStreamMetadata                  {                      HashAlgorithm = Constants.Sha512HashAlgorithmId'                      Hash = CryptographyService.GenerateHash(uploadFile.AsSeekableStream())'                      Size = uploadFile.Length'                  };                    // update relevant database tables                  try                  {                      package = await _packageUploadService.GeneratePackageAsync(                          packageMetadata.Id'                          nugetPackage'                          packageStreamMetadata'                          currentUser);                        Debug.Assert(package.PackageRegistration != null);                  }                  catch (InvalidPackageException ex)                  {                      _telemetryService.TraceException(ex);                        return Json(400' new[] { ex.Message });                  }                    var pendEdit = false;                  if (formData.Edit != null)                  {                      if (await _readMeService.SavePendingReadMeMdIfChanged(package' formData.Edit' Request.ContentEncoding))                      {                          pendEdit = true;                          _telemetryService.TrackPackageReadMeChangeEvent(package' formData.Edit.ReadMe.SourceType' formData.Edit.ReadMeState);                      }                                            pendEdit = pendEdit || formData.Edit.RequiresLicenseAcceptance != packageMetadata.RequireLicenseAcceptance;                        pendEdit = pendEdit || IsDifferent(formData.Edit.IconUrl' packageMetadata.IconUrl.ToEncodedUrlStringOrNull());                      pendEdit = pendEdit || IsDifferent(formData.Edit.ProjectUrl' packageMetadata.ProjectUrl.ToEncodedUrlStringOrNull());                        pendEdit = pendEdit || IsDifferent(formData.Edit.Authors' packageMetadata.Authors.Flatten());                      pendEdit = pendEdit || IsDifferent(formData.Edit.Copyright' packageMetadata.Copyright);                      pendEdit = pendEdit || IsDifferent(formData.Edit.Description' packageMetadata.Description);                      pendEdit = pendEdit || IsDifferent(formData.Edit.ReleaseNotes' packageMetadata.ReleaseNotes);                      pendEdit = pendEdit || IsDifferent(formData.Edit.Summary' packageMetadata.Summary);                      pendEdit = pendEdit || IsDifferent(formData.Edit.Tags' PackageHelper.ParseTags(packageMetadata.Tags));                      pendEdit = pendEdit || IsDifferent(formData.Edit.VersionTitle' packageMetadata.Title);                  }                    await _packageService.PublishPackageAsync(package' commitChanges: false);                    if (pendEdit)                  {                      try                      {                          _editPackageService.StartEditPackageRequest(package' formData.Edit' currentUser);                      }                      catch (EntityException ex)                      {                          _telemetryService.TraceException(ex);                            return Json(400' new[] { ex.Message });                      }                  }                    if (!formData.Listed)                  {                      await _packageService.MarkPackageUnlistedAsync(package' commitChanges: false);                  }                    await _autoCuratedPackageCmd.ExecuteAsync(package' nugetPackage' commitChanges: false);                    // Commit the package to storage and to the database.                  uploadFile.Position = 0;                  var commitResult = await _packageUploadService.CommitPackageAsync(                      package'                      uploadFile.AsSeekableStream());                    switch (commitResult)                  {                      case PackageCommitResult.Success:                          break;                      case PackageCommitResult.Conflict:                          TempData["Message"] = Strings.UploadPackage_IdVersionConflict;                          return Json(409' new[] { Strings.UploadPackage_IdVersionConflict });                      default:                          throw new NotImplementedException($"The package commit result {commitResult} is not supported.");                  }                    // tell Lucene to update index for the new package                  _indexingService.UpdateIndex();                    // write an audit record                  await _auditingService.SaveAuditRecordAsync(                      new PackageAuditRecord(package' AuditedPackageAction.Create' PackageCreatedVia.Web));                    // notify user                  _messageService.SendPackageUploadedNotice(package'                      Url.Package(package.PackageRegistration.Id' package.NormalizedVersion' relativeUrl: false)'                      Url.ReportPackage(package.PackageRegistration.Id' package.NormalizedVersion' relativeUrl: false)'                      Url.AccountSettings(relativeUrl: false));              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,VerifyPackage,The following statement contains a magic number: using (Stream uploadFile = await _uploadFileService.GetUploadFileAsync(currentUser.Key))              {                  if (uploadFile == null)                  {                      TempData["Message"] = Strings.VerifyPackage_UploadNotFound;                        return Json(400' new[] { Strings.VerifyPackage_UploadNotFound });                  }                    var nugetPackage = await SafeCreatePackage(currentUser' uploadFile);                  if (nugetPackage == null)                  {                      // Send the user back                      return Json(400' new[] { Strings.VerifyPackage_UnexpectedError });                  }                    Debug.Assert(nugetPackage != null);                    var packageMetadata = PackageMetadata.FromNuspecReader(                      nugetPackage.GetNuspecReader());                    // Rule out problem scenario with multiple tabs - verification request (possibly with edits) was submitted by user                  // viewing a different package to what was actually most recently uploaded                  if (!(String.IsNullOrEmpty(formData.Id) || String.IsNullOrEmpty(formData.OriginalVersion)))                  {                      if (!(String.Equals(packageMetadata.Id' formData.Id' StringComparison.OrdinalIgnoreCase)                          && String.Equals(packageMetadata.Version.ToFullStringSafe()' formData.Version' StringComparison.OrdinalIgnoreCase)                          && String.Equals(packageMetadata.Version.OriginalVersion' formData.OriginalVersion' StringComparison.OrdinalIgnoreCase)))                      {                          TempData["Message"] = Strings.VerifyPackage_PackageFileModified;                            return Json(400' new[] { Strings.VerifyPackage_PackageFileModified });                      }                  }                    var packageStreamMetadata = new PackageStreamMetadata                  {                      HashAlgorithm = Constants.Sha512HashAlgorithmId'                      Hash = CryptographyService.GenerateHash(uploadFile.AsSeekableStream())'                      Size = uploadFile.Length'                  };                    // update relevant database tables                  try                  {                      package = await _packageUploadService.GeneratePackageAsync(                          packageMetadata.Id'                          nugetPackage'                          packageStreamMetadata'                          currentUser);                        Debug.Assert(package.PackageRegistration != null);                  }                  catch (InvalidPackageException ex)                  {                      _telemetryService.TraceException(ex);                        return Json(400' new[] { ex.Message });                  }                    var pendEdit = false;                  if (formData.Edit != null)                  {                      if (await _readMeService.SavePendingReadMeMdIfChanged(package' formData.Edit' Request.ContentEncoding))                      {                          pendEdit = true;                          _telemetryService.TrackPackageReadMeChangeEvent(package' formData.Edit.ReadMe.SourceType' formData.Edit.ReadMeState);                      }                                            pendEdit = pendEdit || formData.Edit.RequiresLicenseAcceptance != packageMetadata.RequireLicenseAcceptance;                        pendEdit = pendEdit || IsDifferent(formData.Edit.IconUrl' packageMetadata.IconUrl.ToEncodedUrlStringOrNull());                      pendEdit = pendEdit || IsDifferent(formData.Edit.ProjectUrl' packageMetadata.ProjectUrl.ToEncodedUrlStringOrNull());                        pendEdit = pendEdit || IsDifferent(formData.Edit.Authors' packageMetadata.Authors.Flatten());                      pendEdit = pendEdit || IsDifferent(formData.Edit.Copyright' packageMetadata.Copyright);                      pendEdit = pendEdit || IsDifferent(formData.Edit.Description' packageMetadata.Description);                      pendEdit = pendEdit || IsDifferent(formData.Edit.ReleaseNotes' packageMetadata.ReleaseNotes);                      pendEdit = pendEdit || IsDifferent(formData.Edit.Summary' packageMetadata.Summary);                      pendEdit = pendEdit || IsDifferent(formData.Edit.Tags' PackageHelper.ParseTags(packageMetadata.Tags));                      pendEdit = pendEdit || IsDifferent(formData.Edit.VersionTitle' packageMetadata.Title);                  }                    await _packageService.PublishPackageAsync(package' commitChanges: false);                    if (pendEdit)                  {                      try                      {                          _editPackageService.StartEditPackageRequest(package' formData.Edit' currentUser);                      }                      catch (EntityException ex)                      {                          _telemetryService.TraceException(ex);                            return Json(400' new[] { ex.Message });                      }                  }                    if (!formData.Listed)                  {                      await _packageService.MarkPackageUnlistedAsync(package' commitChanges: false);                  }                    await _autoCuratedPackageCmd.ExecuteAsync(package' nugetPackage' commitChanges: false);                    // Commit the package to storage and to the database.                  uploadFile.Position = 0;                  var commitResult = await _packageUploadService.CommitPackageAsync(                      package'                      uploadFile.AsSeekableStream());                    switch (commitResult)                  {                      case PackageCommitResult.Success:                          break;                      case PackageCommitResult.Conflict:                          TempData["Message"] = Strings.UploadPackage_IdVersionConflict;                          return Json(409' new[] { Strings.UploadPackage_IdVersionConflict });                      default:                          throw new NotImplementedException($"The package commit result {commitResult} is not supported.");                  }                    // tell Lucene to update index for the new package                  _indexingService.UpdateIndex();                    // write an audit record                  await _auditingService.SaveAuditRecordAsync(                      new PackageAuditRecord(package' AuditedPackageAction.Create' PackageCreatedVia.Web));                    // notify user                  _messageService.SendPackageUploadedNotice(package'                      Url.Package(package.PackageRegistration.Id' package.NormalizedVersion' relativeUrl: false)'                      Url.ReportPackage(package.PackageRegistration.Id' package.NormalizedVersion' relativeUrl: false)'                      Url.AccountSettings(relativeUrl: false));              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,VerifyPackage,The following statement contains a magic number: using (Stream uploadFile = await _uploadFileService.GetUploadFileAsync(currentUser.Key))              {                  if (uploadFile == null)                  {                      TempData["Message"] = Strings.VerifyPackage_UploadNotFound;                        return Json(400' new[] { Strings.VerifyPackage_UploadNotFound });                  }                    var nugetPackage = await SafeCreatePackage(currentUser' uploadFile);                  if (nugetPackage == null)                  {                      // Send the user back                      return Json(400' new[] { Strings.VerifyPackage_UnexpectedError });                  }                    Debug.Assert(nugetPackage != null);                    var packageMetadata = PackageMetadata.FromNuspecReader(                      nugetPackage.GetNuspecReader());                    // Rule out problem scenario with multiple tabs - verification request (possibly with edits) was submitted by user                  // viewing a different package to what was actually most recently uploaded                  if (!(String.IsNullOrEmpty(formData.Id) || String.IsNullOrEmpty(formData.OriginalVersion)))                  {                      if (!(String.Equals(packageMetadata.Id' formData.Id' StringComparison.OrdinalIgnoreCase)                          && String.Equals(packageMetadata.Version.ToFullStringSafe()' formData.Version' StringComparison.OrdinalIgnoreCase)                          && String.Equals(packageMetadata.Version.OriginalVersion' formData.OriginalVersion' StringComparison.OrdinalIgnoreCase)))                      {                          TempData["Message"] = Strings.VerifyPackage_PackageFileModified;                            return Json(400' new[] { Strings.VerifyPackage_PackageFileModified });                      }                  }                    var packageStreamMetadata = new PackageStreamMetadata                  {                      HashAlgorithm = Constants.Sha512HashAlgorithmId'                      Hash = CryptographyService.GenerateHash(uploadFile.AsSeekableStream())'                      Size = uploadFile.Length'                  };                    // update relevant database tables                  try                  {                      package = await _packageUploadService.GeneratePackageAsync(                          packageMetadata.Id'                          nugetPackage'                          packageStreamMetadata'                          currentUser);                        Debug.Assert(package.PackageRegistration != null);                  }                  catch (InvalidPackageException ex)                  {                      _telemetryService.TraceException(ex);                        return Json(400' new[] { ex.Message });                  }                    var pendEdit = false;                  if (formData.Edit != null)                  {                      if (await _readMeService.SavePendingReadMeMdIfChanged(package' formData.Edit' Request.ContentEncoding))                      {                          pendEdit = true;                          _telemetryService.TrackPackageReadMeChangeEvent(package' formData.Edit.ReadMe.SourceType' formData.Edit.ReadMeState);                      }                                            pendEdit = pendEdit || formData.Edit.RequiresLicenseAcceptance != packageMetadata.RequireLicenseAcceptance;                        pendEdit = pendEdit || IsDifferent(formData.Edit.IconUrl' packageMetadata.IconUrl.ToEncodedUrlStringOrNull());                      pendEdit = pendEdit || IsDifferent(formData.Edit.ProjectUrl' packageMetadata.ProjectUrl.ToEncodedUrlStringOrNull());                        pendEdit = pendEdit || IsDifferent(formData.Edit.Authors' packageMetadata.Authors.Flatten());                      pendEdit = pendEdit || IsDifferent(formData.Edit.Copyright' packageMetadata.Copyright);                      pendEdit = pendEdit || IsDifferent(formData.Edit.Description' packageMetadata.Description);                      pendEdit = pendEdit || IsDifferent(formData.Edit.ReleaseNotes' packageMetadata.ReleaseNotes);                      pendEdit = pendEdit || IsDifferent(formData.Edit.Summary' packageMetadata.Summary);                      pendEdit = pendEdit || IsDifferent(formData.Edit.Tags' PackageHelper.ParseTags(packageMetadata.Tags));                      pendEdit = pendEdit || IsDifferent(formData.Edit.VersionTitle' packageMetadata.Title);                  }                    await _packageService.PublishPackageAsync(package' commitChanges: false);                    if (pendEdit)                  {                      try                      {                          _editPackageService.StartEditPackageRequest(package' formData.Edit' currentUser);                      }                      catch (EntityException ex)                      {                          _telemetryService.TraceException(ex);                            return Json(400' new[] { ex.Message });                      }                  }                    if (!formData.Listed)                  {                      await _packageService.MarkPackageUnlistedAsync(package' commitChanges: false);                  }                    await _autoCuratedPackageCmd.ExecuteAsync(package' nugetPackage' commitChanges: false);                    // Commit the package to storage and to the database.                  uploadFile.Position = 0;                  var commitResult = await _packageUploadService.CommitPackageAsync(                      package'                      uploadFile.AsSeekableStream());                    switch (commitResult)                  {                      case PackageCommitResult.Success:                          break;                      case PackageCommitResult.Conflict:                          TempData["Message"] = Strings.UploadPackage_IdVersionConflict;                          return Json(409' new[] { Strings.UploadPackage_IdVersionConflict });                      default:                          throw new NotImplementedException($"The package commit result {commitResult} is not supported.");                  }                    // tell Lucene to update index for the new package                  _indexingService.UpdateIndex();                    // write an audit record                  await _auditingService.SaveAuditRecordAsync(                      new PackageAuditRecord(package' AuditedPackageAction.Create' PackageCreatedVia.Web));                    // notify user                  _messageService.SendPackageUploadedNotice(package'                      Url.Package(package.PackageRegistration.Id' package.NormalizedVersion' relativeUrl: false)'                      Url.ReportPackage(package.PackageRegistration.Id' package.NormalizedVersion' relativeUrl: false)'                      Url.AccountSettings(relativeUrl: false));              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,VerifyPackage,The following statement contains a magic number: using (Stream uploadFile = await _uploadFileService.GetUploadFileAsync(currentUser.Key))              {                  if (uploadFile == null)                  {                      TempData["Message"] = Strings.VerifyPackage_UploadNotFound;                        return Json(400' new[] { Strings.VerifyPackage_UploadNotFound });                  }                    var nugetPackage = await SafeCreatePackage(currentUser' uploadFile);                  if (nugetPackage == null)                  {                      // Send the user back                      return Json(400' new[] { Strings.VerifyPackage_UnexpectedError });                  }                    Debug.Assert(nugetPackage != null);                    var packageMetadata = PackageMetadata.FromNuspecReader(                      nugetPackage.GetNuspecReader());                    // Rule out problem scenario with multiple tabs - verification request (possibly with edits) was submitted by user                  // viewing a different package to what was actually most recently uploaded                  if (!(String.IsNullOrEmpty(formData.Id) || String.IsNullOrEmpty(formData.OriginalVersion)))                  {                      if (!(String.Equals(packageMetadata.Id' formData.Id' StringComparison.OrdinalIgnoreCase)                          && String.Equals(packageMetadata.Version.ToFullStringSafe()' formData.Version' StringComparison.OrdinalIgnoreCase)                          && String.Equals(packageMetadata.Version.OriginalVersion' formData.OriginalVersion' StringComparison.OrdinalIgnoreCase)))                      {                          TempData["Message"] = Strings.VerifyPackage_PackageFileModified;                            return Json(400' new[] { Strings.VerifyPackage_PackageFileModified });                      }                  }                    var packageStreamMetadata = new PackageStreamMetadata                  {                      HashAlgorithm = Constants.Sha512HashAlgorithmId'                      Hash = CryptographyService.GenerateHash(uploadFile.AsSeekableStream())'                      Size = uploadFile.Length'                  };                    // update relevant database tables                  try                  {                      package = await _packageUploadService.GeneratePackageAsync(                          packageMetadata.Id'                          nugetPackage'                          packageStreamMetadata'                          currentUser);                        Debug.Assert(package.PackageRegistration != null);                  }                  catch (InvalidPackageException ex)                  {                      _telemetryService.TraceException(ex);                        return Json(400' new[] { ex.Message });                  }                    var pendEdit = false;                  if (formData.Edit != null)                  {                      if (await _readMeService.SavePendingReadMeMdIfChanged(package' formData.Edit' Request.ContentEncoding))                      {                          pendEdit = true;                          _telemetryService.TrackPackageReadMeChangeEvent(package' formData.Edit.ReadMe.SourceType' formData.Edit.ReadMeState);                      }                                            pendEdit = pendEdit || formData.Edit.RequiresLicenseAcceptance != packageMetadata.RequireLicenseAcceptance;                        pendEdit = pendEdit || IsDifferent(formData.Edit.IconUrl' packageMetadata.IconUrl.ToEncodedUrlStringOrNull());                      pendEdit = pendEdit || IsDifferent(formData.Edit.ProjectUrl' packageMetadata.ProjectUrl.ToEncodedUrlStringOrNull());                        pendEdit = pendEdit || IsDifferent(formData.Edit.Authors' packageMetadata.Authors.Flatten());                      pendEdit = pendEdit || IsDifferent(formData.Edit.Copyright' packageMetadata.Copyright);                      pendEdit = pendEdit || IsDifferent(formData.Edit.Description' packageMetadata.Description);                      pendEdit = pendEdit || IsDifferent(formData.Edit.ReleaseNotes' packageMetadata.ReleaseNotes);                      pendEdit = pendEdit || IsDifferent(formData.Edit.Summary' packageMetadata.Summary);                      pendEdit = pendEdit || IsDifferent(formData.Edit.Tags' PackageHelper.ParseTags(packageMetadata.Tags));                      pendEdit = pendEdit || IsDifferent(formData.Edit.VersionTitle' packageMetadata.Title);                  }                    await _packageService.PublishPackageAsync(package' commitChanges: false);                    if (pendEdit)                  {                      try                      {                          _editPackageService.StartEditPackageRequest(package' formData.Edit' currentUser);                      }                      catch (EntityException ex)                      {                          _telemetryService.TraceException(ex);                            return Json(400' new[] { ex.Message });                      }                  }                    if (!formData.Listed)                  {                      await _packageService.MarkPackageUnlistedAsync(package' commitChanges: false);                  }                    await _autoCuratedPackageCmd.ExecuteAsync(package' nugetPackage' commitChanges: false);                    // Commit the package to storage and to the database.                  uploadFile.Position = 0;                  var commitResult = await _packageUploadService.CommitPackageAsync(                      package'                      uploadFile.AsSeekableStream());                    switch (commitResult)                  {                      case PackageCommitResult.Success:                          break;                      case PackageCommitResult.Conflict:                          TempData["Message"] = Strings.UploadPackage_IdVersionConflict;                          return Json(409' new[] { Strings.UploadPackage_IdVersionConflict });                      default:                          throw new NotImplementedException($"The package commit result {commitResult} is not supported.");                  }                    // tell Lucene to update index for the new package                  _indexingService.UpdateIndex();                    // write an audit record                  await _auditingService.SaveAuditRecordAsync(                      new PackageAuditRecord(package' AuditedPackageAction.Create' PackageCreatedVia.Web));                    // notify user                  _messageService.SendPackageUploadedNotice(package'                      Url.Package(package.PackageRegistration.Id' package.NormalizedVersion' relativeUrl: false)'                      Url.ReportPackage(package.PackageRegistration.Id' package.NormalizedVersion' relativeUrl: false)'                      Url.AccountSettings(relativeUrl: false));              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,PreviewReadMe,The following statement contains a magic number: if (formData == null || !_readMeService.HasReadMeSource(formData))              {                  return Json(400' new[] { Strings.PreviewReadMe_ReadMeMissing });              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,PreviewReadMe,The following statement contains a magic number: try              {                  var readMeHtml = await _readMeService.GetReadMeHtmlAsync(formData' Request.ContentEncoding);                  return Json(new[] { readMeHtml });              }              catch (Exception ex)              {                  return Json(400' new[] { string.Format(CultureInfo.CurrentCulture' Strings.PreviewReadMe_ConversionFailed' ex.Message) });              }
Magic Number,NuGetGallery,PackagesController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\PackagesController.cs,SetLicenseReportVisibility,The following statement contains a magic number: if (!PermissionsService.IsActionAllowed(package' User' PackageActions.Edit))              {                  return new HttpStatusCodeResult(401' "Unauthorized");              }
Magic Number,NuGetGallery,UsersController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\UsersController.cs,ForgotPassword,The following statement contains a magic number: if (ModelState.IsValid)              {                  var result = await _authService.GeneratePasswordResetToken(model.Email' Constants.PasswordResetTokenExpirationHours * 60);                  switch (result.Type)                  {                      case PasswordResetResultType.UserNotConfirmed:                          ModelState.AddModelError("Email"' Strings.UserIsNotYetConfirmed);                          break;                      case PasswordResetResultType.UserNotFound:                          ModelState.AddModelError("Email"' Strings.CouldNotFindAnyoneWithThatUsernameOrEmail);                          break;                      case PasswordResetResultType.Success:                          return SendPasswordResetEmail(result.User' forgotPassword: true);                      default:                          throw new NotImplementedException($"The password reset result type '{result.Type}' is not supported.");                  }              }
Magic Number,NuGetGallery,UsersController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\UsersController.cs,ChangePassword,The following statement contains a magic number: if (oldPassword == null)              {                  // User is requesting a password set email                  var resetResultType = await _authService.GeneratePasswordResetToken(user' Constants.PasswordResetTokenExpirationHours * 60);                  if (resetResultType == PasswordResetResultType.UserNotConfirmed)                  {                      ModelState.AddModelError("ChangePassword"' Strings.UserIsNotYetConfirmed);                      return AccountView(model);                  }                    return SendPasswordResetEmail(user' forgotPassword: false);              }              else              {                  if (!model.ChangePassword.EnablePasswordLogin)                  {                      return await RemovePassword();                  }                    if (!ModelState.IsValidField("ChangePassword"))                  {                      return AccountView(model);                  }                    if (model.ChangePassword.NewPassword != model.ChangePassword.VerifyPassword)                  {                      ModelState.AddModelError("ChangePassword.VerifyPassword"' Strings.PasswordDoesNotMatch);                      return AccountView(model);                  }                    if (!await _authService.ChangePassword(user' model.ChangePassword.OldPassword' model.ChangePassword.NewPassword))                  {                      ModelState.AddModelError("ChangePassword.OldPassword"' Strings.CurrentPasswordIncorrect);                      return AccountView(model);                  }                    TempData["Message"] = Strings.PasswordChanged;                  return RedirectToAction("Account");              }
Magic Number,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,ValidateNuGetPackageMetadata,The following statement contains a magic number: if (packageMetadata.Authors != null && packageMetadata.Authors.Flatten().Length > 4000)              {                  throw new EntityException(Strings.NuGetPackagePropertyTooLong' "Authors"' "4000");              }
Magic Number,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,ValidateNuGetPackageMetadata,The following statement contains a magic number: if (packageMetadata.Copyright != null && packageMetadata.Copyright.Length > 4000)              {                  throw new EntityException(Strings.NuGetPackagePropertyTooLong' "Copyright"' "4000");              }
Magic Number,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,ValidateNuGetPackageMetadata,The following statement contains a magic number: if (packageMetadata.Description == null)              {                  throw new EntityException(Strings.NuGetPackagePropertyMissing' "Description");              }              else if (packageMetadata.Description != null && packageMetadata.Description.Length > 4000)              {                  throw new EntityException(Strings.NuGetPackagePropertyTooLong' "Description"' "4000");              }
Magic Number,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,ValidateNuGetPackageMetadata,The following statement contains a magic number: if (packageMetadata.IconUrl != null && packageMetadata.IconUrl.AbsoluteUri.Length > 4000)              {                  throw new EntityException(Strings.NuGetPackagePropertyTooLong' "IconUrl"' "4000");              }
Magic Number,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,ValidateNuGetPackageMetadata,The following statement contains a magic number: if (packageMetadata.LicenseUrl != null && packageMetadata.LicenseUrl.AbsoluteUri.Length > 4000)              {                  throw new EntityException(Strings.NuGetPackagePropertyTooLong' "LicenseUrl"' "4000");              }
Magic Number,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,ValidateNuGetPackageMetadata,The following statement contains a magic number: if (packageMetadata.ProjectUrl != null && packageMetadata.ProjectUrl.AbsoluteUri.Length > 4000)              {                  throw new EntityException(Strings.NuGetPackagePropertyTooLong' "ProjectUrl"' "4000");              }
Magic Number,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,ValidateNuGetPackageMetadata,The following statement contains a magic number: if (packageMetadata.Summary != null && packageMetadata.Summary.Length > 4000)              {                  throw new EntityException(Strings.NuGetPackagePropertyTooLong' "Summary"' "4000");              }
Magic Number,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,ValidateNuGetPackageMetadata,The following statement contains a magic number: if (packageMetadata.Tags != null && packageMetadata.Tags.Length > 4000)              {                  throw new EntityException(Strings.NuGetPackagePropertyTooLong' "Tags"' "4000");              }
Magic Number,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,ValidateNuGetPackageMetadata,The following statement contains a magic number: if (packageMetadata.Title != null && packageMetadata.Title.Length > 256)              {                  throw new EntityException(Strings.NuGetPackagePropertyTooLong' "Title"' "256");              }
Magic Number,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,ValidateNuGetPackageMetadata,The following statement contains a magic number: if (packageMetadata.Version != null && packageMetadata.Version.ToFullString().Length > 64)              {                  throw new EntityException(Strings.NuGetPackagePropertyTooLong' "Version"' "64");              }
Magic Number,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,ValidateNuGetPackageMetadata,The following statement contains a magic number: if (packageMetadata.Language != null && packageMetadata.Language.Length > 20)              {                  throw new EntityException(Strings.NuGetPackagePropertyTooLong' "Language"' "20");              }
Magic Number,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,ValidateNuGetPackageMetadata,The following statement contains a magic number: if (packageMetadata.GetDependencyGroups() != null)              {                  var packageDependencies = packageMetadata.GetDependencyGroups().ToList();                    foreach (var dependency in packageDependencies.SelectMany(s => s.Packages))                  {                      // NuGet.Core compatibility - dependency package id can not be > 128 characters                      if (dependency.Id != null && dependency.Id.Length > CoreConstants.MaxPackageIdLength)                      {                          throw new EntityException(Strings.NuGetPackagePropertyTooLong' "Dependency.Id"' CoreConstants.MaxPackageIdLength);                      }                        // NuGet.Core compatibility - dependency versionspec can not be > 256 characters                      if (dependency.VersionRange != null && dependency.VersionRange.ToString().Length > 256)                      {                          throw new EntityException(Strings.NuGetPackagePropertyTooLong' "Dependency.VersionSpec"' "256");                      }                  }                    // NuGet.Core compatibility - flattened dependencies should be < Int16.MaxValue                  if (packageDependencies.Flatten().Length > Int16.MaxValue)                  {                      throw new EntityException(Strings.NuGetPackagePropertyTooLong' "Dependencies"' Int16.MaxValue);                  }              }
Magic Number,NuGetGallery,PackageService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\PackageService.cs,ValidateSupportedFrameworks,The following statement contains a magic number: var invalidPortableFramework = supportedFrameworks.FirstOrDefault(fx =>                  !string.IsNullOrEmpty(fx)                  && fx.StartsWith("portable-"' StringComparison.OrdinalIgnoreCase)                  && fx.Split('-').Length > 2);
Magic Number,NuGetGallery,ExtensionMethods,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ExtensionMethods.cs,ToFriendlyName,The following statement contains a magic number: if (String.Equals(frameworkName.Framework' ".NETPortable"' StringComparison.OrdinalIgnoreCase))              {                  sb.Append("Portable Class Library");                    // Recursively parse the profile                  if (allowRecurseProfile)                  {                      sb.Append(" (");                        var profiles = frameworkName.GetShortFolderName()                          .Replace("portable-"' string.Empty)                          .Replace("portable40-"' string.Empty)                          .Replace("portable45-"' string.Empty)                          .Split('+');                        sb.Append(String.Join("' "'                          profiles.Select(s => NuGetFramework.Parse(s).ToFriendlyName(allowRecurseProfile: false))));                        sb.Append(")");                  }              }              else              {                  string version = null;                  if (frameworkName.Version.Build == 0)                  {                      version = frameworkName.Version.ToString(2);                  }                  else if (frameworkName.Version.Revision == 0)                  {                      version = frameworkName.Version.ToString(3);                  }                  else                  {                      version = frameworkName.Version.ToString();                  }                    sb.AppendFormat("{0} {1}"' frameworkName.Framework' version);                  if (!String.IsNullOrEmpty(frameworkName.Profile))                  {                      sb.AppendFormat(" {0}"' frameworkName.Profile);                  }              }
Magic Number,NuGetGallery,ExtensionMethods,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ExtensionMethods.cs,ToFriendlyName,The following statement contains a magic number: if (String.Equals(frameworkName.Framework' ".NETPortable"' StringComparison.OrdinalIgnoreCase))              {                  sb.Append("Portable Class Library");                    // Recursively parse the profile                  if (allowRecurseProfile)                  {                      sb.Append(" (");                        var profiles = frameworkName.GetShortFolderName()                          .Replace("portable-"' string.Empty)                          .Replace("portable40-"' string.Empty)                          .Replace("portable45-"' string.Empty)                          .Split('+');                        sb.Append(String.Join("' "'                          profiles.Select(s => NuGetFramework.Parse(s).ToFriendlyName(allowRecurseProfile: false))));                        sb.Append(")");                  }              }              else              {                  string version = null;                  if (frameworkName.Version.Build == 0)                  {                      version = frameworkName.Version.ToString(2);                  }                  else if (frameworkName.Version.Revision == 0)                  {                      version = frameworkName.Version.ToString(3);                  }                  else                  {                      version = frameworkName.Version.ToString();                  }                    sb.AppendFormat("{0} {1}"' frameworkName.Framework' version);                  if (!String.IsNullOrEmpty(frameworkName.Profile))                  {                      sb.AppendFormat(" {0}"' frameworkName.Profile);                  }              }
Magic Number,NuGetGallery,ExtensionMethods,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ExtensionMethods.cs,GetCurrentUser,The following statement contains a magic number: if (user == null)              {                  // Unauthorized! If we get here it's because a valid session token was presented' but the                  // user doesn't exist any more. So we just have a generic error.                  throw new HttpException(401' Strings.Unauthorized);              }
Magic Number,NuGetGallery,FormsAuthenticationService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\FormsAuthenticationService.cs,SetAuthCookie,The following statement contains a magic number: var ticket = new FormsAuthenticationTicket(                  version: 1'                  name: userName'                  issueDate: DateTime.UtcNow'                  expiration: DateTime.UtcNow.AddYears(200)'                  isPersistent: createPersistentCookie'                  userData: formattedRoles                  );
Magic Number,NuGetGallery,UserService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\UserService.cs,FindByEmailAddress,The following statement contains a magic number: var allMatches = UserRepository.GetAll()                  .Include(u => u.Credentials)                  .Include(u => u.Roles)                  .Where(u => u.EmailAddress == emailAddress)                  .Take(2)                  .ToList();
Magic Number,NuGetGallery,UrlExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\UrlExtensions.cs,GetCanonicalUrl,The following statement contains a magic number: if (builder.Host.StartsWith("www."' StringComparison.OrdinalIgnoreCase))              {                  builder.Host = builder.Host.Substring(4);              }
Magic Number,NuGetGallery,DisplayPackageViewModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\ViewModels\DisplayPackageViewModel.cs,SetPendingMetadata,The following statement contains a magic number: if (pendingMetadata.TriedCount < 3)              {                  Authors = pendingMetadata.Authors;                  Copyright = pendingMetadata.Copyright;                  Description = pendingMetadata.Description;                  IconUrl = pendingMetadata.IconUrl;                  LicenseUrl = pendingMetadata.LicenseUrl;                  ProjectUrl = pendingMetadata.ProjectUrl;                  ReleaseNotes = pendingMetadata.ReleaseNotes;                  Tags = pendingMetadata.Tags.ToStringSafe().Split(new[] { ' '' ''' }' StringSplitOptions.RemoveEmptyEntries);                  Title = pendingMetadata.Title;              }
Magic Number,NuGetGallery,LuceneSearchService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\LuceneSearchService.cs,CreateDependency,The following statement contains a magic number: return new PackageDependency              {                  Id = parts.Length > 0 ? parts[0] : null'                  VersionSpec = parts.Length > 1 ? parts[1] : null'                  TargetFramework = parts.Length > 2 ? parts[2] : null'              };
Magic Number,NuGetGallery,LuceneSearchService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\LuceneSearchService.cs,CreateDependency,The following statement contains a magic number: return new PackageDependency              {                  Id = parts.Length > 0 ? parts[0] : null'                  VersionSpec = parts.Length > 1 ? parts[1] : null'                  TargetFramework = parts.Length > 2 ? parts[2] : null'              };
Magic Number,NuGetGallery.Areas.Admin.Controllers,DeleteController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\DeleteController.cs,Search,The following statement contains a magic number: foreach (var queryPart in queryParts)              {                  // Don't make the same query twice.                  if (!completedQueryParts.Add(queryPart.Trim()))                  {                      continue;                  }                    var splitQueryPart = queryPart.Split(new[] {' '}' StringSplitOptions.RemoveEmptyEntries);                  if (splitQueryPart.Length == 1)                  {                      var resultingRegistration = _packageService.FindPackageRegistrationById(splitQueryPart[0].Trim());                      if (resultingRegistration != null)                      {                          packages.AddRange(resultingRegistration                              .Packages                              .OrderBy(p => NuGetVersion.Parse(p.NormalizedVersion)));                      }                  }                  else if (splitQueryPart.Length == 2)                  {                      var resultingPackage = _packageService.FindPackageByIdAndVersionStrict(splitQueryPart[0].Trim()' splitQueryPart[1].Trim());                      if (resultingPackage != null)                      {                          packages.Add(resultingPackage);                      }                  }              }
Magic Number,NuGetGallery.Areas.Admin.Controllers,DeleteController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\DeleteController.cs,ReflowBulk,The following statement contains a magic number: try              {                  var requests = new List<HardDeleteReflowRequest>();                    foreach (var line in lines)                  {                      var parts = line.Split(new char[0]' StringSplitOptions.RemoveEmptyEntries);                        if (parts.Length != 2)                      {                          throw new UserSafeException(                              $"Couldn't parse the list of hard-deleted packages to reflow in bulk: could not split \"{line}\" into ID and version!");                      }                        requests.Add(new HardDeleteReflowRequest() { Id = parts[0]' Version = parts[1] });                  }                    return View(nameof(Reflow)' new HardDeleteReflowBulkRequestConfirmation() { Requests = requests });              }              catch (Exception e)              {                  _telemetryService.TraceException(e);                    TempData["Message"] = e.GetUserSafeMessage();                    return View(nameof(Reflow));              }
Magic Number,NuGetGallery.Areas.Admin.Controllers,ConfigController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Controllers\ConfigController.cs,Index,The following statement contains a magic number: var settings = (from p in typeof(IAppConfiguration).GetProperties(BindingFlags.Public | BindingFlags.Instance)                          where p.CanRead                          select p)                         .ToDictionary(p => p.Name' p =>                         {                             var propertyType = p.PropertyType;                             var propertyValue = p.GetValue(_config.Current);                               if (propertyValue != null && p.Name.ToLowerInvariant().Contains("connectionstring"))                             {                                 propertyValue = new string('*'' 10);                             }                               return Tuple.Create(propertyType' propertyValue);                         });
Magic Number,NuGetGallery.Areas.Admin,SupportRequestDbModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Migrations\201602111647053_SupportRequestDbModel.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Admins"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          PagerDutyUsername = c.String(nullable: false' maxLength: 255' unicode: false)'                          GalleryUsername = c.String(nullable: false' maxLength: 255' unicode: false)'                          AccessDisabled = c.Boolean(nullable: false)'                      })                  .PrimaryKey(t => t.Key)                  .Index(t => t.PagerDutyUsername)                  .Index(t => t.GalleryUsername);
Magic Number,NuGetGallery.Areas.Admin,SupportRequestDbModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Migrations\201602111647053_SupportRequestDbModel.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Admins"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          PagerDutyUsername = c.String(nullable: false' maxLength: 255' unicode: false)'                          GalleryUsername = c.String(nullable: false' maxLength: 255' unicode: false)'                          AccessDisabled = c.Boolean(nullable: false)'                      })                  .PrimaryKey(t => t.Key)                  .Index(t => t.PagerDutyUsername)                  .Index(t => t.GalleryUsername);
Magic Number,NuGetGallery.Areas.Admin,SupportRequestDbModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Migrations\201602111647053_SupportRequestDbModel.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Issues"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          CreatedBy = c.String(maxLength: 50' unicode: false)'                          CreatedDate = c.DateTime(nullable: false)'                          IssueTitle = c.String(nullable: false' maxLength: 1000' unicode: false)'                          Details = c.String(nullable: false' unicode: false)'                          SiteRoot = c.String(unicode: false)'                          PackageId = c.String(nullable: false' maxLength: 300' unicode: false)'                          PackageVersion = c.String(nullable: false' maxLength: 300' unicode: false)'                          OwnerEmail = c.String(nullable: false' maxLength: 100' unicode: false)'                          Reason = c.String(maxLength: 100' unicode: false)'                          AssignedToId = c.Int()'                          IssueStatusId = c.Int(nullable: false)'                          PackageRegistrationKey = c.Int()'                          UserKey = c.Int()'                      })                  .PrimaryKey(t => t.Key)                  .ForeignKey("dbo.IssueStatus"' t => t.IssueStatusId' cascadeDelete: true)                  .ForeignKey("dbo.Admins"' t => t.AssignedToId)                  .Index(t => t.AssignedToId)                  .Index(t => t.IssueStatusId);
Magic Number,NuGetGallery.Areas.Admin,SupportRequestDbModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Migrations\201602111647053_SupportRequestDbModel.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Issues"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          CreatedBy = c.String(maxLength: 50' unicode: false)'                          CreatedDate = c.DateTime(nullable: false)'                          IssueTitle = c.String(nullable: false' maxLength: 1000' unicode: false)'                          Details = c.String(nullable: false' unicode: false)'                          SiteRoot = c.String(unicode: false)'                          PackageId = c.String(nullable: false' maxLength: 300' unicode: false)'                          PackageVersion = c.String(nullable: false' maxLength: 300' unicode: false)'                          OwnerEmail = c.String(nullable: false' maxLength: 100' unicode: false)'                          Reason = c.String(maxLength: 100' unicode: false)'                          AssignedToId = c.Int()'                          IssueStatusId = c.Int(nullable: false)'                          PackageRegistrationKey = c.Int()'                          UserKey = c.Int()'                      })                  .PrimaryKey(t => t.Key)                  .ForeignKey("dbo.IssueStatus"' t => t.IssueStatusId' cascadeDelete: true)                  .ForeignKey("dbo.Admins"' t => t.AssignedToId)                  .Index(t => t.AssignedToId)                  .Index(t => t.IssueStatusId);
Magic Number,NuGetGallery.Areas.Admin,SupportRequestDbModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Migrations\201602111647053_SupportRequestDbModel.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Issues"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          CreatedBy = c.String(maxLength: 50' unicode: false)'                          CreatedDate = c.DateTime(nullable: false)'                          IssueTitle = c.String(nullable: false' maxLength: 1000' unicode: false)'                          Details = c.String(nullable: false' unicode: false)'                          SiteRoot = c.String(unicode: false)'                          PackageId = c.String(nullable: false' maxLength: 300' unicode: false)'                          PackageVersion = c.String(nullable: false' maxLength: 300' unicode: false)'                          OwnerEmail = c.String(nullable: false' maxLength: 100' unicode: false)'                          Reason = c.String(maxLength: 100' unicode: false)'                          AssignedToId = c.Int()'                          IssueStatusId = c.Int(nullable: false)'                          PackageRegistrationKey = c.Int()'                          UserKey = c.Int()'                      })                  .PrimaryKey(t => t.Key)                  .ForeignKey("dbo.IssueStatus"' t => t.IssueStatusId' cascadeDelete: true)                  .ForeignKey("dbo.Admins"' t => t.AssignedToId)                  .Index(t => t.AssignedToId)                  .Index(t => t.IssueStatusId);
Magic Number,NuGetGallery.Areas.Admin,SupportRequestDbModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Migrations\201602111647053_SupportRequestDbModel.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Issues"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          CreatedBy = c.String(maxLength: 50' unicode: false)'                          CreatedDate = c.DateTime(nullable: false)'                          IssueTitle = c.String(nullable: false' maxLength: 1000' unicode: false)'                          Details = c.String(nullable: false' unicode: false)'                          SiteRoot = c.String(unicode: false)'                          PackageId = c.String(nullable: false' maxLength: 300' unicode: false)'                          PackageVersion = c.String(nullable: false' maxLength: 300' unicode: false)'                          OwnerEmail = c.String(nullable: false' maxLength: 100' unicode: false)'                          Reason = c.String(maxLength: 100' unicode: false)'                          AssignedToId = c.Int()'                          IssueStatusId = c.Int(nullable: false)'                          PackageRegistrationKey = c.Int()'                          UserKey = c.Int()'                      })                  .PrimaryKey(t => t.Key)                  .ForeignKey("dbo.IssueStatus"' t => t.IssueStatusId' cascadeDelete: true)                  .ForeignKey("dbo.Admins"' t => t.AssignedToId)                  .Index(t => t.AssignedToId)                  .Index(t => t.IssueStatusId);
Magic Number,NuGetGallery.Areas.Admin,SupportRequestDbModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Migrations\201602111647053_SupportRequestDbModel.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Issues"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          CreatedBy = c.String(maxLength: 50' unicode: false)'                          CreatedDate = c.DateTime(nullable: false)'                          IssueTitle = c.String(nullable: false' maxLength: 1000' unicode: false)'                          Details = c.String(nullable: false' unicode: false)'                          SiteRoot = c.String(unicode: false)'                          PackageId = c.String(nullable: false' maxLength: 300' unicode: false)'                          PackageVersion = c.String(nullable: false' maxLength: 300' unicode: false)'                          OwnerEmail = c.String(nullable: false' maxLength: 100' unicode: false)'                          Reason = c.String(maxLength: 100' unicode: false)'                          AssignedToId = c.Int()'                          IssueStatusId = c.Int(nullable: false)'                          PackageRegistrationKey = c.Int()'                          UserKey = c.Int()'                      })                  .PrimaryKey(t => t.Key)                  .ForeignKey("dbo.IssueStatus"' t => t.IssueStatusId' cascadeDelete: true)                  .ForeignKey("dbo.Admins"' t => t.AssignedToId)                  .Index(t => t.AssignedToId)                  .Index(t => t.IssueStatusId);
Magic Number,NuGetGallery.Areas.Admin,SupportRequestDbModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Migrations\201602111647053_SupportRequestDbModel.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Issues"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          CreatedBy = c.String(maxLength: 50' unicode: false)'                          CreatedDate = c.DateTime(nullable: false)'                          IssueTitle = c.String(nullable: false' maxLength: 1000' unicode: false)'                          Details = c.String(nullable: false' unicode: false)'                          SiteRoot = c.String(unicode: false)'                          PackageId = c.String(nullable: false' maxLength: 300' unicode: false)'                          PackageVersion = c.String(nullable: false' maxLength: 300' unicode: false)'                          OwnerEmail = c.String(nullable: false' maxLength: 100' unicode: false)'                          Reason = c.String(maxLength: 100' unicode: false)'                          AssignedToId = c.Int()'                          IssueStatusId = c.Int(nullable: false)'                          PackageRegistrationKey = c.Int()'                          UserKey = c.Int()'                      })                  .PrimaryKey(t => t.Key)                  .ForeignKey("dbo.IssueStatus"' t => t.IssueStatusId' cascadeDelete: true)                  .ForeignKey("dbo.Admins"' t => t.AssignedToId)                  .Index(t => t.AssignedToId)                  .Index(t => t.IssueStatusId);
Magic Number,NuGetGallery.Areas.Admin,SupportRequestDbModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Migrations\201602111647053_SupportRequestDbModel.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.IssueStatus"'                  c => new                      {                          Key = c.Int(nullable: false)'                          Name = c.String(maxLength: 200' unicode: false)'                      })                  .PrimaryKey(t => t.Key)                  .Index(t => t.Name);
Magic Number,NuGetGallery.Areas.Admin,PackageInfoIsOptional,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Migrations\201602191039005_PackageInfoIsOptional.cs,Up,The following statement contains a magic number: AlterColumn("dbo.Issues"' "PackageId"' c => c.String(maxLength: 300' unicode: false));
Magic Number,NuGetGallery.Areas.Admin,PackageInfoIsOptional,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Migrations\201602191039005_PackageInfoIsOptional.cs,Up,The following statement contains a magic number: AlterColumn("dbo.Issues"' "PackageVersion"' c => c.String(maxLength: 300' unicode: false));
Magic Number,NuGetGallery.Areas.Admin,PackageInfoIsOptional,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Migrations\201602191039005_PackageInfoIsOptional.cs,Down,The following statement contains a magic number: AlterColumn("dbo.Issues"' "PackageVersion"' c => c.String(nullable: false' maxLength: 300' unicode: false));
Magic Number,NuGetGallery.Areas.Admin,PackageInfoIsOptional,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Migrations\201602191039005_PackageInfoIsOptional.cs,Down,The following statement contains a magic number: AlterColumn("dbo.Issues"' "PackageId"' c => c.String(nullable: false' maxLength: 300' unicode: false));
Magic Number,NuGetGallery.Areas.Admin,SupportRequestService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Services\SupportRequestService.cs,GetFilteredIssuesQueryable,The following statement contains a magic number: if (!string.IsNullOrEmpty(galleryUsername))              {                  orderedQueryable = queryable                      .OrderByDescending(i => i.AssignedTo.GalleryUsername == galleryUsername)                      .ThenBy(i => i.IssueStatusId == IssueStatusKeys.New ? 1 : (i.IssueStatusId == IssueStatusKeys.Working ? 2 : (i.IssueStatusId == IssueStatusKeys.WaitingForCustomer ? 3 : 4)))                      .ThenByDescending(i => i.CreatedDate);              }              else              {                  orderedQueryable = queryable                      .OrderBy(i => i.IssueStatusId == IssueStatusKeys.New ? 1 : (i.IssueStatusId == IssueStatusKeys.Working ? 2 : (i.IssueStatusId == IssueStatusKeys.WaitingForCustomer ? 3 : 4)))                      .ThenByDescending(i => i.CreatedDate);              }
Magic Number,NuGetGallery.Areas.Admin,SupportRequestService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Services\SupportRequestService.cs,GetFilteredIssuesQueryable,The following statement contains a magic number: if (!string.IsNullOrEmpty(galleryUsername))              {                  orderedQueryable = queryable                      .OrderByDescending(i => i.AssignedTo.GalleryUsername == galleryUsername)                      .ThenBy(i => i.IssueStatusId == IssueStatusKeys.New ? 1 : (i.IssueStatusId == IssueStatusKeys.Working ? 2 : (i.IssueStatusId == IssueStatusKeys.WaitingForCustomer ? 3 : 4)))                      .ThenByDescending(i => i.CreatedDate);              }              else              {                  orderedQueryable = queryable                      .OrderBy(i => i.IssueStatusId == IssueStatusKeys.New ? 1 : (i.IssueStatusId == IssueStatusKeys.Working ? 2 : (i.IssueStatusId == IssueStatusKeys.WaitingForCustomer ? 3 : 4)))                      .ThenByDescending(i => i.CreatedDate);              }
Magic Number,NuGetGallery.Areas.Admin,SupportRequestService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Services\SupportRequestService.cs,GetFilteredIssuesQueryable,The following statement contains a magic number: if (!string.IsNullOrEmpty(galleryUsername))              {                  orderedQueryable = queryable                      .OrderByDescending(i => i.AssignedTo.GalleryUsername == galleryUsername)                      .ThenBy(i => i.IssueStatusId == IssueStatusKeys.New ? 1 : (i.IssueStatusId == IssueStatusKeys.Working ? 2 : (i.IssueStatusId == IssueStatusKeys.WaitingForCustomer ? 3 : 4)))                      .ThenByDescending(i => i.CreatedDate);              }              else              {                  orderedQueryable = queryable                      .OrderBy(i => i.IssueStatusId == IssueStatusKeys.New ? 1 : (i.IssueStatusId == IssueStatusKeys.Working ? 2 : (i.IssueStatusId == IssueStatusKeys.WaitingForCustomer ? 3 : 4)))                      .ThenByDescending(i => i.CreatedDate);              }
Magic Number,NuGetGallery.Areas.Admin,SupportRequestService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Services\SupportRequestService.cs,GetFilteredIssuesQueryable,The following statement contains a magic number: if (!string.IsNullOrEmpty(galleryUsername))              {                  orderedQueryable = queryable                      .OrderByDescending(i => i.AssignedTo.GalleryUsername == galleryUsername)                      .ThenBy(i => i.IssueStatusId == IssueStatusKeys.New ? 1 : (i.IssueStatusId == IssueStatusKeys.Working ? 2 : (i.IssueStatusId == IssueStatusKeys.WaitingForCustomer ? 3 : 4)))                      .ThenByDescending(i => i.CreatedDate);              }              else              {                  orderedQueryable = queryable                      .OrderBy(i => i.IssueStatusId == IssueStatusKeys.New ? 1 : (i.IssueStatusId == IssueStatusKeys.Working ? 2 : (i.IssueStatusId == IssueStatusKeys.WaitingForCustomer ? 3 : 4)))                      .ThenByDescending(i => i.CreatedDate);              }
Magic Number,NuGetGallery.Areas.Admin,SupportRequestService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Services\SupportRequestService.cs,GetFilteredIssuesQueryable,The following statement contains a magic number: if (!string.IsNullOrEmpty(galleryUsername))              {                  orderedQueryable = queryable                      .OrderByDescending(i => i.AssignedTo.GalleryUsername == galleryUsername)                      .ThenBy(i => i.IssueStatusId == IssueStatusKeys.New ? 1 : (i.IssueStatusId == IssueStatusKeys.Working ? 2 : (i.IssueStatusId == IssueStatusKeys.WaitingForCustomer ? 3 : 4)))                      .ThenByDescending(i => i.CreatedDate);              }              else              {                  orderedQueryable = queryable                      .OrderBy(i => i.IssueStatusId == IssueStatusKeys.New ? 1 : (i.IssueStatusId == IssueStatusKeys.Working ? 2 : (i.IssueStatusId == IssueStatusKeys.WaitingForCustomer ? 3 : 4)))                      .ThenByDescending(i => i.CreatedDate);              }
Magic Number,NuGetGallery.Areas.Admin,SupportRequestService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Services\SupportRequestService.cs,GetFilteredIssuesQueryable,The following statement contains a magic number: if (!string.IsNullOrEmpty(galleryUsername))              {                  orderedQueryable = queryable                      .OrderByDescending(i => i.AssignedTo.GalleryUsername == galleryUsername)                      .ThenBy(i => i.IssueStatusId == IssueStatusKeys.New ? 1 : (i.IssueStatusId == IssueStatusKeys.Working ? 2 : (i.IssueStatusId == IssueStatusKeys.WaitingForCustomer ? 3 : 4)))                      .ThenByDescending(i => i.CreatedDate);              }              else              {                  orderedQueryable = queryable                      .OrderBy(i => i.IssueStatusId == IssueStatusKeys.New ? 1 : (i.IssueStatusId == IssueStatusKeys.Working ? 2 : (i.IssueStatusId == IssueStatusKeys.WaitingForCustomer ? 3 : 4)))                      .ThenByDescending(i => i.CreatedDate);              }
Magic Number,NuGetGallery.Areas.Admin.Models,LuceneInfoModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Models\LuceneInfoModel.cs,FormatIndexSize,The following statement contains a magic number: if (IndexSize < 1024)              {                  return IndexSize.ToString("0"' CultureInfo.CurrentCulture) + "b";              }              // Less than an MB?              else if (IndexSize < (1024 * 1024))              {                  return (IndexSize / (double)1024).ToString("0.00"' CultureInfo.CurrentCulture) + "KB";              }              // Less than a GB?              else if (IndexSize < (1024 * 1024 * 1024))              {                  return (IndexSize / (double)(1024 * 1024)).ToString("0.00"' CultureInfo.CurrentCulture) + "MB";              }
Magic Number,NuGetGallery.Areas.Admin.Models,LuceneInfoModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Models\LuceneInfoModel.cs,FormatIndexSize,The following statement contains a magic number: if (IndexSize < 1024)              {                  return IndexSize.ToString("0"' CultureInfo.CurrentCulture) + "b";              }              // Less than an MB?              else if (IndexSize < (1024 * 1024))              {                  return (IndexSize / (double)1024).ToString("0.00"' CultureInfo.CurrentCulture) + "KB";              }              // Less than a GB?              else if (IndexSize < (1024 * 1024 * 1024))              {                  return (IndexSize / (double)(1024 * 1024)).ToString("0.00"' CultureInfo.CurrentCulture) + "MB";              }
Magic Number,NuGetGallery.Areas.Admin.Models,LuceneInfoModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Models\LuceneInfoModel.cs,FormatIndexSize,The following statement contains a magic number: if (IndexSize < 1024)              {                  return IndexSize.ToString("0"' CultureInfo.CurrentCulture) + "b";              }              // Less than an MB?              else if (IndexSize < (1024 * 1024))              {                  return (IndexSize / (double)1024).ToString("0.00"' CultureInfo.CurrentCulture) + "KB";              }              // Less than a GB?              else if (IndexSize < (1024 * 1024 * 1024))              {                  return (IndexSize / (double)(1024 * 1024)).ToString("0.00"' CultureInfo.CurrentCulture) + "MB";              }
Magic Number,NuGetGallery.Areas.Admin.Models,LuceneInfoModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Models\LuceneInfoModel.cs,FormatIndexSize,The following statement contains a magic number: if (IndexSize < 1024)              {                  return IndexSize.ToString("0"' CultureInfo.CurrentCulture) + "b";              }              // Less than an MB?              else if (IndexSize < (1024 * 1024))              {                  return (IndexSize / (double)1024).ToString("0.00"' CultureInfo.CurrentCulture) + "KB";              }              // Less than a GB?              else if (IndexSize < (1024 * 1024 * 1024))              {                  return (IndexSize / (double)(1024 * 1024)).ToString("0.00"' CultureInfo.CurrentCulture) + "MB";              }
Magic Number,NuGetGallery.Areas.Admin.Models,LuceneInfoModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Models\LuceneInfoModel.cs,FormatIndexSize,The following statement contains a magic number: if (IndexSize < 1024)              {                  return IndexSize.ToString("0"' CultureInfo.CurrentCulture) + "b";              }              // Less than an MB?              else if (IndexSize < (1024 * 1024))              {                  return (IndexSize / (double)1024).ToString("0.00"' CultureInfo.CurrentCulture) + "KB";              }              // Less than a GB?              else if (IndexSize < (1024 * 1024 * 1024))              {                  return (IndexSize / (double)(1024 * 1024)).ToString("0.00"' CultureInfo.CurrentCulture) + "MB";              }
Magic Number,NuGetGallery.Areas.Admin.Models,LuceneInfoModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Models\LuceneInfoModel.cs,FormatIndexSize,The following statement contains a magic number: if (IndexSize < 1024)              {                  return IndexSize.ToString("0"' CultureInfo.CurrentCulture) + "b";              }              // Less than an MB?              else if (IndexSize < (1024 * 1024))              {                  return (IndexSize / (double)1024).ToString("0.00"' CultureInfo.CurrentCulture) + "KB";              }              // Less than a GB?              else if (IndexSize < (1024 * 1024 * 1024))              {                  return (IndexSize / (double)(1024 * 1024)).ToString("0.00"' CultureInfo.CurrentCulture) + "MB";              }
Magic Number,NuGetGallery.Areas.Admin.Models,LuceneInfoModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Models\LuceneInfoModel.cs,FormatIndexSize,The following statement contains a magic number: if (IndexSize < 1024)              {                  return IndexSize.ToString("0"' CultureInfo.CurrentCulture) + "b";              }              // Less than an MB?              else if (IndexSize < (1024 * 1024))              {                  return (IndexSize / (double)1024).ToString("0.00"' CultureInfo.CurrentCulture) + "KB";              }              // Less than a GB?              else if (IndexSize < (1024 * 1024 * 1024))              {                  return (IndexSize / (double)(1024 * 1024)).ToString("0.00"' CultureInfo.CurrentCulture) + "MB";              }
Magic Number,NuGetGallery.Areas.Admin.Models,LuceneInfoModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Models\LuceneInfoModel.cs,FormatIndexSize,The following statement contains a magic number: if (IndexSize < 1024)              {                  return IndexSize.ToString("0"' CultureInfo.CurrentCulture) + "b";              }              // Less than an MB?              else if (IndexSize < (1024 * 1024))              {                  return (IndexSize / (double)1024).ToString("0.00"' CultureInfo.CurrentCulture) + "KB";              }              // Less than a GB?              else if (IndexSize < (1024 * 1024 * 1024))              {                  return (IndexSize / (double)(1024 * 1024)).ToString("0.00"' CultureInfo.CurrentCulture) + "MB";              }
Magic Number,NuGetGallery.Areas.Admin.Models,LuceneInfoModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Models\LuceneInfoModel.cs,FormatIndexSize,The following statement contains a magic number: if (IndexSize < 1024)              {                  return IndexSize.ToString("0"' CultureInfo.CurrentCulture) + "b";              }              // Less than an MB?              else if (IndexSize < (1024 * 1024))              {                  return (IndexSize / (double)1024).ToString("0.00"' CultureInfo.CurrentCulture) + "KB";              }              // Less than a GB?              else if (IndexSize < (1024 * 1024 * 1024))              {                  return (IndexSize / (double)(1024 * 1024)).ToString("0.00"' CultureInfo.CurrentCulture) + "MB";              }
Magic Number,NuGetGallery.Areas.Admin.Models,LuceneInfoModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Models\LuceneInfoModel.cs,FormatIndexSize,The following statement contains a magic number: return (IndexSize / (double)(1024 * 1024 * 1024)).ToString("0.00"' CultureInfo.CurrentCulture) + "GB";
Magic Number,NuGetGallery.Areas.Admin.Models,LuceneInfoModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Models\LuceneInfoModel.cs,FormatIndexSize,The following statement contains a magic number: return (IndexSize / (double)(1024 * 1024 * 1024)).ToString("0.00"' CultureInfo.CurrentCulture) + "GB";
Magic Number,NuGetGallery.Areas.Admin.Models,LuceneInfoModel,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Models\LuceneInfoModel.cs,FormatIndexSize,The following statement contains a magic number: return (IndexSize / (double)(1024 * 1024 * 1024)).ToString("0.00"' CultureInfo.CurrentCulture) + "GB";
Magic Number,NuGetGallery.Areas.Admin.Services,ValidationAdminService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\Services\ValidationAdminService.cs,ParseQueryToLines,The following statement contains a magic number: var normalizedQuery = Regex.Replace(                  query'                  @"[^\S\r\n]+"'                  " "'                  RegexOptions.None'                  TimeSpan.FromSeconds(10));
Magic Number,NuGetGallery.Authentication,AuthenticationService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AuthenticationService.cs,FormatCredentialType,The following statement contains a magic number: if (splitted.Length < 2)              {                  return credentialType;              }
Magic Number,NuGetGallery.Authentication,AuthenticationService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AuthenticationService.cs,FindByUserNameOrEmail,The following statement contains a magic number: if (user == null)              {                  var allMatches = users                      .Where(u => u.EmailAddress == userNameOrEmail)                      .Take(2)                      .ToList();                    if (allMatches.Count == 1)                  {                      user = allMatches[0];                  }                  else                  {                      // If multiple matches' leave it null to signal no unique email address                      _trace.Warning("Multiple user accounts with email address: " + userNameOrEmail + " found: " + String.Join("' "' allMatches.Select(u => u.Username)));                  }              }
Magic Number,NuGetGallery.Configuration,ConfigurationService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Configuration\ConfigurationService.cs,GetHttpSiteRoot,The following statement contains a magic number: if (siteRoot.StartsWith("https://"' StringComparison.OrdinalIgnoreCase))              {                  siteRoot = "http://" + siteRoot.Substring(8);              }
Magic Number,NuGetGallery.Configuration,ConfigurationService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Configuration\ConfigurationService.cs,GetHttpsSiteRoot,The following statement contains a magic number: return "https://" + siteRoot.Substring(7);
Magic Number,NuGetGallery.Configuration,SmtpUri,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Configuration\SmtpUri.cs,SmtpUri,The following statement contains a magic number: Port = uri.IsDefaultPort ? 25 : uri.Port;
Magic Number,NuGetGallery.Diagnostics,TraceDiagnosticsSource,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Diagnostics\TraceDiagnosticsSource.cs,PerfEvent,The following statement contains a magic number: PerfCounters.AddSample(name' sampleSize: 1000' value: time.TotalMilliseconds);
Magic Number,NuGetGallery.Authentication.Providers.ApiKey,ApiKeyAuthenticationHandler,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\Providers\ApiKey\ApiKeyAuthenticationHandler.cs,ApplyResponseChallengeAsync,The following statement contains a magic number: if (Response.StatusCode == 401 && (Helper.LookupChallenge(TheOptions.AuthenticationType' TheOptions.AuthenticationMode) != null))              {                  var apiKey = Request.Headers[TheOptions.ApiKeyHeaderName];                  if (!String.IsNullOrEmpty(apiKey))                  {                      // Had an API key' but it didn't match a user                      WriteStatus(Strings.ApiKeyNotAuthorized' 403);                  }                  else                  {                      // Keep the 401' but add the authentication information                      WriteStatus(Strings.ApiKeyRequired' 401);                      Response.Headers.Append("WWW-Authenticate"' String.Format(                          CultureInfo.InvariantCulture'                          "ApiKey realm=\"{0}\""'                          Request.Uri.Host));                  }              }              else              {                  await base.ApplyResponseChallengeAsync();              }
Magic Number,NuGetGallery.Authentication.Providers.ApiKey,ApiKeyAuthenticationHandler,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\Providers\ApiKey\ApiKeyAuthenticationHandler.cs,ApplyResponseChallengeAsync,The following statement contains a magic number: if (Response.StatusCode == 401 && (Helper.LookupChallenge(TheOptions.AuthenticationType' TheOptions.AuthenticationMode) != null))              {                  var apiKey = Request.Headers[TheOptions.ApiKeyHeaderName];                  if (!String.IsNullOrEmpty(apiKey))                  {                      // Had an API key' but it didn't match a user                      WriteStatus(Strings.ApiKeyNotAuthorized' 403);                  }                  else                  {                      // Keep the 401' but add the authentication information                      WriteStatus(Strings.ApiKeyRequired' 401);                      Response.Headers.Append("WWW-Authenticate"' String.Format(                          CultureInfo.InvariantCulture'                          "ApiKey realm=\"{0}\""'                          Request.Uri.Host));                  }              }              else              {                  await base.ApplyResponseChallengeAsync();              }
Magic Number,NuGetGallery.Authentication.Providers.ApiKey,ApiKeyAuthenticationHandler,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\Providers\ApiKey\ApiKeyAuthenticationHandler.cs,ApplyResponseChallengeAsync,The following statement contains a magic number: if (Response.StatusCode == 401 && (Helper.LookupChallenge(TheOptions.AuthenticationType' TheOptions.AuthenticationMode) != null))              {                  var apiKey = Request.Headers[TheOptions.ApiKeyHeaderName];                  if (!String.IsNullOrEmpty(apiKey))                  {                      // Had an API key' but it didn't match a user                      WriteStatus(Strings.ApiKeyNotAuthorized' 403);                  }                  else                  {                      // Keep the 401' but add the authentication information                      WriteStatus(Strings.ApiKeyRequired' 401);                      Response.Headers.Append("WWW-Authenticate"' String.Format(                          CultureInfo.InvariantCulture'                          "ApiKey realm=\"{0}\""'                          Request.Uri.Host));                  }              }              else              {                  await base.ApplyResponseChallengeAsync();              }
Magic Number,NuGetGallery.Authentication.Providers.ApiKey,ApiKeyAuthenticationHandler,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\Providers\ApiKey\ApiKeyAuthenticationHandler.cs,AuthenticateCoreAsync,The following statement contains a magic number: if (!string.IsNullOrEmpty(apiKey))              {                  // Get the user                  var authUser = await Auth.Authenticate(apiKey);                  if (authUser != null)                  {                      var credential = authUser.CredentialUsed;                      var user = authUser.User;                        // Ensure that the user matches the owner scope                      if (!user.MatchesOwnerScope(credential))                      {                          WriteStatus(Strings.ApiKeyNotAuthorized' 403);                      }                        // Set the current user                      Context.Set(Constants.CurrentUserOwinEnvironmentKey' authUser);                        // Fetch scopes and store them in a claim                      var scopes = JsonConvert.SerializeObject(                          credential.Scopes' Formatting.None);                        // Create authentication ticket                      return new AuthenticationTicket(                              AuthenticationService.CreateIdentity(                                  user'                                   AuthenticationTypes.ApiKey'                                   new Claim(NuGetClaims.ApiKey' apiKey)'                                  new Claim(NuGetClaims.Scope' scopes)'                                  new Claim(NuGetClaims.CredentialKey' credential.Key.ToString()))'                              new AuthenticationProperties());                  }                  else                  {                      // No user was matched                      Logger.WriteWarning("No match for API Key!");                  }              }              else              {                  Logger.WriteVerbose("No API Key Header found in request.");              }
Magic Number,NuGetGallery.Authentication.Providers.Cookie,LocalUserAuthenticator,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\Providers\LocalUser\LocalUserAuthenticator.cs,AttachToOwinApp,The following statement contains a magic number: var options = new CookieAuthenticationOptions              {                  AuthenticationType = AuthenticationTypes.LocalUser'                  AuthenticationMode = AuthenticationMode.Active'                  CookieHttpOnly = true'                  CookieSecure = cookieSecurity'                  LoginPath = new PathString("/users/account/LogOn")'                  ExpireTimeSpan = TimeSpan.FromHours(6)'                  SlidingExpiration = true              };
Magic Number,NuGetGallery.Filters,ApiAuthorizeAttribute,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Filters\ApiAuthorizeAttribute.cs,HandleUnauthorizedRequest,The following statement contains a magic number: owinContext.Response.StatusCode = 401;
Magic Number,NuGetGallery.Filters,CacheFilterAttribute,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Filters\CacheFilter.cs,CacheFilterAttribute,The following statement contains a magic number: Duration = 10;
Magic Number,NuGetGallery.Helpers,GravatarHelper,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Helpers\GravatarHelper.cs,Image,The following statement contains a magic number: if (size > 512)              {                  size = 512;              }
Magic Number,NuGetGallery.Helpers,GravatarHelper,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Helpers\GravatarHelper.cs,Image,The following statement contains a magic number: if (size > 512)              {                  size = 512;              }
Magic Number,NuGetGallery.Helpers,FileHelper,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Helpers\FileHelper.cs,ReadTextTruncated,The following statement contains a magic number: const int BufferSize = 2 * 1024;
Magic Number,NuGetGallery.Helpers,FileHelper,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Helpers\FileHelper.cs,ReadTextTruncated,The following statement contains a magic number: const int BufferSize = 2 * 1024;
Magic Number,NuGetGallery.Helpers,StringExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Helpers\StringExtensions.cs,Abbreviate,The following statement contains a magic number: int index = text.LastIndexOfAny(delimiters' length - 3);
Magic Number,NuGetGallery.Helpers,StringExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Helpers\StringExtensions.cs,Abbreviate,The following statement contains a magic number: if (index > (length / 2))              {                  return text.Substring(0' index) + "...";              }
Magic Number,NuGetGallery.Helpers,StringExtensions,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Helpers\StringExtensions.cs,Abbreviate,The following statement contains a magic number: return text.Substring(0' length - 3) + "...";
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,AppendBase32Padding,The following statement contains a magic number: int requiredPaddingCount = 8 - input.Length % 8;
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,AppendBase32Padding,The following statement contains a magic number: int requiredPaddingCount = 8 - input.Length % 8;
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,Decode,The following statement contains a magic number: if (base32String.Length % 8 != 0)              {                  throw new ArgumentException($"{nameof(base32String)} is not a valid base32 encoding");              }
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,Decode,The following statement contains a magic number: foreach (Char c in base32String)              {                  int byteOffset = bitLocation / 8;                  int bitOffset = bitLocation % 8;                    int index = Array.IndexOf(_encodingChars' c);                    if (index == -1)                  {                      throw new ArgumentException($"{nameof(base32String)} is not a valid base32 encoding");                  }                    byte val = (byte)index;                    // If we hit an equals sign' we need to stop processing                  if (val == PaddingCharacterIndex) { break; }                    // Locate bits in val correcty respective to the byte                  int shift = 3 - bitOffset;                  if (shift < 0)                  {                      output[byteOffset] |= (byte)(val >> (-shift));                  }                  else                  {                      output[byteOffset] |= (byte)(val << shift);                  }                    if ((shift < 0) && (byteOffset < output.Length - 1))                  {                      // remaining bits go into next byte                      output[byteOffset + 1] |= (byte)(val << (8 + shift));                  }                    bitLocation += 5;              }
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,Decode,The following statement contains a magic number: foreach (Char c in base32String)              {                  int byteOffset = bitLocation / 8;                  int bitOffset = bitLocation % 8;                    int index = Array.IndexOf(_encodingChars' c);                    if (index == -1)                  {                      throw new ArgumentException($"{nameof(base32String)} is not a valid base32 encoding");                  }                    byte val = (byte)index;                    // If we hit an equals sign' we need to stop processing                  if (val == PaddingCharacterIndex) { break; }                    // Locate bits in val correcty respective to the byte                  int shift = 3 - bitOffset;                  if (shift < 0)                  {                      output[byteOffset] |= (byte)(val >> (-shift));                  }                  else                  {                      output[byteOffset] |= (byte)(val << shift);                  }                    if ((shift < 0) && (byteOffset < output.Length - 1))                  {                      // remaining bits go into next byte                      output[byteOffset + 1] |= (byte)(val << (8 + shift));                  }                    bitLocation += 5;              }
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,Decode,The following statement contains a magic number: foreach (Char c in base32String)              {                  int byteOffset = bitLocation / 8;                  int bitOffset = bitLocation % 8;                    int index = Array.IndexOf(_encodingChars' c);                    if (index == -1)                  {                      throw new ArgumentException($"{nameof(base32String)} is not a valid base32 encoding");                  }                    byte val = (byte)index;                    // If we hit an equals sign' we need to stop processing                  if (val == PaddingCharacterIndex) { break; }                    // Locate bits in val correcty respective to the byte                  int shift = 3 - bitOffset;                  if (shift < 0)                  {                      output[byteOffset] |= (byte)(val >> (-shift));                  }                  else                  {                      output[byteOffset] |= (byte)(val << shift);                  }                    if ((shift < 0) && (byteOffset < output.Length - 1))                  {                      // remaining bits go into next byte                      output[byteOffset + 1] |= (byte)(val << (8 + shift));                  }                    bitLocation += 5;              }
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,Decode,The following statement contains a magic number: foreach (Char c in base32String)              {                  int byteOffset = bitLocation / 8;                  int bitOffset = bitLocation % 8;                    int index = Array.IndexOf(_encodingChars' c);                    if (index == -1)                  {                      throw new ArgumentException($"{nameof(base32String)} is not a valid base32 encoding");                  }                    byte val = (byte)index;                    // If we hit an equals sign' we need to stop processing                  if (val == PaddingCharacterIndex) { break; }                    // Locate bits in val correcty respective to the byte                  int shift = 3 - bitOffset;                  if (shift < 0)                  {                      output[byteOffset] |= (byte)(val >> (-shift));                  }                  else                  {                      output[byteOffset] |= (byte)(val << shift);                  }                    if ((shift < 0) && (byteOffset < output.Length - 1))                  {                      // remaining bits go into next byte                      output[byteOffset + 1] |= (byte)(val << (8 + shift));                  }                    bitLocation += 5;              }
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,Decode,The following statement contains a magic number: foreach (Char c in base32String)              {                  int byteOffset = bitLocation / 8;                  int bitOffset = bitLocation % 8;                    int index = Array.IndexOf(_encodingChars' c);                    if (index == -1)                  {                      throw new ArgumentException($"{nameof(base32String)} is not a valid base32 encoding");                  }                    byte val = (byte)index;                    // If we hit an equals sign' we need to stop processing                  if (val == PaddingCharacterIndex) { break; }                    // Locate bits in val correcty respective to the byte                  int shift = 3 - bitOffset;                  if (shift < 0)                  {                      output[byteOffset] |= (byte)(val >> (-shift));                  }                  else                  {                      output[byteOffset] |= (byte)(val << shift);                  }                    if ((shift < 0) && (byteOffset < output.Length - 1))                  {                      // remaining bits go into next byte                      output[byteOffset + 1] |= (byte)(val << (8 + shift));                  }                    bitLocation += 5;              }
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,Decode,The following statement contains a magic number: Array.Resize<byte>(ref output' bitLocation / 8);
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,GetTokenCount,The following statement contains a magic number: return (((data.Length * 8) + 39) / 40) * 8;
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,GetTokenCount,The following statement contains a magic number: return (((data.Length * 8) + 39) / 40) * 8;
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,GetTokenCount,The following statement contains a magic number: return (((data.Length * 8) + 39) / 40) * 8;
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,GetTokenCount,The following statement contains a magic number: return (((data.Length * 8) + 39) / 40) * 8;
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,GetByteCount,The following statement contains a magic number: return base32String.RemoveBase32Padding().Length * 5 / 8;
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,GetByteCount,The following statement contains a magic number: return base32String.RemoveBase32Padding().Length * 5 / 8;
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,GetToken,The following statement contains a magic number: int byteOffset = (index * 5) / 8;
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,GetToken,The following statement contains a magic number: int byteOffset = (index * 5) / 8;
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,GetToken,The following statement contains a magic number: if (byteOffset < data.Length)              {                  // Calculate which bits are used from the byte                  int bitOffset = (index * 5) % 8;                  int shift1 = bitOffset - 3;                    retval = data[byteOffset];                  if (shift1 < 0)                  {                      // Shift right                      retval >>= (-shift1);                  }                  else if (shift1 > 0)                  {                      // Shift left                      retval <<= shift1;                                            // If not last byte in input' include necessary bits from next byte in token                      if (byteOffset + 1 < data.Length)                      {                          int shift2 = 8 - shift1;                          byte b = data[byteOffset + 1];                          b >>= shift2;                          retval |= b;                      }                  } // (shift1 == 0) {  do nothing }                    // Mask to right 5 bits                  retval &= Bitmask;              }
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,GetToken,The following statement contains a magic number: if (byteOffset < data.Length)              {                  // Calculate which bits are used from the byte                  int bitOffset = (index * 5) % 8;                  int shift1 = bitOffset - 3;                    retval = data[byteOffset];                  if (shift1 < 0)                  {                      // Shift right                      retval >>= (-shift1);                  }                  else if (shift1 > 0)                  {                      // Shift left                      retval <<= shift1;                                            // If not last byte in input' include necessary bits from next byte in token                      if (byteOffset + 1 < data.Length)                      {                          int shift2 = 8 - shift1;                          byte b = data[byteOffset + 1];                          b >>= shift2;                          retval |= b;                      }                  } // (shift1 == 0) {  do nothing }                    // Mask to right 5 bits                  retval &= Bitmask;              }
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,GetToken,The following statement contains a magic number: if (byteOffset < data.Length)              {                  // Calculate which bits are used from the byte                  int bitOffset = (index * 5) % 8;                  int shift1 = bitOffset - 3;                    retval = data[byteOffset];                  if (shift1 < 0)                  {                      // Shift right                      retval >>= (-shift1);                  }                  else if (shift1 > 0)                  {                      // Shift left                      retval <<= shift1;                                            // If not last byte in input' include necessary bits from next byte in token                      if (byteOffset + 1 < data.Length)                      {                          int shift2 = 8 - shift1;                          byte b = data[byteOffset + 1];                          b >>= shift2;                          retval |= b;                      }                  } // (shift1 == 0) {  do nothing }                    // Mask to right 5 bits                  retval &= Bitmask;              }
Magic Number,NuGetGallery.Infrastructure.Authentication,Base32Encoder,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\Base32Encoder.cs,GetToken,The following statement contains a magic number: if (byteOffset < data.Length)              {                  // Calculate which bits are used from the byte                  int bitOffset = (index * 5) % 8;                  int shift1 = bitOffset - 3;                    retval = data[byteOffset];                  if (shift1 < 0)                  {                      // Shift right                      retval >>= (-shift1);                  }                  else if (shift1 > 0)                  {                      // Shift left                      retval <<= shift1;                                            // If not last byte in input' include necessary bits from next byte in token                      if (byteOffset + 1 < data.Length)                      {                          int shift2 = 8 - shift1;                          byte b = data[byteOffset + 1];                          b >>= shift2;                          retval |= b;                      }                  } // (shift1 == 0) {  do nothing }                    // Mask to right 5 bits                  retval &= Bitmask;              }
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,GenerateHashAsBytes,The following statement contains a magic number: return GenerateHashInternal(input' DefaultRng'                  prf: KeyDerivationPrf.HMACSHA256'                  iterCount: IterationCount'                  saltSize: 128 / 8'                  numBytesRequested: 256 / 8);
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,GenerateHashAsBytes,The following statement contains a magic number: return GenerateHashInternal(input' DefaultRng'                  prf: KeyDerivationPrf.HMACSHA256'                  iterCount: IterationCount'                  saltSize: 128 / 8'                  numBytesRequested: 256 / 8);
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,GenerateHashAsBytes,The following statement contains a magic number: return GenerateHashInternal(input' DefaultRng'                  prf: KeyDerivationPrf.HMACSHA256'                  iterCount: IterationCount'                  saltSize: 128 / 8'                  numBytesRequested: 256 / 8);
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,GenerateHashAsBytes,The following statement contains a magic number: return GenerateHashInternal(input' DefaultRng'                  prf: KeyDerivationPrf.HMACSHA256'                  iterCount: IterationCount'                  saltSize: 128 / 8'                  numBytesRequested: 256 / 8);
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,GenerateHashInternal,The following statement contains a magic number: var outputBytes = new byte[13 + salt.Length + subkey.Length];
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,GenerateHashInternal,The following statement contains a magic number: WriteNetworkByteOrder(outputBytes' 5' (uint)iterCount);
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,GenerateHashInternal,The following statement contains a magic number: WriteNetworkByteOrder(outputBytes' 9' (uint)saltSize);
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,GenerateHashInternal,The following statement contains a magic number: Buffer.BlockCopy(salt' 0' outputBytes' 13' salt.Length);
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,GenerateHashInternal,The following statement contains a magic number: Buffer.BlockCopy(subkey' 0' outputBytes' 13 + saltSize' subkey.Length);
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,VerifyHashInternal,The following statement contains a magic number: try              {                  // Read header information                  KeyDerivationPrf prf = (KeyDerivationPrf)ReadNetworkByteOrder(hashedData' 1);                  int iterCount = (int)ReadNetworkByteOrder(hashedData' 5);                  int saltLength = (int)ReadNetworkByteOrder(hashedData' 9);                    // Read the salt: must be >= 128 bits                  if (saltLength < 128 / 8)                  {                      return false;                  }                  byte[] salt = new byte[saltLength];                  Buffer.BlockCopy(hashedData' 13' salt' 0' salt.Length);                    // Read the subkey (the rest of the payload): must be >= 128 bits                  int subkeyLength = hashedData.Length - 13 - salt.Length;                  if (subkeyLength < 128 / 8)                  {                      return false;                  }                  byte[] expectedSubkey = new byte[subkeyLength];                  Buffer.BlockCopy(hashedData' 13 + salt.Length' expectedSubkey' 0' expectedSubkey.Length);                    // Hash the incoming credential and verify it                  byte[] actualSubkey = KeyDerivation.Pbkdf2(providedInput' salt' prf' iterCount' subkeyLength);                  return ByteArraysEqual(actualSubkey' expectedSubkey);              }              catch              {                  // This should never occur except in the case of a malformed payload' where                  // we might go off the end of the array. Regardless' a malformed payload                  // implies verification failed.                  return false;              }
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,VerifyHashInternal,The following statement contains a magic number: try              {                  // Read header information                  KeyDerivationPrf prf = (KeyDerivationPrf)ReadNetworkByteOrder(hashedData' 1);                  int iterCount = (int)ReadNetworkByteOrder(hashedData' 5);                  int saltLength = (int)ReadNetworkByteOrder(hashedData' 9);                    // Read the salt: must be >= 128 bits                  if (saltLength < 128 / 8)                  {                      return false;                  }                  byte[] salt = new byte[saltLength];                  Buffer.BlockCopy(hashedData' 13' salt' 0' salt.Length);                    // Read the subkey (the rest of the payload): must be >= 128 bits                  int subkeyLength = hashedData.Length - 13 - salt.Length;                  if (subkeyLength < 128 / 8)                  {                      return false;                  }                  byte[] expectedSubkey = new byte[subkeyLength];                  Buffer.BlockCopy(hashedData' 13 + salt.Length' expectedSubkey' 0' expectedSubkey.Length);                    // Hash the incoming credential and verify it                  byte[] actualSubkey = KeyDerivation.Pbkdf2(providedInput' salt' prf' iterCount' subkeyLength);                  return ByteArraysEqual(actualSubkey' expectedSubkey);              }              catch              {                  // This should never occur except in the case of a malformed payload' where                  // we might go off the end of the array. Regardless' a malformed payload                  // implies verification failed.                  return false;              }
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,VerifyHashInternal,The following statement contains a magic number: try              {                  // Read header information                  KeyDerivationPrf prf = (KeyDerivationPrf)ReadNetworkByteOrder(hashedData' 1);                  int iterCount = (int)ReadNetworkByteOrder(hashedData' 5);                  int saltLength = (int)ReadNetworkByteOrder(hashedData' 9);                    // Read the salt: must be >= 128 bits                  if (saltLength < 128 / 8)                  {                      return false;                  }                  byte[] salt = new byte[saltLength];                  Buffer.BlockCopy(hashedData' 13' salt' 0' salt.Length);                    // Read the subkey (the rest of the payload): must be >= 128 bits                  int subkeyLength = hashedData.Length - 13 - salt.Length;                  if (subkeyLength < 128 / 8)                  {                      return false;                  }                  byte[] expectedSubkey = new byte[subkeyLength];                  Buffer.BlockCopy(hashedData' 13 + salt.Length' expectedSubkey' 0' expectedSubkey.Length);                    // Hash the incoming credential and verify it                  byte[] actualSubkey = KeyDerivation.Pbkdf2(providedInput' salt' prf' iterCount' subkeyLength);                  return ByteArraysEqual(actualSubkey' expectedSubkey);              }              catch              {                  // This should never occur except in the case of a malformed payload' where                  // we might go off the end of the array. Regardless' a malformed payload                  // implies verification failed.                  return false;              }
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,VerifyHashInternal,The following statement contains a magic number: try              {                  // Read header information                  KeyDerivationPrf prf = (KeyDerivationPrf)ReadNetworkByteOrder(hashedData' 1);                  int iterCount = (int)ReadNetworkByteOrder(hashedData' 5);                  int saltLength = (int)ReadNetworkByteOrder(hashedData' 9);                    // Read the salt: must be >= 128 bits                  if (saltLength < 128 / 8)                  {                      return false;                  }                  byte[] salt = new byte[saltLength];                  Buffer.BlockCopy(hashedData' 13' salt' 0' salt.Length);                    // Read the subkey (the rest of the payload): must be >= 128 bits                  int subkeyLength = hashedData.Length - 13 - salt.Length;                  if (subkeyLength < 128 / 8)                  {                      return false;                  }                  byte[] expectedSubkey = new byte[subkeyLength];                  Buffer.BlockCopy(hashedData' 13 + salt.Length' expectedSubkey' 0' expectedSubkey.Length);                    // Hash the incoming credential and verify it                  byte[] actualSubkey = KeyDerivation.Pbkdf2(providedInput' salt' prf' iterCount' subkeyLength);                  return ByteArraysEqual(actualSubkey' expectedSubkey);              }              catch              {                  // This should never occur except in the case of a malformed payload' where                  // we might go off the end of the array. Regardless' a malformed payload                  // implies verification failed.                  return false;              }
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,VerifyHashInternal,The following statement contains a magic number: try              {                  // Read header information                  KeyDerivationPrf prf = (KeyDerivationPrf)ReadNetworkByteOrder(hashedData' 1);                  int iterCount = (int)ReadNetworkByteOrder(hashedData' 5);                  int saltLength = (int)ReadNetworkByteOrder(hashedData' 9);                    // Read the salt: must be >= 128 bits                  if (saltLength < 128 / 8)                  {                      return false;                  }                  byte[] salt = new byte[saltLength];                  Buffer.BlockCopy(hashedData' 13' salt' 0' salt.Length);                    // Read the subkey (the rest of the payload): must be >= 128 bits                  int subkeyLength = hashedData.Length - 13 - salt.Length;                  if (subkeyLength < 128 / 8)                  {                      return false;                  }                  byte[] expectedSubkey = new byte[subkeyLength];                  Buffer.BlockCopy(hashedData' 13 + salt.Length' expectedSubkey' 0' expectedSubkey.Length);                    // Hash the incoming credential and verify it                  byte[] actualSubkey = KeyDerivation.Pbkdf2(providedInput' salt' prf' iterCount' subkeyLength);                  return ByteArraysEqual(actualSubkey' expectedSubkey);              }              catch              {                  // This should never occur except in the case of a malformed payload' where                  // we might go off the end of the array. Regardless' a malformed payload                  // implies verification failed.                  return false;              }
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,VerifyHashInternal,The following statement contains a magic number: try              {                  // Read header information                  KeyDerivationPrf prf = (KeyDerivationPrf)ReadNetworkByteOrder(hashedData' 1);                  int iterCount = (int)ReadNetworkByteOrder(hashedData' 5);                  int saltLength = (int)ReadNetworkByteOrder(hashedData' 9);                    // Read the salt: must be >= 128 bits                  if (saltLength < 128 / 8)                  {                      return false;                  }                  byte[] salt = new byte[saltLength];                  Buffer.BlockCopy(hashedData' 13' salt' 0' salt.Length);                    // Read the subkey (the rest of the payload): must be >= 128 bits                  int subkeyLength = hashedData.Length - 13 - salt.Length;                  if (subkeyLength < 128 / 8)                  {                      return false;                  }                  byte[] expectedSubkey = new byte[subkeyLength];                  Buffer.BlockCopy(hashedData' 13 + salt.Length' expectedSubkey' 0' expectedSubkey.Length);                    // Hash the incoming credential and verify it                  byte[] actualSubkey = KeyDerivation.Pbkdf2(providedInput' salt' prf' iterCount' subkeyLength);                  return ByteArraysEqual(actualSubkey' expectedSubkey);              }              catch              {                  // This should never occur except in the case of a malformed payload' where                  // we might go off the end of the array. Regardless' a malformed payload                  // implies verification failed.                  return false;              }
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,VerifyHashInternal,The following statement contains a magic number: try              {                  // Read header information                  KeyDerivationPrf prf = (KeyDerivationPrf)ReadNetworkByteOrder(hashedData' 1);                  int iterCount = (int)ReadNetworkByteOrder(hashedData' 5);                  int saltLength = (int)ReadNetworkByteOrder(hashedData' 9);                    // Read the salt: must be >= 128 bits                  if (saltLength < 128 / 8)                  {                      return false;                  }                  byte[] salt = new byte[saltLength];                  Buffer.BlockCopy(hashedData' 13' salt' 0' salt.Length);                    // Read the subkey (the rest of the payload): must be >= 128 bits                  int subkeyLength = hashedData.Length - 13 - salt.Length;                  if (subkeyLength < 128 / 8)                  {                      return false;                  }                  byte[] expectedSubkey = new byte[subkeyLength];                  Buffer.BlockCopy(hashedData' 13 + salt.Length' expectedSubkey' 0' expectedSubkey.Length);                    // Hash the incoming credential and verify it                  byte[] actualSubkey = KeyDerivation.Pbkdf2(providedInput' salt' prf' iterCount' subkeyLength);                  return ByteArraysEqual(actualSubkey' expectedSubkey);              }              catch              {                  // This should never occur except in the case of a malformed payload' where                  // we might go off the end of the array. Regardless' a malformed payload                  // implies verification failed.                  return false;              }
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,VerifyHashInternal,The following statement contains a magic number: try              {                  // Read header information                  KeyDerivationPrf prf = (KeyDerivationPrf)ReadNetworkByteOrder(hashedData' 1);                  int iterCount = (int)ReadNetworkByteOrder(hashedData' 5);                  int saltLength = (int)ReadNetworkByteOrder(hashedData' 9);                    // Read the salt: must be >= 128 bits                  if (saltLength < 128 / 8)                  {                      return false;                  }                  byte[] salt = new byte[saltLength];                  Buffer.BlockCopy(hashedData' 13' salt' 0' salt.Length);                    // Read the subkey (the rest of the payload): must be >= 128 bits                  int subkeyLength = hashedData.Length - 13 - salt.Length;                  if (subkeyLength < 128 / 8)                  {                      return false;                  }                  byte[] expectedSubkey = new byte[subkeyLength];                  Buffer.BlockCopy(hashedData' 13 + salt.Length' expectedSubkey' 0' expectedSubkey.Length);                    // Hash the incoming credential and verify it                  byte[] actualSubkey = KeyDerivation.Pbkdf2(providedInput' salt' prf' iterCount' subkeyLength);                  return ByteArraysEqual(actualSubkey' expectedSubkey);              }              catch              {                  // This should never occur except in the case of a malformed payload' where                  // we might go off the end of the array. Regardless' a malformed payload                  // implies verification failed.                  return false;              }
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,VerifyHashInternal,The following statement contains a magic number: try              {                  // Read header information                  KeyDerivationPrf prf = (KeyDerivationPrf)ReadNetworkByteOrder(hashedData' 1);                  int iterCount = (int)ReadNetworkByteOrder(hashedData' 5);                  int saltLength = (int)ReadNetworkByteOrder(hashedData' 9);                    // Read the salt: must be >= 128 bits                  if (saltLength < 128 / 8)                  {                      return false;                  }                  byte[] salt = new byte[saltLength];                  Buffer.BlockCopy(hashedData' 13' salt' 0' salt.Length);                    // Read the subkey (the rest of the payload): must be >= 128 bits                  int subkeyLength = hashedData.Length - 13 - salt.Length;                  if (subkeyLength < 128 / 8)                  {                      return false;                  }                  byte[] expectedSubkey = new byte[subkeyLength];                  Buffer.BlockCopy(hashedData' 13 + salt.Length' expectedSubkey' 0' expectedSubkey.Length);                    // Hash the incoming credential and verify it                  byte[] actualSubkey = KeyDerivation.Pbkdf2(providedInput' salt' prf' iterCount' subkeyLength);                  return ByteArraysEqual(actualSubkey' expectedSubkey);              }              catch              {                  // This should never occur except in the case of a malformed payload' where                  // we might go off the end of the array. Regardless' a malformed payload                  // implies verification failed.                  return false;              }
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,ReadNetworkByteOrder,The following statement contains a magic number: return ((uint)(buffer[offset + 0]) << 24)                  | ((uint)(buffer[offset + 1]) << 16)                  | ((uint)(buffer[offset + 2]) << 8)                  | ((uint)(buffer[offset + 3]));
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,ReadNetworkByteOrder,The following statement contains a magic number: return ((uint)(buffer[offset + 0]) << 24)                  | ((uint)(buffer[offset + 1]) << 16)                  | ((uint)(buffer[offset + 2]) << 8)                  | ((uint)(buffer[offset + 3]));
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,ReadNetworkByteOrder,The following statement contains a magic number: return ((uint)(buffer[offset + 0]) << 24)                  | ((uint)(buffer[offset + 1]) << 16)                  | ((uint)(buffer[offset + 2]) << 8)                  | ((uint)(buffer[offset + 3]));
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,ReadNetworkByteOrder,The following statement contains a magic number: return ((uint)(buffer[offset + 0]) << 24)                  | ((uint)(buffer[offset + 1]) << 16)                  | ((uint)(buffer[offset + 2]) << 8)                  | ((uint)(buffer[offset + 3]));
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,ReadNetworkByteOrder,The following statement contains a magic number: return ((uint)(buffer[offset + 0]) << 24)                  | ((uint)(buffer[offset + 1]) << 16)                  | ((uint)(buffer[offset + 2]) << 8)                  | ((uint)(buffer[offset + 3]));
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,WriteNetworkByteOrder,The following statement contains a magic number: buffer[offset + 0] = (byte)(value >> 24);
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,WriteNetworkByteOrder,The following statement contains a magic number: buffer[offset + 1] = (byte)(value >> 16);
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,WriteNetworkByteOrder,The following statement contains a magic number: buffer[offset + 2] = (byte)(value >> 8);
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,WriteNetworkByteOrder,The following statement contains a magic number: buffer[offset + 2] = (byte)(value >> 8);
Magic Number,NuGetGallery.Infrastructure.Authentication,V3Hasher,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Authentication\V3Hasher.cs,WriteNetworkByteOrder,The following statement contains a magic number: buffer[offset + 3] = (byte)(value >> 0);
Magic Number,NuGetGallery.Migrations,SecurityPolicies,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201704211454424_SecurityPolicies.cs,Up,The following statement contains a magic number: CreateTable("UserSecurityPolicies"' c => new              {                  Key = c.Int(nullable: false' identity: true)'                  Name = c.String(nullable: false' maxLength: 256)'                  UserKey = c.Int(nullable: false)'                  Value = c.String(nullable: true' maxLength: 256)              })              .PrimaryKey(t => t.Key)              .ForeignKey("Users"' t => t.UserKey);
Magic Number,NuGetGallery.Migrations,SecurityPolicies,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201704211454424_SecurityPolicies.cs,Up,The following statement contains a magic number: CreateTable("UserSecurityPolicies"' c => new              {                  Key = c.Int(nullable: false' identity: true)'                  Name = c.String(nullable: false' maxLength: 256)'                  UserKey = c.Int(nullable: false)'                  Value = c.String(nullable: true' maxLength: 256)              })              .PrimaryKey(t => t.Key)              .ForeignKey("Users"' t => t.UserKey);
Magic Number,NuGetGallery.Migrations,SecurityPoliciesFix,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201705032101231_SecurityPoliciesFix.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.UserSecurityPolicies"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          UserKey = c.Int(nullable: false)'                          Name = c.String(nullable: false' maxLength: 256)'                          Value = c.String()'                      })                  .PrimaryKey(t => t.Key)                  .ForeignKey("dbo.Users"' t => t.UserKey' cascadeDelete: true)                  .Index(t => t.UserKey);
Magic Number,NuGetGallery.Migrations,SecurityPoliciesFix,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201705032101231_SecurityPoliciesFix.cs,Down,The following statement contains a magic number: CreateTable("UserSecurityPolicies"' c => new              {                  Key = c.Int(nullable: false' identity: true)'                  Name = c.String(nullable: false' maxLength: 256)'                  UserKey = c.Int(nullable: false)'                  Value = c.String(nullable: true' maxLength: 256)              })              .PrimaryKey(t => t.Key)              .ForeignKey("Users"' t => t.UserKey);
Magic Number,NuGetGallery.Migrations,SecurityPoliciesFix,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201705032101231_SecurityPoliciesFix.cs,Down,The following statement contains a magic number: CreateTable("UserSecurityPolicies"' c => new              {                  Key = c.Int(nullable: false' identity: true)'                  Name = c.String(nullable: false' maxLength: 256)'                  UserKey = c.Int(nullable: false)'                  Value = c.String(nullable: true' maxLength: 256)              })              .PrimaryKey(t => t.Key)              .ForeignKey("Users"' t => t.UserKey);
Magic Number,NuGetGallery.Migrations,UserSecurityPolicies_SubscriptionColumn,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201705041614287_UserSecurityPolicies_SubscriptionColumn.cs,Up,The following statement contains a magic number: AddColumn("dbo.UserSecurityPolicies"' "Subscription"' c => c.String(nullable: false' maxLength: 256));
Magic Number,NuGetGallery.Migrations,PrefixReservation,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201708241907124_PrefixReservation.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.ReservedNamespaces"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          Value = c.String(nullable: false' maxLength: 128)'                          IsSharedNamespace = c.Boolean(nullable: false)'                          IsPrefix = c.Boolean(nullable: false)'                      })                  .PrimaryKey(t => t.Key);
Magic Number,NuGetGallery.Migrations,RemovePackageStatistics,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201602181939424_RemovePackageStatistics.cs,Down,The following statement contains a magic number: CreateTable(                  "dbo.PackageStatistics"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          PackageKey = c.Int(nullable: false)'                          IPAddress = c.String()'                          UserAgent = c.String()'                          Operation = c.String(maxLength: 128)'                          DependentPackage = c.String(maxLength: 128)'                          ProjectGuids = c.String()'                      })                  .PrimaryKey(t => t.Key);
Magic Number,NuGetGallery.Migrations,RemovePackageStatistics,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201602181939424_RemovePackageStatistics.cs,Down,The following statement contains a magic number: CreateTable(                  "dbo.PackageStatistics"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          PackageKey = c.Int(nullable: false)'                          IPAddress = c.String()'                          UserAgent = c.String()'                          Operation = c.String(maxLength: 128)'                          DependentPackage = c.String(maxLength: 128)'                          ProjectGuids = c.String()'                      })                  .PrimaryKey(t => t.Key);
Magic Number,NuGetGallery.Migrations,RemoveOldCredentialColumnsFromUsersTable,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201605310704169_RemoveOldCredentialColumnsFromUsersTable.cs,Down,The following statement contains a magic number: AddColumn("dbo.Users"' "HashedPassword"' c => c.String(maxLength: 256));
Magic Number,NuGetGallery.Migrations,AddPackageTypes,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201608251939567_AddPackageTypes.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.PackageTypes"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          PackageKey = c.Int(nullable: false)'                          Name = c.String(maxLength: 512)'                          Version = c.String(maxLength: 128)'                      })                  .PrimaryKey(t => t.Key)                  .ForeignKey("dbo.Packages"' t => t.PackageKey' cascadeDelete: true)                  .Index(t => t.PackageKey);
Magic Number,NuGetGallery.Migrations,AddPackageTypes,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201608251939567_AddPackageTypes.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.PackageTypes"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          PackageKey = c.Int(nullable: false)'                          Name = c.String(maxLength: 512)'                          Version = c.String(maxLength: 128)'                      })                  .PrimaryKey(t => t.Key)                  .ForeignKey("dbo.Packages"' t => t.PackageKey' cascadeDelete: true)                  .Index(t => t.PackageKey);
Magic Number,NuGetGallery.Migrations,ApiKeyDescription,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201609211206577_ApiKeyDescription.cs,Up,The following statement contains a magic number: AddColumn("dbo.Credentials"' "Description"' c => c.String(maxLength: 256));
Magic Number,NuGetGallery.Migrations,GallerySettings,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201110180052097_GallerySettings.cs,Up,The following statement contains a magic number: CreateTable(                  "WorkItems"'                  c => new                      {                          Id = c.Long(nullable: false' identity: true)'                          JobName = c.String(maxLength: 64)'                          WorkerId = c.String(maxLength: 64)'                          Started = c.DateTime(nullable: false)'                          Completed = c.DateTime(nullable: true)'                          ExceptionInfo = c.String()'                      })                  .PrimaryKey(t => t.Id);
Magic Number,NuGetGallery.Migrations,GallerySettings,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201110180052097_GallerySettings.cs,Up,The following statement contains a magic number: CreateTable(                  "WorkItems"'                  c => new                      {                          Id = c.Long(nullable: false' identity: true)'                          JobName = c.String(maxLength: 64)'                          WorkerId = c.String(maxLength: 64)'                          Started = c.DateTime(nullable: false)'                          Completed = c.DateTime(nullable: true)'                          ExceptionInfo = c.String()'                      })                  .PrimaryKey(t => t.Id);
Magic Number,NuGetGallery.Migrations,Language,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201208171904586_Language.cs,Up,The following statement contains a magic number: AddColumn("Packages"' "Language"' c => c.String(maxLength: 20));
Magic Number,NuGetGallery.Migrations,ColumnLengthOfPackageTable,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201208222206329_ColumnLengthOfPackageTable.cs,Up,The following statement contains a magic number: AlterColumn("PackageRegistrations"' "Id"' c => c.String(nullable: false' maxLength: 128));
Magic Number,NuGetGallery.Migrations,ColumnLengthOfPackageTable,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201208222206329_ColumnLengthOfPackageTable.cs,Up,The following statement contains a magic number: AlterColumn("Packages"' "HashAlgorithm"' c => c.String(maxLength: 10));
Magic Number,NuGetGallery.Migrations,ColumnLengthOfPackageTable,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201208222206329_ColumnLengthOfPackageTable.cs,Up,The following statement contains a magic number: AlterColumn("Packages"' "Hash"' c => c.String(nullable: false' maxLength: 256));
Magic Number,NuGetGallery.Migrations,ColumnLengthOfPackageTable,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201208222206329_ColumnLengthOfPackageTable.cs,Up,The following statement contains a magic number: AlterColumn("Packages"' "Title"' c => c.String(maxLength: 256));
Magic Number,NuGetGallery.Migrations,ColumnLengthOfPackageTable,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201208222206329_ColumnLengthOfPackageTable.cs,Up,The following statement contains a magic number: AlterColumn("Packages"' "Version"' c => c.String(nullable: false' maxLength: 64));
Magic Number,NuGetGallery.Migrations,ColumnLengthOfPackageTable,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201208222206329_ColumnLengthOfPackageTable.cs,Up,The following statement contains a magic number: AlterColumn("PackageDependencies"' "Id"' c => c.String(maxLength: 128));
Magic Number,NuGetGallery.Migrations,ColumnLengthOfPackageTable,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201208222206329_ColumnLengthOfPackageTable.cs,Up,The following statement contains a magic number: AlterColumn("PackageDependencies"' "VersionSpec"' c => c.String(maxLength: 256));
Magic Number,NuGetGallery.Migrations,ColumnLengthOfPackageTable,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201208222206329_ColumnLengthOfPackageTable.cs,Up,The following statement contains a magic number: AlterColumn("PackageDependencies"' "TargetFramework"' c => c.String(maxLength: 256));
Magic Number,NuGetGallery.Migrations,ColumnLengthOfPackageTable,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201208222206329_ColumnLengthOfPackageTable.cs,Up,The following statement contains a magic number: AlterColumn("PackageFrameworks"' "TargetFramework"' c => c.String(maxLength: 256));
Magic Number,NuGetGallery.Migrations,AddNuGetOperation,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201211271813001_AddNuGetOperation.cs,Up,The following statement contains a magic number: AddColumn("PackageStatistics"' "Operation"' c => c.String(maxLength: 16));
Magic Number,NuGetGallery.Migrations,RemoveWorkItems,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201301180132053_RemoveWorkItems.cs,Down,The following statement contains a magic number: CreateTable(                  "WorkItems"'                  c => new                  {                      Id = c.Long(nullable: false' identity: true)'                      JobName = c.String(maxLength: 64)'                      WorkerId = c.String(maxLength: 64)'                      Started = c.DateTime(nullable: false)'                      Completed = c.DateTime(nullable: true)'                      ExceptionInfo = c.String()'                  })                  .PrimaryKey(t => t.Id);
Magic Number,NuGetGallery.Migrations,RemoveWorkItems,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201301180132053_RemoveWorkItems.cs,Down,The following statement contains a magic number: CreateTable(                  "WorkItems"'                  c => new                  {                      Id = c.Long(nullable: false' identity: true)'                      JobName = c.String(maxLength: 64)'                      WorkerId = c.String(maxLength: 64)'                      Started = c.DateTime(nullable: false)'                      Completed = c.DateTime(nullable: true)'                      ExceptionInfo = c.String()'                  })                  .PrimaryKey(t => t.Id);
Magic Number,NuGetGallery.Migrations,AddMinRequiredVerisonColumn,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201302282115583_AddMinRequiredVerisonColumn.cs,Up,The following statement contains a magic number: AddColumn("Packages"' "MinClientVersion"' c => c.String(maxLength: 44));
Magic Number,NuGetGallery.Migrations,UserLookupOptimization,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201304020006512_UserLookupOptimization.cs,Up,The following statement contains a magic number: AlterColumn("Users"' "EmailAddress"' c => c.String(maxLength: 256));
Magic Number,NuGetGallery.Migrations,UserLookupOptimization,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201304020006512_UserLookupOptimization.cs,Up,The following statement contains a magic number: AlterColumn("Users"' "UnconfirmedEmailAddress"' c => c.String(maxLength: 256));
Magic Number,NuGetGallery.Migrations,UserLookupOptimization,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201304020006512_UserLookupOptimization.cs,Up,The following statement contains a magic number: AlterColumn("Users"' "HashedPassword"' c => c.String(maxLength: 256));
Magic Number,NuGetGallery.Migrations,UserLookupOptimization,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201304020006512_UserLookupOptimization.cs,Up,The following statement contains a magic number: AlterColumn("Users"' "Username"' c => c.String(nullable: false' maxLength: 64));
Magic Number,NuGetGallery.Migrations,UserLookupOptimization,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201304020006512_UserLookupOptimization.cs,Up,The following statement contains a magic number: AlterColumn("Users"' "EmailConfirmationToken"' c => c.String(maxLength: 32));
Magic Number,NuGetGallery.Migrations,UserLookupOptimization,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201304020006512_UserLookupOptimization.cs,Up,The following statement contains a magic number: AlterColumn("Users"' "PasswordResetToken"' c => c.String(maxLength: 32));
Magic Number,NuGetGallery.Migrations,WidenStatisticsOperationColumn,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201306031734581_WidenStatisticsOperationColumn.cs,Up,The following statement contains a magic number: AlterColumn("dbo.PackageStatistics"' "Operation"' c => c.String(maxLength: 18));
Magic Number,NuGetGallery.Migrations,WidenStatisticsOperationColumn,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201306031734581_WidenStatisticsOperationColumn.cs,Down,The following statement contains a magic number: AlterColumn("dbo.PackageStatistics"' "Operation"' c => c.String(maxLength: 16));
Magic Number,NuGetGallery.Migrations,SupportNewClientHeaders,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201306031754328_SupportNewClientHeaders.cs,Up,The following statement contains a magic number: AddColumn("dbo.PackageStatistics"' "DependentPackage"' c => c.String(maxLength: 128));
Magic Number,NuGetGallery.Migrations,EditableMetadata,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201308051913351_EditableMetadata.cs,Up,The following statement contains a magic number: CreateTable(                  "PackageEdits"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          PackageKey = c.Int(nullable: false)'                          UserKey = c.Int(nullable: false)'                          Timestamp = c.DateTime(nullable: false)'                          TriedCount = c.Int(nullable: false)'                          Title = c.String(maxLength: 256)'                          Authors = c.String()'                          Copyright = c.String()'                          Description = c.String()'                          IconUrl = c.String()'                          LicenseUrl = c.String()'                          ProjectUrl = c.String()'                          ReleaseNotes = c.String()'                          RequiresLicenseAcceptance = c.Boolean(nullable: false)'                          Summary = c.String()'                          Tags = c.String()'                      })                  .PrimaryKey(t => t.Key)                  .ForeignKey("Packages"' t => t.PackageKey' cascadeDelete: true)                  .ForeignKey("Users"' t => t.UserKey)                  .Index(t => t.PackageKey)                  .Index(t => t.UserKey);
Magic Number,NuGetGallery.Migrations,EditableMetadata,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201308051913351_EditableMetadata.cs,Up,The following statement contains a magic number: CreateTable(                  "PackageHistories"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          PackageKey = c.Int(nullable: false)'                          UserKey = c.Int()'                          Timestamp = c.DateTime(nullable: false)'                          Title = c.String(maxLength: 256)'                          Authors = c.String()'                          Copyright = c.String()'                          Description = c.String()'                          IconUrl = c.String()'                          LicenseUrl = c.String()'                          ProjectUrl = c.String()'                          ReleaseNotes = c.String()'                          RequiresLicenseAcceptance = c.Boolean(nullable: false)'                          Summary = c.String()'                          Tags = c.String()'                          Hash = c.String(maxLength: 256)'                          HashAlgorithm = c.String(maxLength: 10)'                          PackageFileSize = c.Long(nullable: false)'                          LastUpdated = c.DateTime(nullable: false)'                          Published = c.DateTime(nullable: false)'                      })                  .PrimaryKey(t => t.Key)                  .ForeignKey("Packages"' t => t.PackageKey' cascadeDelete: true)                  .Index(t => t.PackageKey);
Magic Number,NuGetGallery.Migrations,EditableMetadata,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201308051913351_EditableMetadata.cs,Up,The following statement contains a magic number: CreateTable(                  "PackageHistories"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          PackageKey = c.Int(nullable: false)'                          UserKey = c.Int()'                          Timestamp = c.DateTime(nullable: false)'                          Title = c.String(maxLength: 256)'                          Authors = c.String()'                          Copyright = c.String()'                          Description = c.String()'                          IconUrl = c.String()'                          LicenseUrl = c.String()'                          ProjectUrl = c.String()'                          ReleaseNotes = c.String()'                          RequiresLicenseAcceptance = c.Boolean(nullable: false)'                          Summary = c.String()'                          Tags = c.String()'                          Hash = c.String(maxLength: 256)'                          HashAlgorithm = c.String(maxLength: 10)'                          PackageFileSize = c.Long(nullable: false)'                          LastUpdated = c.DateTime(nullable: false)'                          Published = c.DateTime(nullable: false)'                      })                  .PrimaryKey(t => t.Key)                  .ForeignKey("Packages"' t => t.PackageKey' cascadeDelete: true)                  .Index(t => t.PackageKey);
Magic Number,NuGetGallery.Migrations,EditableMetadata,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201308051913351_EditableMetadata.cs,Up,The following statement contains a magic number: CreateTable(                  "PackageHistories"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          PackageKey = c.Int(nullable: false)'                          UserKey = c.Int()'                          Timestamp = c.DateTime(nullable: false)'                          Title = c.String(maxLength: 256)'                          Authors = c.String()'                          Copyright = c.String()'                          Description = c.String()'                          IconUrl = c.String()'                          LicenseUrl = c.String()'                          ProjectUrl = c.String()'                          ReleaseNotes = c.String()'                          RequiresLicenseAcceptance = c.Boolean(nullable: false)'                          Summary = c.String()'                          Tags = c.String()'                          Hash = c.String(maxLength: 256)'                          HashAlgorithm = c.String(maxLength: 10)'                          PackageFileSize = c.Long(nullable: false)'                          LastUpdated = c.DateTime(nullable: false)'                          Published = c.DateTime(nullable: false)'                      })                  .PrimaryKey(t => t.Key)                  .ForeignKey("Packages"' t => t.PackageKey' cascadeDelete: true)                  .Index(t => t.PackageKey);
Magic Number,NuGetGallery.Migrations,LicenseReports,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201309092040124_LicenseReports.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.PackageLicenseReports"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          PackageKey = c.Int(nullable: false)'                          CreatedUtc = c.DateTime(nullable: false)'                          Sequence = c.Int(nullable: false)'                          ReportUrl = c.String(nullable: false' maxLength: 256)'                          Comment = c.String(maxLength: 256)'                      })                  .PrimaryKey(t => t.Key)                  .ForeignKey("dbo.Packages"' t => t.PackageKey' cascadeDelete: true)                  .Index(t => t.PackageKey);
Magic Number,NuGetGallery.Migrations,LicenseReports,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201309092040124_LicenseReports.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.PackageLicenseReports"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          PackageKey = c.Int(nullable: false)'                          CreatedUtc = c.DateTime(nullable: false)'                          Sequence = c.Int(nullable: false)'                          ReportUrl = c.String(nullable: false' maxLength: 256)'                          Comment = c.String(maxLength: 256)'                      })                  .PrimaryKey(t => t.Key)                  .ForeignKey("dbo.Packages"' t => t.PackageKey' cascadeDelete: true)                  .Index(t => t.PackageKey);
Magic Number,NuGetGallery.Migrations,LicenseReports,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201309092040124_LicenseReports.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.PackageLicenses"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          Name = c.String(nullable: false' maxLength: 128)'                      })                  .PrimaryKey(t => t.Key);
Magic Number,NuGetGallery.Migrations,NormalizedVersionColumn,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201309101922464_NormalizedVersionColumn.cs,Up,The following statement contains a magic number: AddColumn("dbo.Packages"' "NormalizedVersion"' c => c.String(maxLength: 64));
Magic Number,NuGetGallery.Migrations,CredentialsTable,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201309172217450_CredentialsTable.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Credentials"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          UserKey = c.Int(nullable: false)'                          Type = c.String(nullable: false' maxLength: 64)'                          Value = c.String(nullable: false' maxLength: 256)'                      })                  .PrimaryKey(t => t.Key)                  .ForeignKey("dbo.Users"' t => t.UserKey' cascadeDelete: true)                  .Index(t => t.UserKey);
Magic Number,NuGetGallery.Migrations,CredentialsTable,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201309172217450_CredentialsTable.cs,Up,The following statement contains a magic number: CreateTable(                  "dbo.Credentials"'                  c => new                      {                          Key = c.Int(nullable: false' identity: true)'                          UserKey = c.Int(nullable: false)'                          Type = c.String(nullable: false' maxLength: 64)'                          Value = c.String(nullable: false' maxLength: 256)'                      })                  .PrimaryKey(t => t.Key)                  .ForeignKey("dbo.Users"' t => t.UserKey' cascadeDelete: true)                  .Index(t => t.UserKey);
Magic Number,NuGetGallery.Migrations,PackageStatistics,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201310281909048_PackageStatistics.cs,Up,The following statement contains a magic number: AlterColumn("dbo.PackageStatistics"' "Operation"' c => c.String(maxLength: 128));
Magic Number,NuGetGallery.Migrations,PackageStatistics,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201310281909048_PackageStatistics.cs,Down,The following statement contains a magic number: AlterColumn("dbo.PackageStatistics"' "Operation"' c => c.String(maxLength: 18));
Magic Number,NuGetGallery.Migrations,AddCredentialDescriptionColumn,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Migrations\201310301947399_AddCredentialDescriptionColumn.cs,Up,The following statement contains a magic number: AddColumn("dbo.Credentials"' "Identity"' c => c.String(maxLength: 256));
Magic Number,NuGetGallery.Infrastructure,AntiForgeryErrorFilter,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\AntiForgeryErrorFilter.cs,OnException,The following statement contains a magic number: if (context.Exception is HttpAntiForgeryException)              {                  context.HttpContext.Response.Clear();                  context.HttpContext.Response.TrySkipIisCustomErrors = true;                  context.HttpContext.Response.StatusCode = 400;                    context.Result = new ViewResult                  {                      ViewName = "~/Views/Errors/BadRequest.cshtml"'                  };                    context.ExceptionHandled = true;              }
Magic Number,NuGetGallery.Infrastructure,ReadOnlyModeErrorFilter,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\ReadOnlyModeErrorFilter.cs,OnException,The following statement contains a magic number: if (context.Exception is ReadOnlyModeException)              {                  context.HttpContext.Response.Clear();                  context.HttpContext.Response.TrySkipIisCustomErrors = true;                  context.HttpContext.Response.StatusCode = 503;                    context.Result = new ViewResult                  {                      ViewName = "~/Views/Errors/ReadOnlyMode.cshtml"'                  };                    context.ExceptionHandled = true;              }
Magic Number,NuGetGallery.OData.Conventions,CompositeODataKeyHelper,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\Conventions\CompositeODataKeyHelper.cs,TryEnrichRouteValues,The following statement contains a magic number: foreach (var compoundKeyPair in compoundKeyPairs)              {                  string[] pair = compoundKeyPair.Split('=');                  if (pair.Length != 2)                  {                      continue;                  }                  var keyName = pair[0].Trim(KeyTrimChars);                  var keyValue = pair[1].Trim(KeyTrimChars);                    routeValues.Add(keyName' keyValue);              }
Magic Number,NuGetGallery.OData,SearchAdaptor,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\SearchService\SearchAdaptor.cs,TryReadSearchFilter,The following statement contains a magic number: foreach (string prop in props)              {                  string[] nameValue = prop.Split('=');                  if (nameValue.Length == 2)                  {                      queryTerms[Uri.UnescapeDataString(nameValue[0])] = nameValue[1];                  }              }
Magic Number,NuGetGallery.OData.QueryInterceptors,ODataRemoveSorter,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\OData\QueryInterceptors\ODataRemoveSorter.cs,IsColumnNameArgument,The following statement contains a magic number: if (expression.Arguments.Count == 2)              {                  var memberVisitor = new MemberVisitor(_columnName);                  memberVisitor.Visit(expression.Arguments[1]);                  return memberVisitor.Flag;              }
Magic Number,NuGetGallery.Infrastructure.Lucene,ExternalSearchService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\ExternalSearchService.cs,ExternalSearchService,The following statement contains a magic number: if (!String.IsNullOrEmpty(userInfo))              {                  var split = userInfo.Split(':');                  if (split.Length != 2)                  {                      throw new FormatException("Invalid user info in SearchServiceUri!");                  }                    // Split the credentials out                  credentials = new NetworkCredential(split[0]' split[1]);                  ServiceUri = new UriBuilder(ServiceUri)                  {                      UserName = null'                      Password = null                  }.Uri;              }
Magic Number,NuGetGallery.AsyncFileUpload,AsyncFileUploadModule,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AsyncFileUpload\AsyncFileUploadModule.cs,PostAuthorizeRequest,The following statement contains a magic number: string boundary = "--" + contentType.Substring(boundaryIndex + 9);
Magic Number,NuGetGallery.AsyncFileUpload,AsyncFileUploadModule,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AsyncFileUpload\AsyncFileUploadModule.cs,ReadStream,The following statement contains a magic number: const int bufferSize = 1024 * 4;
Magic Number,NuGetGallery.AsyncFileUpload,AsyncFileUploadModule,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AsyncFileUpload\AsyncFileUploadModule.cs,ReadStream,The following statement contains a magic number: const int bufferSize = 1024 * 4;
Magic Number,NuGetGallery.AsyncFileUpload,AsyncFileUploadModule,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AsyncFileUpload\AsyncFileUploadModule.cs,ReadStream,The following statement contains a magic number: while (progress.BytesRemaining > 0)              {                  int bytesRead = stream.Read(buffer' 0' Math.Min(progress.BytesRemaining' bufferSize));                  progress.TotalBytesRead = bytesRead == 0                                            ? progress.ContentLength                                            : (progress.TotalBytesRead + bytesRead);                    if (bytesRead > 0)                  {                      parser.ParseNext(buffer' bytesRead);                      progress.FileName = parser.CurrentFileName;                  }                    _cacheService.SetProgress(username' progress);    #if DEBUG                  if (request.IsLocal)                  {                      // If the request is from local machine' the upload will be too fast to see the progress.                      // Slow it down a bit.                      System.Threading.Thread.Sleep(30);                  }  #endif              }
Magic Number,NuGetGallery.AsyncFileUpload,AsyncFileUploadModule,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AsyncFileUpload\AsyncFileUploadModule.cs,IsAsyncUploadRequest,The following statement contains a magic number: if (context.Request.ContentLength < 4096)              {                  return false;              }
Magic Number,NuGetGallery.AsyncFileUpload,AsyncFileUploadRequestParser,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AsyncFileUpload\AsyncFileUploadRequestParser.cs,ReadNewLine,The following statement contains a magic number: for (int i = startIndex; i < lastIndex; ++i)              {                  if (!beforeContentDisposition)                  {                      _contentDisposition.Add(buffer[i]);                  }                    if (buffer[i] == _newLine[_newLineIndex])                  {                      _newLineIndex++;                      if (_newLineIndex == 2)                      {                          _newLineIndex = 0;                            if (beforeContentDisposition)                          {                              // found a new line character here. now start parsing the content-disposition                               _contentDisposition.Clear();                              ReadNewLine(buffer' i + 1' lastIndex' false);                          }                          else                          {                              // reach the end of content-disposition. extract the filename out of it                              _currentFileName = ParseContentDisposition(_contentDisposition.ToArray());                              SearchForBoundary(buffer' i + 1' lastIndex);                          }                            return;                      }                  }                  else                  {                      _newLineIndex = 0;                  }              }
Magic Number,NuGetGallery.AsyncFileUpload,AsyncFileUploadRequestParser,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AsyncFileUpload\AsyncFileUploadRequestParser.cs,PrepareKmp,The following statement contains a magic number: int pos = 2' cnd = 0;
Magic Number,NuGetGallery.WebApi,QueryResult<TModel>,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\WebApi\QueryResult.cs,QueryResult,The following statement contains a magic number: _validationSettings = new ODataValidationSettings()              {                  MaxNodeCount = 250              };
Missing Default,NuGetGallery,ReadMeService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Services\ReadMeService.cs,GetReadMeHtml,The following switch statement is missing a default case: switch (block.Tag)                          {                              // Demote heading tags so they don't overpower expander headings.                              case BlockTag.AtxHeading:                              case BlockTag.SetextHeading:                                  var level = (byte)Math.Min(block.Heading.Level + 1' 6);                                  block.Heading = new HeadingData(level);                                  break;                                // Decode preformatted blocks to prevent double encoding.                              // Skip BlockTag.BlockQuote' which are partially decoded upfront.                              case BlockTag.FencedCode:                              case BlockTag.IndentedCode:                                  if (block.StringContent != null)                                  {                                      var content = block.StringContent.TakeFromStart(block.StringContent.Length);                                      var unencodedContent = HttpUtility.HtmlDecode(content);                                      block.StringContent.Replace(unencodedContent' 0' unencodedContent.Length);                                  }                                  break;                          }
Missing Default,NuGetGallery,DateTime_EditField,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Areas\Admin\DynamicData\FieldTemplates\DateTime_Edit.ascx.cs,SetUpCustomValidator,The following switch statement is missing a default case: switch (Column.DataTypeAttribute.DataType) {                      case DataType.Date:                      case DataType.DateTime:                      case DataType.Time:                          validator.Enabled = true;                          DateValidator.ErrorMessage = HttpUtility.HtmlEncode(Column.DataTypeAttribute.FormatErrorMessage(Column.DisplayName));                          break;                  }
Missing Default,NuGetGallery,DefaultDependenciesModule,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\App_Start\DefaultDependenciesModule.cs,Load,The following switch statement is missing a default case: switch (configuration.Current.StorageType)              {                  case StorageType.FileSystem:                  case StorageType.NotSpecified:                      ConfigureForLocalFileSystem(builder' configuration);                      defaultAuditingService = GetAuditingServiceForLocalFileSystem(configuration);                      break;                  case StorageType.AzureStorage:                      ConfigureForAzureStorage(builder' configuration' telemetryClient);                      defaultAuditingService = GetAuditingServiceForAzureStorage(builder' configuration);                      break;              }
Missing Default,NuGetGallery,LuceneSearchService,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Infrastructure\Lucene\LuceneSearchService.cs,GetSortField,The following switch statement is missing a default case: switch (searchFilter.SortOrder)              {                  case SortOrder.TitleAscending:                      return new SortField("DisplayName"' SortField.STRING' reverse: false);                  case SortOrder.TitleDescending:                      return new SortField("DisplayName"' SortField.STRING' reverse: false);                  case SortOrder.Published:                      return new SortField("PublishedDate"' SortField.LONG' reverse: true);                  case SortOrder.LastEdited:                      return new SortField("EditedDate"' SortField.LONG' reverse: true);              }
Missing Default,NuGetGallery.Authentication,NuGetScopes,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\NuGetScopes.cs,Describe,The following switch statement is missing a default case: switch (scope.ToLowerInvariant())              {                  case All:                      return Strings.ScopeDescription_All;                  case PackagePush:                      return Strings.ScopeDescription_PushPackage;                  case PackagePushVersion:                      return Strings.ScopeDescription_PushPackageVersion;                  case PackageUnlist:                      return Strings.ScopeDescription_UnlistPackage;                  case PackageVerify:                      return Strings.ScopeDescription_VerifyPackage;              }
Missing Default,NuGetGallery.Controllers,ODataV1FeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV1FeedController.cs,GetPropertyFromPackages,The following switch statement is missing a default case: switch (propertyName.ToLowerInvariant())              {                  case "id": return Ok(id);                  case "version": return Ok(version);              }
Missing Default,NuGetGallery.Controllers,ODataV2CuratedFeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2CuratedFeedController.cs,GetPropertyFromPackages,The following switch statement is missing a default case: switch (propertyName.ToLowerInvariant())              {                  case "id": return Ok(id);                  case "version": return Ok(version);              }
Missing Default,NuGetGallery.Controllers,ODataV2FeedController,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Controllers\ODataV2FeedController.cs,GetPropertyFromPackages,The following switch statement is missing a default case: switch (propertyName.ToLowerInvariant())              {                  case "id": return Ok(id);                  case "version": return Ok(version);              }
Missing Default,NuGetGallery.AsyncFileUpload,AsyncFileUploadRequestParser,C:\repos\NuGet_NuGetGallery\src\NuGetGallery\Authentication\AsyncFileUpload\AsyncFileUploadRequestParser.cs,ParseNext,The following switch statement is missing a default case: switch (_readState)              {                  case ReadState.SearchForBoundary:                      SearchForBoundary(buffer' 0' count);                      break;                    case ReadState.ReadBeforeContentDisposition:                      ReadNewLine(buffer' 0' count' true);                      break;                    case ReadState.ReadAfterContentDisposition:                      ReadNewLine(buffer' 0' count' false);                      break;              }
