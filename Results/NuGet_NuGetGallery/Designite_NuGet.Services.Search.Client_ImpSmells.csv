Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NuGet.Services.Search.Client,SearchClient,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\SearchClient.cs,Search,Cyclomatic complexity of the method is 10
Long Parameter List,NuGet.Services.Search.Client,SearchClient,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\SearchClient.cs,SearchClient,The method has 5 parameters. Parameters: baseUri' resourceType' credentials' healthIndicatorStore' handlers
Long Parameter List,NuGet.Services.Search.Client,SearchClient,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\SearchClient.cs,Search,The method has 13 parameters. Parameters: query' projectTypeFilter' includePrerelease' curatedFeed' sortBy' skip' take' isLuceneQuery' countOnly' explain' getAllVersions' supportedFramework' semVerLevel
Long Identifier,NuGet.Services.Search.Client,ServiceDiscovery,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\ServiceDiscovery.cs,,The length of the parameter _serviceIndexDocumentExpiration is 31.
Long Identifier,NuGet.Services.Search.Client,ServiceDiscoveryClient,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\ServiceDiscoveryClient.cs,DiscoverEndpointsAsync,The length of the parameter performServiceIndexDocumentUpdate is 33.
Long Identifier,NuGet.Services.Search.Client,ServiceDiscoveryClient,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\ServiceDiscoveryClient.cs,DiscoverEndpointsAsync,The length of the parameter timeWaitedForUpdateInMilliseconds is 33.
Long Identifier,NuGet.Services.Search.Client,ServiceDiscoveryClient,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\ServiceDiscoveryClient.cs,DiscoverEndpointsAsync,The length of the parameter timeToWaitBeforeCheckingInMilliseconds is 38.
Long Identifier,NuGet.Services.Search.Client,ServiceDiscoveryClient,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\ServiceDiscoveryClient.cs,,The length of the parameter _serviceIndexDocumentExpiration is 31.
Long Statement,NuGet.Services.Search.Client,RetryingHttpClientWrapper,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\RetryingHttpClientWrapper.cs,GetWithRetry,The length of the statement  "            // When the first successful task comes in' return it. If no successful tasks are returned' throw an AggregateException. " is 120.
Long Statement,NuGet.Services.Search.Client,RetryingHttpClientWrapper,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\RetryingHttpClientWrapper.cs,GetWithRetry,The length of the statement  "                var exceptionsToThrow = exceptions.Where(e => !(e is TaskCanceledException || e.InnerException is TaskCanceledException)).ToList(); " is 131.
Long Statement,NuGet.Services.Search.Client,ServiceDiscovery,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\ServiceDiscovery.cs,BeginUpdateServiceIndexDocument,The length of the statement  "            if (_serviceIndexDocumentUpdating || DateTime.UtcNow <= _serviceIndexDocument.UpdateTime + _serviceIndexDocumentExpiration) " is 123.
Long Statement,NuGet.Services.Search.Client,ServiceDiscoveryClient,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\ServiceDiscoveryClient.cs,GetEndpointsForResourceType,The length of the statement  "                _serviceIndexDocument = new ServiceIndexDocument(_serviceIndexDocument.Doc' DateTime.UtcNow.AddMinutes(1) - _serviceIndexDocumentExpiration); " is 141.
Long Statement,NuGet.Services.Search.Client,ServiceDiscoveryClient,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\ServiceDiscoveryClient.cs,GetEndpointsForResourceType,The length of the statement  "                .Where(j => (j["@type"].Type == JTokenType.Array ? j["@type"].Any(v => (string)v == resourceType) : ((string)j["@type"]) == resourceType)) " is 138.
Long Statement,NuGet.Services.Search.Client,ServiceDiscoveryClient,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\ServiceDiscoveryClient.cs,DiscoverEndpointsAsync,The length of the statement  "            if (_serviceIndexDocument != null && (_serviceIndexDocumentUpdating || DateTime.UtcNow <= _serviceIndexDocument.UpdateTime + _serviceIndexDocumentExpiration)) " is 158.
Complex Conditional,NuGet.Services.Search.Client,RetryingHttpClientWrapper,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\RetryingHttpClientWrapper.cs,ShouldTryOther,The conditional expression  "wex != null && (                  wex.Status == WebExceptionStatus.UnknownError                  || wex.Status == WebExceptionStatus.ConnectFailure                  || (int)wex.Status == 1 // NameResolutionFailure                  )"  is complex.
Complex Conditional,NuGet.Services.Search.Client,RetryingHttpClientWrapper,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\RetryingHttpClientWrapper.cs,ShouldTryOther,The conditional expression  "response.StatusCode == HttpStatusCode.BadGateway                  || response.StatusCode == HttpStatusCode.GatewayTimeout                  || response.StatusCode == HttpStatusCode.ServiceUnavailable                  || response.StatusCode == HttpStatusCode.RequestTimeout                  || response.StatusCode == HttpStatusCode.InternalServerError"  is complex.
Magic Number,NuGet.Services.Search.Client,RetryingHttpClientWrapper,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\RetryingHttpClientWrapper.cs,GetWithRetry,The following statement contains a magic number: var healthyEndpoints = endpointsAsList.OrderByDescending(e =>              {                  var health = _endpointHealthIndicatorStore.GetHealth(e);                  var order = endpointsAsList.IndexOf(e);                    return (health * health) / ((order + 1) * 80);              }' HealthComparer).ToList();
Magic Number,NuGet.Services.Search.Client,ServiceDiscovery,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\ServiceDiscovery.cs,GetAsyncByType,The following statement contains a magic number: for (int i = 0; i < 2; ++i)              {                  foreach (Uri uri in uris)                  {                      string loc = uri + queryString;                      try                      {                          return await payload(_httpClient' loc);                      }                      catch (Exception ex)                      {                          // Accumulate a list of exceptions from failed requests. They'll only                          // be thrown if no request succeeds against any endpoint.                          exceptions.Add(ex);                      }                  }              }
Magic Number,NuGet.Services.Search.Client,ServiceDiscoveryClient,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\ServiceDiscoveryClient.cs,DiscoverEndpointsAsync,The following statement contains a magic number: if (performServiceIndexDocumentUpdate)              {                  // Fetch the service index document if we're the one to do the update                  await DiscoverEndpointsCoreAsync();              }              else if (_serviceIndexDocument == null && _serviceIndexDocumentUpdating)              {                  // If there is no service index document yet' then someone else is updating it.                  // Wait up to 5 seconds to ensure the document is loaded.                  int timeWaitedForUpdateInMilliseconds = 0;                  int timeToWaitBeforeCheckingInMilliseconds = 200;                  while (_serviceIndexDocument == null && _serviceIndexDocumentUpdating && timeWaitedForUpdateInMilliseconds < 5000)                  {                      await Task.Delay(TimeSpan.FromMilliseconds(timeToWaitBeforeCheckingInMilliseconds));                      timeWaitedForUpdateInMilliseconds += timeToWaitBeforeCheckingInMilliseconds;                  }              }
Magic Number,NuGet.Services.Search.Client,ServiceDiscoveryClient,C:\repos\NuGet_NuGetGallery\src\NuGet.Services.Search.Client\Client\ServiceDiscoveryClient.cs,DiscoverEndpointsAsync,The following statement contains a magic number: if (performServiceIndexDocumentUpdate)              {                  // Fetch the service index document if we're the one to do the update                  await DiscoverEndpointsCoreAsync();              }              else if (_serviceIndexDocument == null && _serviceIndexDocumentUpdating)              {                  // If there is no service index document yet' then someone else is updating it.                  // Wait up to 5 seconds to ensure the document is loaded.                  int timeWaitedForUpdateInMilliseconds = 0;                  int timeToWaitBeforeCheckingInMilliseconds = 200;                  while (_serviceIndexDocument == null && _serviceIndexDocumentUpdating && timeWaitedForUpdateInMilliseconds < 5000)                  {                      await Task.Delay(TimeSpan.FromMilliseconds(timeToWaitBeforeCheckingInMilliseconds));                      timeWaitedForUpdateInMilliseconds += timeToWaitBeforeCheckingInMilliseconds;                  }              }
