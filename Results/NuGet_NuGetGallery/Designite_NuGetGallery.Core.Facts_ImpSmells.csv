Implementation smell,Namespace,Class,File,Method,Description
Long Method,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_PackageAuditRecord,The method has 107 lines of code.
Long Parameter List,NuGetGallery.Auditing,TestAuditingService,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AggregateAuditingServiceTests.cs,SaveAuditRecordAsync,The method has 5 parameters. Parameters: auditData' resourceType' filePath' action' timestamp
Long Parameter List,NuGetGallery.Auditing,TestAuditingService,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AggregateAuditingServiceTests.cs,SaveAuditRecordAsync,The method has 5 parameters. Parameters: auditData' resourceType' filePath' action' timestamp
Long Identifier,NuGetGallery.Packaging,ManifestValidatorFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\ManifestValidatorFacts.cs,,The length of the parameter NuSpecDependencyVersionPlaceholder is 34.
Long Identifier,NuGetGallery.Packaging,ManifestValidatorFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\ManifestValidatorFacts.cs,,The length of the parameter NuSpecDependencySetContainsInvalidId is 36.
Long Identifier,NuGetGallery.Packaging,ManifestValidatorFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\ManifestValidatorFacts.cs,,The length of the parameter NuSpecDependencySetContainsEmptyTargetFramework is 47.
Long Identifier,NuGetGallery.Packaging,ManifestValidatorFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\ManifestValidatorFacts.cs,,The length of the parameter NuSpecDependencySetContainsInvalidVersionRange is 46.
Long Identifier,NuGetGallery.Packaging,ManifestValidatorFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\ManifestValidatorFacts.cs,,The length of the parameter NuSpecFrameworkAssemblyReferenceContainsEmptyTargetFramework is 60.
Long Identifier,NuGetGallery.Packaging,ManifestValidatorFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\ManifestValidatorFacts.cs,,The length of the parameter NuSpecFrameworkAssemblyReferenceContainsUnsupportedTargetFramework is 66.
Long Identifier,NuGetGallery.Packaging,ManifestValidatorFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\ManifestValidatorFacts.cs,,The length of the parameter NuSpecFrameworkAssemblyReferenceContainsDuplicateDependency is 59.
Long Identifier,NuGetGallery.Packaging,ManifestValidatorFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\ManifestValidatorFacts.cs,,The length of the parameter NuSpecDependenciesContainsUnsupportedTargetFramework is 52.
Long Statement,NuGetGallery.Auditing,AuditActorTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditActorTests.cs,GetAspNetOnBehalfOfAsync_WithContext_ResturnActorWithCredentialKey,The length of the statement  "            var cliamsIdentity = new ClaimsIdentity(identity.Object' new List<Claim> { new Claim(NuGetClaims.CredentialKey' "99") }); " is 121.
Long Statement,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_UserAuditRecord,The length of the statement  "            var service = new TestAuditingService(async (string auditData' string resourceType' string filePath' string action' DateTime timestamp) => " is 138.
Long Statement,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_PackageAuditRecord,The length of the statement  "            var service = new TestAuditingService(async (string auditData' string resourceType' string filePath' string action' DateTime timestamp) => " is 138.
Long Statement,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_PackageRegistrationAuditRecord,The length of the statement  "            var auditRecord = new PackageRegistrationAuditRecord(packageRegistration' AuditedPackageRegistrationAction.AddOwner' owner: "b"); " is 129.
Long Statement,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_PackageRegistrationAuditRecord,The length of the statement  "            var service = new TestAuditingService(async (string auditData' string resourceType' string filePath' string action' DateTime timestamp) => " is 138.
Long Statement,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_FailedAuthenticatedOperationAuditRecord,The length of the statement  "            var service = new TestAuditingService(async (string auditData' string resourceType' string filePath' string action' DateTime timestamp) => " is 138.
Long Statement,NuGetGallery.Auditing,AuditRecordTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditRecordTests.cs,SubclassingTypeSet_HasNotChanged,The length of the statement  "                $"Audit record types have been {(actualAuditRecordTypeNames.Length > expectedAuditRecordTypeCount ? "added" : "removed")}.  " + " is 127.
Long Statement,NuGetGallery.Auditing,EnumTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\EnumTests.cs,Verify,The length of the statement  "            var commonMessage = $"The {enumType.Name} enum definition has changed.  Please evaluate this change against all {nameof(AuditingService)} implementations."; " is 156.
Long Statement,NuGetGallery.Auditing,EnumTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\EnumTests.cs,Verify,The length of the statement  "            Assert.False(actualNotInExpected.Any()' $"{commonMessage}  Unexpected members found:  {string.Join("' "' actualNotInExpected)}"); " is 129.
Long Statement,NuGetGallery.Auditing,EnumTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\EnumTests.cs,Verify,The length of the statement  "            Assert.False(expectedNotInActual.Any()' $"{commonMessage}  Expected members not found:  {string.Join("' "' expectedNotInActual)}"); " is 131.
Long Statement,NuGetGallery.Auditing,ReservedNamespaceAuditRecordTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\ReservedNamespaceAuditRecordTests.cs,InvalidActionsThrowException,The length of the statement  "            Assert.Throws<ArgumentException>(() => new ReservedNamespaceAuditRecord(prefix' action' owner.Username' registrations: registrationsList)); " is 139.
Long Statement,NuGetGallery.Auditing,FileSystemAuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\FileSystemAuditingServiceTests.cs,SaveAuditRecord_CreatesAuditFile,The length of the statement  "                Assert.InRange(DateTime.Parse(json["Actor"]["TimestampUtc"].Value<string>())' DateTime.UtcNow.AddMinutes(-1)' DateTime.UtcNow.AddMinutes(1)); " is 141.
Long Statement,NuGetGallery,PackageEditFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Entities\PackageEditFacts.cs,ReadMeState_InternalColumnMapped,The length of the statement  "            var attributes = typeof(PackageEdit).GetProperty("ReadMeStateInternal").GetCustomAttributes(typeof(ColumnAttribute)' true) as ColumnAttribute[]; " is 144.
Long Statement,NuGetGallery,PackageFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Entities\PackageFacts.cs,HasReadMe_InternalColumnMapped,The length of the statement  "            var attributes = typeof(Package).GetProperty("HasReadMeInternal").GetCustomAttributes(typeof(ColumnAttribute)' true) as ColumnAttribute[]; " is 138.
Long Statement,NuGetGallery,PositiveScenarios,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Entities\PackageFacts.cs,ApplyPackageEditUpdatesPackage,The length of the statement  "                Assert.Equal(1' p.PackageEdits.Count); // It has to be deleted from the ObjectContext anyway so no point trying to delete it as part of ApplyEdit. " is 146.
Long Statement,NuGetGallery,TheCtor,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CloudBlobCoreFileStorageServiceFacts.cs,WillCreateABlobContainerForDemandedFoldersIfTheyDoNotExist,The length of the statement  "                simpleCloudBlob.Setup(x => x.DownloadToStreamAsync(It.IsAny<Stream>()' It.IsAny<AccessCondition>())).Returns(Task.FromResult(0)); " is 129.
Long Statement,NuGetGallery,TheCtor,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CloudBlobCoreFileStorageServiceFacts.cs,WillSetPermissionsForDemandedFolderInBlobContainers,The length of the statement  "                simpleCloudBlob.Setup(x => x.DownloadToStreamAsync(It.IsAny<Stream>()' It.IsAny<AccessCondition>())).Returns(Task.FromResult(0)); " is 129.
Long Statement,NuGetGallery,TheGetFileMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CloudBlobCoreFileStorageServiceFacts.cs,WillDownloadTheFile,The length of the statement  "                fakeBlob.Setup(x => x.DownloadToStreamAsync(It.IsAny<Stream>()' It.IsAny<AccessCondition>())).Returns(Task.FromResult(0)).Verifiable(); " is 135.
Long Statement,NuGetGallery,TheSaveFileMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CloudBlobCoreFileStorageServiceFacts.cs,WillThrowIfBlobExistsAndOverwriteFalse,The length of the statement  "                await Assert.ThrowsAsync<InvalidOperationException>(async () => await service.SaveFileAsync(CoreConstants.PackagesFolderName' "theFileName"' new MemoryStream()' overwrite: false)); " is 180.
Long Statement,NuGetGallery,TheGetFileReadUriAsyncMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CloudBlobCoreFileStorageServiceFacts.cs,WillThrowIfFolderIsNull,The length of the statement  "                var ex = await Assert.ThrowsAsync<ArgumentNullException>(() => service.GetFileReadUriAsync(null' "theFileName"' DateTimeOffset.UtcNow.AddHours(3))); " is 148.
Long Statement,NuGetGallery,TheGetFileReadUriAsyncMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CloudBlobCoreFileStorageServiceFacts.cs,WillThrowIfFilenameIsNull,The length of the statement  "                var ex = await Assert.ThrowsAsync<ArgumentNullException>(() => service.GetFileReadUriAsync("theFolder"' null' DateTimeOffset.UtcNow.AddHours(3))); " is 146.
Long Statement,NuGetGallery,TheGetFileReadUriAsyncMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CloudBlobCoreFileStorageServiceFacts.cs,WillThrowIfEndOfAccessIsInThePast,The length of the statement  "                var ex = await Assert.ThrowsAsync<ArgumentOutOfRangeException>(() => service.GetFileReadUriAsync("theFolder"' "theFileName"' inThePast)); " is 137.
Long Statement,NuGetGallery,TheGetFileReadUriAsyncMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CloudBlobCoreFileStorageServiceFacts.cs,WillThrowIfNoEndOfAccessSpecifiedForNonPublicContainer,The length of the statement  "                var ex = await Assert.ThrowsAsync<ArgumentNullException>(() => service.GetFileReadUriAsync(CoreConstants.ValidationFolderName' "theFileName"' null)); " is 149.
Long Statement,NuGetGallery,CorePackageFileServiceFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageFileServiceFacts.cs,BuildFileName,The length of the statement  "                NuGetVersionFormatter.Normalize(version).ToLowerInvariant()' // No matter what ends up getting passed in' the version should be normalized " is 138.
Long Statement,NuGetGallery,CorePackageFileServiceFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageFileServiceFacts.cs,CreatePackage,The length of the statement  "            var package = new Package { Version = "theVersion"' NormalizedVersion = "theNormalizedVersion"' PackageRegistration = packageRegistration }; " is 140.
Long Statement,NuGetGallery,TheSavePackageFileMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageFileServiceFacts.cs,WillThrowIfPackageIsMissingPackageRegistration,The length of the statement  "                var ex = Assert.Throws<ArgumentException>(() => service.SavePackageFileAsync(package' CreatePackageFileStream()).Wait()); " is 121.
Long Statement,NuGetGallery,TheSavePackageFileMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageFileServiceFacts.cs,WillThrowIfPackageIsMissingPackageRegistrationId,The length of the statement  "                var ex = Assert.Throws<ArgumentException>(() => service.SavePackageFileAsync(package' CreatePackageFileStream()).Wait()); " is 121.
Long Statement,NuGetGallery,TheSavePackageFileMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageFileServiceFacts.cs,WillThrowIfPackageIsMissingNormalizedVersionAndVersion,The length of the statement  "                var ex = Assert.Throws<ArgumentException>(() => service.SavePackageFileAsync(package' CreatePackageFileStream()).Wait()); " is 121.
Long Statement,NuGetGallery,TheSavePackageFileMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageFileServiceFacts.cs,WillUseNormalizedRegularVersionIfNormalizedVersionMissing,The length of the statement  "                fileStorageSvc.Setup(x => x.SaveFileAsync(It.IsAny<string>()' BuildFileName("theId"' "1.1.1"' CoreConstants.NuGetPackageFileExtension' CoreConstants.PackageFileSavePathTemplate)' It.IsAny<Stream>()' It.Is<bool>(b => !b))) " is 221.
Long Statement,NuGetGallery,TheSavePackageFileMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageFileServiceFacts.cs,WillSaveTheFileViaTheFileStorageServiceUsingThePackagesFolder,The length of the statement  "                fileStorageSvc.Setup(x => x.SaveFileAsync(CoreConstants.PackagesFolderName' It.IsAny<string>()' It.IsAny<Stream>()' It.Is<bool>(b => !b))) " is 138.
Long Statement,NuGetGallery,TheSavePackageFileMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageFileServiceFacts.cs,WillSaveTheFileViaTheFileStorageServiceUsingAFileNameWithIdAndNormalizedersion,The length of the statement  "                fileStorageSvc.Setup(x => x.SaveFileAsync(It.IsAny<string>()' BuildFileName("theId"' "theNormalizedVersion"' CoreConstants.NuGetPackageFileExtension' CoreConstants.PackageFileSavePathTemplate)' It.IsAny<Stream>()' It.Is<bool>(b => !b))) " is 236.
Long Statement,NuGetGallery,TheGetValidationPackageReadUriAsyncMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageFileServiceFacts.cs,WillThrowIfPackageIsNull,The length of the statement  "                var ex = await Assert.ThrowsAsync<ArgumentNullException>(() => _service.GetValidationPackageReadUriAsync(null' DateTimeOffset.UtcNow.AddHours(3))); " is 147.
Long Statement,NuGetGallery,TheGetPackageReadUriMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageFileServiceFacts.cs,WillUseFileStorageService,The length of the statement  "                string filename = BuildFileName(_package.PackageRegistration.Id' _package.NormalizedVersion' CoreConstants.NuGetPackageFileExtension' CoreConstants.PackageFileSavePathTemplate); " is 177.
Long Statement,NuGetGallery,TheDoesPackageFileExistMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageFileServiceFacts.cs,WillUseFileStorageService,The length of the statement  "                string filename = BuildFileName(_package.PackageRegistration.Id' _package.NormalizedVersion' CoreConstants.NuGetPackageFileExtension' CoreConstants.PackageFileSavePathTemplate); " is 177.
Long Statement,NuGetGallery,TheUpdateIsLatestMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageServiceFacts.cs,ResetsCurrentLatestPackageVersionsBeforeUpdate,The length of the statement  "                var previousLatestStable = new Package { PackageRegistration = packageRegistration' Version = "1.0.0"' IsLatestStable = true }; " is 127.
Long Statement,NuGetGallery,TheUpdateIsLatestMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageServiceFacts.cs,ResetsCurrentLatestPackageVersionsBeforeUpdate,The length of the statement  "                var previousLatest = new Package { PackageRegistration = packageRegistration' Version = "1.0.0-alpha"' IsLatest = true' IsPrerelease = true }; " is 142.
Long Statement,NuGetGallery,TheUpdateIsLatestMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageServiceFacts.cs,ResetsCurrentLatestPackageVersionsBeforeUpdate,The length of the statement  "                var previousLatestStableSemVer2 = new Package { PackageRegistration = packageRegistration' Version = "1.0.1+metadata"' IsLatestStableSemVer2 = true' SemVerLevelKey = SemVerLevelKey.SemVer2 }; " is 191.
Long Statement,NuGetGallery,TheUpdateIsLatestMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageServiceFacts.cs,ResetsCurrentLatestPackageVersionsBeforeUpdate,The length of the statement  "                var previousLatestSemVer2 = new Package { PackageRegistration = packageRegistration' Version = "1.0.1-alpha.1"' IsLatestSemVer2 = true' IsPrerelease = true' SemVerLevelKey = SemVerLevelKey.SemVer2 }; " is 199.
Long Statement,NuGetGallery,TheUpdateIsLatestMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageServiceFacts.cs,ResetsCurrentLatestPackageVersionsBeforeUpdate,The length of the statement  "                var newLatestStable = new Package { PackageRegistration = packageRegistration' Version = "1.0.1"' IsLatestStable = true }; " is 122.
Long Statement,NuGetGallery,TheUpdateIsLatestMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageServiceFacts.cs,ResetsCurrentLatestPackageVersionsBeforeUpdate,The length of the statement  "                var newLatest = new Package { PackageRegistration = packageRegistration' Version = "1.0.2-alpha"' IsLatest = true' IsPrerelease = true }; " is 137.
Long Statement,NuGetGallery,TheUpdateIsLatestMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageServiceFacts.cs,ResetsCurrentLatestPackageVersionsBeforeUpdate,The length of the statement  "                var newLatestStableSemVer2 = new Package { PackageRegistration = packageRegistration' Version = "1.0.2+metadata"' IsLatestStableSemVer2 = true' SemVerLevelKey = SemVerLevelKey.SemVer2 }; " is 186.
Long Statement,NuGetGallery,TheUpdateIsLatestMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageServiceFacts.cs,ResetsCurrentLatestPackageVersionsBeforeUpdate,The length of the statement  "                var newLatestSemVer2 = new Package { PackageRegistration = packageRegistration' Version = "1.0.3-alpha.1"' IsLatestSemVer2 = true' IsPrerelease = true' SemVerLevelKey = SemVerLevelKey.SemVer2 }; " is 194.
Long Statement,NuGetGallery,TheUpdateIsLatestMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageServiceFacts.cs,UpdateIsLatestScenarioForSemVer2PrereleaseAsAbsoluteLatest,The length of the statement  "                var semVer2Package = new Package { PackageRegistration = packageRegistration' Version = "1.0.1-alpha.1"' IsPrerelease = true' SemVerLevelKey = SemVerLevelKey.SemVer2 }; " is 168.
Long Statement,NuGetGallery,TheUpdateIsLatestMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageServiceFacts.cs,UpdateIsLatestScenarioForSemVer2StableAsAbsoluteLatest,The length of the statement  "                var semVer2Package = new Package { PackageRegistration = packageRegistration' Version = "1.0.1+metadata"' SemVerLevelKey = SemVerLevelKey.SemVer2 }; " is 148.
Long Statement,NuGetGallery.Packaging,ManifestValidatorFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\ManifestValidatorFacts.cs,ReturnsErrorIfFrameworkAssemblyReferenceContainsUnsupportedTargetFramework,The length of the statement  "            Assert.Equal(new[] { String.Format(CoreStrings.Manifest_TargetFrameworkNotSupported' "Unsupported'Version=v0.0") }' GetErrors(nuspecStream)); " is 141.
Long Statement,NuGetGallery.Packaging,ManifestValidatorFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\ManifestValidatorFacts.cs,ReturnsErrorIfDependencySetContainsInvalidId,The length of the statement  "            Assert.Equal(new[] { $"Invalid package version for a dependency with id 'jQuery' in package 'packageA.1.0.1-alpha': ''" }' GetErrors(nuspecStream)); " is 148.
Long Statement,NuGetGallery.Packaging,ManifestValidatorFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\ManifestValidatorFacts.cs,ReturnsErrorIfDependencySetContainsUnsupportedTargetFramework,The length of the statement  "            Assert.Equal(new[] { String.Format(CoreStrings.Manifest_TargetFrameworkNotSupported' "Unsupported'Version=v0.0") }' GetErrors(nuspecStream)); " is 141.
Long Statement,NuGetGallery.Packaging,ManifestValidatorFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\ManifestValidatorFacts.cs,ReturnsErrorIfDependencySetContainsDuplicateDependency,The length of the statement  "            Assert.Equal(new[] { String.Format(CoreStrings.Manifest_DuplicateDependency' "net40"' "SomeDependency") }' GetErrors(nuspecStream)); " is 132.
Long Statement,NuGetGallery.Packaging,ManifestValidatorFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\ManifestValidatorFacts.cs,ReturnsErrorIfDependencyVersionRangeInvalid,The length of the statement  "            Assert.Equal(new[] { $"Invalid package version for a dependency with id 'a.b.c' in package 'packageA.1.0.1-alpha': '{versionRange}'" }' errors); " is 144.
Long Statement,NuGetGallery.Packaging,PackageIdValidatorTest,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\PackageIdValidatorTest.cs,ValidatePackageIdInvalidIdThrows,The length of the statement  "            Assert.Equal("The package ID '" + packageId + "' contains invalid characters. Examples of valid package IDs include 'MyPackage' and 'MyPackage.Sample'."' thrownException.Message); " is 179.
Long Statement,NuGetGallery.Packaging,NupkgRewriterFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\NupkgRewriterFacts.cs,CanRewriteTheNuspecInANupkg,The length of the statement  "                Assert.Equal("In perfect harmony"' nuspec.GetMetadata().First(kvp => kvp.Key == PackageMetadataStrings.ReleaseNotes).Value); " is 124.
Long Statement,NuGetGallery.Packaging,NupkgRewriterFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\NupkgRewriterFacts.cs,RewritingTheNuspecDoesNotAddEmptyMetadataElements,The length of the statement  "                var metadataDescendants = nuspec.Xml.Document.Descendants().Where(d => d.Name.LocalName == PackageMetadataStrings.Metadata).Descendants(); " is 138.
Long Statement,NuGetGallery.Packaging,NupkgRewriterFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\NupkgRewriterFacts.cs,RewritingTheNuspecCreatesValidNewElements,The length of the statement  "                Assert.Equal(nuspec.GetMetadata().First(kvp => kvp.Key == PackageMetadataStrings.LicenseUrl).Value' "http://myget.org"); " is 120.
Long Statement,NuGetGallery.Packaging,NupkgRewriterFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\NupkgRewriterFacts.cs,RewritingTheNuspecCreatesValidNewElements,The length of the statement  "                Assert.Equal(nuspec.GetMetadata().First(kvp => kvp.Key == PackageMetadataStrings.RequireLicenseAcceptance).Value' "true"); " is 122.
Empty Catch Block,NuGetGallery.Utilities,TestDirectory,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Utilities\TestDirectory.cs,DeleteDirectory,The method has an empty catch block.
Magic Number,NuGetGallery.Auditing,AggregateAuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AggregateAuditingServiceTests.cs,CreateAuditRecord,The following statement contains a magic number: var packageRegistration = new PackageRegistration()              {                  DownloadCount = 1'                  Id = "a"'                  Key = 2              };
Magic Number,NuGetGallery.Auditing,AggregateAuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AggregateAuditingServiceTests.cs,CreateTestAuditingServices,The following statement contains a magic number: for (var i = 0; i < 10; ++i)              {                  services.Add(new TestAuditingService());              }
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_UserAuditRecord,The following statement contains a magic number: var user = new User()              {                  CreatedUtc = DateTime.Now'                  Credentials = new List<Credential>()                  {                      new Credential(                          CredentialTypes.Password.V3'                          value: "a"'                          expiration: new TimeSpan(days: 1' hours: 2' minutes:3' seconds: 4))                  }'                  EmailAddress = "b"'                  Roles = new List<Role>() { new Role() { Key = 5' Name = "c" } }'                  UnconfirmedEmailAddress = "d"'                  Username = "e"              };
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_UserAuditRecord,The following statement contains a magic number: var user = new User()              {                  CreatedUtc = DateTime.Now'                  Credentials = new List<Credential>()                  {                      new Credential(                          CredentialTypes.Password.V3'                          value: "a"'                          expiration: new TimeSpan(days: 1' hours: 2' minutes:3' seconds: 4))                  }'                  EmailAddress = "b"'                  Roles = new List<Role>() { new Role() { Key = 5' Name = "c" } }'                  UnconfirmedEmailAddress = "d"'                  Username = "e"              };
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_UserAuditRecord,The following statement contains a magic number: var user = new User()              {                  CreatedUtc = DateTime.Now'                  Credentials = new List<Credential>()                  {                      new Credential(                          CredentialTypes.Password.V3'                          value: "a"'                          expiration: new TimeSpan(days: 1' hours: 2' minutes:3' seconds: 4))                  }'                  EmailAddress = "b"'                  Roles = new List<Role>() { new Role() { Key = 5' Name = "c" } }'                  UnconfirmedEmailAddress = "d"'                  Username = "e"              };
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_UserAuditRecord,The following statement contains a magic number: var user = new User()              {                  CreatedUtc = DateTime.Now'                  Credentials = new List<Credential>()                  {                      new Credential(                          CredentialTypes.Password.V3'                          value: "a"'                          expiration: new TimeSpan(days: 1' hours: 2' minutes:3' seconds: 4))                  }'                  EmailAddress = "b"'                  Roles = new List<Role>() { new Role() { Key = 5' Name = "c" } }'                  UnconfirmedEmailAddress = "d"'                  Username = "e"              };
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_PackageAuditRecord,The following statement contains a magic number: var package = new Package()              {                  Copyright = "a"'                  Created = DateTime.Now'  #pragma warning disable CS0612 // Type or member is obsolete                  Deleted = true'  #pragma warning restore CS0612 // Type or member is obsolete                  Description = "b"'                  DownloadCount = 1'  #pragma warning disable CS0612 // Type or member is obsolete                  ExternalPackageUrl = "c"'  #pragma warning restore CS0612 // Type or member is obsolete                  FlattenedAuthors = "d"'                  FlattenedDependencies = "e"'                  Hash = "f"'                  HashAlgorithm = "g"'                  HideLicenseReport = true'                  IconUrl = "h"'                  IsLatest = true'                  IsLatestStable = true'                  IsPrerelease = true'                  Key = 2'                  Language = "i"'                  LastEdited = DateTime.Now.AddMinutes(1)'                  LastUpdated = DateTime.Now.AddMinutes(2)'                  LicenseNames = "j"'                  LicenseReportUrl = "k"'                  LicenseUrl = "l"'                  Listed = true'                  MinClientVersion = "m"'                  NormalizedVersion = "n"'                  PackageFileSize = 3'                  PackageRegistration = new PackageRegistration() { Id = "o" }'                  PackageRegistrationKey = 4'                  PackageStatusKey = PackageStatus.Deleted'                  ProjectUrl = "p"'                  Published = DateTime.Now.AddMinutes(3)'                  ReleaseNotes = "q"'                  RequiresLicenseAcceptance = true'                  Summary = "r"'                  Tags = "s"'                  Title = "t"'                  UserKey = 5'                  Version = "u"              };
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_PackageAuditRecord,The following statement contains a magic number: var package = new Package()              {                  Copyright = "a"'                  Created = DateTime.Now'  #pragma warning disable CS0612 // Type or member is obsolete                  Deleted = true'  #pragma warning restore CS0612 // Type or member is obsolete                  Description = "b"'                  DownloadCount = 1'  #pragma warning disable CS0612 // Type or member is obsolete                  ExternalPackageUrl = "c"'  #pragma warning restore CS0612 // Type or member is obsolete                  FlattenedAuthors = "d"'                  FlattenedDependencies = "e"'                  Hash = "f"'                  HashAlgorithm = "g"'                  HideLicenseReport = true'                  IconUrl = "h"'                  IsLatest = true'                  IsLatestStable = true'                  IsPrerelease = true'                  Key = 2'                  Language = "i"'                  LastEdited = DateTime.Now.AddMinutes(1)'                  LastUpdated = DateTime.Now.AddMinutes(2)'                  LicenseNames = "j"'                  LicenseReportUrl = "k"'                  LicenseUrl = "l"'                  Listed = true'                  MinClientVersion = "m"'                  NormalizedVersion = "n"'                  PackageFileSize = 3'                  PackageRegistration = new PackageRegistration() { Id = "o" }'                  PackageRegistrationKey = 4'                  PackageStatusKey = PackageStatus.Deleted'                  ProjectUrl = "p"'                  Published = DateTime.Now.AddMinutes(3)'                  ReleaseNotes = "q"'                  RequiresLicenseAcceptance = true'                  Summary = "r"'                  Tags = "s"'                  Title = "t"'                  UserKey = 5'                  Version = "u"              };
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_PackageAuditRecord,The following statement contains a magic number: var package = new Package()              {                  Copyright = "a"'                  Created = DateTime.Now'  #pragma warning disable CS0612 // Type or member is obsolete                  Deleted = true'  #pragma warning restore CS0612 // Type or member is obsolete                  Description = "b"'                  DownloadCount = 1'  #pragma warning disable CS0612 // Type or member is obsolete                  ExternalPackageUrl = "c"'  #pragma warning restore CS0612 // Type or member is obsolete                  FlattenedAuthors = "d"'                  FlattenedDependencies = "e"'                  Hash = "f"'                  HashAlgorithm = "g"'                  HideLicenseReport = true'                  IconUrl = "h"'                  IsLatest = true'                  IsLatestStable = true'                  IsPrerelease = true'                  Key = 2'                  Language = "i"'                  LastEdited = DateTime.Now.AddMinutes(1)'                  LastUpdated = DateTime.Now.AddMinutes(2)'                  LicenseNames = "j"'                  LicenseReportUrl = "k"'                  LicenseUrl = "l"'                  Listed = true'                  MinClientVersion = "m"'                  NormalizedVersion = "n"'                  PackageFileSize = 3'                  PackageRegistration = new PackageRegistration() { Id = "o" }'                  PackageRegistrationKey = 4'                  PackageStatusKey = PackageStatus.Deleted'                  ProjectUrl = "p"'                  Published = DateTime.Now.AddMinutes(3)'                  ReleaseNotes = "q"'                  RequiresLicenseAcceptance = true'                  Summary = "r"'                  Tags = "s"'                  Title = "t"'                  UserKey = 5'                  Version = "u"              };
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_PackageAuditRecord,The following statement contains a magic number: var package = new Package()              {                  Copyright = "a"'                  Created = DateTime.Now'  #pragma warning disable CS0612 // Type or member is obsolete                  Deleted = true'  #pragma warning restore CS0612 // Type or member is obsolete                  Description = "b"'                  DownloadCount = 1'  #pragma warning disable CS0612 // Type or member is obsolete                  ExternalPackageUrl = "c"'  #pragma warning restore CS0612 // Type or member is obsolete                  FlattenedAuthors = "d"'                  FlattenedDependencies = "e"'                  Hash = "f"'                  HashAlgorithm = "g"'                  HideLicenseReport = true'                  IconUrl = "h"'                  IsLatest = true'                  IsLatestStable = true'                  IsPrerelease = true'                  Key = 2'                  Language = "i"'                  LastEdited = DateTime.Now.AddMinutes(1)'                  LastUpdated = DateTime.Now.AddMinutes(2)'                  LicenseNames = "j"'                  LicenseReportUrl = "k"'                  LicenseUrl = "l"'                  Listed = true'                  MinClientVersion = "m"'                  NormalizedVersion = "n"'                  PackageFileSize = 3'                  PackageRegistration = new PackageRegistration() { Id = "o" }'                  PackageRegistrationKey = 4'                  PackageStatusKey = PackageStatus.Deleted'                  ProjectUrl = "p"'                  Published = DateTime.Now.AddMinutes(3)'                  ReleaseNotes = "q"'                  RequiresLicenseAcceptance = true'                  Summary = "r"'                  Tags = "s"'                  Title = "t"'                  UserKey = 5'                  Version = "u"              };
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_PackageAuditRecord,The following statement contains a magic number: var package = new Package()              {                  Copyright = "a"'                  Created = DateTime.Now'  #pragma warning disable CS0612 // Type or member is obsolete                  Deleted = true'  #pragma warning restore CS0612 // Type or member is obsolete                  Description = "b"'                  DownloadCount = 1'  #pragma warning disable CS0612 // Type or member is obsolete                  ExternalPackageUrl = "c"'  #pragma warning restore CS0612 // Type or member is obsolete                  FlattenedAuthors = "d"'                  FlattenedDependencies = "e"'                  Hash = "f"'                  HashAlgorithm = "g"'                  HideLicenseReport = true'                  IconUrl = "h"'                  IsLatest = true'                  IsLatestStable = true'                  IsPrerelease = true'                  Key = 2'                  Language = "i"'                  LastEdited = DateTime.Now.AddMinutes(1)'                  LastUpdated = DateTime.Now.AddMinutes(2)'                  LicenseNames = "j"'                  LicenseReportUrl = "k"'                  LicenseUrl = "l"'                  Listed = true'                  MinClientVersion = "m"'                  NormalizedVersion = "n"'                  PackageFileSize = 3'                  PackageRegistration = new PackageRegistration() { Id = "o" }'                  PackageRegistrationKey = 4'                  PackageStatusKey = PackageStatus.Deleted'                  ProjectUrl = "p"'                  Published = DateTime.Now.AddMinutes(3)'                  ReleaseNotes = "q"'                  RequiresLicenseAcceptance = true'                  Summary = "r"'                  Tags = "s"'                  Title = "t"'                  UserKey = 5'                  Version = "u"              };
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_PackageAuditRecord,The following statement contains a magic number: var package = new Package()              {                  Copyright = "a"'                  Created = DateTime.Now'  #pragma warning disable CS0612 // Type or member is obsolete                  Deleted = true'  #pragma warning restore CS0612 // Type or member is obsolete                  Description = "b"'                  DownloadCount = 1'  #pragma warning disable CS0612 // Type or member is obsolete                  ExternalPackageUrl = "c"'  #pragma warning restore CS0612 // Type or member is obsolete                  FlattenedAuthors = "d"'                  FlattenedDependencies = "e"'                  Hash = "f"'                  HashAlgorithm = "g"'                  HideLicenseReport = true'                  IconUrl = "h"'                  IsLatest = true'                  IsLatestStable = true'                  IsPrerelease = true'                  Key = 2'                  Language = "i"'                  LastEdited = DateTime.Now.AddMinutes(1)'                  LastUpdated = DateTime.Now.AddMinutes(2)'                  LicenseNames = "j"'                  LicenseReportUrl = "k"'                  LicenseUrl = "l"'                  Listed = true'                  MinClientVersion = "m"'                  NormalizedVersion = "n"'                  PackageFileSize = 3'                  PackageRegistration = new PackageRegistration() { Id = "o" }'                  PackageRegistrationKey = 4'                  PackageStatusKey = PackageStatus.Deleted'                  ProjectUrl = "p"'                  Published = DateTime.Now.AddMinutes(3)'                  ReleaseNotes = "q"'                  RequiresLicenseAcceptance = true'                  Summary = "r"'                  Tags = "s"'                  Title = "t"'                  UserKey = 5'                  Version = "u"              };
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_PackageAuditRecord,The following statement contains a magic number: var service = new TestAuditingService(async (string auditData' string resourceType' string filePath' string action' DateTime timestamp) =>              {                  Assert.Equal("Package"' resourceType);                  Assert.Equal("o/u"' filePath);                  Assert.Equal("create"' action);                  Assert.InRange(timestamp' DateTime.UtcNow.AddMinutes(-1)' DateTime.UtcNow.AddMinutes(1));                    var jObject = JObject.Parse(auditData);                    var record = jObject["Record"];                    Assert.Equal("o"' record["Id"].Value<string>());                  Assert.Equal("u"' record["Version"].Value<string>());                  Assert.Equal("f"' record["Hash"].Value<string>());                    var packageRecord = record["PackageRecord"];                    Assert.Equal(4' packageRecord["PackageRegistrationKey"].Value<int>());                  Assert.Equal("a"' packageRecord["Copyright"].Value<string>());                  Assert.Equal(package.Created.ToUniversalTime()' packageRecord["Created"].Value<DateTime>());                  Assert.Equal("b"' packageRecord["Description"].Value<string>());                  Assert.Equal("q"' packageRecord["ReleaseNotes"].Value<string>());                  Assert.Equal(1' packageRecord["DownloadCount"].Value<int>());                  Assert.Equal(JTokenType.Null' packageRecord["ExternalPackageUrl"].Type);                  Assert.Equal("g"' packageRecord["HashAlgorithm"].Value<string>());                  Assert.Equal("f"' packageRecord["Hash"].Value<string>());                  Assert.Equal("h"' packageRecord["IconUrl"].Value<string>());                  Assert.True(packageRecord["IsLatest"].Value<bool>());                  Assert.True(packageRecord["IsLatestStable"].Value<bool>());                  Assert.Equal(package.LastUpdated.ToUniversalTime()' packageRecord["LastUpdated"].Value<DateTime>());                  Assert.Equal(package.LastEdited.Value.ToUniversalTime()' packageRecord["LastEdited"].Value<DateTime>());                  Assert.Equal("l"' packageRecord["LicenseUrl"].Value<string>());                  Assert.True(packageRecord["HideLicenseReport"].Value<bool>());                  Assert.Equal("i"' packageRecord["Language"].Value<string>());                  Assert.Equal(package.Published.ToUniversalTime()' packageRecord["Published"].Value<DateTime>());                  Assert.Equal(3' packageRecord["PackageFileSize"].Value<int>());                  Assert.Equal("p"' packageRecord["ProjectUrl"].Value<string>());                  Assert.True(packageRecord["RequiresLicenseAcceptance"].Value<bool>());                  Assert.Equal("r"' packageRecord["Summary"].Value<string>());                  Assert.Equal("s"' packageRecord["Tags"].Value<string>());                  Assert.Equal("t"' packageRecord["Title"].Value<string>());                  Assert.Equal("u"' packageRecord["Version"].Value<string>());                  Assert.Equal("n"' packageRecord["NormalizedVersion"].Value<string>());                  Assert.Equal("j"' packageRecord["LicenseNames"].Value<string>());                  Assert.Equal("k"' packageRecord["LicenseReportUrl"].Value<string>());                  Assert.True(packageRecord["Listed"].Value<bool>());                  Assert.True(packageRecord["IsPrerelease"].Value<bool>());                  Assert.Equal("d"' packageRecord["FlattenedAuthors"].Value<string>());                  Assert.Equal("e"' packageRecord["FlattenedDependencies"].Value<string>());                  Assert.Equal(2' packageRecord["Key"].Value<int>());                  Assert.Equal("m"' packageRecord["MinClientVersion"].Value<string>());                  Assert.Equal(5' packageRecord["UserKey"].Value<int>());                  Assert.True(packageRecord["Deleted"].Value<bool>());                  Assert.Equal(1' packageRecord["PackageStatusKey"].Value<int>());                    var registrationRecord = record["RegistrationRecord"];                    Assert.Equal("o"' registrationRecord["Id"].Value<string>());                  Assert.Equal(0' registrationRecord["DownloadCount"].Value<int>());                  Assert.Equal(0' registrationRecord["Key"].Value<int>());                    Assert.Equal("v"' record["Reason"].Value<string>());                  Assert.Equal("Create"' record["Action"].Value<string>());                    await VerifyActor(jObject);                    return null;              });
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_PackageAuditRecord,The following statement contains a magic number: var service = new TestAuditingService(async (string auditData' string resourceType' string filePath' string action' DateTime timestamp) =>              {                  Assert.Equal("Package"' resourceType);                  Assert.Equal("o/u"' filePath);                  Assert.Equal("create"' action);                  Assert.InRange(timestamp' DateTime.UtcNow.AddMinutes(-1)' DateTime.UtcNow.AddMinutes(1));                    var jObject = JObject.Parse(auditData);                    var record = jObject["Record"];                    Assert.Equal("o"' record["Id"].Value<string>());                  Assert.Equal("u"' record["Version"].Value<string>());                  Assert.Equal("f"' record["Hash"].Value<string>());                    var packageRecord = record["PackageRecord"];                    Assert.Equal(4' packageRecord["PackageRegistrationKey"].Value<int>());                  Assert.Equal("a"' packageRecord["Copyright"].Value<string>());                  Assert.Equal(package.Created.ToUniversalTime()' packageRecord["Created"].Value<DateTime>());                  Assert.Equal("b"' packageRecord["Description"].Value<string>());                  Assert.Equal("q"' packageRecord["ReleaseNotes"].Value<string>());                  Assert.Equal(1' packageRecord["DownloadCount"].Value<int>());                  Assert.Equal(JTokenType.Null' packageRecord["ExternalPackageUrl"].Type);                  Assert.Equal("g"' packageRecord["HashAlgorithm"].Value<string>());                  Assert.Equal("f"' packageRecord["Hash"].Value<string>());                  Assert.Equal("h"' packageRecord["IconUrl"].Value<string>());                  Assert.True(packageRecord["IsLatest"].Value<bool>());                  Assert.True(packageRecord["IsLatestStable"].Value<bool>());                  Assert.Equal(package.LastUpdated.ToUniversalTime()' packageRecord["LastUpdated"].Value<DateTime>());                  Assert.Equal(package.LastEdited.Value.ToUniversalTime()' packageRecord["LastEdited"].Value<DateTime>());                  Assert.Equal("l"' packageRecord["LicenseUrl"].Value<string>());                  Assert.True(packageRecord["HideLicenseReport"].Value<bool>());                  Assert.Equal("i"' packageRecord["Language"].Value<string>());                  Assert.Equal(package.Published.ToUniversalTime()' packageRecord["Published"].Value<DateTime>());                  Assert.Equal(3' packageRecord["PackageFileSize"].Value<int>());                  Assert.Equal("p"' packageRecord["ProjectUrl"].Value<string>());                  Assert.True(packageRecord["RequiresLicenseAcceptance"].Value<bool>());                  Assert.Equal("r"' packageRecord["Summary"].Value<string>());                  Assert.Equal("s"' packageRecord["Tags"].Value<string>());                  Assert.Equal("t"' packageRecord["Title"].Value<string>());                  Assert.Equal("u"' packageRecord["Version"].Value<string>());                  Assert.Equal("n"' packageRecord["NormalizedVersion"].Value<string>());                  Assert.Equal("j"' packageRecord["LicenseNames"].Value<string>());                  Assert.Equal("k"' packageRecord["LicenseReportUrl"].Value<string>());                  Assert.True(packageRecord["Listed"].Value<bool>());                  Assert.True(packageRecord["IsPrerelease"].Value<bool>());                  Assert.Equal("d"' packageRecord["FlattenedAuthors"].Value<string>());                  Assert.Equal("e"' packageRecord["FlattenedDependencies"].Value<string>());                  Assert.Equal(2' packageRecord["Key"].Value<int>());                  Assert.Equal("m"' packageRecord["MinClientVersion"].Value<string>());                  Assert.Equal(5' packageRecord["UserKey"].Value<int>());                  Assert.True(packageRecord["Deleted"].Value<bool>());                  Assert.Equal(1' packageRecord["PackageStatusKey"].Value<int>());                    var registrationRecord = record["RegistrationRecord"];                    Assert.Equal("o"' registrationRecord["Id"].Value<string>());                  Assert.Equal(0' registrationRecord["DownloadCount"].Value<int>());                  Assert.Equal(0' registrationRecord["Key"].Value<int>());                    Assert.Equal("v"' record["Reason"].Value<string>());                  Assert.Equal("Create"' record["Action"].Value<string>());                    await VerifyActor(jObject);                    return null;              });
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_PackageAuditRecord,The following statement contains a magic number: var service = new TestAuditingService(async (string auditData' string resourceType' string filePath' string action' DateTime timestamp) =>              {                  Assert.Equal("Package"' resourceType);                  Assert.Equal("o/u"' filePath);                  Assert.Equal("create"' action);                  Assert.InRange(timestamp' DateTime.UtcNow.AddMinutes(-1)' DateTime.UtcNow.AddMinutes(1));                    var jObject = JObject.Parse(auditData);                    var record = jObject["Record"];                    Assert.Equal("o"' record["Id"].Value<string>());                  Assert.Equal("u"' record["Version"].Value<string>());                  Assert.Equal("f"' record["Hash"].Value<string>());                    var packageRecord = record["PackageRecord"];                    Assert.Equal(4' packageRecord["PackageRegistrationKey"].Value<int>());                  Assert.Equal("a"' packageRecord["Copyright"].Value<string>());                  Assert.Equal(package.Created.ToUniversalTime()' packageRecord["Created"].Value<DateTime>());                  Assert.Equal("b"' packageRecord["Description"].Value<string>());                  Assert.Equal("q"' packageRecord["ReleaseNotes"].Value<string>());                  Assert.Equal(1' packageRecord["DownloadCount"].Value<int>());                  Assert.Equal(JTokenType.Null' packageRecord["ExternalPackageUrl"].Type);                  Assert.Equal("g"' packageRecord["HashAlgorithm"].Value<string>());                  Assert.Equal("f"' packageRecord["Hash"].Value<string>());                  Assert.Equal("h"' packageRecord["IconUrl"].Value<string>());                  Assert.True(packageRecord["IsLatest"].Value<bool>());                  Assert.True(packageRecord["IsLatestStable"].Value<bool>());                  Assert.Equal(package.LastUpdated.ToUniversalTime()' packageRecord["LastUpdated"].Value<DateTime>());                  Assert.Equal(package.LastEdited.Value.ToUniversalTime()' packageRecord["LastEdited"].Value<DateTime>());                  Assert.Equal("l"' packageRecord["LicenseUrl"].Value<string>());                  Assert.True(packageRecord["HideLicenseReport"].Value<bool>());                  Assert.Equal("i"' packageRecord["Language"].Value<string>());                  Assert.Equal(package.Published.ToUniversalTime()' packageRecord["Published"].Value<DateTime>());                  Assert.Equal(3' packageRecord["PackageFileSize"].Value<int>());                  Assert.Equal("p"' packageRecord["ProjectUrl"].Value<string>());                  Assert.True(packageRecord["RequiresLicenseAcceptance"].Value<bool>());                  Assert.Equal("r"' packageRecord["Summary"].Value<string>());                  Assert.Equal("s"' packageRecord["Tags"].Value<string>());                  Assert.Equal("t"' packageRecord["Title"].Value<string>());                  Assert.Equal("u"' packageRecord["Version"].Value<string>());                  Assert.Equal("n"' packageRecord["NormalizedVersion"].Value<string>());                  Assert.Equal("j"' packageRecord["LicenseNames"].Value<string>());                  Assert.Equal("k"' packageRecord["LicenseReportUrl"].Value<string>());                  Assert.True(packageRecord["Listed"].Value<bool>());                  Assert.True(packageRecord["IsPrerelease"].Value<bool>());                  Assert.Equal("d"' packageRecord["FlattenedAuthors"].Value<string>());                  Assert.Equal("e"' packageRecord["FlattenedDependencies"].Value<string>());                  Assert.Equal(2' packageRecord["Key"].Value<int>());                  Assert.Equal("m"' packageRecord["MinClientVersion"].Value<string>());                  Assert.Equal(5' packageRecord["UserKey"].Value<int>());                  Assert.True(packageRecord["Deleted"].Value<bool>());                  Assert.Equal(1' packageRecord["PackageStatusKey"].Value<int>());                    var registrationRecord = record["RegistrationRecord"];                    Assert.Equal("o"' registrationRecord["Id"].Value<string>());                  Assert.Equal(0' registrationRecord["DownloadCount"].Value<int>());                  Assert.Equal(0' registrationRecord["Key"].Value<int>());                    Assert.Equal("v"' record["Reason"].Value<string>());                  Assert.Equal("Create"' record["Action"].Value<string>());                    await VerifyActor(jObject);                    return null;              });
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_PackageAuditRecord,The following statement contains a magic number: var service = new TestAuditingService(async (string auditData' string resourceType' string filePath' string action' DateTime timestamp) =>              {                  Assert.Equal("Package"' resourceType);                  Assert.Equal("o/u"' filePath);                  Assert.Equal("create"' action);                  Assert.InRange(timestamp' DateTime.UtcNow.AddMinutes(-1)' DateTime.UtcNow.AddMinutes(1));                    var jObject = JObject.Parse(auditData);                    var record = jObject["Record"];                    Assert.Equal("o"' record["Id"].Value<string>());                  Assert.Equal("u"' record["Version"].Value<string>());                  Assert.Equal("f"' record["Hash"].Value<string>());                    var packageRecord = record["PackageRecord"];                    Assert.Equal(4' packageRecord["PackageRegistrationKey"].Value<int>());                  Assert.Equal("a"' packageRecord["Copyright"].Value<string>());                  Assert.Equal(package.Created.ToUniversalTime()' packageRecord["Created"].Value<DateTime>());                  Assert.Equal("b"' packageRecord["Description"].Value<string>());                  Assert.Equal("q"' packageRecord["ReleaseNotes"].Value<string>());                  Assert.Equal(1' packageRecord["DownloadCount"].Value<int>());                  Assert.Equal(JTokenType.Null' packageRecord["ExternalPackageUrl"].Type);                  Assert.Equal("g"' packageRecord["HashAlgorithm"].Value<string>());                  Assert.Equal("f"' packageRecord["Hash"].Value<string>());                  Assert.Equal("h"' packageRecord["IconUrl"].Value<string>());                  Assert.True(packageRecord["IsLatest"].Value<bool>());                  Assert.True(packageRecord["IsLatestStable"].Value<bool>());                  Assert.Equal(package.LastUpdated.ToUniversalTime()' packageRecord["LastUpdated"].Value<DateTime>());                  Assert.Equal(package.LastEdited.Value.ToUniversalTime()' packageRecord["LastEdited"].Value<DateTime>());                  Assert.Equal("l"' packageRecord["LicenseUrl"].Value<string>());                  Assert.True(packageRecord["HideLicenseReport"].Value<bool>());                  Assert.Equal("i"' packageRecord["Language"].Value<string>());                  Assert.Equal(package.Published.ToUniversalTime()' packageRecord["Published"].Value<DateTime>());                  Assert.Equal(3' packageRecord["PackageFileSize"].Value<int>());                  Assert.Equal("p"' packageRecord["ProjectUrl"].Value<string>());                  Assert.True(packageRecord["RequiresLicenseAcceptance"].Value<bool>());                  Assert.Equal("r"' packageRecord["Summary"].Value<string>());                  Assert.Equal("s"' packageRecord["Tags"].Value<string>());                  Assert.Equal("t"' packageRecord["Title"].Value<string>());                  Assert.Equal("u"' packageRecord["Version"].Value<string>());                  Assert.Equal("n"' packageRecord["NormalizedVersion"].Value<string>());                  Assert.Equal("j"' packageRecord["LicenseNames"].Value<string>());                  Assert.Equal("k"' packageRecord["LicenseReportUrl"].Value<string>());                  Assert.True(packageRecord["Listed"].Value<bool>());                  Assert.True(packageRecord["IsPrerelease"].Value<bool>());                  Assert.Equal("d"' packageRecord["FlattenedAuthors"].Value<string>());                  Assert.Equal("e"' packageRecord["FlattenedDependencies"].Value<string>());                  Assert.Equal(2' packageRecord["Key"].Value<int>());                  Assert.Equal("m"' packageRecord["MinClientVersion"].Value<string>());                  Assert.Equal(5' packageRecord["UserKey"].Value<int>());                  Assert.True(packageRecord["Deleted"].Value<bool>());                  Assert.Equal(1' packageRecord["PackageStatusKey"].Value<int>());                    var registrationRecord = record["RegistrationRecord"];                    Assert.Equal("o"' registrationRecord["Id"].Value<string>());                  Assert.Equal(0' registrationRecord["DownloadCount"].Value<int>());                  Assert.Equal(0' registrationRecord["Key"].Value<int>());                    Assert.Equal("v"' record["Reason"].Value<string>());                  Assert.Equal("Create"' record["Action"].Value<string>());                    await VerifyActor(jObject);                    return null;              });
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_PackageRegistrationAuditRecord,The following statement contains a magic number: var packageRegistration = new PackageRegistration()              {                  DownloadCount = 1'                  Id = "a"'                  Key = 2              };
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_PackageRegistrationAuditRecord,The following statement contains a magic number: var service = new TestAuditingService(async (string auditData' string resourceType' string filePath' string action' DateTime timestamp) =>              {                  Assert.Equal("PackageRegistration"' resourceType);                  Assert.Equal("a"' filePath);                  Assert.Equal("addowner"' action);                  Assert.InRange(timestamp' DateTime.UtcNow.AddMinutes(-1)' DateTime.UtcNow.AddMinutes(1));                    var jObject = JObject.Parse(auditData);                    var record = jObject["Record"];                    Assert.Equal("a"' record["Id"].Value<string>());                    var registrationRecord = record["RegistrationRecord"];                    Assert.Equal("a"' registrationRecord["Id"].Value<string>());                  Assert.Equal(1' registrationRecord["DownloadCount"].Value<int>());                  Assert.Equal(2' registrationRecord["Key"].Value<int>());                    Assert.Equal("b"' record["Owner"].Value<string>());                  Assert.Equal("AddOwner"' record["Action"].Value<string>());                    await VerifyActor(jObject);                    return null;              });
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_FailedAuthenticatedOperationAuditRecord,The following statement contains a magic number: var expiresIn = new TimeSpan(days: 1' hours: 2' minutes: 3' seconds: 4);
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_FailedAuthenticatedOperationAuditRecord,The following statement contains a magic number: var expiresIn = new TimeSpan(days: 1' hours: 2' minutes: 3' seconds: 4);
Magic Number,NuGetGallery.Auditing,AuditingServiceTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditingServiceTests.cs,SaveAuditRecordAsync_FailedAuthenticatedOperationAuditRecord,The following statement contains a magic number: var expiresIn = new TimeSpan(days: 1' hours: 2' minutes: 3' seconds: 4);
Magic Number,NuGetGallery.Auditing,AuditRecordTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditRecordTests.cs,SubclassingTypeSet_HasNotChanged,The following statement contains a magic number: var expectedAuditRecordTypeCount = 6;
Magic Number,NuGetGallery.Auditing,AuditRecordTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditRecordTests.cs,SubclassingTypeSet_HasNotChanged,The following statement contains a magic number: Assert.Equal("NuGetGallery.Auditing.PackageRegistrationAuditRecord"' actualAuditRecordTypeNames[2]);
Magic Number,NuGetGallery.Auditing,AuditRecordTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditRecordTests.cs,SubclassingTypeSet_HasNotChanged,The following statement contains a magic number: Assert.Equal("NuGetGallery.Auditing.ReservedNamespaceAuditRecord"' actualAuditRecordTypeNames[3]);
Magic Number,NuGetGallery.Auditing,AuditRecordTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditRecordTests.cs,SubclassingTypeSet_HasNotChanged,The following statement contains a magic number: Assert.Equal("NuGetGallery.Auditing.UserAuditRecord"' actualAuditRecordTypeNames[4]);
Magic Number,NuGetGallery.Auditing,AuditRecordTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\AuditRecordTests.cs,SubclassingTypeSet_HasNotChanged,The following statement contains a magic number: Assert.Equal("NuGetGallery.Auditing.UserSecurityPolicyAuditRecord"' actualAuditRecordTypeNames[5]);
Magic Number,NuGetGallery.Auditing,CredentialAuditRecordTests,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Auditing\CredentialAuditRecordTests.cs,Constructor_SetsProperties,The following statement contains a magic number: var lastUsed = DateTime.MinValue.AddDays(2);
Magic Number,NuGetGallery,SemVerLevelKeyFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\SemVerLevelKeyFacts.cs,AssertSemVer2KeyNotChanged,The following statement contains a magic number: Assert.Equal(2' SemVerLevelKey.SemVer2);
Magic Number,NuGetGallery,FolderNamesDataAttribute,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CloudBlobCoreFileStorageServiceFacts.cs,GetData,The following statement contains a magic number: if (!IncludePermissions && !IncludeContentTypes)                  {                      folderNames = folderNames                          .Select(fn => new[] { fn.ElementAt(0) })                          .ToList();                  }                  else if (IncludePermissions && !IncludeContentTypes)                  {                      folderNames = folderNames                          .Select(fn => new[] { fn[0]' fn[1] })                          .ToList();                  }                  else if (!IncludePermissions && IncludeContentTypes)                  {                      folderNames = folderNames                          .Where(fn => fn[2] != null)                          .Select(fn => new[] { fn[0]' fn[2] })                          .ToList();                  }
Magic Number,NuGetGallery,FolderNamesDataAttribute,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CloudBlobCoreFileStorageServiceFacts.cs,GetData,The following statement contains a magic number: if (!IncludePermissions && !IncludeContentTypes)                  {                      folderNames = folderNames                          .Select(fn => new[] { fn.ElementAt(0) })                          .ToList();                  }                  else if (IncludePermissions && !IncludeContentTypes)                  {                      folderNames = folderNames                          .Select(fn => new[] { fn[0]' fn[1] })                          .ToList();                  }                  else if (!IncludePermissions && IncludeContentTypes)                  {                      folderNames = folderNames                          .Where(fn => fn[2] != null)                          .Select(fn => new[] { fn[0]' fn[2] })                          .ToList();                  }
Magic Number,NuGetGallery,TheGetFileMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CloudBlobCoreFileStorageServiceFacts.cs,WillReturnTheStreamWhenTheFileExists,The following statement contains a magic number: fakeBlob.Setup(x => x.DownloadToStreamAsync(It.IsAny<Stream>()' It.IsAny<AccessCondition>()))                      .Callback<Stream' AccessCondition>((x' _) => { x.WriteByte(42); })                      .Returns(Task.FromResult(0));
Magic Number,NuGetGallery,TheGetFileMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CloudBlobCoreFileStorageServiceFacts.cs,WillReturnTheStreamWhenTheFileExists,The following statement contains a magic number: Assert.Equal(42' ((MemoryStream)stream).ToArray()[0]);
Magic Number,NuGetGallery,TheGetFileMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CloudBlobCoreFileStorageServiceFacts.cs,WillSetTheStreamPositionToZero,The following statement contains a magic number: fakeBlob.Setup(x => x.DownloadToStreamAsync(It.IsAny<Stream>()' It.IsAny<AccessCondition>()))                          .Callback<Stream' AccessCondition>((x' _) => { x.WriteByte(42); })                          .Returns(Task.FromResult(0));
Magic Number,NuGetGallery,TheGetFileReadUriAsyncMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CloudBlobCoreFileStorageServiceFacts.cs,WillThrowIfFolderIsNull,The following statement contains a magic number: var ex = await Assert.ThrowsAsync<ArgumentNullException>(() => service.GetFileReadUriAsync(null' "theFileName"' DateTimeOffset.UtcNow.AddHours(3)));
Magic Number,NuGetGallery,TheGetFileReadUriAsyncMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CloudBlobCoreFileStorageServiceFacts.cs,WillThrowIfFilenameIsNull,The following statement contains a magic number: var ex = await Assert.ThrowsAsync<ArgumentNullException>(() => service.GetFileReadUriAsync("theFolder"' null' DateTimeOffset.UtcNow.AddHours(3)));
Magic Number,NuGetGallery,TheGetFileReadUriAsyncMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CloudBlobCoreFileStorageServiceFacts.cs,WillUseSasTokenDependingOnContainerAvailability,The following statement contains a magic number: var uri = await service.GetFileReadUriAsync(containerName' fileName' DateTimeOffset.Now.AddHours(3));
Magic Number,NuGetGallery,TheGetFileReadUriAsyncMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CloudBlobCoreFileStorageServiceFacts.cs,WillPassTheEndOfAccessTimestampFurther,The following statement contains a magic number: DateTimeOffset endOfAccess = DateTimeOffset.Now.AddHours(3);
Magic Number,NuGetGallery,CorePackageFileServiceFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageFileServiceFacts.cs,CreatePackageFileStream,The following statement contains a magic number: return new MemoryStream(new byte[] { 0' 0' 1' 0' 1' 0' 1' 0 }' 0' 8' true' true);
Magic Number,NuGetGallery,TheGetValidationPackageReadUriAsyncMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageFileServiceFacts.cs,WillThrowIfPackageIsNull,The following statement contains a magic number: var ex = await Assert.ThrowsAsync<ArgumentNullException>(() => _service.GetValidationPackageReadUriAsync(null' DateTimeOffset.UtcNow.AddHours(3)));
Magic Number,NuGetGallery,TheGetValidationPackageReadUriAsyncMethod,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Services\CorePackageFileServiceFacts.cs,WillUseTheFileStorageService,The following statement contains a magic number: DateTimeOffset endOfAccess = DateTimeOffset.UtcNow.AddHours(3);
Magic Number,NuGetGallery.Packaging,PackageMetadataFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\PackageMetadataFacts.cs,CanReadBasicMetadataProperties,The following statement contains a magic number: Assert.Equal(2' packageMetadata.Authors.Count);
Magic Number,NuGetGallery.Packaging,NupkgRewriterFacts,C:\repos\NuGet_NuGetGallery\tests\NuGetGallery.Core.Facts\Packaging\NupkgRewriterFacts.cs,RewritingTheNuSpecDoesNotMessUpTheNuspecStream,The following statement contains a magic number: var longValue = new String('x'' 200);
