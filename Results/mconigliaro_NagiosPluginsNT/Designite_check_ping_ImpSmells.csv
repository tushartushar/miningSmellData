Implementation smell,Namespace,Class,File,Method,Description
Long Statement,NagiosPluginsNT,PingPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\PingPlugin.cs,Ping,The length of the statement  "                Verbose(VerbosityLevel.Info' "[Ping] Pinging " + Options.hostname + " with " + buffer.Length + " bytes of data (DontFragment=" + pingOptions.DontFragment + "' TTL=" + pingOptions.Ttl + "' Timeout=" + Options.timeout * 1000 + ")"); " is 230.
Long Statement,NagiosPluginsNT,PingPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\PingPlugin.cs,Ping,The length of the statement  "                        Verbose(VerbosityLevel.Info' "[Ping] [" + (i + 1) + "/" + Options.packets + "] Reply from " + pingReply.Address + ": bytes=" + pingReply.Buffer.Length + " time=" + pingReply.RoundtripTime + "ms TTL=" + pingReply.Options.Ttl); " is 225.
Long Statement,NagiosPluginsNT,Plugin<PluginOptionsType>,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\Plugin.cs,AppendValue,The length of the statement  "            PerfValue += "'" + label.Replace("'"' "''") + "'=" + value + units + ";" + warning + ";" + critical + ";" /* + min + Options.units */ + ";" /* +max + Options.units */; " is 167.
Long Statement,NagiosPluginsNT,Plugin<PluginOptionsType>,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\Plugin.cs,AppendValue,The length of the statement  "            PerfValue += "'" + Options.label.Replace("'"' "''") + "'=" + value + units + ";" + warning + ";" + critical + ";" /* + min + Options.units */ + ";" /* +max + Options.units */;             " is 175.
Long Statement,NagiosPluginsNT,Plugin<PluginOptionsType>,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\Plugin.cs,GetStatus,The length of the statement  "                        Verbose(VerbosityLevel.Debug' statusCode + " if " + numValue + " OUTSIDE range " + thresholdStart + " - " + thresholdEnd); " is 122.
Long Statement,NagiosPluginsNT,Plugin<PluginOptionsType>,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\Plugin.cs,GetStatus,The length of the statement  "                        Verbose(VerbosityLevel.Debug' statusCode + " if " + numValue + " WITHIN range " + thresholdStart + " - " + thresholdEnd); " is 121.
Magic Number,NagiosPluginsNT,PingPluginOptions,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\PingPlugin.cs,PingPluginOptions,The following statement contains a magic number: packets = 4;
Magic Number,NagiosPluginsNT,PingPluginOptions,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\PingPlugin.cs,PingPluginOptions,The following statement contains a magic number: timeout = 4;
Magic Number,NagiosPluginsNT,PingPluginOptions,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\PingPlugin.cs,PingPluginOptions,The following statement contains a magic number: ttl = 128;
Magic Number,NagiosPluginsNT,PingPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\PingPlugin.cs,Ping,The following statement contains a magic number: try              {                  // *** initialize ***                  Ping pingSender = new Ping();                  PingReply pingReply = null;                  PingOptions pingOptions = new PingOptions();                  pingOptions.DontFragment = Options.dont_fragment;                  pingOptions.Ttl = Options.ttl;                  Byte[] buffer = Encoding.ASCII.GetBytes("01234567890123456789012345678901"); // 32 bytes                  Verbose(VerbosityLevel.Info' "[Ping] Pinging " + Options.hostname + " with " + buffer.Length + " bytes of data (DontFragment=" + pingOptions.DontFragment + "' TTL=" + pingOptions.Ttl + "' Timeout=" + Options.timeout * 1000 + ")");                    for (Int32 i = 0; i < Options.packets; ++i)                  {                      // *** send echo and process reply ***                      pingReply = pingSender.Send(Options.hostname' Options.timeout * 1000' buffer' pingOptions);                                          if (pingReply.Status == IPStatus.Success)                      {                          Verbose(VerbosityLevel.Info' "[Ping] [" + (i + 1) + "/" + Options.packets + "] Reply from " + pingReply.Address + ": bytes=" + pingReply.Buffer.Length + " time=" + pingReply.RoundtripTime + "ms TTL=" + pingReply.Options.Ttl);                          ++multiPingReply.PacketsReceived;                          multiPingReply.RoundTripTime += pingReply.RoundtripTime;                          Thread.Sleep(200); // prevent flooding                      }                      else                      {                          Verbose(VerbosityLevel.Info' "[Ping] [" + (i + 1) + "/" + Options.packets + "] " + pingReply.Status.ToString());                      }                                      }                    // *** error out when host is unreachable ***                  if (Options.packets > 0 && multiPingReply.PacketsReceived == 0)                  {                      FatalError(StatusCode.Critical' "[Ping]"' "Host is unreachable");                  }                              }                // *** unknown host ***              catch (System.Net.NetworkInformation.PingException e) {                  FatalError(StatusCode.Critical' "[Ping]"' e.InnerException.Message);              }
Magic Number,NagiosPluginsNT,PingPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\PingPlugin.cs,Ping,The following statement contains a magic number: try              {                  // *** initialize ***                  Ping pingSender = new Ping();                  PingReply pingReply = null;                  PingOptions pingOptions = new PingOptions();                  pingOptions.DontFragment = Options.dont_fragment;                  pingOptions.Ttl = Options.ttl;                  Byte[] buffer = Encoding.ASCII.GetBytes("01234567890123456789012345678901"); // 32 bytes                  Verbose(VerbosityLevel.Info' "[Ping] Pinging " + Options.hostname + " with " + buffer.Length + " bytes of data (DontFragment=" + pingOptions.DontFragment + "' TTL=" + pingOptions.Ttl + "' Timeout=" + Options.timeout * 1000 + ")");                    for (Int32 i = 0; i < Options.packets; ++i)                  {                      // *** send echo and process reply ***                      pingReply = pingSender.Send(Options.hostname' Options.timeout * 1000' buffer' pingOptions);                                          if (pingReply.Status == IPStatus.Success)                      {                          Verbose(VerbosityLevel.Info' "[Ping] [" + (i + 1) + "/" + Options.packets + "] Reply from " + pingReply.Address + ": bytes=" + pingReply.Buffer.Length + " time=" + pingReply.RoundtripTime + "ms TTL=" + pingReply.Options.Ttl);                          ++multiPingReply.PacketsReceived;                          multiPingReply.RoundTripTime += pingReply.RoundtripTime;                          Thread.Sleep(200); // prevent flooding                      }                      else                      {                          Verbose(VerbosityLevel.Info' "[Ping] [" + (i + 1) + "/" + Options.packets + "] " + pingReply.Status.ToString());                      }                                      }                    // *** error out when host is unreachable ***                  if (Options.packets > 0 && multiPingReply.PacketsReceived == 0)                  {                      FatalError(StatusCode.Critical' "[Ping]"' "Host is unreachable");                  }                              }                // *** unknown host ***              catch (System.Net.NetworkInformation.PingException e) {                  FatalError(StatusCode.Critical' "[Ping]"' e.InnerException.Message);              }
Magic Number,NagiosPluginsNT,PingPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\PingPlugin.cs,Ping,The following statement contains a magic number: try              {                  // *** initialize ***                  Ping pingSender = new Ping();                  PingReply pingReply = null;                  PingOptions pingOptions = new PingOptions();                  pingOptions.DontFragment = Options.dont_fragment;                  pingOptions.Ttl = Options.ttl;                  Byte[] buffer = Encoding.ASCII.GetBytes("01234567890123456789012345678901"); // 32 bytes                  Verbose(VerbosityLevel.Info' "[Ping] Pinging " + Options.hostname + " with " + buffer.Length + " bytes of data (DontFragment=" + pingOptions.DontFragment + "' TTL=" + pingOptions.Ttl + "' Timeout=" + Options.timeout * 1000 + ")");                    for (Int32 i = 0; i < Options.packets; ++i)                  {                      // *** send echo and process reply ***                      pingReply = pingSender.Send(Options.hostname' Options.timeout * 1000' buffer' pingOptions);                                          if (pingReply.Status == IPStatus.Success)                      {                          Verbose(VerbosityLevel.Info' "[Ping] [" + (i + 1) + "/" + Options.packets + "] Reply from " + pingReply.Address + ": bytes=" + pingReply.Buffer.Length + " time=" + pingReply.RoundtripTime + "ms TTL=" + pingReply.Options.Ttl);                          ++multiPingReply.PacketsReceived;                          multiPingReply.RoundTripTime += pingReply.RoundtripTime;                          Thread.Sleep(200); // prevent flooding                      }                      else                      {                          Verbose(VerbosityLevel.Info' "[Ping] [" + (i + 1) + "/" + Options.packets + "] " + pingReply.Status.ToString());                      }                                      }                    // *** error out when host is unreachable ***                  if (Options.packets > 0 && multiPingReply.PacketsReceived == 0)                  {                      FatalError(StatusCode.Critical' "[Ping]"' "Host is unreachable");                  }                              }                // *** unknown host ***              catch (System.Net.NetworkInformation.PingException e) {                  FatalError(StatusCode.Critical' "[Ping]"' e.InnerException.Message);              }
Magic Number,NagiosPluginsNT,Plugin<PluginOptionsType>,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\Plugin.cs,Plugin,The following statement contains a magic number: precision = 2;
