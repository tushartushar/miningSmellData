Implementation smell,Namespace,Class,File,Method,Description
Long Statement,NagiosPluginsNT,Plugin<PluginOptionsType>,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\Plugin.cs,AppendValue,The length of the statement  "            PerfValue += "'" + label.Replace("'"' "''") + "'=" + value + units + ";" + warning + ";" + critical + ";" /* + min + Options.units */ + ";" /* +max + Options.units */; " is 167.
Long Statement,NagiosPluginsNT,Plugin<PluginOptionsType>,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\Plugin.cs,AppendValue,The length of the statement  "            PerfValue += "'" + Options.label.Replace("'"' "''") + "'=" + value + units + ";" + warning + ";" + critical + ";" /* + min + Options.units */ + ";" /* +max + Options.units */;             " is 175.
Long Statement,NagiosPluginsNT,Plugin<PluginOptionsType>,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\Plugin.cs,GetStatus,The length of the statement  "                        Verbose(VerbosityLevel.Debug' statusCode + " if " + numValue + " OUTSIDE range " + thresholdStart + " - " + thresholdEnd); " is 122.
Long Statement,NagiosPluginsNT,Plugin<PluginOptionsType>,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\Plugin.cs,GetStatus,The length of the statement  "                        Verbose(VerbosityLevel.Debug' statusCode + " if " + numValue + " WITHIN range " + thresholdStart + " - " + thresholdEnd); " is 121.
Long Statement,NagiosPluginsNT,RegistryPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\RegistryPlugin.cs,Read,The length of the statement  "                String  regSubKey = Options.key.Substring(Options.key.IndexOf("/") + 1' Options.key.LastIndexOf("/") - regRootKey.Length - 1); " is 126.
Magic Number,NagiosPluginsNT,Plugin<PluginOptionsType>,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\Plugin.cs,Plugin,The following statement contains a magic number: precision = 2;
Missing Default,NagiosPluginsNT,RegistryPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\RegistryPlugin.cs,Read,The following switch statement is missing a default case: switch (regRootKey) {                      case "HKEY_CLASSES_ROOT":                          reg = Registry.ClassesRoot.OpenSubKey(regSubKey);                          break;                      case "HKEY_CURRENT_CONFIG":                          reg = Registry.CurrentConfig.OpenSubKey(regSubKey);                          break;                      case "HKEY_CURRENT_USER":                          reg = Registry.CurrentUser.OpenSubKey(regSubKey);                          break;                      case "HKEY_LOCAL_MACHINE":                          reg = Registry.LocalMachine.OpenSubKey(regSubKey);                          break;                      case "HKEY_USERS":                          reg = Registry.Users.OpenSubKey(regSubKey);                          break;                  }
