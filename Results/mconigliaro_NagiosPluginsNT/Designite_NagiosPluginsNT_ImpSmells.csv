Implementation smell,Namespace,Class,File,Method,Description
Long Statement,NagiosPluginsNT,RegistryPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\RegistryPlugin.cs,Read,The length of the statement  "                String  regSubKey = Options.key.Substring(Options.key.IndexOf("/") + 1' Options.key.LastIndexOf("/") - regRootKey.Length - 1); " is 126.
Long Statement,NagiosPluginsNT,PingPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\PingPlugin.cs,Ping,The length of the statement  "                Verbose(VerbosityLevel.Info' "[Ping] Pinging " + Options.hostname + " with " + buffer.Length + " bytes of data (DontFragment=" + pingOptions.DontFragment + "' TTL=" + pingOptions.Ttl + "' Timeout=" + Options.timeout * 1000 + ")"); " is 230.
Long Statement,NagiosPluginsNT,PingPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\PingPlugin.cs,Ping,The length of the statement  "                        Verbose(VerbosityLevel.Info' "[Ping] [" + (i + 1) + "/" + Options.packets + "] Reply from " + pingReply.Address + ": bytes=" + pingReply.Buffer.Length + " time=" + pingReply.RoundtripTime + "ms TTL=" + pingReply.Options.Ttl); " is 225.
Long Statement,NagiosPluginsNT,Plugin<PluginOptionsType>,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\Plugin.cs,AppendValue,The length of the statement  "            PerfValue += "'" + label.Replace("'"' "''") + "'=" + value + units + ";" + warning + ";" + critical + ";" /* + min + Options.units */ + ";" /* +max + Options.units */; " is 167.
Long Statement,NagiosPluginsNT,Plugin<PluginOptionsType>,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\Plugin.cs,AppendValue,The length of the statement  "            PerfValue += "'" + Options.label.Replace("'"' "''") + "'=" + value + units + ";" + warning + ";" + critical + ";" /* + min + Options.units */ + ";" /* +max + Options.units */;             " is 175.
Long Statement,NagiosPluginsNT,Plugin<PluginOptionsType>,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\Plugin.cs,GetStatus,The length of the statement  "                        Verbose(VerbosityLevel.Debug' statusCode + " if " + numValue + " OUTSIDE range " + thresholdStart + " - " + thresholdEnd); " is 122.
Long Statement,NagiosPluginsNT,Plugin<PluginOptionsType>,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\Plugin.cs,GetStatus,The length of the statement  "                        Verbose(VerbosityLevel.Debug' statusCode + " if " + numValue + " WITHIN range " + thresholdStart + " - " + thresholdEnd); " is 121.
Long Statement,NagiosPluginsNT,WmiPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\WmiPlugin.cs,Connect,The length of the statement  "                Verbose(VerbosityLevel.Debug' "[WMI] No netbios domain specified in login name (using local domain " + System.Environment.UserDomainName.ToString() + ")"); " is 155.
Long Statement,NagiosPluginsNT,WmiPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\WmiPlugin.cs,Connect,The length of the statement  "            Verbose(VerbosityLevel.Info' @"[WMI] Connecting to: \\" + Options.hostname + connectNamespace + " (Username=" + Options.logname + "' Password=" + Options.authentication + "' Timeout=" + Options.timeout + ")"); " is 209.
Complex Conditional,NagiosPluginsNT,SnmpPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\SnmpPlugin.cs,doGet,The conditional expression  "(rawValue.StartsWith("\"") && rawValue.EndsWith("\"")) || (rawValue.StartsWith("[") && rawValue.EndsWith("]"))"  is complex.
Magic Number,NagiosPluginsNT,SnmpPluginOptions,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\SnmpPlugin.cs,SnmpPluginOptions,The following statement contains a magic number: timeout = 10;
Magic Number,NagiosPluginsNT,SnmpPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\SnmpPlugin.cs,Get,The following statement contains a magic number: try              {                                                  // *** do snmpget with timeout ***                  GetThread = new Thread(new ThreadStart(doGet));                                  GetThread.Start();                  if (!GetThread.Join(Options.timeout * 1000))                  {                      FatalError(StatusCode.Critical' "[SNMP]"' "SNMP request timed out");                  }              }                // *** handle all exceptions ***              catch (Exception e)              {                  FatalError(StatusCode.Critical' "[SNMP]"' e.Message);              }
Magic Number,NagiosPluginsNT,SnmpPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\SnmpPlugin.cs,doGet,The following statement contains a magic number: try              {                  if (Options.oid.Contains("."))                  {                      // *** convert oid string to array of unsigned ints ***                      String[] oidString = Options.oid.Split('.');                      Int32 oidLen = oidString.Length;                      UInt32[] oidUInt = new UInt32[oidLen];                      for (Int32 i = 0; i < oidLen; ++i)                      {                          oidUInt[i] = Convert.ToUInt32(oidString[i]);                      }                        // *** get value ***                      Verbose(VerbosityLevel.Info' "[SNMP] Get: " + Options.oid);                      ManagerItem mi = new ManagerItem(new ManagerSession(Options.hostname' Options.community)' oidUInt);                      String rawValue = mi.Value.ToString();                        // *** trim enclosing brackets ***                      if ((rawValue.StartsWith("\"") && rawValue.EndsWith("\"")) || (rawValue.StartsWith("[") && rawValue.EndsWith("]")))                      {                          Value = rawValue.Substring(1' rawValue.Length - 2);                      }                      else                      {                          Value = rawValue;                      }                        Verbose(VerbosityLevel.Info' "[SNMP] Got response: " + Value);                  }                    else                  {                      FatalError(StatusCode.Critical' "[SNMP]"' "Object ID not in correct format: " + Options.oid);                  }              }                // *** handle all exceptions ***              catch (Exception e)              {                  FatalError(StatusCode.Critical' "[SNMP]"' e.Message);              }
Magic Number,NagiosPluginsNT,PingPluginOptions,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\PingPlugin.cs,PingPluginOptions,The following statement contains a magic number: packets = 4;
Magic Number,NagiosPluginsNT,PingPluginOptions,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\PingPlugin.cs,PingPluginOptions,The following statement contains a magic number: timeout = 4;
Magic Number,NagiosPluginsNT,PingPluginOptions,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\PingPlugin.cs,PingPluginOptions,The following statement contains a magic number: ttl = 128;
Magic Number,NagiosPluginsNT,PingPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\PingPlugin.cs,Ping,The following statement contains a magic number: try              {                  // *** initialize ***                  Ping pingSender = new Ping();                  PingReply pingReply = null;                  PingOptions pingOptions = new PingOptions();                  pingOptions.DontFragment = Options.dont_fragment;                  pingOptions.Ttl = Options.ttl;                  Byte[] buffer = Encoding.ASCII.GetBytes("01234567890123456789012345678901"); // 32 bytes                  Verbose(VerbosityLevel.Info' "[Ping] Pinging " + Options.hostname + " with " + buffer.Length + " bytes of data (DontFragment=" + pingOptions.DontFragment + "' TTL=" + pingOptions.Ttl + "' Timeout=" + Options.timeout * 1000 + ")");                    for (Int32 i = 0; i < Options.packets; ++i)                  {                      // *** send echo and process reply ***                      pingReply = pingSender.Send(Options.hostname' Options.timeout * 1000' buffer' pingOptions);                                          if (pingReply.Status == IPStatus.Success)                      {                          Verbose(VerbosityLevel.Info' "[Ping] [" + (i + 1) + "/" + Options.packets + "] Reply from " + pingReply.Address + ": bytes=" + pingReply.Buffer.Length + " time=" + pingReply.RoundtripTime + "ms TTL=" + pingReply.Options.Ttl);                          ++multiPingReply.PacketsReceived;                          multiPingReply.RoundTripTime += pingReply.RoundtripTime;                          Thread.Sleep(200); // prevent flooding                      }                      else                      {                          Verbose(VerbosityLevel.Info' "[Ping] [" + (i + 1) + "/" + Options.packets + "] " + pingReply.Status.ToString());                      }                                      }                    // *** error out when host is unreachable ***                  if (Options.packets > 0 && multiPingReply.PacketsReceived == 0)                  {                      FatalError(StatusCode.Critical' "[Ping]"' "Host is unreachable");                  }                              }                // *** unknown host ***              catch (System.Net.NetworkInformation.PingException e) {                  FatalError(StatusCode.Critical' "[Ping]"' e.InnerException.Message);              }
Magic Number,NagiosPluginsNT,PingPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\PingPlugin.cs,Ping,The following statement contains a magic number: try              {                  // *** initialize ***                  Ping pingSender = new Ping();                  PingReply pingReply = null;                  PingOptions pingOptions = new PingOptions();                  pingOptions.DontFragment = Options.dont_fragment;                  pingOptions.Ttl = Options.ttl;                  Byte[] buffer = Encoding.ASCII.GetBytes("01234567890123456789012345678901"); // 32 bytes                  Verbose(VerbosityLevel.Info' "[Ping] Pinging " + Options.hostname + " with " + buffer.Length + " bytes of data (DontFragment=" + pingOptions.DontFragment + "' TTL=" + pingOptions.Ttl + "' Timeout=" + Options.timeout * 1000 + ")");                    for (Int32 i = 0; i < Options.packets; ++i)                  {                      // *** send echo and process reply ***                      pingReply = pingSender.Send(Options.hostname' Options.timeout * 1000' buffer' pingOptions);                                          if (pingReply.Status == IPStatus.Success)                      {                          Verbose(VerbosityLevel.Info' "[Ping] [" + (i + 1) + "/" + Options.packets + "] Reply from " + pingReply.Address + ": bytes=" + pingReply.Buffer.Length + " time=" + pingReply.RoundtripTime + "ms TTL=" + pingReply.Options.Ttl);                          ++multiPingReply.PacketsReceived;                          multiPingReply.RoundTripTime += pingReply.RoundtripTime;                          Thread.Sleep(200); // prevent flooding                      }                      else                      {                          Verbose(VerbosityLevel.Info' "[Ping] [" + (i + 1) + "/" + Options.packets + "] " + pingReply.Status.ToString());                      }                                      }                    // *** error out when host is unreachable ***                  if (Options.packets > 0 && multiPingReply.PacketsReceived == 0)                  {                      FatalError(StatusCode.Critical' "[Ping]"' "Host is unreachable");                  }                              }                // *** unknown host ***              catch (System.Net.NetworkInformation.PingException e) {                  FatalError(StatusCode.Critical' "[Ping]"' e.InnerException.Message);              }
Magic Number,NagiosPluginsNT,PingPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\PingPlugin.cs,Ping,The following statement contains a magic number: try              {                  // *** initialize ***                  Ping pingSender = new Ping();                  PingReply pingReply = null;                  PingOptions pingOptions = new PingOptions();                  pingOptions.DontFragment = Options.dont_fragment;                  pingOptions.Ttl = Options.ttl;                  Byte[] buffer = Encoding.ASCII.GetBytes("01234567890123456789012345678901"); // 32 bytes                  Verbose(VerbosityLevel.Info' "[Ping] Pinging " + Options.hostname + " with " + buffer.Length + " bytes of data (DontFragment=" + pingOptions.DontFragment + "' TTL=" + pingOptions.Ttl + "' Timeout=" + Options.timeout * 1000 + ")");                    for (Int32 i = 0; i < Options.packets; ++i)                  {                      // *** send echo and process reply ***                      pingReply = pingSender.Send(Options.hostname' Options.timeout * 1000' buffer' pingOptions);                                          if (pingReply.Status == IPStatus.Success)                      {                          Verbose(VerbosityLevel.Info' "[Ping] [" + (i + 1) + "/" + Options.packets + "] Reply from " + pingReply.Address + ": bytes=" + pingReply.Buffer.Length + " time=" + pingReply.RoundtripTime + "ms TTL=" + pingReply.Options.Ttl);                          ++multiPingReply.PacketsReceived;                          multiPingReply.RoundTripTime += pingReply.RoundtripTime;                          Thread.Sleep(200); // prevent flooding                      }                      else                      {                          Verbose(VerbosityLevel.Info' "[Ping] [" + (i + 1) + "/" + Options.packets + "] " + pingReply.Status.ToString());                      }                                      }                    // *** error out when host is unreachable ***                  if (Options.packets > 0 && multiPingReply.PacketsReceived == 0)                  {                      FatalError(StatusCode.Critical' "[Ping]"' "Host is unreachable");                  }                              }                // *** unknown host ***              catch (System.Net.NetworkInformation.PingException e) {                  FatalError(StatusCode.Critical' "[Ping]"' e.InnerException.Message);              }
Magic Number,NagiosPluginsNT,TcpPluginOptions,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\TcpPlugin.cs,TcpPluginOptions,The following statement contains a magic number: timeout = 10;
Magic Number,NagiosPluginsNT,TcpPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\TcpPlugin.cs,Connect,The following statement contains a magic number: try              {                  // *** start timer and connect to host ***                  Verbose(VerbosityLevel.Info' "[TCP] Connecting to: " + Options.hostname + ":" + Options.port);                  StartTime = DateTime.Now.Ticks;                  Client = new TcpClient(Options.hostname' Options.port);                  Client.ReceiveTimeout = Options.timeout * 1000; // read timeout                    // *** open tcp stream ***                  Stream = Client.GetStream();              }                            // *** port not specified or connection refused ***              catch (System.Net.Sockets.SocketException e)              {                  FatalError(StatusCode.Critical' "[TCP]"' e.Message);              }
Magic Number,NagiosPluginsNT,TcpPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\TcpPlugin.cs,Receive,The following statement contains a magic number: try              {                  // *** return entire server response ***                  Verbose(VerbosityLevel.Info' "[TCP] Waiting for response");                  Byte[] buffer = new Byte[1024]; // maximum length of response                  Int32 bytes = Stream.Read(buffer' 0' buffer.Length);                  message = System.Text.Encoding.ASCII.GetString(buffer' 0' bytes);                  EndTime = DateTime.Now.Ticks; // stop timer                    Verbose(VerbosityLevel.Info' "[TCP] Got response: " + message);              }                // *** unable to read from host ***              catch (System.IO.IOException e)              {                  FatalError(StatusCode.Critical' "[TCP]"' e.Message);              }
Magic Number,NagiosPluginsNT,TcpPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\TcpPlugin.cs,GetResponseTime,The following statement contains a magic number: return (Int32)(((Decimal)EndTime - (Decimal)StartTime) / (Decimal)TimeSpan.TicksPerSecond * 100);
Magic Number,NagiosPluginsNT,Plugin<PluginOptionsType>,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\Plugin.cs,Plugin,The following statement contains a magic number: precision = 2;
Magic Number,NagiosPluginsNT,WmiPluginOptions,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\WmiPlugin.cs,WmiPluginOptions,The following statement contains a magic number: timeout = 10;
Missing Default,NagiosPluginsNT,RegistryPlugin,C:\repos\mconigliaro_NagiosPluginsNT\NagiosPluginsNT\RegistryPlugin.cs,Read,The following switch statement is missing a default case: switch (regRootKey) {                      case "HKEY_CLASSES_ROOT":                          reg = Registry.ClassesRoot.OpenSubKey(regSubKey);                          break;                      case "HKEY_CURRENT_CONFIG":                          reg = Registry.CurrentConfig.OpenSubKey(regSubKey);                          break;                      case "HKEY_CURRENT_USER":                          reg = Registry.CurrentUser.OpenSubKey(regSubKey);                          break;                      case "HKEY_LOCAL_MACHINE":                          reg = Registry.LocalMachine.OpenSubKey(regSubKey);                          break;                      case "HKEY_USERS":                          reg = Registry.Users.OpenSubKey(regSubKey);                          break;                  }
