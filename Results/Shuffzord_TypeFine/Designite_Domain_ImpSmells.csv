Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,TheAlgorithm,The method has 6 parameters.
Long Parameter List,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,MergeWeakReferences,The method has 6 parameters.
Long Statement,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,TheAlgorithm,The length of the statement  "	var keywordEntity = Keywords.Include (x => x.WeakReferences.Select (r => r.Phrase)).SingleOrDefault (x => x.Value == keyword) ?? new Keyword { " is 142.
Magic Number,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,GetTopTen,The following statement contains a magic number: foreach (var phrase in Phrases.Select (x => new {  	x.Id'  	x.Value  })) {  	var rank = StringMetrics.Levenstein (keyword' phrase.Value).Value;  	if (i < 10) {  		outp.Add (new PhraseIdWithRankModel {  			PhraseId = phrase.Id'  			Rank = rank  		});  		i++;  		continue;  	}  	if (i == 10) {  		outp.Sort (new PhraseWithRankModelComparer ());  	}  	if (!(rank > outp [9].Rank))  		continue;  	outp.RemoveAt (9);  	outp.Add (new PhraseIdWithRankModel {  		PhraseId = phrase.Id'  		Rank = rank  	});  	outp.Sort (new PhraseWithRankModelComparer ());  }  
Magic Number,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,GetTopTen,The following statement contains a magic number: foreach (var phrase in Phrases.Select (x => new {  	x.Id'  	x.Value  })) {  	var rank = StringMetrics.Levenstein (keyword' phrase.Value).Value;  	if (i < 10) {  		outp.Add (new PhraseIdWithRankModel {  			PhraseId = phrase.Id'  			Rank = rank  		});  		i++;  		continue;  	}  	if (i == 10) {  		outp.Sort (new PhraseWithRankModelComparer ());  	}  	if (!(rank > outp [9].Rank))  		continue;  	outp.RemoveAt (9);  	outp.Add (new PhraseIdWithRankModel {  		PhraseId = phrase.Id'  		Rank = rank  	});  	outp.Sort (new PhraseWithRankModelComparer ());  }  
Magic Number,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,GetTopTen,The following statement contains a magic number: foreach (var phrase in Phrases.Select (x => new {  	x.Id'  	x.Value  })) {  	var rank = StringMetrics.Levenstein (keyword' phrase.Value).Value;  	if (i < 10) {  		outp.Add (new PhraseIdWithRankModel {  			PhraseId = phrase.Id'  			Rank = rank  		});  		i++;  		continue;  	}  	if (i == 10) {  		outp.Sort (new PhraseWithRankModelComparer ());  	}  	if (!(rank > outp [9].Rank))  		continue;  	outp.RemoveAt (9);  	outp.Add (new PhraseIdWithRankModel {  		PhraseId = phrase.Id'  		Rank = rank  	});  	outp.Sort (new PhraseWithRankModelComparer ());  }  
Magic Number,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,GetTopTen,The following statement contains a magic number: foreach (var phrase in Phrases.Select (x => new {  	x.Id'  	x.Value  })) {  	var rank = StringMetrics.Levenstein (keyword' phrase.Value).Value;  	if (i < 10) {  		outp.Add (new PhraseIdWithRankModel {  			PhraseId = phrase.Id'  			Rank = rank  		});  		i++;  		continue;  	}  	if (i == 10) {  		outp.Sort (new PhraseWithRankModelComparer ());  	}  	if (!(rank > outp [9].Rank))  		continue;  	outp.RemoveAt (9);  	outp.Add (new PhraseIdWithRankModel {  		PhraseId = phrase.Id'  		Rank = rank  	});  	outp.Sort (new PhraseWithRankModelComparer ());  }  
Magic Number,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,GetTopTen,The following statement contains a magic number: if (i < 10) {  	outp.Add (new PhraseIdWithRankModel {  		PhraseId = phrase.Id'  		Rank = rank  	});  	i++;  	continue;  }  
Magic Number,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,GetTopTen,The following statement contains a magic number: if (i == 10) {  	outp.Sort (new PhraseWithRankModelComparer ());  }  
Magic Number,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,GetTopTen,The following statement contains a magic number: if (!(rank > outp [9].Rank))  	continue;  
Magic Number,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,GetTopTen,The following statement contains a magic number: outp.RemoveAt (9);  
Magic Number,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,TheAlgorithm,The following statement contains a magic number: if (!weakReferences.Any ()) {  	var outp = new List<Phrase> ();  	foreach (var top in GetTopTen (keyword)) {  		var phrase = Phrases.Single (x => x.Id == top.PhraseId);  		var reference = new KeywordPhraseReference {  			Convergence = top.Rank'  			Phrase = phrase'  			Keyword = keywordEntity  		};  		KeywordPhraseReferences.Add (reference);  		outp.Add (reference.Phrase);  	}  	SaveChanges ();  	if (outp.Count != 10)  		throw new Exception ("Powinno być dokładnie 10 luźnych referencji!");  	return outp;  }  
Magic Number,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,TheAlgorithm,The following statement contains a magic number: if (outp.Count != 10)  	throw new Exception ("Powinno być dokładnie 10 luźnych referencji!");  
Magic Number,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,MergeWeakReferences,The following statement contains a magic number: foreach (var top in tops) {  	if (sortedWeakReferences.Count < 10) {  		sortedWeakReferences.Add (new KeywordPhraseReference {  			Convergence = top.Rank'  			Phrase = Phrases.Single (x => x.Id == top.PhraseId)  		});  		continue;  	}  	sortedWeakReferences.Sort (new WeakReferenceComparer ());  	if (!(top.Rank > sortedWeakReferences [9].CompositeConvergance))  		continue;  	if (sortedWeakReferences.Any (x => x.Phrase.Value.Equals (Phrases.Single (g => g.Id == top.PhraseId).Value)))  		continue;  	var referenceToRemove = sortedWeakReferences.ElementAt (9);  	KeywordPhraseReferences.Remove (referenceToRemove);  	sortedWeakReferences.RemoveAt (9);  	var referenceToAdd = new KeywordPhraseReference {  		Convergence = top.Rank'  		Phrase = Phrases.Single (x => x.Id == top.PhraseId)  	};  	KeywordPhraseReferences.Add (referenceToAdd);  	sortedWeakReferences.Add (referenceToAdd);  	sortedWeakReferences.Sort (new WeakReferenceComparer ());  }  
Magic Number,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,MergeWeakReferences,The following statement contains a magic number: foreach (var top in tops) {  	if (sortedWeakReferences.Count < 10) {  		sortedWeakReferences.Add (new KeywordPhraseReference {  			Convergence = top.Rank'  			Phrase = Phrases.Single (x => x.Id == top.PhraseId)  		});  		continue;  	}  	sortedWeakReferences.Sort (new WeakReferenceComparer ());  	if (!(top.Rank > sortedWeakReferences [9].CompositeConvergance))  		continue;  	if (sortedWeakReferences.Any (x => x.Phrase.Value.Equals (Phrases.Single (g => g.Id == top.PhraseId).Value)))  		continue;  	var referenceToRemove = sortedWeakReferences.ElementAt (9);  	KeywordPhraseReferences.Remove (referenceToRemove);  	sortedWeakReferences.RemoveAt (9);  	var referenceToAdd = new KeywordPhraseReference {  		Convergence = top.Rank'  		Phrase = Phrases.Single (x => x.Id == top.PhraseId)  	};  	KeywordPhraseReferences.Add (referenceToAdd);  	sortedWeakReferences.Add (referenceToAdd);  	sortedWeakReferences.Sort (new WeakReferenceComparer ());  }  
Magic Number,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,MergeWeakReferences,The following statement contains a magic number: foreach (var top in tops) {  	if (sortedWeakReferences.Count < 10) {  		sortedWeakReferences.Add (new KeywordPhraseReference {  			Convergence = top.Rank'  			Phrase = Phrases.Single (x => x.Id == top.PhraseId)  		});  		continue;  	}  	sortedWeakReferences.Sort (new WeakReferenceComparer ());  	if (!(top.Rank > sortedWeakReferences [9].CompositeConvergance))  		continue;  	if (sortedWeakReferences.Any (x => x.Phrase.Value.Equals (Phrases.Single (g => g.Id == top.PhraseId).Value)))  		continue;  	var referenceToRemove = sortedWeakReferences.ElementAt (9);  	KeywordPhraseReferences.Remove (referenceToRemove);  	sortedWeakReferences.RemoveAt (9);  	var referenceToAdd = new KeywordPhraseReference {  		Convergence = top.Rank'  		Phrase = Phrases.Single (x => x.Id == top.PhraseId)  	};  	KeywordPhraseReferences.Add (referenceToAdd);  	sortedWeakReferences.Add (referenceToAdd);  	sortedWeakReferences.Sort (new WeakReferenceComparer ());  }  
Magic Number,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,MergeWeakReferences,The following statement contains a magic number: foreach (var top in tops) {  	if (sortedWeakReferences.Count < 10) {  		sortedWeakReferences.Add (new KeywordPhraseReference {  			Convergence = top.Rank'  			Phrase = Phrases.Single (x => x.Id == top.PhraseId)  		});  		continue;  	}  	sortedWeakReferences.Sort (new WeakReferenceComparer ());  	if (!(top.Rank > sortedWeakReferences [9].CompositeConvergance))  		continue;  	if (sortedWeakReferences.Any (x => x.Phrase.Value.Equals (Phrases.Single (g => g.Id == top.PhraseId).Value)))  		continue;  	var referenceToRemove = sortedWeakReferences.ElementAt (9);  	KeywordPhraseReferences.Remove (referenceToRemove);  	sortedWeakReferences.RemoveAt (9);  	var referenceToAdd = new KeywordPhraseReference {  		Convergence = top.Rank'  		Phrase = Phrases.Single (x => x.Id == top.PhraseId)  	};  	KeywordPhraseReferences.Add (referenceToAdd);  	sortedWeakReferences.Add (referenceToAdd);  	sortedWeakReferences.Sort (new WeakReferenceComparer ());  }  
Magic Number,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,MergeWeakReferences,The following statement contains a magic number: if (sortedWeakReferences.Count < 10) {  	sortedWeakReferences.Add (new KeywordPhraseReference {  		Convergence = top.Rank'  		Phrase = Phrases.Single (x => x.Id == top.PhraseId)  	});  	continue;  }  
Magic Number,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,MergeWeakReferences,The following statement contains a magic number: if (!(top.Rank > sortedWeakReferences [9].CompositeConvergance))  	continue;  
Magic Number,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,MergeWeakReferences,The following statement contains a magic number: sortedWeakReferences.RemoveAt (9);  
Magic Number,Domain.Entities,TypeFineContext,C:\repos\Shuffzord_TypeFine\Domain\Entities\TypeFineContext.cs,MergeWeakReferences,The following statement contains a magic number: if (weakReferences.Count != 10)  	throw new WeakReferenceCountException ();  
