Implementation smell,Namespace,Class,File,Method,Description
Complex Conditional,Kentor.AuthServices.Owin,KentorAuthServicesAuthenticationHandler,C:\repos\KentorIT_authservices\Kentor.AuthServices.Owin\KentorAuthServicesAuthenticationHandler.cs,AugmentAuthenticationGrantWithLogoutClaims,The conditional expression  "grant == null || externalIdentity == null || sessionIdClaim == null || externalLogutNameIdClaim == null"  is complex.
Magic Number,Kentor.AuthServices.Owin,KentorAuthServicesAuthenticationHandler,C:\repos\KentorIT_authservices\Kentor.AuthServices.Owin\KentorAuthServicesAuthenticationHandler.cs,ApplyResponseChallengeAsync,The following statement contains a magic number: if (Response.StatusCode == 401)              {                  var challenge = Helper.LookupChallenge(Options.AuthenticationType' Options.AuthenticationMode);                    if (challenge != null)                  {                      EntityId idp;                      string strIdp;                      if (challenge.Properties.Dictionary.TryGetValue("idp"' out strIdp))                      {                          idp = new EntityId(strIdp);                      }                      else                      {                          object objIdp = null;                          Context.Environment.TryGetValue("KentorAuthServices.idp"' out objIdp);                          idp = objIdp as EntityId;                      }                      var redirectUri = challenge.Properties.RedirectUri;                      // Don't serialize the RedirectUri twice.                      challenge.Properties.RedirectUri = null;                        if (redirectUri == null && Options.AuthenticationMode == AuthenticationMode.Active)                      {                          redirectUri = Context.Request.Uri.ToString();                      }                        var result = SignInCommand.Run(                          idp'                          redirectUri'                          await Context.ToHttpRequestData(Options.DataProtector.Unprotect)'                          Options'                          challenge.Properties.Dictionary);                        if (!result.HandledResult)                      {                          result.Apply(Context' Options.DataProtector);                      }                  }              }
Magic Number,Kentor.AuthServices.Owin,KentorAuthServicesAuthenticationHandler,C:\repos\KentorIT_authservices\Kentor.AuthServices.Owin\KentorAuthServicesAuthenticationHandler.cs,ApplyResponseGrantAsync,The following statement contains a magic number: if (revoke != null)              {                  var request = await Context.ToHttpRequestData(Options.DataProtector.Unprotect);                  var urls = new AuthServicesUrls(request' Options);                    string redirectUrl = revoke.Properties.RedirectUri;                  if (string.IsNullOrEmpty(redirectUrl))                  {                      if (Context.Response.StatusCode / 100 == 3)                      {                          redirectUrl = Context.Response.Headers["Location"];                      }                      else                      {                          redirectUrl = Context.Request.Path.ToUriComponent();                      }                  }                    var result = LogoutCommand.Run(request' redirectUrl' Options);                    if (!result.HandledResult)                  {                      result.Apply(Context' Options.DataProtector);                  }              }
Magic Number,Kentor.AuthServices.Owin,KentorAuthServicesAuthenticationHandler,C:\repos\KentorIT_authservices\Kentor.AuthServices.Owin\KentorAuthServicesAuthenticationHandler.cs,ApplyResponseGrantAsync,The following statement contains a magic number: if (revoke != null)              {                  var request = await Context.ToHttpRequestData(Options.DataProtector.Unprotect);                  var urls = new AuthServicesUrls(request' Options);                    string redirectUrl = revoke.Properties.RedirectUri;                  if (string.IsNullOrEmpty(redirectUrl))                  {                      if (Context.Response.StatusCode / 100 == 3)                      {                          redirectUrl = Context.Response.Headers["Location"];                      }                      else                      {                          redirectUrl = Context.Request.Path.ToUriComponent();                      }                  }                    var result = LogoutCommand.Run(request' redirectUrl' Options);                    if (!result.HandledResult)                  {                      result.Apply(Context' Options.DataProtector);                  }              }
