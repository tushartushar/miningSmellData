Implementation smell,Namespace,Class,File,Method,Description
Long Method,SampleIdentityServer4AspNetIdentity.Data.Migrations,CreateIdentitySchema,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\00000000000000_CreateIdentitySchema.cs,Up,The method has 167 lines of code.
Long Method,SampleIdentityServer4AspNetIdentity.Data.Migrations,CreateIdentitySchema,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\00000000000000_CreateIdentitySchema.cs,BuildTargetModel,The method has 134 lines of code.
Long Method,SampleIdentityServer4AspNetIdentity.Data.Migrations,ApplicationDbContextModelSnapshot,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The method has 134 lines of code.
Long Parameter List,SampleIdentityServer4AspNetIdentity.Controllers,AccountController,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Controllers\AccountController.cs,AccountController,The method has 8 parameters. Parameters: userManager' signInManager' emailSender' logger' interaction' clientStore' httpContextAccessor' schemeProvider
Long Parameter List,SampleIdentityServer4AspNetIdentity.Controllers,ManageController,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Controllers\ManageController.cs,ManageController,The method has 5 parameters. Parameters: userManager' signInManager' emailSender' logger' urlEncoder
Long Parameter List,IdentityServer4.Quickstart.UI,ConsentService,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Quickstart\Consent\ConsentService.cs,CreateConsentViewModel,The method has 5 parameters. Parameters: model' returnUrl' request' client' resources
Long Statement,SampleIdentityServer4AspNetIdentity.Controllers,AccountController,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Controllers\AccountController.cs,Login,The length of the statement  "            if (context?.IdP != null && (await _signInManager.GetExternalAuthenticationSchemesAsync()).Any(p => string.Equals(p.Name' context.IdP' StringComparison.InvariantCultureIgnoreCase))) " is 181.
Long Statement,SampleIdentityServer4AspNetIdentity.Controllers,AccountController,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Controllers\AccountController.cs,Login,The length of the statement  "                var result = await _signInManager.PasswordSignInAsync(model.Email' model.Password' model.RememberMe' lockoutOnFailure: false); " is 126.
Long Statement,SampleIdentityServer4AspNetIdentity.Controllers,AccountController,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Controllers\AccountController.cs,LoginWith2fa,The length of the statement  "            var result = await _signInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode' rememberMe' model.RememberMachine); " is 122.
Long Statement,SampleIdentityServer4AspNetIdentity.Controllers,AccountController,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Controllers\AccountController.cs,ExternalLoginCallback,The length of the statement  "            var result = await _signInManager.ExternalLoginSignInAsync(info.LoginProvider' info.ProviderKey' isPersistent: false' bypassTwoFactor: true); " is 141.
Long Statement,SampleIdentityServer4AspNetIdentity.Controllers,ManageController,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Controllers\ManageController.cs,LinkLogin,The length of the statement  "            var properties = _signInManager.ConfigureExternalAuthenticationProperties(provider' redirectUrl' _userManager.GetUserId(User)); " is 127.
Long Statement,SampleIdentityServer4AspNetIdentity.Controllers,ManageController,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Controllers\ManageController.cs,GenerateRecoveryCodes,The length of the statement  "                throw new ApplicationException($"Cannot generate recovery codes for user with ID '{user.Id}' as they do not have 2FA enabled."); " is 128.
Long Statement,IdentityServer4.Quickstart.UI,ConsentService,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Quickstart\Consent\ConsentService.cs,CreateConsentViewModel,The length of the statement  "            vm.IdentityScopes = resources.IdentityResources.Select(x => CreateScopeViewModel(x' vm.ScopesConsented.Contains(x.Name) || model == null)).ToArray(); " is 149.
Long Statement,IdentityServer4.Quickstart.UI,ConsentService,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Quickstart\Consent\ConsentService.cs,CreateConsentViewModel,The length of the statement  "            vm.ResourceScopes = resources.ApiResources.SelectMany(x => x.Scopes).Select(x => CreateScopeViewModel(x' vm.ScopesConsented.Contains(x.Name) || model == null)).ToArray(); " is 170.
Long Statement,IdentityServer4.Quickstart.UI,ConsentService,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Quickstart\Consent\ConsentService.cs,CreateConsentViewModel,The length of the statement  "                    GetOfflineAccessScope(vm.ScopesConsented.Contains(IdentityServer4.IdentityServerConstants.StandardScopes.OfflineAccess) || model == null) " is 137.
Magic Number,SampleIdentityServer4AspNetIdentity.Controllers,ManageController,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Controllers\ManageController.cs,GenerateRecoveryCodes,The following statement contains a magic number: var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user' 10);
Magic Number,SampleIdentityServer4AspNetIdentity.Controllers,ManageController,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Controllers\ManageController.cs,FormatKey,The following statement contains a magic number: result.Append(unformattedKey.Substring(currentPosition' 4)).Append(" ");
Magic Number,SampleIdentityServer4AspNetIdentity.Controllers,ManageController,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Controllers\ManageController.cs,FormatKey,The following statement contains a magic number: currentPosition += 4;
Magic Number,SampleIdentityServer4AspNetIdentity.Controllers,ManageController,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Controllers\ManageController.cs,FormatKey,The following statement contains a magic number: currentPosition + 4 < unformattedKey.Length
Magic Number,SampleIdentityServer4AspNetIdentity.Data.Migrations,CreateIdentitySchema,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\00000000000000_CreateIdentitySchema.cs,Up,The following statement contains a magic number: migrationBuilder.CreateTable(                  name: "AspNetRoles"'                  columns: table => new                  {                      Id = table.Column<string>(nullable: false)'                      ConcurrencyStamp = table.Column<string>(nullable: true)'                      Name = table.Column<string>(maxLength: 256' nullable: true)'                      NormalizedName = table.Column<string>(maxLength: 256' nullable: true)                  }'                  constraints: table =>                  {                      table.PrimaryKey("PK_AspNetRoles"' x => x.Id);                  });
Magic Number,SampleIdentityServer4AspNetIdentity.Data.Migrations,CreateIdentitySchema,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\00000000000000_CreateIdentitySchema.cs,Up,The following statement contains a magic number: migrationBuilder.CreateTable(                  name: "AspNetRoles"'                  columns: table => new                  {                      Id = table.Column<string>(nullable: false)'                      ConcurrencyStamp = table.Column<string>(nullable: true)'                      Name = table.Column<string>(maxLength: 256' nullable: true)'                      NormalizedName = table.Column<string>(maxLength: 256' nullable: true)                  }'                  constraints: table =>                  {                      table.PrimaryKey("PK_AspNetRoles"' x => x.Id);                  });
Magic Number,SampleIdentityServer4AspNetIdentity.Data.Migrations,CreateIdentitySchema,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\00000000000000_CreateIdentitySchema.cs,Up,The following statement contains a magic number: migrationBuilder.CreateTable(                  name: "AspNetUsers"'                  columns: table => new                  {                      Id = table.Column<string>(nullable: false)'                      AccessFailedCount = table.Column<int>(nullable: false)'                      ConcurrencyStamp = table.Column<string>(nullable: true)'                      Email = table.Column<string>(maxLength: 256' nullable: true)'                      EmailConfirmed = table.Column<bool>(nullable: false)'                      LockoutEnabled = table.Column<bool>(nullable: false)'                      LockoutEnd = table.Column<DateTimeOffset>(nullable: true)'                      NormalizedEmail = table.Column<string>(maxLength: 256' nullable: true)'                      NormalizedUserName = table.Column<string>(maxLength: 256' nullable: true)'                      PasswordHash = table.Column<string>(nullable: true)'                      PhoneNumber = table.Column<string>(nullable: true)'                      PhoneNumberConfirmed = table.Column<bool>(nullable: false)'                      SecurityStamp = table.Column<string>(nullable: true)'                      TwoFactorEnabled = table.Column<bool>(nullable: false)'                      UserName = table.Column<string>(maxLength: 256' nullable: true)                  }'                  constraints: table =>                  {                      table.PrimaryKey("PK_AspNetUsers"' x => x.Id);                  });
Magic Number,SampleIdentityServer4AspNetIdentity.Data.Migrations,CreateIdentitySchema,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\00000000000000_CreateIdentitySchema.cs,Up,The following statement contains a magic number: migrationBuilder.CreateTable(                  name: "AspNetUsers"'                  columns: table => new                  {                      Id = table.Column<string>(nullable: false)'                      AccessFailedCount = table.Column<int>(nullable: false)'                      ConcurrencyStamp = table.Column<string>(nullable: true)'                      Email = table.Column<string>(maxLength: 256' nullable: true)'                      EmailConfirmed = table.Column<bool>(nullable: false)'                      LockoutEnabled = table.Column<bool>(nullable: false)'                      LockoutEnd = table.Column<DateTimeOffset>(nullable: true)'                      NormalizedEmail = table.Column<string>(maxLength: 256' nullable: true)'                      NormalizedUserName = table.Column<string>(maxLength: 256' nullable: true)'                      PasswordHash = table.Column<string>(nullable: true)'                      PhoneNumber = table.Column<string>(nullable: true)'                      PhoneNumberConfirmed = table.Column<bool>(nullable: false)'                      SecurityStamp = table.Column<string>(nullable: true)'                      TwoFactorEnabled = table.Column<bool>(nullable: false)'                      UserName = table.Column<string>(maxLength: 256' nullable: true)                  }'                  constraints: table =>                  {                      table.PrimaryKey("PK_AspNetUsers"' x => x.Id);                  });
Magic Number,SampleIdentityServer4AspNetIdentity.Data.Migrations,CreateIdentitySchema,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\00000000000000_CreateIdentitySchema.cs,Up,The following statement contains a magic number: migrationBuilder.CreateTable(                  name: "AspNetUsers"'                  columns: table => new                  {                      Id = table.Column<string>(nullable: false)'                      AccessFailedCount = table.Column<int>(nullable: false)'                      ConcurrencyStamp = table.Column<string>(nullable: true)'                      Email = table.Column<string>(maxLength: 256' nullable: true)'                      EmailConfirmed = table.Column<bool>(nullable: false)'                      LockoutEnabled = table.Column<bool>(nullable: false)'                      LockoutEnd = table.Column<DateTimeOffset>(nullable: true)'                      NormalizedEmail = table.Column<string>(maxLength: 256' nullable: true)'                      NormalizedUserName = table.Column<string>(maxLength: 256' nullable: true)'                      PasswordHash = table.Column<string>(nullable: true)'                      PhoneNumber = table.Column<string>(nullable: true)'                      PhoneNumberConfirmed = table.Column<bool>(nullable: false)'                      SecurityStamp = table.Column<string>(nullable: true)'                      TwoFactorEnabled = table.Column<bool>(nullable: false)'                      UserName = table.Column<string>(maxLength: 256' nullable: true)                  }'                  constraints: table =>                  {                      table.PrimaryKey("PK_AspNetUsers"' x => x.Id);                  });
Magic Number,SampleIdentityServer4AspNetIdentity.Data.Migrations,CreateIdentitySchema,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\00000000000000_CreateIdentitySchema.cs,Up,The following statement contains a magic number: migrationBuilder.CreateTable(                  name: "AspNetUsers"'                  columns: table => new                  {                      Id = table.Column<string>(nullable: false)'                      AccessFailedCount = table.Column<int>(nullable: false)'                      ConcurrencyStamp = table.Column<string>(nullable: true)'                      Email = table.Column<string>(maxLength: 256' nullable: true)'                      EmailConfirmed = table.Column<bool>(nullable: false)'                      LockoutEnabled = table.Column<bool>(nullable: false)'                      LockoutEnd = table.Column<DateTimeOffset>(nullable: true)'                      NormalizedEmail = table.Column<string>(maxLength: 256' nullable: true)'                      NormalizedUserName = table.Column<string>(maxLength: 256' nullable: true)'                      PasswordHash = table.Column<string>(nullable: true)'                      PhoneNumber = table.Column<string>(nullable: true)'                      PhoneNumberConfirmed = table.Column<bool>(nullable: false)'                      SecurityStamp = table.Column<string>(nullable: true)'                      TwoFactorEnabled = table.Column<bool>(nullable: false)'                      UserName = table.Column<string>(maxLength: 256' nullable: true)                  }'                  constraints: table =>                  {                      table.PrimaryKey("PK_AspNetUsers"' x => x.Id);                  });
Magic Number,SampleIdentityServer4AspNetIdentity.Data.Migrations,CreateIdentitySchema,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\00000000000000_CreateIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole"' b =>                  {                      b.Property<string>("Id");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Name")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedName")                          .HasName("RoleNameIndex");                        b.ToTable("AspNetRoles");                  });
Magic Number,SampleIdentityServer4AspNetIdentity.Data.Migrations,CreateIdentitySchema,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\00000000000000_CreateIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole"' b =>                  {                      b.Property<string>("Id");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Name")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedName")                          .HasName("RoleNameIndex");                        b.ToTable("AspNetRoles");                  });
Magic Number,SampleIdentityServer4AspNetIdentity.Data.Migrations,CreateIdentitySchema,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\00000000000000_CreateIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder.Entity("SampleIdentityServer4AspNetIdentity.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id");                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasAnnotation("MaxLength"' 256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedUserName")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasName("EmailIndex");                        b.HasIndex("NormalizedUserName")                          .IsUnique()                          .HasName("UserNameIndex");                        b.ToTable("AspNetUsers");                  });
Magic Number,SampleIdentityServer4AspNetIdentity.Data.Migrations,CreateIdentitySchema,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\00000000000000_CreateIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder.Entity("SampleIdentityServer4AspNetIdentity.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id");                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasAnnotation("MaxLength"' 256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedUserName")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasName("EmailIndex");                        b.HasIndex("NormalizedUserName")                          .IsUnique()                          .HasName("UserNameIndex");                        b.ToTable("AspNetUsers");                  });
Magic Number,SampleIdentityServer4AspNetIdentity.Data.Migrations,CreateIdentitySchema,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\00000000000000_CreateIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder.Entity("SampleIdentityServer4AspNetIdentity.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id");                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasAnnotation("MaxLength"' 256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedUserName")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasName("EmailIndex");                        b.HasIndex("NormalizedUserName")                          .IsUnique()                          .HasName("UserNameIndex");                        b.ToTable("AspNetUsers");                  });
Magic Number,SampleIdentityServer4AspNetIdentity.Data.Migrations,CreateIdentitySchema,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\00000000000000_CreateIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder.Entity("SampleIdentityServer4AspNetIdentity.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id");                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasAnnotation("MaxLength"' 256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedUserName")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasName("EmailIndex");                        b.HasIndex("NormalizedUserName")                          .IsUnique()                          .HasName("UserNameIndex");                        b.ToTable("AspNetUsers");                  });
Magic Number,SampleIdentityServer4AspNetIdentity.Data.Migrations,ApplicationDbContextModelSnapshot,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder.Entity("Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole"' b =>                  {                      b.Property<string>("Id");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Name")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedName")                          .HasName("RoleNameIndex");                        b.ToTable("AspNetRoles");                  });
Magic Number,SampleIdentityServer4AspNetIdentity.Data.Migrations,ApplicationDbContextModelSnapshot,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder.Entity("Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole"' b =>                  {                      b.Property<string>("Id");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Name")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedName")                          .HasName("RoleNameIndex");                        b.ToTable("AspNetRoles");                  });
Magic Number,SampleIdentityServer4AspNetIdentity.Data.Migrations,ApplicationDbContextModelSnapshot,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder.Entity("SampleIdentityServer4AspNetIdentity.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id");                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasAnnotation("MaxLength"' 256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedUserName")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasName("EmailIndex");                        b.HasIndex("NormalizedUserName")                          .IsUnique()                          .HasName("UserNameIndex");                        b.ToTable("AspNetUsers");                  });
Magic Number,SampleIdentityServer4AspNetIdentity.Data.Migrations,ApplicationDbContextModelSnapshot,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder.Entity("SampleIdentityServer4AspNetIdentity.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id");                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasAnnotation("MaxLength"' 256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedUserName")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasName("EmailIndex");                        b.HasIndex("NormalizedUserName")                          .IsUnique()                          .HasName("UserNameIndex");                        b.ToTable("AspNetUsers");                  });
Magic Number,SampleIdentityServer4AspNetIdentity.Data.Migrations,ApplicationDbContextModelSnapshot,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder.Entity("SampleIdentityServer4AspNetIdentity.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id");                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasAnnotation("MaxLength"' 256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedUserName")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasName("EmailIndex");                        b.HasIndex("NormalizedUserName")                          .IsUnique()                          .HasName("UserNameIndex");                        b.ToTable("AspNetUsers");                  });
Magic Number,SampleIdentityServer4AspNetIdentity.Data.Migrations,ApplicationDbContextModelSnapshot,D:\research\architectureSmells\repos\KentorIT_authservices\Samples\SampleIdentityServer4AspNetIdentity\Data\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder.Entity("SampleIdentityServer4AspNetIdentity.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id");                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasAnnotation("MaxLength"' 256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedUserName")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasName("EmailIndex");                        b.HasIndex("NormalizedUserName")                          .IsUnique()                          .HasName("UserNameIndex");                        b.ToTable("AspNetUsers");                  });
