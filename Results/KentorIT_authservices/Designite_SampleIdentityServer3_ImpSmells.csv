Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SampleIdentityServer3,Startup,C:\repos\KentorIT_authservices\Samples\SampleIdentityServer3\Startup.cs,Configuration,The length of the statement  "                        new X509Certificate2(AppDomain.CurrentDomain.BaseDirectory + "\\App_Data\\Kentor.AuthServices.SampleIdentityServer3.pfx")' " is 122.
Long Statement,SampleIdentityServer3,Startup,C:\repos\KentorIT_authservices\Samples\SampleIdentityServer3\Startup.cs,UseIdSrv3LogoutOnFederatedLogout,The length of the statement  "            setInterval(function() {{ var dots = document.getElementById(""dots""); dots.innerText = dots.innerText + "".""; }}' 250); " is 122.
Magic Number,SampleIdentityServer3,Startup,C:\repos\KentorIT_authservices\Samples\SampleIdentityServer3\Startup.cs,Configuration,The following statement contains a magic number: app.Map("/ServerSide-Login"' loginApp =>              {                  loginApp.Use((ctx' next) =>                  {                      ctx.Authentication.Challenge(                          new AuthenticationProperties                          {                              RedirectUri = "http://localhost:4589/"                          }'                          OpenIdConnectAuthenticationDefaults.AuthenticationType);                      ctx.Response.StatusCode = 401;                        return Task.FromResult(0);                  });              });
Magic Number,SampleIdentityServer3,Startup,C:\repos\KentorIT_authservices\Samples\SampleIdentityServer3\Startup.cs,UseIdSrv3LogoutOnFederatedLogout,The following statement contains a magic number: app.Use(async (context' next) =>              {                  await next.Invoke();                    if (context.Authentication.AuthenticationResponseRevoke != null                      && context.Response.StatusCode % 100 == 3                      && !HttpContext.Current.Response.HeadersWritten)                  {                      var finalLocation = context.Response.Headers["Location"];                        context.Response.StatusCode = 200;                        await context.Response.WriteAsync($@"  <html>      <body>          <h1>Signing Out...<span id=""dots""></span></h1>          <iframe style=""display:none;"" src=""../signoutcleanup""></iframe>          <script>              setInterval(function() {{ var dots = document.getElementById(""dots""); dots.innerText = dots.innerText + "".""; }}' 250);              setTimeout(function() {{ window.location = ""{finalLocation}""; }}' 5000);          </script>      </body>  </html>");                  }              });
Magic Number,SampleIdentityServer3,Startup,C:\repos\KentorIT_authservices\Samples\SampleIdentityServer3\Startup.cs,UseIdSrv3LogoutOnFederatedLogout,The following statement contains a magic number: app.Use(async (context' next) =>              {                  await next.Invoke();                    if (context.Authentication.AuthenticationResponseRevoke != null                      && context.Response.StatusCode % 100 == 3                      && !HttpContext.Current.Response.HeadersWritten)                  {                      var finalLocation = context.Response.Headers["Location"];                        context.Response.StatusCode = 200;                        await context.Response.WriteAsync($@"  <html>      <body>          <h1>Signing Out...<span id=""dots""></span></h1>          <iframe style=""display:none;"" src=""../signoutcleanup""></iframe>          <script>              setInterval(function() {{ var dots = document.getElementById(""dots""); dots.innerText = dots.innerText + "".""; }}' 250);              setTimeout(function() {{ window.location = ""{finalLocation}""; }}' 5000);          </script>      </body>  </html>");                  }              });
Magic Number,SampleIdentityServer3,Startup,C:\repos\KentorIT_authservices\Samples\SampleIdentityServer3\Startup.cs,UseIdSrv3LogoutOnFederatedLogout,The following statement contains a magic number: app.Use(async (context' next) =>              {                  await next.Invoke();                    if (context.Authentication.AuthenticationResponseRevoke != null                      && context.Response.StatusCode % 100 == 3                      && !HttpContext.Current.Response.HeadersWritten)                  {                      var finalLocation = context.Response.Headers["Location"];                        context.Response.StatusCode = 200;                        await context.Response.WriteAsync($@"  <html>      <body>          <h1>Signing Out...<span id=""dots""></span></h1>          <iframe style=""display:none;"" src=""../signoutcleanup""></iframe>          <script>              setInterval(function() {{ var dots = document.getElementById(""dots""); dots.innerText = dots.innerText + "".""; }}' 250);              setTimeout(function() {{ window.location = ""{finalLocation}""; }}' 5000);          </script>      </body>  </html>");                  }              });
